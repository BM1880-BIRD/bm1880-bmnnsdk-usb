#ifndef BM1880v2_TDMA_REG_H
#define BM1880v2_TDMA_REG_H

/*
 * This file is generated by tools. Do not edit it manually.
 */

#include <stdint.h>
#include <stdio.h>

typedef uint8_t u8;
typedef uint32_t u32;
typedef uint64_t u64;
typedef unsigned long long ullong;

typedef struct {
  u32 vld;
  u32 compress_en;
  u32 eod;
  u32 intp_en;
  u32 bar_en;
  u32 rsv0;
  u32 trans_dir;
  u32 rsv00;
  u32 trans_fmt;
  u32 transpose_md;
  u32 compress_md;
  u32 outstanding_en;
  u32 cmd_id;
  u32 spec_func;
  u32 dst_fmt;
  u32 rsv3_0;
  u32 src_fmt;
  u32 sys_dtype;
  u32 lrn_sht_num;
  u32 lrn_sht_dir;
  u32 rsv3_1;
  u32 rsv4;
  u32 wait_id_tpu;
  u32 wait_id_other_tdma;
  u32 wait_id_sdma;
  u32 const_val;
  u32 rsv4_2;
  u32 src_base_reg_sel;
  u32 rsv4_3;
  u32 dst_base_reg_sel;
  u32 rsv4_4;
  u32 rsv4_5;
  u32 dst_h_stride;
  u32 dst_c_stride_low;
  u32 dst_n_stride;
  u32 src_h_stride;
  u32 src_c_stride_low;
  u32 src_n_stride;
  u32 dst_c;
  u32 src_c;
  u32 dst_w;
  u32 dst_h;
  u32 src_w;
  u32 src_h;
  u32 dst_base_addr_low;
  u32 src_base_addr_low;
  u32 src_n;
  u32 dst_base_addr_high;
  u32 src_base_addr_high;
  u32 src_c_stride_high;
  u32 dst_c_stride_high;
  u32 rsv5;
} tdma_reg_t;

static inline void parse_tdma_reg(tdma_reg_t *r, const u32 *p)
{
  r->vld = p[0] & 1;
  r->compress_en = (p[0] >> 1) & 1;
  r->eod = (p[0] >> 2) & 1;
  r->intp_en = (p[0] >> 3) & 1;
  r->bar_en = (p[0] >> 4) & 1;
  r->rsv0 = (p[0] >> 5) & 1;
  r->trans_dir = (p[0] >> 6) & ((1u << 2) - 1);
  r->rsv00 = (p[0] >> 8) & ((1u << 2) - 1);
  r->trans_fmt = (p[0] >> 10) & 1;
  r->transpose_md = (p[0] >> 11) & ((1u << 2) - 1);
  r->compress_md = (p[0] >> 13) & ((1u << 2) - 1);
  r->outstanding_en = (p[0] >> 15) & 1;
  r->cmd_id = (p[0] >> 16) & ((1u << 16) - 1);
  r->spec_func = p[1] & ((1u << 3) - 1);
  r->dst_fmt = (p[1] >> 3) & ((1u << 2) - 1);
  r->rsv3_0 = (p[1] >> 5) & ((1u << 2) - 1);
  r->src_fmt = (p[1] >> 7) & 1;
  r->sys_dtype = (p[1] >> 8) & 1;
  r->lrn_sht_num = (p[1] >> 9) & ((1u << 4) - 1);
  r->lrn_sht_dir = (p[1] >> 13) & 1;
  r->rsv3_1 = (p[1] >> 14) & 1;
  r->rsv4 = (p[1] >> 15) & 1;
  r->wait_id_tpu = (p[1] >> 16) & ((1u << 16) - 1);
  r->wait_id_other_tdma = p[2] & ((1u << 16) - 1);
  r->wait_id_sdma = (p[2] >> 16) & ((1u << 16) - 1);
  r->const_val = p[3] & ((1u << 8) - 1);
  r->rsv4_2 = (p[3] >> 8) & ((1u << 8) - 1);
  r->src_base_reg_sel = (p[3] >> 16) & ((1u << 3) - 1);
  r->rsv4_3 = (p[3] >> 19) & 1;
  r->dst_base_reg_sel = (p[3] >> 20) & ((1u << 3) - 1);
  r->rsv4_4 = (p[3] >> 23) & 1;
  r->rsv4_5 = (p[3] >> 24) & ((1u << 8) - 1);
  r->dst_h_stride = p[4] & ((1u << 16) - 1);
  r->dst_c_stride_low = (p[4] >> 16) & ((1u << 16) - 1);
  r->dst_n_stride = p[5];
  r->src_h_stride = p[6] & ((1u << 16) - 1);
  r->src_c_stride_low = (p[6] >> 16) & ((1u << 16) - 1);
  r->src_n_stride = p[7];
  r->dst_c = p[8] & ((1u << 16) - 1);
  r->src_c = (p[8] >> 16) & ((1u << 16) - 1);
  r->dst_w = p[9] & ((1u << 16) - 1);
  r->dst_h = (p[9] >> 16) & ((1u << 16) - 1);
  r->src_w = p[10] & ((1u << 16) - 1);
  r->src_h = (p[10] >> 16) & ((1u << 16) - 1);
  r->dst_base_addr_low = p[11];
  r->src_base_addr_low = p[12];
  r->src_n = p[13] & ((1u << 16) - 1);
  r->dst_base_addr_high = (p[13] >> 16) & ((1u << 8) - 1);
  r->src_base_addr_high = (p[13] >> 24) & ((1u << 8) - 1);
  r->src_c_stride_high = p[14] & ((1u << 16) - 1);
  r->dst_c_stride_high = (p[14] >> 16) & ((1u << 16) - 1);
  r->rsv5 = p[15];
}

static inline void emit_tdma_reg(const tdma_reg_t *r, u32 *_p)
{
  volatile u32 *p = (typeof(p))_p;
  p[15] = (r->rsv5 & (((u64)1 << 32) - 1));
  p[14] = (r->src_c_stride_high & ((1u << 16) - 1)) |
          ((r->dst_c_stride_high & ((1u << 16) - 1)) << 16);
  p[13] = (r->src_n & ((1u << 16) - 1)) |
          ((r->dst_base_addr_high & ((1u << 8) - 1)) << 16) |
          ((r->src_base_addr_high & ((1u << 8) - 1)) << 24);
  p[12] = (r->src_base_addr_low & (((u64)1 << 32) - 1));
  p[11] = (r->dst_base_addr_low & (((u64)1 << 32) - 1));
  p[10] = (r->src_w & ((1u << 16) - 1)) |
          ((r->src_h & ((1u << 16) - 1)) << 16);
  p[9] = (r->dst_w & ((1u << 16) - 1)) |
         ((r->dst_h & ((1u << 16) - 1)) << 16);
  p[8] = (r->dst_c & ((1u << 16) - 1)) |
         ((r->src_c & ((1u << 16) - 1)) << 16);
  p[7] = (r->src_n_stride & (((u64)1 << 32) - 1));
  p[6] = (r->src_h_stride & ((1u << 16) - 1)) |
         ((r->src_c_stride_low & ((1u << 16) - 1)) << 16);
  p[5] = (r->dst_n_stride & (((u64)1 << 32) - 1));
  p[4] = (r->dst_h_stride & ((1u << 16) - 1)) |
         ((r->dst_c_stride_low & ((1u << 16) - 1)) << 16);
  p[3] = (r->const_val & ((1u << 8) - 1)) |
         ((r->rsv4_2 & ((1u << 8) - 1)) << 8) |
         ((r->src_base_reg_sel & ((1u << 3) - 1)) << 16) |
         ((r->rsv4_3 & 1) << 19) |
         ((r->dst_base_reg_sel & ((1u << 3) - 1)) << 20) |
         ((r->rsv4_4 & 1) << 23) |
         ((r->rsv4_5 & ((1u << 8) - 1)) << 24);
  p[2] = (r->wait_id_other_tdma & ((1u << 16) - 1)) |
         ((r->wait_id_sdma & ((1u << 16) - 1)) << 16);
  p[1] = (r->spec_func & ((1u << 3) - 1)) |
         ((r->dst_fmt & ((1u << 2) - 1)) << 3) |
         ((r->rsv3_0 & ((1u << 2) - 1)) << 5) |
         ((r->src_fmt & 1) << 7) |
         ((r->sys_dtype & 1) << 8) |
         ((r->lrn_sht_num & ((1u << 4) - 1)) << 9) |
         ((r->lrn_sht_dir & 1) << 13) |
         ((r->rsv3_1 & 1) << 14) |
         ((r->rsv4 & 1) << 15) |
         ((r->wait_id_tpu & ((1u << 16) - 1)) << 16);
  p[0] = (r->vld & 1) |
         ((r->compress_en & 1) << 1) |
         ((r->eod & 1) << 2) |
         ((r->intp_en & 1) << 3) |
         ((r->bar_en & 1) << 4) |
         ((r->rsv0 & 1) << 5) |
         ((r->trans_dir & ((1u << 2) - 1)) << 6) |
         ((r->rsv00 & ((1u << 2) - 1)) << 8) |
         ((r->trans_fmt & 1) << 10) |
         ((r->transpose_md & ((1u << 2) - 1)) << 11) |
         ((r->compress_md & ((1u << 2) - 1)) << 13) |
         ((r->outstanding_en & 1) << 15) |
         ((r->cmd_id & ((1u << 16) - 1)) << 16);
}

static inline void reset_tdma_reg(tdma_reg_t *r)
{
  r->vld = 0x0;
  r->compress_en = 0x0;
  r->eod = 0x0;
  r->intp_en = 0x0;
  r->bar_en = 0x0;
  r->rsv0 = 0x0;
  r->trans_dir = 0x0;
  r->rsv00 = 0x0;
  r->trans_fmt = 0x0;
  r->transpose_md = 0x0;
  r->compress_md = 0x0;
  r->outstanding_en = 0x0;
  r->cmd_id = 0x0;
  r->spec_func = 0x0;
  r->dst_fmt = 0x0;
  r->rsv3_0 = 0x0;
  r->src_fmt = 0x0;
  r->sys_dtype = 0x0;
  r->lrn_sht_num = 0x0;
  r->lrn_sht_dir = 0x0;
  r->rsv3_1 = 0x0;
  r->rsv4 = 0x0;
  r->wait_id_tpu = 0x0;
  r->wait_id_other_tdma = 0x0;
  r->wait_id_sdma = 0x0;
  r->const_val = 0x0;
  r->rsv4_2 = 0x0;
  r->src_base_reg_sel = 0x0;
  r->rsv4_3 = 0x0;
  r->dst_base_reg_sel = 0x0;
  r->rsv4_4 = 0x0;
  r->rsv4_5 = 0x0;
  r->dst_h_stride = 0x1;
  r->dst_c_stride_low = 0x1;
  r->dst_n_stride = 0x1;
  r->src_h_stride = 0x1;
  r->src_c_stride_low = 0x1;
  r->src_n_stride = 0x1;
  r->dst_c = 0x1;
  r->src_c = 0x1;
  r->dst_w = 0x1;
  r->dst_h = 0x1;
  r->src_w = 0x1;
  r->src_h = 0x1;
  r->dst_base_addr_low = 0x0;
  r->src_base_addr_low = 0x0;
  r->src_n = 0x1;
  r->dst_base_addr_high = 0x0;
  r->src_base_addr_high = 0x0;
  r->src_c_stride_high = 0x0;
  r->dst_c_stride_high = 0x0;
  r->rsv5 = 0x0;
}

static inline void trace_tdma_reg(tdma_reg_t *r, const char *tag)
{
#define trace_one_reg(name) \
  printf("  %s: 0x%llx\n", #name, (ullong)r->name)

  printf("--- %s ---\n", tag);
  trace_one_reg(vld);
  trace_one_reg(compress_en);
  trace_one_reg(eod);
  trace_one_reg(intp_en);
  trace_one_reg(bar_en);
  trace_one_reg(rsv0);
  trace_one_reg(trans_dir);
  trace_one_reg(rsv00);
  trace_one_reg(trans_fmt);
  trace_one_reg(transpose_md);
  trace_one_reg(compress_md);
  trace_one_reg(outstanding_en);
  trace_one_reg(cmd_id);
  trace_one_reg(spec_func);
  trace_one_reg(dst_fmt);
  trace_one_reg(rsv3_0);
  trace_one_reg(src_fmt);
  trace_one_reg(sys_dtype);
  trace_one_reg(lrn_sht_num);
  trace_one_reg(lrn_sht_dir);
  trace_one_reg(rsv3_1);
  trace_one_reg(rsv4);
  trace_one_reg(wait_id_tpu);
  trace_one_reg(wait_id_other_tdma);
  trace_one_reg(wait_id_sdma);
  trace_one_reg(const_val);
  trace_one_reg(rsv4_2);
  trace_one_reg(src_base_reg_sel);
  trace_one_reg(rsv4_3);
  trace_one_reg(dst_base_reg_sel);
  trace_one_reg(rsv4_4);
  trace_one_reg(rsv4_5);
  trace_one_reg(dst_h_stride);
  trace_one_reg(dst_c_stride_low);
  trace_one_reg(dst_n_stride);
  trace_one_reg(src_h_stride);
  trace_one_reg(src_c_stride_low);
  trace_one_reg(src_n_stride);
  trace_one_reg(dst_c);
  trace_one_reg(src_c);
  trace_one_reg(dst_w);
  trace_one_reg(dst_h);
  trace_one_reg(src_w);
  trace_one_reg(src_h);
  trace_one_reg(dst_base_addr_low);
  trace_one_reg(src_base_addr_low);
  trace_one_reg(src_n);
  trace_one_reg(dst_base_addr_high);
  trace_one_reg(src_base_addr_high);
  trace_one_reg(src_c_stride_high);
  trace_one_reg(dst_c_stride_high);
  trace_one_reg(rsv5);
}
#endif /* BM1880v2_TDMA_REG_H */
