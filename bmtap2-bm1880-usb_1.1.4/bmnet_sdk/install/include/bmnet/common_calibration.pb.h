// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bmnet/common_calibration.proto

#ifndef PROTOBUF_INCLUDED_bmnet_2fcommon_5fcalibration_2eproto
#define PROTOBUF_INCLUDED_bmnet_2fcommon_5fcalibration_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_bmnet_2fcommon_5fcalibration_2eproto 

namespace protobuf_bmnet_2fcommon_5fcalibration_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_bmnet_2fcommon_5fcalibration_2eproto
class BlobParameter;
class BlobParameterDefaultTypeInternal;
extern BlobParameterDefaultTypeInternal _BlobParameter_default_instance_;
class ConcatCalibrationParameter;
class ConcatCalibrationParameterDefaultTypeInternal;
extern ConcatCalibrationParameterDefaultTypeInternal _ConcatCalibrationParameter_default_instance_;
class ConvolutionCalibrationCalibrationParameter;
class ConvolutionCalibrationCalibrationParameterDefaultTypeInternal;
extern ConvolutionCalibrationCalibrationParameterDefaultTypeInternal _ConvolutionCalibrationCalibrationParameter_default_instance_;
class InnerProductCalibrationParameter;
class InnerProductCalibrationParameterDefaultTypeInternal;
extern InnerProductCalibrationParameterDefaultTypeInternal _InnerProductCalibrationParameter_default_instance_;
class LayerCalibrationParameter;
class LayerCalibrationParameterDefaultTypeInternal;
extern LayerCalibrationParameterDefaultTypeInternal _LayerCalibrationParameter_default_instance_;
class LeakyReLUCalibrationParameter;
class LeakyReLUCalibrationParameterDefaultTypeInternal;
extern LeakyReLUCalibrationParameterDefaultTypeInternal _LeakyReLUCalibrationParameter_default_instance_;
class NetCalibrationParameter;
class NetCalibrationParameterDefaultTypeInternal;
extern NetCalibrationParameterDefaultTypeInternal _NetCalibrationParameter_default_instance_;
class PReLUCalibrationParameter;
class PReLUCalibrationParameterDefaultTypeInternal;
extern PReLUCalibrationParameterDefaultTypeInternal _PReLUCalibrationParameter_default_instance_;
class PoolingCalibrationParameter;
class PoolingCalibrationParameterDefaultTypeInternal;
extern PoolingCalibrationParameterDefaultTypeInternal _PoolingCalibrationParameter_default_instance_;
class QuantizationCalibrationParameter;
class QuantizationCalibrationParameterDefaultTypeInternal;
extern QuantizationCalibrationParameterDefaultTypeInternal _QuantizationCalibrationParameter_default_instance_;
class ReLUCalibrationParameter;
class ReLUCalibrationParameterDefaultTypeInternal;
extern ReLUCalibrationParameterDefaultTypeInternal _ReLUCalibrationParameter_default_instance_;
namespace google {
namespace protobuf {
template<> ::BlobParameter* Arena::CreateMaybeMessage<::BlobParameter>(Arena*);
template<> ::ConcatCalibrationParameter* Arena::CreateMaybeMessage<::ConcatCalibrationParameter>(Arena*);
template<> ::ConvolutionCalibrationCalibrationParameter* Arena::CreateMaybeMessage<::ConvolutionCalibrationCalibrationParameter>(Arena*);
template<> ::InnerProductCalibrationParameter* Arena::CreateMaybeMessage<::InnerProductCalibrationParameter>(Arena*);
template<> ::LayerCalibrationParameter* Arena::CreateMaybeMessage<::LayerCalibrationParameter>(Arena*);
template<> ::LeakyReLUCalibrationParameter* Arena::CreateMaybeMessage<::LeakyReLUCalibrationParameter>(Arena*);
template<> ::NetCalibrationParameter* Arena::CreateMaybeMessage<::NetCalibrationParameter>(Arena*);
template<> ::PReLUCalibrationParameter* Arena::CreateMaybeMessage<::PReLUCalibrationParameter>(Arena*);
template<> ::PoolingCalibrationParameter* Arena::CreateMaybeMessage<::PoolingCalibrationParameter>(Arena*);
template<> ::QuantizationCalibrationParameter* Arena::CreateMaybeMessage<::QuantizationCalibrationParameter>(Arena*);
template<> ::ReLUCalibrationParameter* Arena::CreateMaybeMessage<::ReLUCalibrationParameter>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ConvolutionCalibrationCalibrationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConvolutionCalibrationCalibrationParameter) */ {
 public:
  ConvolutionCalibrationCalibrationParameter();
  virtual ~ConvolutionCalibrationCalibrationParameter();

  ConvolutionCalibrationCalibrationParameter(const ConvolutionCalibrationCalibrationParameter& from);

  inline ConvolutionCalibrationCalibrationParameter& operator=(const ConvolutionCalibrationCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConvolutionCalibrationCalibrationParameter(ConvolutionCalibrationCalibrationParameter&& from) noexcept
    : ConvolutionCalibrationCalibrationParameter() {
    *this = ::std::move(from);
  }

  inline ConvolutionCalibrationCalibrationParameter& operator=(ConvolutionCalibrationCalibrationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionCalibrationCalibrationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvolutionCalibrationCalibrationParameter* internal_default_instance() {
    return reinterpret_cast<const ConvolutionCalibrationCalibrationParameter*>(
               &_ConvolutionCalibrationCalibrationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConvolutionCalibrationCalibrationParameter* other);
  friend void swap(ConvolutionCalibrationCalibrationParameter& a, ConvolutionCalibrationCalibrationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConvolutionCalibrationCalibrationParameter* New() const final {
    return CreateMaybeMessage<ConvolutionCalibrationCalibrationParameter>(NULL);
  }

  ConvolutionCalibrationCalibrationParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConvolutionCalibrationCalibrationParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConvolutionCalibrationCalibrationParameter& from);
  void MergeFrom(const ConvolutionCalibrationCalibrationParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvolutionCalibrationCalibrationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PReLUCalibrationParameter prelu_param = 3;
  bool has_prelu_param() const;
  void clear_prelu_param();
  static const int kPreluParamFieldNumber = 3;
  private:
  const ::PReLUCalibrationParameter& _internal_prelu_param() const;
  public:
  const ::PReLUCalibrationParameter& prelu_param() const;
  ::PReLUCalibrationParameter* release_prelu_param();
  ::PReLUCalibrationParameter* mutable_prelu_param();
  void set_allocated_prelu_param(::PReLUCalibrationParameter* prelu_param);

  // optional .ReLUCalibrationParameter relu_param = 4;
  bool has_relu_param() const;
  void clear_relu_param();
  static const int kReluParamFieldNumber = 4;
  private:
  const ::ReLUCalibrationParameter& _internal_relu_param() const;
  public:
  const ::ReLUCalibrationParameter& relu_param() const;
  ::ReLUCalibrationParameter* release_relu_param();
  ::ReLUCalibrationParameter* mutable_relu_param();
  void set_allocated_relu_param(::ReLUCalibrationParameter* relu_param);

  // optional int32 bn_right_shift_width = 1;
  bool has_bn_right_shift_width() const;
  void clear_bn_right_shift_width();
  static const int kBnRightShiftWidthFieldNumber = 1;
  ::google::protobuf::int32 bn_right_shift_width() const;
  void set_bn_right_shift_width(::google::protobuf::int32 value);

  // optional int32 scale_right_shift_width = 2;
  bool has_scale_right_shift_width() const;
  void clear_scale_right_shift_width();
  static const int kScaleRightShiftWidthFieldNumber = 2;
  ::google::protobuf::int32 scale_right_shift_width() const;
  void set_scale_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ConvolutionCalibrationCalibrationParameter)
 private:
  void set_has_bn_right_shift_width();
  void clear_has_bn_right_shift_width();
  void set_has_scale_right_shift_width();
  void clear_has_scale_right_shift_width();
  void set_has_prelu_param();
  void clear_has_prelu_param();
  void set_has_relu_param();
  void clear_has_relu_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::PReLUCalibrationParameter* prelu_param_;
  ::ReLUCalibrationParameter* relu_param_;
  ::google::protobuf::int32 bn_right_shift_width_;
  ::google::protobuf::int32 scale_right_shift_width_;
  friend struct ::protobuf_bmnet_2fcommon_5fcalibration_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InnerProductCalibrationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InnerProductCalibrationParameter) */ {
 public:
  InnerProductCalibrationParameter();
  virtual ~InnerProductCalibrationParameter();

  InnerProductCalibrationParameter(const InnerProductCalibrationParameter& from);

  inline InnerProductCalibrationParameter& operator=(const InnerProductCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InnerProductCalibrationParameter(InnerProductCalibrationParameter&& from) noexcept
    : InnerProductCalibrationParameter() {
    *this = ::std::move(from);
  }

  inline InnerProductCalibrationParameter& operator=(InnerProductCalibrationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductCalibrationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InnerProductCalibrationParameter* internal_default_instance() {
    return reinterpret_cast<const InnerProductCalibrationParameter*>(
               &_InnerProductCalibrationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(InnerProductCalibrationParameter* other);
  friend void swap(InnerProductCalibrationParameter& a, InnerProductCalibrationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InnerProductCalibrationParameter* New() const final {
    return CreateMaybeMessage<InnerProductCalibrationParameter>(NULL);
  }

  InnerProductCalibrationParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InnerProductCalibrationParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InnerProductCalibrationParameter& from);
  void MergeFrom(const InnerProductCalibrationParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerProductCalibrationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PReLUCalibrationParameter prelu_param = 3;
  bool has_prelu_param() const;
  void clear_prelu_param();
  static const int kPreluParamFieldNumber = 3;
  private:
  const ::PReLUCalibrationParameter& _internal_prelu_param() const;
  public:
  const ::PReLUCalibrationParameter& prelu_param() const;
  ::PReLUCalibrationParameter* release_prelu_param();
  ::PReLUCalibrationParameter* mutable_prelu_param();
  void set_allocated_prelu_param(::PReLUCalibrationParameter* prelu_param);

  // @@protoc_insertion_point(class_scope:InnerProductCalibrationParameter)
 private:
  void set_has_prelu_param();
  void clear_has_prelu_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::PReLUCalibrationParameter* prelu_param_;
  friend struct ::protobuf_bmnet_2fcommon_5fcalibration_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PoolingCalibrationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PoolingCalibrationParameter) */ {
 public:
  PoolingCalibrationParameter();
  virtual ~PoolingCalibrationParameter();

  PoolingCalibrationParameter(const PoolingCalibrationParameter& from);

  inline PoolingCalibrationParameter& operator=(const PoolingCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PoolingCalibrationParameter(PoolingCalibrationParameter&& from) noexcept
    : PoolingCalibrationParameter() {
    *this = ::std::move(from);
  }

  inline PoolingCalibrationParameter& operator=(PoolingCalibrationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingCalibrationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolingCalibrationParameter* internal_default_instance() {
    return reinterpret_cast<const PoolingCalibrationParameter*>(
               &_PoolingCalibrationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PoolingCalibrationParameter* other);
  friend void swap(PoolingCalibrationParameter& a, PoolingCalibrationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PoolingCalibrationParameter* New() const final {
    return CreateMaybeMessage<PoolingCalibrationParameter>(NULL);
  }

  PoolingCalibrationParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PoolingCalibrationParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PoolingCalibrationParameter& from);
  void MergeFrom(const PoolingCalibrationParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolingCalibrationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PoolingCalibrationParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bmnet_2fcommon_5fcalibration_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReLUCalibrationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReLUCalibrationParameter) */ {
 public:
  ReLUCalibrationParameter();
  virtual ~ReLUCalibrationParameter();

  ReLUCalibrationParameter(const ReLUCalibrationParameter& from);

  inline ReLUCalibrationParameter& operator=(const ReLUCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReLUCalibrationParameter(ReLUCalibrationParameter&& from) noexcept
    : ReLUCalibrationParameter() {
    *this = ::std::move(from);
  }

  inline ReLUCalibrationParameter& operator=(ReLUCalibrationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUCalibrationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReLUCalibrationParameter* internal_default_instance() {
    return reinterpret_cast<const ReLUCalibrationParameter*>(
               &_ReLUCalibrationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ReLUCalibrationParameter* other);
  friend void swap(ReLUCalibrationParameter& a, ReLUCalibrationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReLUCalibrationParameter* New() const final {
    return CreateMaybeMessage<ReLUCalibrationParameter>(NULL);
  }

  ReLUCalibrationParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReLUCalibrationParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReLUCalibrationParameter& from);
  void MergeFrom(const ReLUCalibrationParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReLUCalibrationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gt_scale = 1;
  bool has_gt_scale() const;
  void clear_gt_scale();
  static const int kGtScaleFieldNumber = 1;
  ::google::protobuf::int32 gt_scale() const;
  void set_gt_scale(::google::protobuf::int32 value);

  // required int32 le_scale = 2;
  bool has_le_scale() const;
  void clear_le_scale();
  static const int kLeScaleFieldNumber = 2;
  ::google::protobuf::int32 le_scale() const;
  void set_le_scale(::google::protobuf::int32 value);

  // required int32 gt_right_shift_width = 3;
  bool has_gt_right_shift_width() const;
  void clear_gt_right_shift_width();
  static const int kGtRightShiftWidthFieldNumber = 3;
  ::google::protobuf::int32 gt_right_shift_width() const;
  void set_gt_right_shift_width(::google::protobuf::int32 value);

  // required int32 le_right_shift_width = 4;
  bool has_le_right_shift_width() const;
  void clear_le_right_shift_width();
  static const int kLeRightShiftWidthFieldNumber = 4;
  ::google::protobuf::int32 le_right_shift_width() const;
  void set_le_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReLUCalibrationParameter)
 private:
  void set_has_gt_scale();
  void clear_has_gt_scale();
  void set_has_le_scale();
  void clear_has_le_scale();
  void set_has_gt_right_shift_width();
  void clear_has_gt_right_shift_width();
  void set_has_le_right_shift_width();
  void clear_has_le_right_shift_width();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 gt_scale_;
  ::google::protobuf::int32 le_scale_;
  ::google::protobuf::int32 gt_right_shift_width_;
  ::google::protobuf::int32 le_right_shift_width_;
  friend struct ::protobuf_bmnet_2fcommon_5fcalibration_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PReLUCalibrationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PReLUCalibrationParameter) */ {
 public:
  PReLUCalibrationParameter();
  virtual ~PReLUCalibrationParameter();

  PReLUCalibrationParameter(const PReLUCalibrationParameter& from);

  inline PReLUCalibrationParameter& operator=(const PReLUCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PReLUCalibrationParameter(PReLUCalibrationParameter&& from) noexcept
    : PReLUCalibrationParameter() {
    *this = ::std::move(from);
  }

  inline PReLUCalibrationParameter& operator=(PReLUCalibrationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PReLUCalibrationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PReLUCalibrationParameter* internal_default_instance() {
    return reinterpret_cast<const PReLUCalibrationParameter*>(
               &_PReLUCalibrationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PReLUCalibrationParameter* other);
  friend void swap(PReLUCalibrationParameter& a, PReLUCalibrationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PReLUCalibrationParameter* New() const final {
    return CreateMaybeMessage<PReLUCalibrationParameter>(NULL);
  }

  PReLUCalibrationParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PReLUCalibrationParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PReLUCalibrationParameter& from);
  void MergeFrom(const PReLUCalibrationParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PReLUCalibrationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gt_scale = 1;
  bool has_gt_scale() const;
  void clear_gt_scale();
  static const int kGtScaleFieldNumber = 1;
  ::google::protobuf::int32 gt_scale() const;
  void set_gt_scale(::google::protobuf::int32 value);

  // required int32 gt_right_shift_width = 2;
  bool has_gt_right_shift_width() const;
  void clear_gt_right_shift_width();
  static const int kGtRightShiftWidthFieldNumber = 2;
  ::google::protobuf::int32 gt_right_shift_width() const;
  void set_gt_right_shift_width(::google::protobuf::int32 value);

  // required int32 le_right_shift_width = 3;
  bool has_le_right_shift_width() const;
  void clear_le_right_shift_width();
  static const int kLeRightShiftWidthFieldNumber = 3;
  ::google::protobuf::int32 le_right_shift_width() const;
  void set_le_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PReLUCalibrationParameter)
 private:
  void set_has_gt_scale();
  void clear_has_gt_scale();
  void set_has_gt_right_shift_width();
  void clear_has_gt_right_shift_width();
  void set_has_le_right_shift_width();
  void clear_has_le_right_shift_width();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 gt_scale_;
  ::google::protobuf::int32 gt_right_shift_width_;
  ::google::protobuf::int32 le_right_shift_width_;
  friend struct ::protobuf_bmnet_2fcommon_5fcalibration_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConcatCalibrationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConcatCalibrationParameter) */ {
 public:
  ConcatCalibrationParameter();
  virtual ~ConcatCalibrationParameter();

  ConcatCalibrationParameter(const ConcatCalibrationParameter& from);

  inline ConcatCalibrationParameter& operator=(const ConcatCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConcatCalibrationParameter(ConcatCalibrationParameter&& from) noexcept
    : ConcatCalibrationParameter() {
    *this = ::std::move(from);
  }

  inline ConcatCalibrationParameter& operator=(ConcatCalibrationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatCalibrationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConcatCalibrationParameter* internal_default_instance() {
    return reinterpret_cast<const ConcatCalibrationParameter*>(
               &_ConcatCalibrationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ConcatCalibrationParameter* other);
  friend void swap(ConcatCalibrationParameter& a, ConcatCalibrationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConcatCalibrationParameter* New() const final {
    return CreateMaybeMessage<ConcatCalibrationParameter>(NULL);
  }

  ConcatCalibrationParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConcatCalibrationParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConcatCalibrationParameter& from);
  void MergeFrom(const ConcatCalibrationParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcatCalibrationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 right_shift_width = 1;
  int right_shift_width_size() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 1;
  ::google::protobuf::int32 right_shift_width(int index) const;
  void set_right_shift_width(int index, ::google::protobuf::int32 value);
  void add_right_shift_width(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      right_shift_width() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_right_shift_width();

  // repeated int32 threshold_x_quantized = 2;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 2;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // required int32 need_quantize_num = 3 [default = 0];
  bool has_need_quantize_num() const;
  void clear_need_quantize_num();
  static const int kNeedQuantizeNumFieldNumber = 3;
  ::google::protobuf::int32 need_quantize_num() const;
  void set_need_quantize_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ConcatCalibrationParameter)
 private:
  void set_has_need_quantize_num();
  void clear_has_need_quantize_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > right_shift_width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::int32 need_quantize_num_;
  friend struct ::protobuf_bmnet_2fcommon_5fcalibration_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeakyReLUCalibrationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LeakyReLUCalibrationParameter) */ {
 public:
  LeakyReLUCalibrationParameter();
  virtual ~LeakyReLUCalibrationParameter();

  LeakyReLUCalibrationParameter(const LeakyReLUCalibrationParameter& from);

  inline LeakyReLUCalibrationParameter& operator=(const LeakyReLUCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeakyReLUCalibrationParameter(LeakyReLUCalibrationParameter&& from) noexcept
    : LeakyReLUCalibrationParameter() {
    *this = ::std::move(from);
  }

  inline LeakyReLUCalibrationParameter& operator=(LeakyReLUCalibrationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeakyReLUCalibrationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeakyReLUCalibrationParameter* internal_default_instance() {
    return reinterpret_cast<const LeakyReLUCalibrationParameter*>(
               &_LeakyReLUCalibrationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LeakyReLUCalibrationParameter* other);
  friend void swap(LeakyReLUCalibrationParameter& a, LeakyReLUCalibrationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeakyReLUCalibrationParameter* New() const final {
    return CreateMaybeMessage<LeakyReLUCalibrationParameter>(NULL);
  }

  LeakyReLUCalibrationParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeakyReLUCalibrationParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LeakyReLUCalibrationParameter& from);
  void MergeFrom(const LeakyReLUCalibrationParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeakyReLUCalibrationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gt_scale = 1;
  bool has_gt_scale() const;
  void clear_gt_scale();
  static const int kGtScaleFieldNumber = 1;
  ::google::protobuf::int32 gt_scale() const;
  void set_gt_scale(::google::protobuf::int32 value);

  // required int32 le_scale = 2;
  bool has_le_scale() const;
  void clear_le_scale();
  static const int kLeScaleFieldNumber = 2;
  ::google::protobuf::int32 le_scale() const;
  void set_le_scale(::google::protobuf::int32 value);

  // required int32 gt_right_shift_width = 3;
  bool has_gt_right_shift_width() const;
  void clear_gt_right_shift_width();
  static const int kGtRightShiftWidthFieldNumber = 3;
  ::google::protobuf::int32 gt_right_shift_width() const;
  void set_gt_right_shift_width(::google::protobuf::int32 value);

  // required int32 le_right_shift_width = 4;
  bool has_le_right_shift_width() const;
  void clear_le_right_shift_width();
  static const int kLeRightShiftWidthFieldNumber = 4;
  ::google::protobuf::int32 le_right_shift_width() const;
  void set_le_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LeakyReLUCalibrationParameter)
 private:
  void set_has_gt_scale();
  void clear_has_gt_scale();
  void set_has_le_scale();
  void clear_has_le_scale();
  void set_has_gt_right_shift_width();
  void clear_has_gt_right_shift_width();
  void set_has_le_right_shift_width();
  void clear_has_le_right_shift_width();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 gt_scale_;
  ::google::protobuf::int32 le_scale_;
  ::google::protobuf::int32 gt_right_shift_width_;
  ::google::protobuf::int32 le_right_shift_width_;
  friend struct ::protobuf_bmnet_2fcommon_5fcalibration_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuantizationCalibrationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QuantizationCalibrationParameter) */ {
 public:
  QuantizationCalibrationParameter();
  virtual ~QuantizationCalibrationParameter();

  QuantizationCalibrationParameter(const QuantizationCalibrationParameter& from);

  inline QuantizationCalibrationParameter& operator=(const QuantizationCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuantizationCalibrationParameter(QuantizationCalibrationParameter&& from) noexcept
    : QuantizationCalibrationParameter() {
    *this = ::std::move(from);
  }

  inline QuantizationCalibrationParameter& operator=(QuantizationCalibrationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuantizationCalibrationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizationCalibrationParameter* internal_default_instance() {
    return reinterpret_cast<const QuantizationCalibrationParameter*>(
               &_QuantizationCalibrationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(QuantizationCalibrationParameter* other);
  friend void swap(QuantizationCalibrationParameter& a, QuantizationCalibrationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuantizationCalibrationParameter* New() const final {
    return CreateMaybeMessage<QuantizationCalibrationParameter>(NULL);
  }

  QuantizationCalibrationParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuantizationCalibrationParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuantizationCalibrationParameter& from);
  void MergeFrom(const QuantizationCalibrationParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantizationCalibrationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 right_shift_width = 1;
  int right_shift_width_size() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 1;
  ::google::protobuf::int32 right_shift_width(int index) const;
  void set_right_shift_width(int index, ::google::protobuf::int32 value);
  void add_right_shift_width(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      right_shift_width() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_right_shift_width();

  // repeated int32 threshold_x_quantized = 2;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 2;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // repeated int32 threshold_y_quantized = 3;
  int threshold_y_quantized_size() const;
  void clear_threshold_y_quantized();
  static const int kThresholdYQuantizedFieldNumber = 3;
  ::google::protobuf::int32 threshold_y_quantized(int index) const;
  void set_threshold_y_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_y_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_y_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_y_quantized();

  // repeated float threshold_x = 4;
  int threshold_x_size() const;
  void clear_threshold_x();
  static const int kThresholdXFieldNumber = 4;
  float threshold_x(int index) const;
  void set_threshold_x(int index, float value);
  void add_threshold_x(float value);
  const ::google::protobuf::RepeatedField< float >&
      threshold_x() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_threshold_x();

  // repeated float threshold_y = 5;
  int threshold_y_size() const;
  void clear_threshold_y();
  static const int kThresholdYFieldNumber = 5;
  float threshold_y(int index) const;
  void set_threshold_y(int index, float value);
  void add_threshold_y(float value);
  const ::google::protobuf::RepeatedField< float >&
      threshold_y() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_threshold_y();

  // @@protoc_insertion_point(class_scope:QuantizationCalibrationParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > right_shift_width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_y_quantized_;
  ::google::protobuf::RepeatedField< float > threshold_x_;
  ::google::protobuf::RepeatedField< float > threshold_y_;
  friend struct ::protobuf_bmnet_2fcommon_5fcalibration_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LayerCalibrationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LayerCalibrationParameter) */ {
 public:
  LayerCalibrationParameter();
  virtual ~LayerCalibrationParameter();

  LayerCalibrationParameter(const LayerCalibrationParameter& from);

  inline LayerCalibrationParameter& operator=(const LayerCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LayerCalibrationParameter(LayerCalibrationParameter&& from) noexcept
    : LayerCalibrationParameter() {
    *this = ::std::move(from);
  }

  inline LayerCalibrationParameter& operator=(LayerCalibrationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerCalibrationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerCalibrationParameter* internal_default_instance() {
    return reinterpret_cast<const LayerCalibrationParameter*>(
               &_LayerCalibrationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LayerCalibrationParameter* other);
  friend void swap(LayerCalibrationParameter& a, LayerCalibrationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LayerCalibrationParameter* New() const final {
    return CreateMaybeMessage<LayerCalibrationParameter>(NULL);
  }

  LayerCalibrationParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LayerCalibrationParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LayerCalibrationParameter& from);
  void MergeFrom(const LayerCalibrationParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerCalibrationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float threshold_y = 2;
  int threshold_y_size() const;
  void clear_threshold_y();
  static const int kThresholdYFieldNumber = 2;
  float threshold_y(int index) const;
  void set_threshold_y(int index, float value);
  void add_threshold_y(float value);
  const ::google::protobuf::RepeatedField< float >&
      threshold_y() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_threshold_y();

  // repeated int32 threshold_x_quantized = 4;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 4;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // repeated .BlobParameter blob_param = 5;
  int blob_param_size() const;
  void clear_blob_param();
  static const int kBlobParamFieldNumber = 5;
  ::BlobParameter* mutable_blob_param(int index);
  ::google::protobuf::RepeatedPtrField< ::BlobParameter >*
      mutable_blob_param();
  const ::BlobParameter& blob_param(int index) const;
  ::BlobParameter* add_blob_param();
  const ::google::protobuf::RepeatedPtrField< ::BlobParameter >&
      blob_param() const;

  // repeated bool bottom_unsigned = 7;
  int bottom_unsigned_size() const;
  void clear_bottom_unsigned();
  static const int kBottomUnsignedFieldNumber = 7;
  bool bottom_unsigned(int index) const;
  void set_bottom_unsigned(int index, bool value);
  void add_bottom_unsigned(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      bottom_unsigned() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_bottom_unsigned();

  // repeated bool top_unsigned = 8;
  int top_unsigned_size() const;
  void clear_top_unsigned();
  static const int kTopUnsignedFieldNumber = 8;
  bool top_unsigned(int index) const;
  void set_top_unsigned(int index, bool value);
  void add_top_unsigned(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      top_unsigned() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_top_unsigned();

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .ConvolutionCalibrationCalibrationParameter convolution_param = 106;
  bool has_convolution_param() const;
  void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 106;
  private:
  const ::ConvolutionCalibrationCalibrationParameter& _internal_convolution_param() const;
  public:
  const ::ConvolutionCalibrationCalibrationParameter& convolution_param() const;
  ::ConvolutionCalibrationCalibrationParameter* release_convolution_param();
  ::ConvolutionCalibrationCalibrationParameter* mutable_convolution_param();
  void set_allocated_convolution_param(::ConvolutionCalibrationCalibrationParameter* convolution_param);

  // optional .InnerProductCalibrationParameter inner_product_param = 117;
  bool has_inner_product_param() const;
  void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 117;
  private:
  const ::InnerProductCalibrationParameter& _internal_inner_product_param() const;
  public:
  const ::InnerProductCalibrationParameter& inner_product_param() const;
  ::InnerProductCalibrationParameter* release_inner_product_param();
  ::InnerProductCalibrationParameter* mutable_inner_product_param();
  void set_allocated_inner_product_param(::InnerProductCalibrationParameter* inner_product_param);

  // optional .PoolingCalibrationParameter pooling_param = 121;
  bool has_pooling_param() const;
  void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 121;
  private:
  const ::PoolingCalibrationParameter& _internal_pooling_param() const;
  public:
  const ::PoolingCalibrationParameter& pooling_param() const;
  ::PoolingCalibrationParameter* release_pooling_param();
  ::PoolingCalibrationParameter* mutable_pooling_param();
  void set_allocated_pooling_param(::PoolingCalibrationParameter* pooling_param);

  // optional .ReLUCalibrationParameter relu_param = 123;
  bool has_relu_param() const;
  void clear_relu_param();
  static const int kReluParamFieldNumber = 123;
  private:
  const ::ReLUCalibrationParameter& _internal_relu_param() const;
  public:
  const ::ReLUCalibrationParameter& relu_param() const;
  ::ReLUCalibrationParameter* release_relu_param();
  ::ReLUCalibrationParameter* mutable_relu_param();
  void set_allocated_relu_param(::ReLUCalibrationParameter* relu_param);

  // optional .PReLUCalibrationParameter prelu_param = 124;
  bool has_prelu_param() const;
  void clear_prelu_param();
  static const int kPreluParamFieldNumber = 124;
  private:
  const ::PReLUCalibrationParameter& _internal_prelu_param() const;
  public:
  const ::PReLUCalibrationParameter& prelu_param() const;
  ::PReLUCalibrationParameter* release_prelu_param();
  ::PReLUCalibrationParameter* mutable_prelu_param();
  void set_allocated_prelu_param(::PReLUCalibrationParameter* prelu_param);

  // optional .ConcatCalibrationParameter concat_param = 125;
  bool has_concat_param() const;
  void clear_concat_param();
  static const int kConcatParamFieldNumber = 125;
  private:
  const ::ConcatCalibrationParameter& _internal_concat_param() const;
  public:
  const ::ConcatCalibrationParameter& concat_param() const;
  ::ConcatCalibrationParameter* release_concat_param();
  ::ConcatCalibrationParameter* mutable_concat_param();
  void set_allocated_concat_param(::ConcatCalibrationParameter* concat_param);

  // optional .LeakyReLUCalibrationParameter leakyrelu_param = 126;
  bool has_leakyrelu_param() const;
  void clear_leakyrelu_param();
  static const int kLeakyreluParamFieldNumber = 126;
  private:
  const ::LeakyReLUCalibrationParameter& _internal_leakyrelu_param() const;
  public:
  const ::LeakyReLUCalibrationParameter& leakyrelu_param() const;
  ::LeakyReLUCalibrationParameter* release_leakyrelu_param();
  ::LeakyReLUCalibrationParameter* mutable_leakyrelu_param();
  void set_allocated_leakyrelu_param(::LeakyReLUCalibrationParameter* leakyrelu_param);

  // optional .QuantizationCalibrationParameter quantization_param = 127;
  bool has_quantization_param() const;
  void clear_quantization_param();
  static const int kQuantizationParamFieldNumber = 127;
  private:
  const ::QuantizationCalibrationParameter& _internal_quantization_param() const;
  public:
  const ::QuantizationCalibrationParameter& quantization_param() const;
  ::QuantizationCalibrationParameter* release_quantization_param();
  ::QuantizationCalibrationParameter* mutable_quantization_param();
  void set_allocated_quantization_param(::QuantizationCalibrationParameter* quantization_param);

  // optional int32 right_shift_width = 3;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 3;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // optional int32 fusion_skipped = 6;
  bool has_fusion_skipped() const;
  void clear_fusion_skipped();
  static const int kFusionSkippedFieldNumber = 6;
  ::google::protobuf::int32 fusion_skipped() const;
  void set_fusion_skipped(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LayerCalibrationParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();
  void set_has_fusion_skipped();
  void clear_has_fusion_skipped();
  void set_has_convolution_param();
  void clear_has_convolution_param();
  void set_has_inner_product_param();
  void clear_has_inner_product_param();
  void set_has_pooling_param();
  void clear_has_pooling_param();
  void set_has_relu_param();
  void clear_has_relu_param();
  void set_has_prelu_param();
  void clear_has_prelu_param();
  void set_has_concat_param();
  void clear_has_concat_param();
  void set_has_leakyrelu_param();
  void clear_has_leakyrelu_param();
  void set_has_quantization_param();
  void clear_has_quantization_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > threshold_y_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::RepeatedPtrField< ::BlobParameter > blob_param_;
  ::google::protobuf::RepeatedField< bool > bottom_unsigned_;
  ::google::protobuf::RepeatedField< bool > top_unsigned_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ConvolutionCalibrationCalibrationParameter* convolution_param_;
  ::InnerProductCalibrationParameter* inner_product_param_;
  ::PoolingCalibrationParameter* pooling_param_;
  ::ReLUCalibrationParameter* relu_param_;
  ::PReLUCalibrationParameter* prelu_param_;
  ::ConcatCalibrationParameter* concat_param_;
  ::LeakyReLUCalibrationParameter* leakyrelu_param_;
  ::QuantizationCalibrationParameter* quantization_param_;
  ::google::protobuf::int32 right_shift_width_;
  ::google::protobuf::int32 fusion_skipped_;
  friend struct ::protobuf_bmnet_2fcommon_5fcalibration_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlobParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BlobParameter) */ {
 public:
  BlobParameter();
  virtual ~BlobParameter();

  BlobParameter(const BlobParameter& from);

  inline BlobParameter& operator=(const BlobParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlobParameter(BlobParameter&& from) noexcept
    : BlobParameter() {
    *this = ::std::move(from);
  }

  inline BlobParameter& operator=(BlobParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobParameter* internal_default_instance() {
    return reinterpret_cast<const BlobParameter*>(
               &_BlobParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(BlobParameter* other);
  friend void swap(BlobParameter& a, BlobParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlobParameter* New() const final {
    return CreateMaybeMessage<BlobParameter>(NULL);
  }

  BlobParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlobParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlobParameter& from);
  void MergeFrom(const BlobParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required float threshold_y = 2;
  bool has_threshold_y() const;
  void clear_threshold_y();
  static const int kThresholdYFieldNumber = 2;
  float threshold_y() const;
  void set_threshold_y(float value);

  // optional int32 right_shift_width = 3;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 3;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BlobParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_threshold_y();
  void clear_has_threshold_y();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float threshold_y_;
  ::google::protobuf::int32 right_shift_width_;
  friend struct ::protobuf_bmnet_2fcommon_5fcalibration_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetCalibrationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetCalibrationParameter) */ {
 public:
  NetCalibrationParameter();
  virtual ~NetCalibrationParameter();

  NetCalibrationParameter(const NetCalibrationParameter& from);

  inline NetCalibrationParameter& operator=(const NetCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetCalibrationParameter(NetCalibrationParameter&& from) noexcept
    : NetCalibrationParameter() {
    *this = ::std::move(from);
  }

  inline NetCalibrationParameter& operator=(NetCalibrationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetCalibrationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetCalibrationParameter* internal_default_instance() {
    return reinterpret_cast<const NetCalibrationParameter*>(
               &_NetCalibrationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(NetCalibrationParameter* other);
  friend void swap(NetCalibrationParameter& a, NetCalibrationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetCalibrationParameter* New() const final {
    return CreateMaybeMessage<NetCalibrationParameter>(NULL);
  }

  NetCalibrationParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetCalibrationParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetCalibrationParameter& from);
  void MergeFrom(const NetCalibrationParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetCalibrationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .LayerCalibrationParameter layer = 100;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 100;
  ::LayerCalibrationParameter* mutable_layer(int index);
  ::google::protobuf::RepeatedPtrField< ::LayerCalibrationParameter >*
      mutable_layer();
  const ::LayerCalibrationParameter& layer(int index) const;
  ::LayerCalibrationParameter* add_layer();
  const ::google::protobuf::RepeatedPtrField< ::LayerCalibrationParameter >&
      layer() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:NetCalibrationParameter)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::LayerCalibrationParameter > layer_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_bmnet_2fcommon_5fcalibration_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConvolutionCalibrationCalibrationParameter

// optional int32 bn_right_shift_width = 1;
inline bool ConvolutionCalibrationCalibrationParameter::has_bn_right_shift_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvolutionCalibrationCalibrationParameter::set_has_bn_right_shift_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_has_bn_right_shift_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_bn_right_shift_width() {
  bn_right_shift_width_ = 0;
  clear_has_bn_right_shift_width();
}
inline ::google::protobuf::int32 ConvolutionCalibrationCalibrationParameter::bn_right_shift_width() const {
  // @@protoc_insertion_point(field_get:ConvolutionCalibrationCalibrationParameter.bn_right_shift_width)
  return bn_right_shift_width_;
}
inline void ConvolutionCalibrationCalibrationParameter::set_bn_right_shift_width(::google::protobuf::int32 value) {
  set_has_bn_right_shift_width();
  bn_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionCalibrationCalibrationParameter.bn_right_shift_width)
}

// optional int32 scale_right_shift_width = 2;
inline bool ConvolutionCalibrationCalibrationParameter::has_scale_right_shift_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvolutionCalibrationCalibrationParameter::set_has_scale_right_shift_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_has_scale_right_shift_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_scale_right_shift_width() {
  scale_right_shift_width_ = 0;
  clear_has_scale_right_shift_width();
}
inline ::google::protobuf::int32 ConvolutionCalibrationCalibrationParameter::scale_right_shift_width() const {
  // @@protoc_insertion_point(field_get:ConvolutionCalibrationCalibrationParameter.scale_right_shift_width)
  return scale_right_shift_width_;
}
inline void ConvolutionCalibrationCalibrationParameter::set_scale_right_shift_width(::google::protobuf::int32 value) {
  set_has_scale_right_shift_width();
  scale_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionCalibrationCalibrationParameter.scale_right_shift_width)
}

// optional .PReLUCalibrationParameter prelu_param = 3;
inline bool ConvolutionCalibrationCalibrationParameter::has_prelu_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionCalibrationCalibrationParameter::set_has_prelu_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_has_prelu_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->Clear();
  clear_has_prelu_param();
}
inline const ::PReLUCalibrationParameter& ConvolutionCalibrationCalibrationParameter::_internal_prelu_param() const {
  return *prelu_param_;
}
inline const ::PReLUCalibrationParameter& ConvolutionCalibrationCalibrationParameter::prelu_param() const {
  const ::PReLUCalibrationParameter* p = prelu_param_;
  // @@protoc_insertion_point(field_get:ConvolutionCalibrationCalibrationParameter.prelu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::PReLUCalibrationParameter*>(
      &::_PReLUCalibrationParameter_default_instance_);
}
inline ::PReLUCalibrationParameter* ConvolutionCalibrationCalibrationParameter::release_prelu_param() {
  // @@protoc_insertion_point(field_release:ConvolutionCalibrationCalibrationParameter.prelu_param)
  clear_has_prelu_param();
  ::PReLUCalibrationParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline ::PReLUCalibrationParameter* ConvolutionCalibrationCalibrationParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) {
    auto* p = CreateMaybeMessage<::PReLUCalibrationParameter>(GetArenaNoVirtual());
    prelu_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ConvolutionCalibrationCalibrationParameter.prelu_param)
  return prelu_param_;
}
inline void ConvolutionCalibrationCalibrationParameter::set_allocated_prelu_param(::PReLUCalibrationParameter* prelu_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prelu_param_;
  }
  if (prelu_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prelu_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prelu_param, submessage_arena);
    }
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  prelu_param_ = prelu_param;
  // @@protoc_insertion_point(field_set_allocated:ConvolutionCalibrationCalibrationParameter.prelu_param)
}

// optional .ReLUCalibrationParameter relu_param = 4;
inline bool ConvolutionCalibrationCalibrationParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionCalibrationCalibrationParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->Clear();
  clear_has_relu_param();
}
inline const ::ReLUCalibrationParameter& ConvolutionCalibrationCalibrationParameter::_internal_relu_param() const {
  return *relu_param_;
}
inline const ::ReLUCalibrationParameter& ConvolutionCalibrationCalibrationParameter::relu_param() const {
  const ::ReLUCalibrationParameter* p = relu_param_;
  // @@protoc_insertion_point(field_get:ConvolutionCalibrationCalibrationParameter.relu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::ReLUCalibrationParameter*>(
      &::_ReLUCalibrationParameter_default_instance_);
}
inline ::ReLUCalibrationParameter* ConvolutionCalibrationCalibrationParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:ConvolutionCalibrationCalibrationParameter.relu_param)
  clear_has_relu_param();
  ::ReLUCalibrationParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline ::ReLUCalibrationParameter* ConvolutionCalibrationCalibrationParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    auto* p = CreateMaybeMessage<::ReLUCalibrationParameter>(GetArenaNoVirtual());
    relu_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ConvolutionCalibrationCalibrationParameter.relu_param)
  return relu_param_;
}
inline void ConvolutionCalibrationCalibrationParameter::set_allocated_relu_param(::ReLUCalibrationParameter* relu_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete relu_param_;
  }
  if (relu_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relu_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relu_param, submessage_arena);
    }
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  relu_param_ = relu_param;
  // @@protoc_insertion_point(field_set_allocated:ConvolutionCalibrationCalibrationParameter.relu_param)
}

// -------------------------------------------------------------------

// InnerProductCalibrationParameter

// optional .PReLUCalibrationParameter prelu_param = 3;
inline bool InnerProductCalibrationParameter::has_prelu_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductCalibrationParameter::set_has_prelu_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductCalibrationParameter::clear_has_prelu_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductCalibrationParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->Clear();
  clear_has_prelu_param();
}
inline const ::PReLUCalibrationParameter& InnerProductCalibrationParameter::_internal_prelu_param() const {
  return *prelu_param_;
}
inline const ::PReLUCalibrationParameter& InnerProductCalibrationParameter::prelu_param() const {
  const ::PReLUCalibrationParameter* p = prelu_param_;
  // @@protoc_insertion_point(field_get:InnerProductCalibrationParameter.prelu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::PReLUCalibrationParameter*>(
      &::_PReLUCalibrationParameter_default_instance_);
}
inline ::PReLUCalibrationParameter* InnerProductCalibrationParameter::release_prelu_param() {
  // @@protoc_insertion_point(field_release:InnerProductCalibrationParameter.prelu_param)
  clear_has_prelu_param();
  ::PReLUCalibrationParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline ::PReLUCalibrationParameter* InnerProductCalibrationParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) {
    auto* p = CreateMaybeMessage<::PReLUCalibrationParameter>(GetArenaNoVirtual());
    prelu_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:InnerProductCalibrationParameter.prelu_param)
  return prelu_param_;
}
inline void InnerProductCalibrationParameter::set_allocated_prelu_param(::PReLUCalibrationParameter* prelu_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prelu_param_;
  }
  if (prelu_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prelu_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prelu_param, submessage_arena);
    }
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  prelu_param_ = prelu_param;
  // @@protoc_insertion_point(field_set_allocated:InnerProductCalibrationParameter.prelu_param)
}

// -------------------------------------------------------------------

// PoolingCalibrationParameter

// -------------------------------------------------------------------

// ReLUCalibrationParameter

// required int32 gt_scale = 1;
inline bool ReLUCalibrationParameter::has_gt_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReLUCalibrationParameter::set_has_gt_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReLUCalibrationParameter::clear_has_gt_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReLUCalibrationParameter::clear_gt_scale() {
  gt_scale_ = 0;
  clear_has_gt_scale();
}
inline ::google::protobuf::int32 ReLUCalibrationParameter::gt_scale() const {
  // @@protoc_insertion_point(field_get:ReLUCalibrationParameter.gt_scale)
  return gt_scale_;
}
inline void ReLUCalibrationParameter::set_gt_scale(::google::protobuf::int32 value) {
  set_has_gt_scale();
  gt_scale_ = value;
  // @@protoc_insertion_point(field_set:ReLUCalibrationParameter.gt_scale)
}

// required int32 le_scale = 2;
inline bool ReLUCalibrationParameter::has_le_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReLUCalibrationParameter::set_has_le_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReLUCalibrationParameter::clear_has_le_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReLUCalibrationParameter::clear_le_scale() {
  le_scale_ = 0;
  clear_has_le_scale();
}
inline ::google::protobuf::int32 ReLUCalibrationParameter::le_scale() const {
  // @@protoc_insertion_point(field_get:ReLUCalibrationParameter.le_scale)
  return le_scale_;
}
inline void ReLUCalibrationParameter::set_le_scale(::google::protobuf::int32 value) {
  set_has_le_scale();
  le_scale_ = value;
  // @@protoc_insertion_point(field_set:ReLUCalibrationParameter.le_scale)
}

// required int32 gt_right_shift_width = 3;
inline bool ReLUCalibrationParameter::has_gt_right_shift_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReLUCalibrationParameter::set_has_gt_right_shift_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReLUCalibrationParameter::clear_has_gt_right_shift_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReLUCalibrationParameter::clear_gt_right_shift_width() {
  gt_right_shift_width_ = 0;
  clear_has_gt_right_shift_width();
}
inline ::google::protobuf::int32 ReLUCalibrationParameter::gt_right_shift_width() const {
  // @@protoc_insertion_point(field_get:ReLUCalibrationParameter.gt_right_shift_width)
  return gt_right_shift_width_;
}
inline void ReLUCalibrationParameter::set_gt_right_shift_width(::google::protobuf::int32 value) {
  set_has_gt_right_shift_width();
  gt_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:ReLUCalibrationParameter.gt_right_shift_width)
}

// required int32 le_right_shift_width = 4;
inline bool ReLUCalibrationParameter::has_le_right_shift_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReLUCalibrationParameter::set_has_le_right_shift_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReLUCalibrationParameter::clear_has_le_right_shift_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReLUCalibrationParameter::clear_le_right_shift_width() {
  le_right_shift_width_ = 0;
  clear_has_le_right_shift_width();
}
inline ::google::protobuf::int32 ReLUCalibrationParameter::le_right_shift_width() const {
  // @@protoc_insertion_point(field_get:ReLUCalibrationParameter.le_right_shift_width)
  return le_right_shift_width_;
}
inline void ReLUCalibrationParameter::set_le_right_shift_width(::google::protobuf::int32 value) {
  set_has_le_right_shift_width();
  le_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:ReLUCalibrationParameter.le_right_shift_width)
}

// -------------------------------------------------------------------

// PReLUCalibrationParameter

// required int32 gt_scale = 1;
inline bool PReLUCalibrationParameter::has_gt_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PReLUCalibrationParameter::set_has_gt_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PReLUCalibrationParameter::clear_has_gt_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PReLUCalibrationParameter::clear_gt_scale() {
  gt_scale_ = 0;
  clear_has_gt_scale();
}
inline ::google::protobuf::int32 PReLUCalibrationParameter::gt_scale() const {
  // @@protoc_insertion_point(field_get:PReLUCalibrationParameter.gt_scale)
  return gt_scale_;
}
inline void PReLUCalibrationParameter::set_gt_scale(::google::protobuf::int32 value) {
  set_has_gt_scale();
  gt_scale_ = value;
  // @@protoc_insertion_point(field_set:PReLUCalibrationParameter.gt_scale)
}

// required int32 gt_right_shift_width = 2;
inline bool PReLUCalibrationParameter::has_gt_right_shift_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PReLUCalibrationParameter::set_has_gt_right_shift_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PReLUCalibrationParameter::clear_has_gt_right_shift_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PReLUCalibrationParameter::clear_gt_right_shift_width() {
  gt_right_shift_width_ = 0;
  clear_has_gt_right_shift_width();
}
inline ::google::protobuf::int32 PReLUCalibrationParameter::gt_right_shift_width() const {
  // @@protoc_insertion_point(field_get:PReLUCalibrationParameter.gt_right_shift_width)
  return gt_right_shift_width_;
}
inline void PReLUCalibrationParameter::set_gt_right_shift_width(::google::protobuf::int32 value) {
  set_has_gt_right_shift_width();
  gt_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:PReLUCalibrationParameter.gt_right_shift_width)
}

// required int32 le_right_shift_width = 3;
inline bool PReLUCalibrationParameter::has_le_right_shift_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PReLUCalibrationParameter::set_has_le_right_shift_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PReLUCalibrationParameter::clear_has_le_right_shift_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PReLUCalibrationParameter::clear_le_right_shift_width() {
  le_right_shift_width_ = 0;
  clear_has_le_right_shift_width();
}
inline ::google::protobuf::int32 PReLUCalibrationParameter::le_right_shift_width() const {
  // @@protoc_insertion_point(field_get:PReLUCalibrationParameter.le_right_shift_width)
  return le_right_shift_width_;
}
inline void PReLUCalibrationParameter::set_le_right_shift_width(::google::protobuf::int32 value) {
  set_has_le_right_shift_width();
  le_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:PReLUCalibrationParameter.le_right_shift_width)
}

// -------------------------------------------------------------------

// ConcatCalibrationParameter

// repeated int32 right_shift_width = 1;
inline int ConcatCalibrationParameter::right_shift_width_size() const {
  return right_shift_width_.size();
}
inline void ConcatCalibrationParameter::clear_right_shift_width() {
  right_shift_width_.Clear();
}
inline ::google::protobuf::int32 ConcatCalibrationParameter::right_shift_width(int index) const {
  // @@protoc_insertion_point(field_get:ConcatCalibrationParameter.right_shift_width)
  return right_shift_width_.Get(index);
}
inline void ConcatCalibrationParameter::set_right_shift_width(int index, ::google::protobuf::int32 value) {
  right_shift_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConcatCalibrationParameter.right_shift_width)
}
inline void ConcatCalibrationParameter::add_right_shift_width(::google::protobuf::int32 value) {
  right_shift_width_.Add(value);
  // @@protoc_insertion_point(field_add:ConcatCalibrationParameter.right_shift_width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ConcatCalibrationParameter::right_shift_width() const {
  // @@protoc_insertion_point(field_list:ConcatCalibrationParameter.right_shift_width)
  return right_shift_width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ConcatCalibrationParameter::mutable_right_shift_width() {
  // @@protoc_insertion_point(field_mutable_list:ConcatCalibrationParameter.right_shift_width)
  return &right_shift_width_;
}

// repeated int32 threshold_x_quantized = 2;
inline int ConcatCalibrationParameter::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void ConcatCalibrationParameter::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 ConcatCalibrationParameter::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:ConcatCalibrationParameter.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void ConcatCalibrationParameter::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConcatCalibrationParameter.threshold_x_quantized)
}
inline void ConcatCalibrationParameter::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:ConcatCalibrationParameter.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ConcatCalibrationParameter::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:ConcatCalibrationParameter.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ConcatCalibrationParameter::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:ConcatCalibrationParameter.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// required int32 need_quantize_num = 3 [default = 0];
inline bool ConcatCalibrationParameter::has_need_quantize_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcatCalibrationParameter::set_has_need_quantize_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcatCalibrationParameter::clear_has_need_quantize_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcatCalibrationParameter::clear_need_quantize_num() {
  need_quantize_num_ = 0;
  clear_has_need_quantize_num();
}
inline ::google::protobuf::int32 ConcatCalibrationParameter::need_quantize_num() const {
  // @@protoc_insertion_point(field_get:ConcatCalibrationParameter.need_quantize_num)
  return need_quantize_num_;
}
inline void ConcatCalibrationParameter::set_need_quantize_num(::google::protobuf::int32 value) {
  set_has_need_quantize_num();
  need_quantize_num_ = value;
  // @@protoc_insertion_point(field_set:ConcatCalibrationParameter.need_quantize_num)
}

// -------------------------------------------------------------------

// LeakyReLUCalibrationParameter

// required int32 gt_scale = 1;
inline bool LeakyReLUCalibrationParameter::has_gt_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeakyReLUCalibrationParameter::set_has_gt_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeakyReLUCalibrationParameter::clear_has_gt_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeakyReLUCalibrationParameter::clear_gt_scale() {
  gt_scale_ = 0;
  clear_has_gt_scale();
}
inline ::google::protobuf::int32 LeakyReLUCalibrationParameter::gt_scale() const {
  // @@protoc_insertion_point(field_get:LeakyReLUCalibrationParameter.gt_scale)
  return gt_scale_;
}
inline void LeakyReLUCalibrationParameter::set_gt_scale(::google::protobuf::int32 value) {
  set_has_gt_scale();
  gt_scale_ = value;
  // @@protoc_insertion_point(field_set:LeakyReLUCalibrationParameter.gt_scale)
}

// required int32 le_scale = 2;
inline bool LeakyReLUCalibrationParameter::has_le_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeakyReLUCalibrationParameter::set_has_le_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeakyReLUCalibrationParameter::clear_has_le_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeakyReLUCalibrationParameter::clear_le_scale() {
  le_scale_ = 0;
  clear_has_le_scale();
}
inline ::google::protobuf::int32 LeakyReLUCalibrationParameter::le_scale() const {
  // @@protoc_insertion_point(field_get:LeakyReLUCalibrationParameter.le_scale)
  return le_scale_;
}
inline void LeakyReLUCalibrationParameter::set_le_scale(::google::protobuf::int32 value) {
  set_has_le_scale();
  le_scale_ = value;
  // @@protoc_insertion_point(field_set:LeakyReLUCalibrationParameter.le_scale)
}

// required int32 gt_right_shift_width = 3;
inline bool LeakyReLUCalibrationParameter::has_gt_right_shift_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LeakyReLUCalibrationParameter::set_has_gt_right_shift_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LeakyReLUCalibrationParameter::clear_has_gt_right_shift_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LeakyReLUCalibrationParameter::clear_gt_right_shift_width() {
  gt_right_shift_width_ = 0;
  clear_has_gt_right_shift_width();
}
inline ::google::protobuf::int32 LeakyReLUCalibrationParameter::gt_right_shift_width() const {
  // @@protoc_insertion_point(field_get:LeakyReLUCalibrationParameter.gt_right_shift_width)
  return gt_right_shift_width_;
}
inline void LeakyReLUCalibrationParameter::set_gt_right_shift_width(::google::protobuf::int32 value) {
  set_has_gt_right_shift_width();
  gt_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:LeakyReLUCalibrationParameter.gt_right_shift_width)
}

// required int32 le_right_shift_width = 4;
inline bool LeakyReLUCalibrationParameter::has_le_right_shift_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LeakyReLUCalibrationParameter::set_has_le_right_shift_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LeakyReLUCalibrationParameter::clear_has_le_right_shift_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LeakyReLUCalibrationParameter::clear_le_right_shift_width() {
  le_right_shift_width_ = 0;
  clear_has_le_right_shift_width();
}
inline ::google::protobuf::int32 LeakyReLUCalibrationParameter::le_right_shift_width() const {
  // @@protoc_insertion_point(field_get:LeakyReLUCalibrationParameter.le_right_shift_width)
  return le_right_shift_width_;
}
inline void LeakyReLUCalibrationParameter::set_le_right_shift_width(::google::protobuf::int32 value) {
  set_has_le_right_shift_width();
  le_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:LeakyReLUCalibrationParameter.le_right_shift_width)
}

// -------------------------------------------------------------------

// QuantizationCalibrationParameter

// repeated int32 right_shift_width = 1;
inline int QuantizationCalibrationParameter::right_shift_width_size() const {
  return right_shift_width_.size();
}
inline void QuantizationCalibrationParameter::clear_right_shift_width() {
  right_shift_width_.Clear();
}
inline ::google::protobuf::int32 QuantizationCalibrationParameter::right_shift_width(int index) const {
  // @@protoc_insertion_point(field_get:QuantizationCalibrationParameter.right_shift_width)
  return right_shift_width_.Get(index);
}
inline void QuantizationCalibrationParameter::set_right_shift_width(int index, ::google::protobuf::int32 value) {
  right_shift_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantizationCalibrationParameter.right_shift_width)
}
inline void QuantizationCalibrationParameter::add_right_shift_width(::google::protobuf::int32 value) {
  right_shift_width_.Add(value);
  // @@protoc_insertion_point(field_add:QuantizationCalibrationParameter.right_shift_width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QuantizationCalibrationParameter::right_shift_width() const {
  // @@protoc_insertion_point(field_list:QuantizationCalibrationParameter.right_shift_width)
  return right_shift_width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QuantizationCalibrationParameter::mutable_right_shift_width() {
  // @@protoc_insertion_point(field_mutable_list:QuantizationCalibrationParameter.right_shift_width)
  return &right_shift_width_;
}

// repeated int32 threshold_x_quantized = 2;
inline int QuantizationCalibrationParameter::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void QuantizationCalibrationParameter::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 QuantizationCalibrationParameter::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:QuantizationCalibrationParameter.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void QuantizationCalibrationParameter::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantizationCalibrationParameter.threshold_x_quantized)
}
inline void QuantizationCalibrationParameter::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:QuantizationCalibrationParameter.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QuantizationCalibrationParameter::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:QuantizationCalibrationParameter.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QuantizationCalibrationParameter::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:QuantizationCalibrationParameter.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// repeated int32 threshold_y_quantized = 3;
inline int QuantizationCalibrationParameter::threshold_y_quantized_size() const {
  return threshold_y_quantized_.size();
}
inline void QuantizationCalibrationParameter::clear_threshold_y_quantized() {
  threshold_y_quantized_.Clear();
}
inline ::google::protobuf::int32 QuantizationCalibrationParameter::threshold_y_quantized(int index) const {
  // @@protoc_insertion_point(field_get:QuantizationCalibrationParameter.threshold_y_quantized)
  return threshold_y_quantized_.Get(index);
}
inline void QuantizationCalibrationParameter::set_threshold_y_quantized(int index, ::google::protobuf::int32 value) {
  threshold_y_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantizationCalibrationParameter.threshold_y_quantized)
}
inline void QuantizationCalibrationParameter::add_threshold_y_quantized(::google::protobuf::int32 value) {
  threshold_y_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:QuantizationCalibrationParameter.threshold_y_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QuantizationCalibrationParameter::threshold_y_quantized() const {
  // @@protoc_insertion_point(field_list:QuantizationCalibrationParameter.threshold_y_quantized)
  return threshold_y_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QuantizationCalibrationParameter::mutable_threshold_y_quantized() {
  // @@protoc_insertion_point(field_mutable_list:QuantizationCalibrationParameter.threshold_y_quantized)
  return &threshold_y_quantized_;
}

// repeated float threshold_x = 4;
inline int QuantizationCalibrationParameter::threshold_x_size() const {
  return threshold_x_.size();
}
inline void QuantizationCalibrationParameter::clear_threshold_x() {
  threshold_x_.Clear();
}
inline float QuantizationCalibrationParameter::threshold_x(int index) const {
  // @@protoc_insertion_point(field_get:QuantizationCalibrationParameter.threshold_x)
  return threshold_x_.Get(index);
}
inline void QuantizationCalibrationParameter::set_threshold_x(int index, float value) {
  threshold_x_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantizationCalibrationParameter.threshold_x)
}
inline void QuantizationCalibrationParameter::add_threshold_x(float value) {
  threshold_x_.Add(value);
  // @@protoc_insertion_point(field_add:QuantizationCalibrationParameter.threshold_x)
}
inline const ::google::protobuf::RepeatedField< float >&
QuantizationCalibrationParameter::threshold_x() const {
  // @@protoc_insertion_point(field_list:QuantizationCalibrationParameter.threshold_x)
  return threshold_x_;
}
inline ::google::protobuf::RepeatedField< float >*
QuantizationCalibrationParameter::mutable_threshold_x() {
  // @@protoc_insertion_point(field_mutable_list:QuantizationCalibrationParameter.threshold_x)
  return &threshold_x_;
}

// repeated float threshold_y = 5;
inline int QuantizationCalibrationParameter::threshold_y_size() const {
  return threshold_y_.size();
}
inline void QuantizationCalibrationParameter::clear_threshold_y() {
  threshold_y_.Clear();
}
inline float QuantizationCalibrationParameter::threshold_y(int index) const {
  // @@protoc_insertion_point(field_get:QuantizationCalibrationParameter.threshold_y)
  return threshold_y_.Get(index);
}
inline void QuantizationCalibrationParameter::set_threshold_y(int index, float value) {
  threshold_y_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantizationCalibrationParameter.threshold_y)
}
inline void QuantizationCalibrationParameter::add_threshold_y(float value) {
  threshold_y_.Add(value);
  // @@protoc_insertion_point(field_add:QuantizationCalibrationParameter.threshold_y)
}
inline const ::google::protobuf::RepeatedField< float >&
QuantizationCalibrationParameter::threshold_y() const {
  // @@protoc_insertion_point(field_list:QuantizationCalibrationParameter.threshold_y)
  return threshold_y_;
}
inline ::google::protobuf::RepeatedField< float >*
QuantizationCalibrationParameter::mutable_threshold_y() {
  // @@protoc_insertion_point(field_mutable_list:QuantizationCalibrationParameter.threshold_y)
  return &threshold_y_;
}

// -------------------------------------------------------------------

// LayerCalibrationParameter

// required string name = 1;
inline bool LayerCalibrationParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerCalibrationParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerCalibrationParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerCalibrationParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LayerCalibrationParameter::name() const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.name)
  return name_.GetNoArena();
}
inline void LayerCalibrationParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.name)
}
#if LANG_CXX11
inline void LayerCalibrationParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LayerCalibrationParameter.name)
}
#endif
inline void LayerCalibrationParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LayerCalibrationParameter.name)
}
inline void LayerCalibrationParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LayerCalibrationParameter.name)
}
inline ::std::string* LayerCalibrationParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerCalibrationParameter::release_name() {
  // @@protoc_insertion_point(field_release:LayerCalibrationParameter.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerCalibrationParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.name)
}

// repeated float threshold_y = 2;
inline int LayerCalibrationParameter::threshold_y_size() const {
  return threshold_y_.size();
}
inline void LayerCalibrationParameter::clear_threshold_y() {
  threshold_y_.Clear();
}
inline float LayerCalibrationParameter::threshold_y(int index) const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.threshold_y)
  return threshold_y_.Get(index);
}
inline void LayerCalibrationParameter::set_threshold_y(int index, float value) {
  threshold_y_.Set(index, value);
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.threshold_y)
}
inline void LayerCalibrationParameter::add_threshold_y(float value) {
  threshold_y_.Add(value);
  // @@protoc_insertion_point(field_add:LayerCalibrationParameter.threshold_y)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerCalibrationParameter::threshold_y() const {
  // @@protoc_insertion_point(field_list:LayerCalibrationParameter.threshold_y)
  return threshold_y_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerCalibrationParameter::mutable_threshold_y() {
  // @@protoc_insertion_point(field_mutable_list:LayerCalibrationParameter.threshold_y)
  return &threshold_y_;
}

// optional int32 right_shift_width = 3;
inline bool LayerCalibrationParameter::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerCalibrationParameter::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerCalibrationParameter::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerCalibrationParameter::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 LayerCalibrationParameter::right_shift_width() const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.right_shift_width)
  return right_shift_width_;
}
inline void LayerCalibrationParameter::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.right_shift_width)
}

// repeated int32 threshold_x_quantized = 4;
inline int LayerCalibrationParameter::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void LayerCalibrationParameter::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 LayerCalibrationParameter::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void LayerCalibrationParameter::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.threshold_x_quantized)
}
inline void LayerCalibrationParameter::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:LayerCalibrationParameter.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LayerCalibrationParameter::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:LayerCalibrationParameter.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LayerCalibrationParameter::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:LayerCalibrationParameter.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// repeated .BlobParameter blob_param = 5;
inline int LayerCalibrationParameter::blob_param_size() const {
  return blob_param_.size();
}
inline void LayerCalibrationParameter::clear_blob_param() {
  blob_param_.Clear();
}
inline ::BlobParameter* LayerCalibrationParameter::mutable_blob_param(int index) {
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.blob_param)
  return blob_param_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::BlobParameter >*
LayerCalibrationParameter::mutable_blob_param() {
  // @@protoc_insertion_point(field_mutable_list:LayerCalibrationParameter.blob_param)
  return &blob_param_;
}
inline const ::BlobParameter& LayerCalibrationParameter::blob_param(int index) const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.blob_param)
  return blob_param_.Get(index);
}
inline ::BlobParameter* LayerCalibrationParameter::add_blob_param() {
  // @@protoc_insertion_point(field_add:LayerCalibrationParameter.blob_param)
  return blob_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BlobParameter >&
LayerCalibrationParameter::blob_param() const {
  // @@protoc_insertion_point(field_list:LayerCalibrationParameter.blob_param)
  return blob_param_;
}

// optional int32 fusion_skipped = 6;
inline bool LayerCalibrationParameter::has_fusion_skipped() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LayerCalibrationParameter::set_has_fusion_skipped() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LayerCalibrationParameter::clear_has_fusion_skipped() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LayerCalibrationParameter::clear_fusion_skipped() {
  fusion_skipped_ = 0;
  clear_has_fusion_skipped();
}
inline ::google::protobuf::int32 LayerCalibrationParameter::fusion_skipped() const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.fusion_skipped)
  return fusion_skipped_;
}
inline void LayerCalibrationParameter::set_fusion_skipped(::google::protobuf::int32 value) {
  set_has_fusion_skipped();
  fusion_skipped_ = value;
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.fusion_skipped)
}

// repeated bool bottom_unsigned = 7;
inline int LayerCalibrationParameter::bottom_unsigned_size() const {
  return bottom_unsigned_.size();
}
inline void LayerCalibrationParameter::clear_bottom_unsigned() {
  bottom_unsigned_.Clear();
}
inline bool LayerCalibrationParameter::bottom_unsigned(int index) const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.bottom_unsigned)
  return bottom_unsigned_.Get(index);
}
inline void LayerCalibrationParameter::set_bottom_unsigned(int index, bool value) {
  bottom_unsigned_.Set(index, value);
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.bottom_unsigned)
}
inline void LayerCalibrationParameter::add_bottom_unsigned(bool value) {
  bottom_unsigned_.Add(value);
  // @@protoc_insertion_point(field_add:LayerCalibrationParameter.bottom_unsigned)
}
inline const ::google::protobuf::RepeatedField< bool >&
LayerCalibrationParameter::bottom_unsigned() const {
  // @@protoc_insertion_point(field_list:LayerCalibrationParameter.bottom_unsigned)
  return bottom_unsigned_;
}
inline ::google::protobuf::RepeatedField< bool >*
LayerCalibrationParameter::mutable_bottom_unsigned() {
  // @@protoc_insertion_point(field_mutable_list:LayerCalibrationParameter.bottom_unsigned)
  return &bottom_unsigned_;
}

// repeated bool top_unsigned = 8;
inline int LayerCalibrationParameter::top_unsigned_size() const {
  return top_unsigned_.size();
}
inline void LayerCalibrationParameter::clear_top_unsigned() {
  top_unsigned_.Clear();
}
inline bool LayerCalibrationParameter::top_unsigned(int index) const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.top_unsigned)
  return top_unsigned_.Get(index);
}
inline void LayerCalibrationParameter::set_top_unsigned(int index, bool value) {
  top_unsigned_.Set(index, value);
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.top_unsigned)
}
inline void LayerCalibrationParameter::add_top_unsigned(bool value) {
  top_unsigned_.Add(value);
  // @@protoc_insertion_point(field_add:LayerCalibrationParameter.top_unsigned)
}
inline const ::google::protobuf::RepeatedField< bool >&
LayerCalibrationParameter::top_unsigned() const {
  // @@protoc_insertion_point(field_list:LayerCalibrationParameter.top_unsigned)
  return top_unsigned_;
}
inline ::google::protobuf::RepeatedField< bool >*
LayerCalibrationParameter::mutable_top_unsigned() {
  // @@protoc_insertion_point(field_mutable_list:LayerCalibrationParameter.top_unsigned)
  return &top_unsigned_;
}

// optional .ConvolutionCalibrationCalibrationParameter convolution_param = 106;
inline bool LayerCalibrationParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerCalibrationParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerCalibrationParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerCalibrationParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->Clear();
  clear_has_convolution_param();
}
inline const ::ConvolutionCalibrationCalibrationParameter& LayerCalibrationParameter::_internal_convolution_param() const {
  return *convolution_param_;
}
inline const ::ConvolutionCalibrationCalibrationParameter& LayerCalibrationParameter::convolution_param() const {
  const ::ConvolutionCalibrationCalibrationParameter* p = convolution_param_;
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.convolution_param)
  return p != NULL ? *p : *reinterpret_cast<const ::ConvolutionCalibrationCalibrationParameter*>(
      &::_ConvolutionCalibrationCalibrationParameter_default_instance_);
}
inline ::ConvolutionCalibrationCalibrationParameter* LayerCalibrationParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:LayerCalibrationParameter.convolution_param)
  clear_has_convolution_param();
  ::ConvolutionCalibrationCalibrationParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline ::ConvolutionCalibrationCalibrationParameter* LayerCalibrationParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    auto* p = CreateMaybeMessage<::ConvolutionCalibrationCalibrationParameter>(GetArenaNoVirtual());
    convolution_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.convolution_param)
  return convolution_param_;
}
inline void LayerCalibrationParameter::set_allocated_convolution_param(::ConvolutionCalibrationCalibrationParameter* convolution_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete convolution_param_;
  }
  if (convolution_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      convolution_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, convolution_param, submessage_arena);
    }
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  convolution_param_ = convolution_param;
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.convolution_param)
}

// optional .InnerProductCalibrationParameter inner_product_param = 117;
inline bool LayerCalibrationParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerCalibrationParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerCalibrationParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerCalibrationParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->Clear();
  clear_has_inner_product_param();
}
inline const ::InnerProductCalibrationParameter& LayerCalibrationParameter::_internal_inner_product_param() const {
  return *inner_product_param_;
}
inline const ::InnerProductCalibrationParameter& LayerCalibrationParameter::inner_product_param() const {
  const ::InnerProductCalibrationParameter* p = inner_product_param_;
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.inner_product_param)
  return p != NULL ? *p : *reinterpret_cast<const ::InnerProductCalibrationParameter*>(
      &::_InnerProductCalibrationParameter_default_instance_);
}
inline ::InnerProductCalibrationParameter* LayerCalibrationParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:LayerCalibrationParameter.inner_product_param)
  clear_has_inner_product_param();
  ::InnerProductCalibrationParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline ::InnerProductCalibrationParameter* LayerCalibrationParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    auto* p = CreateMaybeMessage<::InnerProductCalibrationParameter>(GetArenaNoVirtual());
    inner_product_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.inner_product_param)
  return inner_product_param_;
}
inline void LayerCalibrationParameter::set_allocated_inner_product_param(::InnerProductCalibrationParameter* inner_product_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inner_product_param_;
  }
  if (inner_product_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inner_product_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inner_product_param, submessage_arena);
    }
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  inner_product_param_ = inner_product_param;
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.inner_product_param)
}

// optional .PoolingCalibrationParameter pooling_param = 121;
inline bool LayerCalibrationParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayerCalibrationParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayerCalibrationParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayerCalibrationParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->Clear();
  clear_has_pooling_param();
}
inline const ::PoolingCalibrationParameter& LayerCalibrationParameter::_internal_pooling_param() const {
  return *pooling_param_;
}
inline const ::PoolingCalibrationParameter& LayerCalibrationParameter::pooling_param() const {
  const ::PoolingCalibrationParameter* p = pooling_param_;
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.pooling_param)
  return p != NULL ? *p : *reinterpret_cast<const ::PoolingCalibrationParameter*>(
      &::_PoolingCalibrationParameter_default_instance_);
}
inline ::PoolingCalibrationParameter* LayerCalibrationParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:LayerCalibrationParameter.pooling_param)
  clear_has_pooling_param();
  ::PoolingCalibrationParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline ::PoolingCalibrationParameter* LayerCalibrationParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    auto* p = CreateMaybeMessage<::PoolingCalibrationParameter>(GetArenaNoVirtual());
    pooling_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.pooling_param)
  return pooling_param_;
}
inline void LayerCalibrationParameter::set_allocated_pooling_param(::PoolingCalibrationParameter* pooling_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pooling_param_;
  }
  if (pooling_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pooling_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pooling_param, submessage_arena);
    }
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  pooling_param_ = pooling_param;
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.pooling_param)
}

// optional .ReLUCalibrationParameter relu_param = 123;
inline bool LayerCalibrationParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerCalibrationParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerCalibrationParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerCalibrationParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->Clear();
  clear_has_relu_param();
}
inline const ::ReLUCalibrationParameter& LayerCalibrationParameter::_internal_relu_param() const {
  return *relu_param_;
}
inline const ::ReLUCalibrationParameter& LayerCalibrationParameter::relu_param() const {
  const ::ReLUCalibrationParameter* p = relu_param_;
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.relu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::ReLUCalibrationParameter*>(
      &::_ReLUCalibrationParameter_default_instance_);
}
inline ::ReLUCalibrationParameter* LayerCalibrationParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:LayerCalibrationParameter.relu_param)
  clear_has_relu_param();
  ::ReLUCalibrationParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline ::ReLUCalibrationParameter* LayerCalibrationParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    auto* p = CreateMaybeMessage<::ReLUCalibrationParameter>(GetArenaNoVirtual());
    relu_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.relu_param)
  return relu_param_;
}
inline void LayerCalibrationParameter::set_allocated_relu_param(::ReLUCalibrationParameter* relu_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete relu_param_;
  }
  if (relu_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relu_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relu_param, submessage_arena);
    }
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  relu_param_ = relu_param;
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.relu_param)
}

// optional .PReLUCalibrationParameter prelu_param = 124;
inline bool LayerCalibrationParameter::has_prelu_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerCalibrationParameter::set_has_prelu_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerCalibrationParameter::clear_has_prelu_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerCalibrationParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->Clear();
  clear_has_prelu_param();
}
inline const ::PReLUCalibrationParameter& LayerCalibrationParameter::_internal_prelu_param() const {
  return *prelu_param_;
}
inline const ::PReLUCalibrationParameter& LayerCalibrationParameter::prelu_param() const {
  const ::PReLUCalibrationParameter* p = prelu_param_;
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.prelu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::PReLUCalibrationParameter*>(
      &::_PReLUCalibrationParameter_default_instance_);
}
inline ::PReLUCalibrationParameter* LayerCalibrationParameter::release_prelu_param() {
  // @@protoc_insertion_point(field_release:LayerCalibrationParameter.prelu_param)
  clear_has_prelu_param();
  ::PReLUCalibrationParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline ::PReLUCalibrationParameter* LayerCalibrationParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) {
    auto* p = CreateMaybeMessage<::PReLUCalibrationParameter>(GetArenaNoVirtual());
    prelu_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.prelu_param)
  return prelu_param_;
}
inline void LayerCalibrationParameter::set_allocated_prelu_param(::PReLUCalibrationParameter* prelu_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prelu_param_;
  }
  if (prelu_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prelu_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prelu_param, submessage_arena);
    }
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  prelu_param_ = prelu_param;
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.prelu_param)
}

// optional .ConcatCalibrationParameter concat_param = 125;
inline bool LayerCalibrationParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerCalibrationParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerCalibrationParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerCalibrationParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->Clear();
  clear_has_concat_param();
}
inline const ::ConcatCalibrationParameter& LayerCalibrationParameter::_internal_concat_param() const {
  return *concat_param_;
}
inline const ::ConcatCalibrationParameter& LayerCalibrationParameter::concat_param() const {
  const ::ConcatCalibrationParameter* p = concat_param_;
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.concat_param)
  return p != NULL ? *p : *reinterpret_cast<const ::ConcatCalibrationParameter*>(
      &::_ConcatCalibrationParameter_default_instance_);
}
inline ::ConcatCalibrationParameter* LayerCalibrationParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:LayerCalibrationParameter.concat_param)
  clear_has_concat_param();
  ::ConcatCalibrationParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline ::ConcatCalibrationParameter* LayerCalibrationParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    auto* p = CreateMaybeMessage<::ConcatCalibrationParameter>(GetArenaNoVirtual());
    concat_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.concat_param)
  return concat_param_;
}
inline void LayerCalibrationParameter::set_allocated_concat_param(::ConcatCalibrationParameter* concat_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete concat_param_;
  }
  if (concat_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      concat_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, concat_param, submessage_arena);
    }
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  concat_param_ = concat_param;
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.concat_param)
}

// optional .LeakyReLUCalibrationParameter leakyrelu_param = 126;
inline bool LayerCalibrationParameter::has_leakyrelu_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayerCalibrationParameter::set_has_leakyrelu_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayerCalibrationParameter::clear_has_leakyrelu_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayerCalibrationParameter::clear_leakyrelu_param() {
  if (leakyrelu_param_ != NULL) leakyrelu_param_->Clear();
  clear_has_leakyrelu_param();
}
inline const ::LeakyReLUCalibrationParameter& LayerCalibrationParameter::_internal_leakyrelu_param() const {
  return *leakyrelu_param_;
}
inline const ::LeakyReLUCalibrationParameter& LayerCalibrationParameter::leakyrelu_param() const {
  const ::LeakyReLUCalibrationParameter* p = leakyrelu_param_;
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.leakyrelu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::LeakyReLUCalibrationParameter*>(
      &::_LeakyReLUCalibrationParameter_default_instance_);
}
inline ::LeakyReLUCalibrationParameter* LayerCalibrationParameter::release_leakyrelu_param() {
  // @@protoc_insertion_point(field_release:LayerCalibrationParameter.leakyrelu_param)
  clear_has_leakyrelu_param();
  ::LeakyReLUCalibrationParameter* temp = leakyrelu_param_;
  leakyrelu_param_ = NULL;
  return temp;
}
inline ::LeakyReLUCalibrationParameter* LayerCalibrationParameter::mutable_leakyrelu_param() {
  set_has_leakyrelu_param();
  if (leakyrelu_param_ == NULL) {
    auto* p = CreateMaybeMessage<::LeakyReLUCalibrationParameter>(GetArenaNoVirtual());
    leakyrelu_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.leakyrelu_param)
  return leakyrelu_param_;
}
inline void LayerCalibrationParameter::set_allocated_leakyrelu_param(::LeakyReLUCalibrationParameter* leakyrelu_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leakyrelu_param_;
  }
  if (leakyrelu_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leakyrelu_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leakyrelu_param, submessage_arena);
    }
    set_has_leakyrelu_param();
  } else {
    clear_has_leakyrelu_param();
  }
  leakyrelu_param_ = leakyrelu_param;
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.leakyrelu_param)
}

// optional .QuantizationCalibrationParameter quantization_param = 127;
inline bool LayerCalibrationParameter::has_quantization_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerCalibrationParameter::set_has_quantization_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerCalibrationParameter::clear_has_quantization_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerCalibrationParameter::clear_quantization_param() {
  if (quantization_param_ != NULL) quantization_param_->Clear();
  clear_has_quantization_param();
}
inline const ::QuantizationCalibrationParameter& LayerCalibrationParameter::_internal_quantization_param() const {
  return *quantization_param_;
}
inline const ::QuantizationCalibrationParameter& LayerCalibrationParameter::quantization_param() const {
  const ::QuantizationCalibrationParameter* p = quantization_param_;
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.quantization_param)
  return p != NULL ? *p : *reinterpret_cast<const ::QuantizationCalibrationParameter*>(
      &::_QuantizationCalibrationParameter_default_instance_);
}
inline ::QuantizationCalibrationParameter* LayerCalibrationParameter::release_quantization_param() {
  // @@protoc_insertion_point(field_release:LayerCalibrationParameter.quantization_param)
  clear_has_quantization_param();
  ::QuantizationCalibrationParameter* temp = quantization_param_;
  quantization_param_ = NULL;
  return temp;
}
inline ::QuantizationCalibrationParameter* LayerCalibrationParameter::mutable_quantization_param() {
  set_has_quantization_param();
  if (quantization_param_ == NULL) {
    auto* p = CreateMaybeMessage<::QuantizationCalibrationParameter>(GetArenaNoVirtual());
    quantization_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.quantization_param)
  return quantization_param_;
}
inline void LayerCalibrationParameter::set_allocated_quantization_param(::QuantizationCalibrationParameter* quantization_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete quantization_param_;
  }
  if (quantization_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quantization_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quantization_param, submessage_arena);
    }
    set_has_quantization_param();
  } else {
    clear_has_quantization_param();
  }
  quantization_param_ = quantization_param;
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.quantization_param)
}

// -------------------------------------------------------------------

// BlobParameter

// required string name = 1;
inline bool BlobParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& BlobParameter::name() const {
  // @@protoc_insertion_point(field_get:BlobParameter.name)
  return name_.GetNoArena();
}
inline void BlobParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BlobParameter.name)
}
#if LANG_CXX11
inline void BlobParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlobParameter.name)
}
#endif
inline void BlobParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlobParameter.name)
}
inline void BlobParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlobParameter.name)
}
inline ::std::string* BlobParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:BlobParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlobParameter::release_name() {
  // @@protoc_insertion_point(field_release:BlobParameter.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlobParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BlobParameter.name)
}

// required float threshold_y = 2;
inline bool BlobParameter::has_threshold_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobParameter::set_has_threshold_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobParameter::clear_has_threshold_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobParameter::clear_threshold_y() {
  threshold_y_ = 0;
  clear_has_threshold_y();
}
inline float BlobParameter::threshold_y() const {
  // @@protoc_insertion_point(field_get:BlobParameter.threshold_y)
  return threshold_y_;
}
inline void BlobParameter::set_threshold_y(float value) {
  set_has_threshold_y();
  threshold_y_ = value;
  // @@protoc_insertion_point(field_set:BlobParameter.threshold_y)
}

// optional int32 right_shift_width = 3;
inline bool BlobParameter::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobParameter::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobParameter::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobParameter::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 BlobParameter::right_shift_width() const {
  // @@protoc_insertion_point(field_get:BlobParameter.right_shift_width)
  return right_shift_width_;
}
inline void BlobParameter::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:BlobParameter.right_shift_width)
}

// -------------------------------------------------------------------

// NetCalibrationParameter

// optional string name = 1;
inline bool NetCalibrationParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetCalibrationParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetCalibrationParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetCalibrationParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NetCalibrationParameter::name() const {
  // @@protoc_insertion_point(field_get:NetCalibrationParameter.name)
  return name_.GetNoArena();
}
inline void NetCalibrationParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetCalibrationParameter.name)
}
#if LANG_CXX11
inline void NetCalibrationParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetCalibrationParameter.name)
}
#endif
inline void NetCalibrationParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetCalibrationParameter.name)
}
inline void NetCalibrationParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetCalibrationParameter.name)
}
inline ::std::string* NetCalibrationParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:NetCalibrationParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetCalibrationParameter::release_name() {
  // @@protoc_insertion_point(field_release:NetCalibrationParameter.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetCalibrationParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetCalibrationParameter.name)
}

// repeated .LayerCalibrationParameter layer = 100;
inline int NetCalibrationParameter::layer_size() const {
  return layer_.size();
}
inline void NetCalibrationParameter::clear_layer() {
  layer_.Clear();
}
inline ::LayerCalibrationParameter* NetCalibrationParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:NetCalibrationParameter.layer)
  return layer_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::LayerCalibrationParameter >*
NetCalibrationParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:NetCalibrationParameter.layer)
  return &layer_;
}
inline const ::LayerCalibrationParameter& NetCalibrationParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:NetCalibrationParameter.layer)
  return layer_.Get(index);
}
inline ::LayerCalibrationParameter* NetCalibrationParameter::add_layer() {
  // @@protoc_insertion_point(field_add:NetCalibrationParameter.layer)
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LayerCalibrationParameter >&
NetCalibrationParameter::layer() const {
  // @@protoc_insertion_point(field_list:NetCalibrationParameter.layer)
  return layer_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_bmnet_2fcommon_5fcalibration_2eproto
