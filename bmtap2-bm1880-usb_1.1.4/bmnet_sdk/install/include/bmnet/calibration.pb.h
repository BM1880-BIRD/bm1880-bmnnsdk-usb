// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bmnet/calibration.proto

#ifndef PROTOBUF_INCLUDED_bmnet_2fcalibration_2eproto
#define PROTOBUF_INCLUDED_bmnet_2fcalibration_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bmnet/common_calibration.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_bmnet_2fcalibration_2eproto 

namespace protobuf_bmnet_2fcalibration_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_bmnet_2fcalibration_2eproto
namespace bmnet {
class doNotUseIt;
class doNotUseItDefaultTypeInternal;
extern doNotUseItDefaultTypeInternal _doNotUseIt_default_instance_;
}  // namespace bmnet
namespace google {
namespace protobuf {
template<> ::bmnet::doNotUseIt* Arena::CreateMaybeMessage<::bmnet::doNotUseIt>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace bmnet {

// ===================================================================

class doNotUseIt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.doNotUseIt) */ {
 public:
  doNotUseIt();
  virtual ~doNotUseIt();

  doNotUseIt(const doNotUseIt& from);

  inline doNotUseIt& operator=(const doNotUseIt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  doNotUseIt(doNotUseIt&& from) noexcept
    : doNotUseIt() {
    *this = ::std::move(from);
  }

  inline doNotUseIt& operator=(doNotUseIt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const doNotUseIt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const doNotUseIt* internal_default_instance() {
    return reinterpret_cast<const doNotUseIt*>(
               &_doNotUseIt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(doNotUseIt* other);
  friend void swap(doNotUseIt& a, doNotUseIt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline doNotUseIt* New() const final {
    return CreateMaybeMessage<doNotUseIt>(NULL);
  }

  doNotUseIt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<doNotUseIt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const doNotUseIt& from);
  void MergeFrom(const doNotUseIt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(doNotUseIt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .NetCalibrationParameter calib_param = 100;
  bool has_calib_param() const;
  void clear_calib_param();
  static const int kCalibParamFieldNumber = 100;
  private:
  const ::NetCalibrationParameter& _internal_calib_param() const;
  public:
  const ::NetCalibrationParameter& calib_param() const;
  ::NetCalibrationParameter* release_calib_param();
  ::NetCalibrationParameter* mutable_calib_param();
  void set_allocated_calib_param(::NetCalibrationParameter* calib_param);

  // @@protoc_insertion_point(class_scope:bmnet.doNotUseIt)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_calib_param();
  void clear_has_calib_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::NetCalibrationParameter* calib_param_;
  friend struct ::protobuf_bmnet_2fcalibration_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// doNotUseIt

// required string name = 1;
inline bool doNotUseIt::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void doNotUseIt::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void doNotUseIt::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void doNotUseIt::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& doNotUseIt::name() const {
  // @@protoc_insertion_point(field_get:bmnet.doNotUseIt.name)
  return name_.GetNoArena();
}
inline void doNotUseIt::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bmnet.doNotUseIt.name)
}
#if LANG_CXX11
inline void doNotUseIt::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bmnet.doNotUseIt.name)
}
#endif
inline void doNotUseIt::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bmnet.doNotUseIt.name)
}
inline void doNotUseIt::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bmnet.doNotUseIt.name)
}
inline ::std::string* doNotUseIt::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:bmnet.doNotUseIt.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doNotUseIt::release_name() {
  // @@protoc_insertion_point(field_release:bmnet.doNotUseIt.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doNotUseIt::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bmnet.doNotUseIt.name)
}

// optional .NetCalibrationParameter calib_param = 100;
inline bool doNotUseIt::has_calib_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void doNotUseIt::set_has_calib_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void doNotUseIt::clear_has_calib_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::NetCalibrationParameter& doNotUseIt::_internal_calib_param() const {
  return *calib_param_;
}
inline const ::NetCalibrationParameter& doNotUseIt::calib_param() const {
  const ::NetCalibrationParameter* p = calib_param_;
  // @@protoc_insertion_point(field_get:bmnet.doNotUseIt.calib_param)
  return p != NULL ? *p : *reinterpret_cast<const ::NetCalibrationParameter*>(
      &::_NetCalibrationParameter_default_instance_);
}
inline ::NetCalibrationParameter* doNotUseIt::release_calib_param() {
  // @@protoc_insertion_point(field_release:bmnet.doNotUseIt.calib_param)
  clear_has_calib_param();
  ::NetCalibrationParameter* temp = calib_param_;
  calib_param_ = NULL;
  return temp;
}
inline ::NetCalibrationParameter* doNotUseIt::mutable_calib_param() {
  set_has_calib_param();
  if (calib_param_ == NULL) {
    auto* p = CreateMaybeMessage<::NetCalibrationParameter>(GetArenaNoVirtual());
    calib_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.doNotUseIt.calib_param)
  return calib_param_;
}
inline void doNotUseIt::set_allocated_calib_param(::NetCalibrationParameter* calib_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(calib_param_);
  }
  if (calib_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      calib_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, calib_param, submessage_arena);
    }
    set_has_calib_param();
  } else {
    clear_has_calib_param();
  }
  calib_param_ = calib_param;
  // @@protoc_insertion_point(field_set_allocated:bmnet.doNotUseIt.calib_param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace bmnet

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_bmnet_2fcalibration_2eproto
