// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bmnet/bm168x_lir.proto

#ifndef PROTOBUF_INCLUDED_bmnet_2fbm168x_5flir_2eproto
#define PROTOBUF_INCLUDED_bmnet_2fbm168x_5flir_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_bmnet_2fbm168x_5flir_2eproto 

namespace protobuf_bmnet_2fbm168x_5flir_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[25];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_bmnet_2fbm168x_5flir_2eproto
namespace bmnet {
namespace bm168x_lir {
class Lir;
class LirDefaultTypeInternal;
extern LirDefaultTypeInternal _Lir_default_instance_;
class LirArray;
class LirArrayDefaultTypeInternal;
extern LirArrayDefaultTypeInternal _LirArray_default_instance_;
class Operand;
class OperandDefaultTypeInternal;
extern OperandDefaultTypeInternal _Operand_default_instance_;
class bm168x_copy_gdma;
class bm168x_copy_gdmaDefaultTypeInternal;
extern bm168x_copy_gdmaDefaultTypeInternal _bm168x_copy_gdma_default_instance_;
class bm168x_copy_stride;
class bm168x_copy_strideDefaultTypeInternal;
extern bm168x_copy_strideDefaultTypeInternal _bm168x_copy_stride_default_instance_;
class bm168x_g_copy;
class bm168x_g_copyDefaultTypeInternal;
extern bm168x_g_copyDefaultTypeInternal _bm168x_g_copy_default_instance_;
class bm168x_tl_add_square;
class bm168x_tl_add_squareDefaultTypeInternal;
extern bm168x_tl_add_squareDefaultTypeInternal _bm168x_tl_add_square_default_instance_;
class bm168x_tl_arithmetic;
class bm168x_tl_arithmeticDefaultTypeInternal;
extern bm168x_tl_arithmeticDefaultTypeInternal _bm168x_tl_arithmetic_default_instance_;
class bm168x_tl_clear;
class bm168x_tl_clearDefaultTypeInternal;
extern bm168x_tl_clearDefaultTypeInternal _bm168x_tl_clear_default_instance_;
class bm168x_tl_cmp;
class bm168x_tl_cmpDefaultTypeInternal;
extern bm168x_tl_cmpDefaultTypeInternal _bm168x_tl_cmp_default_instance_;
class bm168x_tl_conv;
class bm168x_tl_convDefaultTypeInternal;
extern bm168x_tl_convDefaultTypeInternal _bm168x_tl_conv_default_instance_;
class bm168x_tl_cw_transpose;
class bm168x_tl_cw_transposeDefaultTypeInternal;
extern bm168x_tl_cw_transposeDefaultTypeInternal _bm168x_tl_cw_transpose_default_instance_;
class bm168x_tl_fill;
class bm168x_tl_fillDefaultTypeInternal;
extern bm168x_tl_fillDefaultTypeInternal _bm168x_tl_fill_default_instance_;
class bm168x_tl_img_sum;
class bm168x_tl_img_sumDefaultTypeInternal;
extern bm168x_tl_img_sumDefaultTypeInternal _bm168x_tl_img_sum_default_instance_;
class bm168x_tl_load;
class bm168x_tl_loadDefaultTypeInternal;
extern bm168x_tl_loadDefaultTypeInternal _bm168x_tl_load_default_instance_;
class bm168x_tl_lrn_shift;
class bm168x_tl_lrn_shiftDefaultTypeInternal;
extern bm168x_tl_lrn_shiftDefaultTypeInternal _bm168x_tl_lrn_shift_default_instance_;
class bm168x_tl_mac;
class bm168x_tl_macDefaultTypeInternal;
extern bm168x_tl_macDefaultTypeInternal _bm168x_tl_mac_default_instance_;
class bm168x_tl_matrix_mac;
class bm168x_tl_matrix_macDefaultTypeInternal;
extern bm168x_tl_matrix_macDefaultTypeInternal _bm168x_tl_matrix_mac_default_instance_;
class bm168x_tl_max;
class bm168x_tl_maxDefaultTypeInternal;
extern bm168x_tl_maxDefaultTypeInternal _bm168x_tl_max_default_instance_;
class bm168x_tl_md_scalar;
class bm168x_tl_md_scalarDefaultTypeInternal;
extern bm168x_tl_md_scalarDefaultTypeInternal _bm168x_tl_md_scalar_default_instance_;
class bm168x_tl_pooling;
class bm168x_tl_poolingDefaultTypeInternal;
extern bm168x_tl_poolingDefaultTypeInternal _bm168x_tl_pooling_default_instance_;
class bm168x_tl_sfu;
class bm168x_tl_sfuDefaultTypeInternal;
extern bm168x_tl_sfuDefaultTypeInternal _bm168x_tl_sfu_default_instance_;
class bm168x_tl_store;
class bm168x_tl_storeDefaultTypeInternal;
extern bm168x_tl_storeDefaultTypeInternal _bm168x_tl_store_default_instance_;
class bm168x_tl_sub_square;
class bm168x_tl_sub_squareDefaultTypeInternal;
extern bm168x_tl_sub_squareDefaultTypeInternal _bm168x_tl_sub_square_default_instance_;
class bm168x_tl_sum;
class bm168x_tl_sumDefaultTypeInternal;
extern bm168x_tl_sumDefaultTypeInternal _bm168x_tl_sum_default_instance_;
}  // namespace bm168x_lir
}  // namespace bmnet
namespace google {
namespace protobuf {
template<> ::bmnet::bm168x_lir::Lir* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::Lir>(Arena*);
template<> ::bmnet::bm168x_lir::LirArray* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::LirArray>(Arena*);
template<> ::bmnet::bm168x_lir::Operand* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_copy_gdma* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_copy_gdma>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_copy_stride* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_copy_stride>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_g_copy* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_g_copy>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_add_square* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_add_square>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_arithmetic* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_arithmetic>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_clear* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_clear>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_cmp* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_cmp>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_conv* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_conv>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_cw_transpose* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_cw_transpose>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_fill* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_fill>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_img_sum* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_img_sum>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_load* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_load>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_lrn_shift* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_lrn_shift>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_mac* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_mac>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_matrix_mac* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_matrix_mac>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_max* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_max>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_md_scalar* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_md_scalar>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_pooling* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_pooling>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_sfu* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_sfu>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_store* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_store>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_sub_square* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_sub_square>(Arena*);
template<> ::bmnet::bm168x_lir::bm168x_tl_sum* Arena::CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_sum>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace bmnet {
namespace bm168x_lir {

enum Operand_OperandType {
  Operand_OperandType_LMEM = 0,
  Operand_OperandType_GMEM = 1,
  Operand_OperandType_CONST = 2
};
bool Operand_OperandType_IsValid(int value);
const Operand_OperandType Operand_OperandType_OperandType_MIN = Operand_OperandType_LMEM;
const Operand_OperandType Operand_OperandType_OperandType_MAX = Operand_OperandType_CONST;
const int Operand_OperandType_OperandType_ARRAYSIZE = Operand_OperandType_OperandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operand_OperandType_descriptor();
inline const ::std::string& Operand_OperandType_Name(Operand_OperandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operand_OperandType_descriptor(), value);
}
inline bool Operand_OperandType_Parse(
    const ::std::string& name, Operand_OperandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operand_OperandType>(
    Operand_OperandType_descriptor(), name, value);
}
enum LIR_FMT {
  LIR_FMT_F32 = 0,
  LIR_FMT_U8 = 9
};
bool LIR_FMT_IsValid(int value);
const LIR_FMT LIR_FMT_MIN = LIR_FMT_F32;
const LIR_FMT LIR_FMT_MAX = LIR_FMT_U8;
const int LIR_FMT_ARRAYSIZE = LIR_FMT_MAX + 1;

const ::google::protobuf::EnumDescriptor* LIR_FMT_descriptor();
inline const ::std::string& LIR_FMT_Name(LIR_FMT value) {
  return ::google::protobuf::internal::NameOfEnum(
    LIR_FMT_descriptor(), value);
}
inline bool LIR_FMT_Parse(
    const ::std::string& name, LIR_FMT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LIR_FMT>(
    LIR_FMT_descriptor(), name, value);
}
enum ArithmeticOpCode {
  LIR_TENSOR_ADD = 0,
  LIR_TENSOR_SUB = 1,
  LIR_TENSOR_MUL = 2,
  LIR_TENSOR_DIV = 3,
  LIR_TENSOR_MAX = 4,
  LIR_TENSOR_CPY = 5
};
bool ArithmeticOpCode_IsValid(int value);
const ArithmeticOpCode ArithmeticOpCode_MIN = LIR_TENSOR_ADD;
const ArithmeticOpCode ArithmeticOpCode_MAX = LIR_TENSOR_CPY;
const int ArithmeticOpCode_ARRAYSIZE = ArithmeticOpCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ArithmeticOpCode_descriptor();
inline const ::std::string& ArithmeticOpCode_Name(ArithmeticOpCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ArithmeticOpCode_descriptor(), value);
}
inline bool ArithmeticOpCode_Parse(
    const ::std::string& name, ArithmeticOpCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArithmeticOpCode>(
    ArithmeticOpCode_descriptor(), name, value);
}
enum SfuOpCode {
  LIR_EX = 0,
  LIR_LNX = 1,
  LIR_XA = 2,
  LIR_XN = 3,
  LIR_RSQ = 4
};
bool SfuOpCode_IsValid(int value);
const SfuOpCode SfuOpCode_MIN = LIR_EX;
const SfuOpCode SfuOpCode_MAX = LIR_RSQ;
const int SfuOpCode_ARRAYSIZE = SfuOpCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SfuOpCode_descriptor();
inline const ::std::string& SfuOpCode_Name(SfuOpCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SfuOpCode_descriptor(), value);
}
inline bool SfuOpCode_Parse(
    const ::std::string& name, SfuOpCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SfuOpCode>(
    SfuOpCode_descriptor(), name, value);
}
// ===================================================================

class LirArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.LirArray) */ {
 public:
  LirArray();
  virtual ~LirArray();

  LirArray(const LirArray& from);

  inline LirArray& operator=(const LirArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LirArray(LirArray&& from) noexcept
    : LirArray() {
    *this = ::std::move(from);
  }

  inline LirArray& operator=(LirArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LirArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LirArray* internal_default_instance() {
    return reinterpret_cast<const LirArray*>(
               &_LirArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LirArray* other);
  friend void swap(LirArray& a, LirArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LirArray* New() const final {
    return CreateMaybeMessage<LirArray>(NULL);
  }

  LirArray* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LirArray>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LirArray& from);
  void MergeFrom(const LirArray& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LirArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bmnet.bm168x_lir.Lir lir = 1;
  int lir_size() const;
  void clear_lir();
  static const int kLirFieldNumber = 1;
  ::bmnet::bm168x_lir::Lir* mutable_lir(int index);
  ::google::protobuf::RepeatedPtrField< ::bmnet::bm168x_lir::Lir >*
      mutable_lir();
  const ::bmnet::bm168x_lir::Lir& lir(int index) const;
  ::bmnet::bm168x_lir::Lir* add_lir();
  const ::google::protobuf::RepeatedPtrField< ::bmnet::bm168x_lir::Lir >&
      lir() const;

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.LirArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bmnet::bm168x_lir::Lir > lir_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Operand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.Operand) */ {
 public:
  Operand();
  virtual ~Operand();

  Operand(const Operand& from);

  inline Operand& operator=(const Operand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Operand(Operand&& from) noexcept
    : Operand() {
    *this = ::std::move(from);
  }

  inline Operand& operator=(Operand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Operand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operand* internal_default_instance() {
    return reinterpret_cast<const Operand*>(
               &_Operand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Operand* other);
  friend void swap(Operand& a, Operand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Operand* New() const final {
    return CreateMaybeMessage<Operand>(NULL);
  }

  Operand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Operand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Operand& from);
  void MergeFrom(const Operand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Operand_OperandType OperandType;
  static const OperandType LMEM =
    Operand_OperandType_LMEM;
  static const OperandType GMEM =
    Operand_OperandType_GMEM;
  static const OperandType CONST =
    Operand_OperandType_CONST;
  static inline bool OperandType_IsValid(int value) {
    return Operand_OperandType_IsValid(value);
  }
  static const OperandType OperandType_MIN =
    Operand_OperandType_OperandType_MIN;
  static const OperandType OperandType_MAX =
    Operand_OperandType_OperandType_MAX;
  static const int OperandType_ARRAYSIZE =
    Operand_OperandType_OperandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperandType_descriptor() {
    return Operand_OperandType_descriptor();
  }
  static inline const ::std::string& OperandType_Name(OperandType value) {
    return Operand_OperandType_Name(value);
  }
  static inline bool OperandType_Parse(const ::std::string& name,
      OperandType* value) {
    return Operand_OperandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 dims = 3;
  int dims_size() const;
  void clear_dims();
  static const int kDimsFieldNumber = 3;
  ::google::protobuf::uint32 dims(int index) const;
  void set_dims(int index, ::google::protobuf::uint32 value);
  void add_dims(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dims();

  // repeated uint64 stride = 4;
  int stride_size() const;
  void clear_stride();
  static const int kStrideFieldNumber = 4;
  ::google::protobuf::uint64 stride(int index) const;
  void set_stride(int index, ::google::protobuf::uint64 value);
  void add_stride(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      stride() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_stride();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .bmnet.bm168x_lir.Operand.OperandType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::bmnet::bm168x_lir::Operand_OperandType type() const;
  void set_type(::bmnet::bm168x_lir::Operand_OperandType value);

  // optional uint32 laddr = 5;
  bool has_laddr() const;
  void clear_laddr();
  static const int kLaddrFieldNumber = 5;
  ::google::protobuf::uint32 laddr() const;
  void set_laddr(::google::protobuf::uint32 value);

  // optional uint64 gaddr = 6;
  bool has_gaddr() const;
  void clear_gaddr();
  static const int kGaddrFieldNumber = 6;
  ::google::protobuf::uint64 gaddr() const;
  void set_gaddr(::google::protobuf::uint64 value);

  // optional float fval = 7;
  bool has_fval() const;
  void clear_fval();
  static const int kFvalFieldNumber = 7;
  float fval() const;
  void set_fval(float value);

  // optional .bmnet.bm168x_lir.LIR_FMT fmt = 8 [default = LIR_FMT_F32];
  bool has_fmt() const;
  void clear_fmt();
  static const int kFmtFieldNumber = 8;
  ::bmnet::bm168x_lir::LIR_FMT fmt() const;
  void set_fmt(::bmnet::bm168x_lir::LIR_FMT value);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.Operand)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_laddr();
  void clear_has_laddr();
  void set_has_gaddr();
  void clear_has_gaddr();
  void set_has_fval();
  void clear_has_fval();
  void set_has_fmt();
  void clear_has_fmt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dims_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > stride_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  ::google::protobuf::uint32 laddr_;
  ::google::protobuf::uint64 gaddr_;
  float fval_;
  int fmt_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lir : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.Lir) */ {
 public:
  Lir();
  virtual ~Lir();

  Lir(const Lir& from);

  inline Lir& operator=(const Lir& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lir(Lir&& from) noexcept
    : Lir() {
    *this = ::std::move(from);
  }

  inline Lir& operator=(Lir&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lir& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lir* internal_default_instance() {
    return reinterpret_cast<const Lir*>(
               &_Lir_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Lir* other);
  friend void swap(Lir& a, Lir& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lir* New() const final {
    return CreateMaybeMessage<Lir>(NULL);
  }

  Lir* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Lir>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Lir& from);
  void MergeFrom(const Lir& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lir* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .bmnet.bm168x_lir.bm168x_tl_load tl_load = 3;
  bool has_tl_load() const;
  void clear_tl_load();
  static const int kTlLoadFieldNumber = 3;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_load& _internal_tl_load() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_load& tl_load() const;
  ::bmnet::bm168x_lir::bm168x_tl_load* release_tl_load();
  ::bmnet::bm168x_lir::bm168x_tl_load* mutable_tl_load();
  void set_allocated_tl_load(::bmnet::bm168x_lir::bm168x_tl_load* tl_load);

  // optional .bmnet.bm168x_lir.bm168x_tl_store tl_store = 4;
  bool has_tl_store() const;
  void clear_tl_store();
  static const int kTlStoreFieldNumber = 4;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_store& _internal_tl_store() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_store& tl_store() const;
  ::bmnet::bm168x_lir::bm168x_tl_store* release_tl_store();
  ::bmnet::bm168x_lir::bm168x_tl_store* mutable_tl_store();
  void set_allocated_tl_store(::bmnet::bm168x_lir::bm168x_tl_store* tl_store);

  // optional .bmnet.bm168x_lir.bm168x_copy_stride copy_stride = 5;
  bool has_copy_stride() const;
  void clear_copy_stride();
  static const int kCopyStrideFieldNumber = 5;
  private:
  const ::bmnet::bm168x_lir::bm168x_copy_stride& _internal_copy_stride() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_copy_stride& copy_stride() const;
  ::bmnet::bm168x_lir::bm168x_copy_stride* release_copy_stride();
  ::bmnet::bm168x_lir::bm168x_copy_stride* mutable_copy_stride();
  void set_allocated_copy_stride(::bmnet::bm168x_lir::bm168x_copy_stride* copy_stride);

  // optional .bmnet.bm168x_lir.bm168x_copy_gdma copy_gdma = 6;
  bool has_copy_gdma() const;
  void clear_copy_gdma();
  static const int kCopyGdmaFieldNumber = 6;
  private:
  const ::bmnet::bm168x_lir::bm168x_copy_gdma& _internal_copy_gdma() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_copy_gdma& copy_gdma() const;
  ::bmnet::bm168x_lir::bm168x_copy_gdma* release_copy_gdma();
  ::bmnet::bm168x_lir::bm168x_copy_gdma* mutable_copy_gdma();
  void set_allocated_copy_gdma(::bmnet::bm168x_lir::bm168x_copy_gdma* copy_gdma);

  // optional .bmnet.bm168x_lir.bm168x_tl_lrn_shift tl_lrn_shift = 7;
  bool has_tl_lrn_shift() const;
  void clear_tl_lrn_shift();
  static const int kTlLrnShiftFieldNumber = 7;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_lrn_shift& _internal_tl_lrn_shift() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_lrn_shift& tl_lrn_shift() const;
  ::bmnet::bm168x_lir::bm168x_tl_lrn_shift* release_tl_lrn_shift();
  ::bmnet::bm168x_lir::bm168x_tl_lrn_shift* mutable_tl_lrn_shift();
  void set_allocated_tl_lrn_shift(::bmnet::bm168x_lir::bm168x_tl_lrn_shift* tl_lrn_shift);

  // optional .bmnet.bm168x_lir.bm168x_tl_cw_transpose tl_cw_transpose = 8;
  bool has_tl_cw_transpose() const;
  void clear_tl_cw_transpose();
  static const int kTlCwTransposeFieldNumber = 8;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_cw_transpose& _internal_tl_cw_transpose() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_cw_transpose& tl_cw_transpose() const;
  ::bmnet::bm168x_lir::bm168x_tl_cw_transpose* release_tl_cw_transpose();
  ::bmnet::bm168x_lir::bm168x_tl_cw_transpose* mutable_tl_cw_transpose();
  void set_allocated_tl_cw_transpose(::bmnet::bm168x_lir::bm168x_tl_cw_transpose* tl_cw_transpose);

  // optional .bmnet.bm168x_lir.bm168x_g_copy g_copy = 9;
  bool has_g_copy() const;
  void clear_g_copy();
  static const int kGCopyFieldNumber = 9;
  private:
  const ::bmnet::bm168x_lir::bm168x_g_copy& _internal_g_copy() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_g_copy& g_copy() const;
  ::bmnet::bm168x_lir::bm168x_g_copy* release_g_copy();
  ::bmnet::bm168x_lir::bm168x_g_copy* mutable_g_copy();
  void set_allocated_g_copy(::bmnet::bm168x_lir::bm168x_g_copy* g_copy);

  // optional .bmnet.bm168x_lir.bm168x_tl_conv tl_conv = 10;
  bool has_tl_conv() const;
  void clear_tl_conv();
  static const int kTlConvFieldNumber = 10;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_conv& _internal_tl_conv() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_conv& tl_conv() const;
  ::bmnet::bm168x_lir::bm168x_tl_conv* release_tl_conv();
  ::bmnet::bm168x_lir::bm168x_tl_conv* mutable_tl_conv();
  void set_allocated_tl_conv(::bmnet::bm168x_lir::bm168x_tl_conv* tl_conv);

  // optional .bmnet.bm168x_lir.bm168x_tl_pooling tl_pooling = 11;
  bool has_tl_pooling() const;
  void clear_tl_pooling();
  static const int kTlPoolingFieldNumber = 11;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_pooling& _internal_tl_pooling() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_pooling& tl_pooling() const;
  ::bmnet::bm168x_lir::bm168x_tl_pooling* release_tl_pooling();
  ::bmnet::bm168x_lir::bm168x_tl_pooling* mutable_tl_pooling();
  void set_allocated_tl_pooling(::bmnet::bm168x_lir::bm168x_tl_pooling* tl_pooling);

  // optional .bmnet.bm168x_lir.bm168x_tl_arithmetic tl_arithmetic = 12;
  bool has_tl_arithmetic() const;
  void clear_tl_arithmetic();
  static const int kTlArithmeticFieldNumber = 12;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_arithmetic& _internal_tl_arithmetic() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_arithmetic& tl_arithmetic() const;
  ::bmnet::bm168x_lir::bm168x_tl_arithmetic* release_tl_arithmetic();
  ::bmnet::bm168x_lir::bm168x_tl_arithmetic* mutable_tl_arithmetic();
  void set_allocated_tl_arithmetic(::bmnet::bm168x_lir::bm168x_tl_arithmetic* tl_arithmetic);

  // optional .bmnet.bm168x_lir.bm168x_tl_md_scalar tl_md_scalar = 13;
  bool has_tl_md_scalar() const;
  void clear_tl_md_scalar();
  static const int kTlMdScalarFieldNumber = 13;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_md_scalar& _internal_tl_md_scalar() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_md_scalar& tl_md_scalar() const;
  ::bmnet::bm168x_lir::bm168x_tl_md_scalar* release_tl_md_scalar();
  ::bmnet::bm168x_lir::bm168x_tl_md_scalar* mutable_tl_md_scalar();
  void set_allocated_tl_md_scalar(::bmnet::bm168x_lir::bm168x_tl_md_scalar* tl_md_scalar);

  // optional .bmnet.bm168x_lir.bm168x_tl_fill tl_fill = 14;
  bool has_tl_fill() const;
  void clear_tl_fill();
  static const int kTlFillFieldNumber = 14;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_fill& _internal_tl_fill() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_fill& tl_fill() const;
  ::bmnet::bm168x_lir::bm168x_tl_fill* release_tl_fill();
  ::bmnet::bm168x_lir::bm168x_tl_fill* mutable_tl_fill();
  void set_allocated_tl_fill(::bmnet::bm168x_lir::bm168x_tl_fill* tl_fill);

  // optional .bmnet.bm168x_lir.bm168x_tl_clear tl_clear = 15;
  bool has_tl_clear() const;
  void clear_tl_clear();
  static const int kTlClearFieldNumber = 15;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_clear& _internal_tl_clear() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_clear& tl_clear() const;
  ::bmnet::bm168x_lir::bm168x_tl_clear* release_tl_clear();
  ::bmnet::bm168x_lir::bm168x_tl_clear* mutable_tl_clear();
  void set_allocated_tl_clear(::bmnet::bm168x_lir::bm168x_tl_clear* tl_clear);

  // optional .bmnet.bm168x_lir.bm168x_tl_sfu tl_sfu = 16;
  bool has_tl_sfu() const;
  void clear_tl_sfu();
  static const int kTlSfuFieldNumber = 16;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_sfu& _internal_tl_sfu() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_sfu& tl_sfu() const;
  ::bmnet::bm168x_lir::bm168x_tl_sfu* release_tl_sfu();
  ::bmnet::bm168x_lir::bm168x_tl_sfu* mutable_tl_sfu();
  void set_allocated_tl_sfu(::bmnet::bm168x_lir::bm168x_tl_sfu* tl_sfu);

  // optional .bmnet.bm168x_lir.bm168x_tl_mac tl_mac = 17;
  bool has_tl_mac() const;
  void clear_tl_mac();
  static const int kTlMacFieldNumber = 17;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_mac& _internal_tl_mac() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_mac& tl_mac() const;
  ::bmnet::bm168x_lir::bm168x_tl_mac* release_tl_mac();
  ::bmnet::bm168x_lir::bm168x_tl_mac* mutable_tl_mac();
  void set_allocated_tl_mac(::bmnet::bm168x_lir::bm168x_tl_mac* tl_mac);

  // optional .bmnet.bm168x_lir.bm168x_tl_add_square tl_add_square = 18;
  bool has_tl_add_square() const;
  void clear_tl_add_square();
  static const int kTlAddSquareFieldNumber = 18;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_add_square& _internal_tl_add_square() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_add_square& tl_add_square() const;
  ::bmnet::bm168x_lir::bm168x_tl_add_square* release_tl_add_square();
  ::bmnet::bm168x_lir::bm168x_tl_add_square* mutable_tl_add_square();
  void set_allocated_tl_add_square(::bmnet::bm168x_lir::bm168x_tl_add_square* tl_add_square);

  // optional .bmnet.bm168x_lir.bm168x_tl_sub_square tl_sub_square = 19;
  bool has_tl_sub_square() const;
  void clear_tl_sub_square();
  static const int kTlSubSquareFieldNumber = 19;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_sub_square& _internal_tl_sub_square() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_sub_square& tl_sub_square() const;
  ::bmnet::bm168x_lir::bm168x_tl_sub_square* release_tl_sub_square();
  ::bmnet::bm168x_lir::bm168x_tl_sub_square* mutable_tl_sub_square();
  void set_allocated_tl_sub_square(::bmnet::bm168x_lir::bm168x_tl_sub_square* tl_sub_square);

  // optional .bmnet.bm168x_lir.bm168x_tl_max tl_max = 20;
  bool has_tl_max() const;
  void clear_tl_max();
  static const int kTlMaxFieldNumber = 20;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_max& _internal_tl_max() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_max& tl_max() const;
  ::bmnet::bm168x_lir::bm168x_tl_max* release_tl_max();
  ::bmnet::bm168x_lir::bm168x_tl_max* mutable_tl_max();
  void set_allocated_tl_max(::bmnet::bm168x_lir::bm168x_tl_max* tl_max);

  // optional .bmnet.bm168x_lir.bm168x_tl_cmp tl_cmp = 21;
  bool has_tl_cmp() const;
  void clear_tl_cmp();
  static const int kTlCmpFieldNumber = 21;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_cmp& _internal_tl_cmp() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_cmp& tl_cmp() const;
  ::bmnet::bm168x_lir::bm168x_tl_cmp* release_tl_cmp();
  ::bmnet::bm168x_lir::bm168x_tl_cmp* mutable_tl_cmp();
  void set_allocated_tl_cmp(::bmnet::bm168x_lir::bm168x_tl_cmp* tl_cmp);

  // optional .bmnet.bm168x_lir.bm168x_tl_sum tl_sum = 22;
  bool has_tl_sum() const;
  void clear_tl_sum();
  static const int kTlSumFieldNumber = 22;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_sum& _internal_tl_sum() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_sum& tl_sum() const;
  ::bmnet::bm168x_lir::bm168x_tl_sum* release_tl_sum();
  ::bmnet::bm168x_lir::bm168x_tl_sum* mutable_tl_sum();
  void set_allocated_tl_sum(::bmnet::bm168x_lir::bm168x_tl_sum* tl_sum);

  // optional .bmnet.bm168x_lir.bm168x_tl_img_sum tl_img_sum = 23;
  bool has_tl_img_sum() const;
  void clear_tl_img_sum();
  static const int kTlImgSumFieldNumber = 23;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_img_sum& _internal_tl_img_sum() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_img_sum& tl_img_sum() const;
  ::bmnet::bm168x_lir::bm168x_tl_img_sum* release_tl_img_sum();
  ::bmnet::bm168x_lir::bm168x_tl_img_sum* mutable_tl_img_sum();
  void set_allocated_tl_img_sum(::bmnet::bm168x_lir::bm168x_tl_img_sum* tl_img_sum);

  // optional .bmnet.bm168x_lir.bm168x_tl_matrix_mac tl_matrix_mac = 24;
  bool has_tl_matrix_mac() const;
  void clear_tl_matrix_mac();
  static const int kTlMatrixMacFieldNumber = 24;
  private:
  const ::bmnet::bm168x_lir::bm168x_tl_matrix_mac& _internal_tl_matrix_mac() const;
  public:
  const ::bmnet::bm168x_lir::bm168x_tl_matrix_mac& tl_matrix_mac() const;
  ::bmnet::bm168x_lir::bm168x_tl_matrix_mac* release_tl_matrix_mac();
  ::bmnet::bm168x_lir::bm168x_tl_matrix_mac* mutable_tl_matrix_mac();
  void set_allocated_tl_matrix_mac(::bmnet::bm168x_lir::bm168x_tl_matrix_mac* tl_matrix_mac);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.Lir)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_tl_load();
  void clear_has_tl_load();
  void set_has_tl_store();
  void clear_has_tl_store();
  void set_has_copy_stride();
  void clear_has_copy_stride();
  void set_has_copy_gdma();
  void clear_has_copy_gdma();
  void set_has_tl_lrn_shift();
  void clear_has_tl_lrn_shift();
  void set_has_tl_cw_transpose();
  void clear_has_tl_cw_transpose();
  void set_has_g_copy();
  void clear_has_g_copy();
  void set_has_tl_conv();
  void clear_has_tl_conv();
  void set_has_tl_pooling();
  void clear_has_tl_pooling();
  void set_has_tl_arithmetic();
  void clear_has_tl_arithmetic();
  void set_has_tl_md_scalar();
  void clear_has_tl_md_scalar();
  void set_has_tl_fill();
  void clear_has_tl_fill();
  void set_has_tl_clear();
  void clear_has_tl_clear();
  void set_has_tl_sfu();
  void clear_has_tl_sfu();
  void set_has_tl_mac();
  void clear_has_tl_mac();
  void set_has_tl_add_square();
  void clear_has_tl_add_square();
  void set_has_tl_sub_square();
  void clear_has_tl_sub_square();
  void set_has_tl_max();
  void clear_has_tl_max();
  void set_has_tl_cmp();
  void clear_has_tl_cmp();
  void set_has_tl_sum();
  void clear_has_tl_sum();
  void set_has_tl_img_sum();
  void clear_has_tl_img_sum();
  void set_has_tl_matrix_mac();
  void clear_has_tl_matrix_mac();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::bmnet::bm168x_lir::bm168x_tl_load* tl_load_;
  ::bmnet::bm168x_lir::bm168x_tl_store* tl_store_;
  ::bmnet::bm168x_lir::bm168x_copy_stride* copy_stride_;
  ::bmnet::bm168x_lir::bm168x_copy_gdma* copy_gdma_;
  ::bmnet::bm168x_lir::bm168x_tl_lrn_shift* tl_lrn_shift_;
  ::bmnet::bm168x_lir::bm168x_tl_cw_transpose* tl_cw_transpose_;
  ::bmnet::bm168x_lir::bm168x_g_copy* g_copy_;
  ::bmnet::bm168x_lir::bm168x_tl_conv* tl_conv_;
  ::bmnet::bm168x_lir::bm168x_tl_pooling* tl_pooling_;
  ::bmnet::bm168x_lir::bm168x_tl_arithmetic* tl_arithmetic_;
  ::bmnet::bm168x_lir::bm168x_tl_md_scalar* tl_md_scalar_;
  ::bmnet::bm168x_lir::bm168x_tl_fill* tl_fill_;
  ::bmnet::bm168x_lir::bm168x_tl_clear* tl_clear_;
  ::bmnet::bm168x_lir::bm168x_tl_sfu* tl_sfu_;
  ::bmnet::bm168x_lir::bm168x_tl_mac* tl_mac_;
  ::bmnet::bm168x_lir::bm168x_tl_add_square* tl_add_square_;
  ::bmnet::bm168x_lir::bm168x_tl_sub_square* tl_sub_square_;
  ::bmnet::bm168x_lir::bm168x_tl_max* tl_max_;
  ::bmnet::bm168x_lir::bm168x_tl_cmp* tl_cmp_;
  ::bmnet::bm168x_lir::bm168x_tl_sum* tl_sum_;
  ::bmnet::bm168x_lir::bm168x_tl_img_sum* tl_img_sum_;
  ::bmnet::bm168x_lir::bm168x_tl_matrix_mac* tl_matrix_mac_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_load : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_load) */ {
 public:
  bm168x_tl_load();
  virtual ~bm168x_tl_load();

  bm168x_tl_load(const bm168x_tl_load& from);

  inline bm168x_tl_load& operator=(const bm168x_tl_load& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_load(bm168x_tl_load&& from) noexcept
    : bm168x_tl_load() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_load& operator=(bm168x_tl_load&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_load& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_load* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_load*>(
               &_bm168x_tl_load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(bm168x_tl_load* other);
  friend void swap(bm168x_tl_load& a, bm168x_tl_load& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_load* New() const final {
    return CreateMaybeMessage<bm168x_tl_load>(NULL);
  }

  bm168x_tl_load* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_load>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_load& from);
  void MergeFrom(const bm168x_tl_load& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_load* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src = 2;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src() const;
  ::bmnet::bm168x_lir::Operand* release_src();
  ::bmnet::bm168x_lir::Operand* mutable_src();
  void set_allocated_src(::bmnet::bm168x_lir::Operand* src);

  // optional bool transposed = 7;
  bool has_transposed() const;
  void clear_transposed();
  static const int kTransposedFieldNumber = 7;
  bool transposed() const;
  void set_transposed(bool value);

  // optional bool result_add = 8;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 8;
  bool result_add() const;
  void set_result_add(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_load)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src();
  void clear_has_src();
  void set_has_transposed();
  void clear_has_transposed();
  void set_has_result_add();
  void clear_has_result_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src_;
  bool transposed_;
  bool result_add_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_store : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_store) */ {
 public:
  bm168x_tl_store();
  virtual ~bm168x_tl_store();

  bm168x_tl_store(const bm168x_tl_store& from);

  inline bm168x_tl_store& operator=(const bm168x_tl_store& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_store(bm168x_tl_store&& from) noexcept
    : bm168x_tl_store() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_store& operator=(bm168x_tl_store&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_store& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_store* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_store*>(
               &_bm168x_tl_store_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(bm168x_tl_store* other);
  friend void swap(bm168x_tl_store& a, bm168x_tl_store& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_store* New() const final {
    return CreateMaybeMessage<bm168x_tl_store>(NULL);
  }

  bm168x_tl_store* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_store>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_store& from);
  void MergeFrom(const bm168x_tl_store& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_store* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src = 2;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src() const;
  ::bmnet::bm168x_lir::Operand* release_src();
  ::bmnet::bm168x_lir::Operand* mutable_src();
  void set_allocated_src(::bmnet::bm168x_lir::Operand* src);

  // optional bool transposed = 7;
  bool has_transposed() const;
  void clear_transposed();
  static const int kTransposedFieldNumber = 7;
  bool transposed() const;
  void set_transposed(bool value);

  // optional bool result_add = 8;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 8;
  bool result_add() const;
  void set_result_add(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_store)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src();
  void clear_has_src();
  void set_has_transposed();
  void clear_has_transposed();
  void set_has_result_add();
  void clear_has_result_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src_;
  bool transposed_;
  bool result_add_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_lrn_shift : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_lrn_shift) */ {
 public:
  bm168x_tl_lrn_shift();
  virtual ~bm168x_tl_lrn_shift();

  bm168x_tl_lrn_shift(const bm168x_tl_lrn_shift& from);

  inline bm168x_tl_lrn_shift& operator=(const bm168x_tl_lrn_shift& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_lrn_shift(bm168x_tl_lrn_shift&& from) noexcept
    : bm168x_tl_lrn_shift() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_lrn_shift& operator=(bm168x_tl_lrn_shift&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_lrn_shift& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_lrn_shift* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_lrn_shift*>(
               &_bm168x_tl_lrn_shift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(bm168x_tl_lrn_shift* other);
  friend void swap(bm168x_tl_lrn_shift& a, bm168x_tl_lrn_shift& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_lrn_shift* New() const final {
    return CreateMaybeMessage<bm168x_tl_lrn_shift>(NULL);
  }

  bm168x_tl_lrn_shift* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_lrn_shift>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_lrn_shift& from);
  void MergeFrom(const bm168x_tl_lrn_shift& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_lrn_shift* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src = 2;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src() const;
  ::bmnet::bm168x_lir::Operand* release_src();
  ::bmnet::bm168x_lir::Operand* mutable_src();
  void set_allocated_src(::bmnet::bm168x_lir::Operand* src);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_lrn_shift)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src();
  void clear_has_src();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_cw_transpose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_cw_transpose) */ {
 public:
  bm168x_tl_cw_transpose();
  virtual ~bm168x_tl_cw_transpose();

  bm168x_tl_cw_transpose(const bm168x_tl_cw_transpose& from);

  inline bm168x_tl_cw_transpose& operator=(const bm168x_tl_cw_transpose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_cw_transpose(bm168x_tl_cw_transpose&& from) noexcept
    : bm168x_tl_cw_transpose() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_cw_transpose& operator=(bm168x_tl_cw_transpose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_cw_transpose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_cw_transpose* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_cw_transpose*>(
               &_bm168x_tl_cw_transpose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(bm168x_tl_cw_transpose* other);
  friend void swap(bm168x_tl_cw_transpose& a, bm168x_tl_cw_transpose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_cw_transpose* New() const final {
    return CreateMaybeMessage<bm168x_tl_cw_transpose>(NULL);
  }

  bm168x_tl_cw_transpose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_cw_transpose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_cw_transpose& from);
  void MergeFrom(const bm168x_tl_cw_transpose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_cw_transpose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src = 2;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src() const;
  ::bmnet::bm168x_lir::Operand* release_src();
  ::bmnet::bm168x_lir::Operand* mutable_src();
  void set_allocated_src(::bmnet::bm168x_lir::Operand* src);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_cw_transpose)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src();
  void clear_has_src();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_g_copy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_g_copy) */ {
 public:
  bm168x_g_copy();
  virtual ~bm168x_g_copy();

  bm168x_g_copy(const bm168x_g_copy& from);

  inline bm168x_g_copy& operator=(const bm168x_g_copy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_g_copy(bm168x_g_copy&& from) noexcept
    : bm168x_g_copy() {
    *this = ::std::move(from);
  }

  inline bm168x_g_copy& operator=(bm168x_g_copy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_g_copy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_g_copy* internal_default_instance() {
    return reinterpret_cast<const bm168x_g_copy*>(
               &_bm168x_g_copy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(bm168x_g_copy* other);
  friend void swap(bm168x_g_copy& a, bm168x_g_copy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_g_copy* New() const final {
    return CreateMaybeMessage<bm168x_g_copy>(NULL);
  }

  bm168x_g_copy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_g_copy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_g_copy& from);
  void MergeFrom(const bm168x_g_copy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_g_copy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src = 2;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src() const;
  ::bmnet::bm168x_lir::Operand* release_src();
  ::bmnet::bm168x_lir::Operand* mutable_src();
  void set_allocated_src(::bmnet::bm168x_lir::Operand* src);

  // optional bool transposed = 3;
  bool has_transposed() const;
  void clear_transposed();
  static const int kTransposedFieldNumber = 3;
  bool transposed() const;
  void set_transposed(bool value);

  // optional bool result_add = 4;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 4;
  bool result_add() const;
  void set_result_add(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_g_copy)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src();
  void clear_has_src();
  void set_has_transposed();
  void clear_has_transposed();
  void set_has_result_add();
  void clear_has_result_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src_;
  bool transposed_;
  bool result_add_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_copy_stride : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_copy_stride) */ {
 public:
  bm168x_copy_stride();
  virtual ~bm168x_copy_stride();

  bm168x_copy_stride(const bm168x_copy_stride& from);

  inline bm168x_copy_stride& operator=(const bm168x_copy_stride& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_copy_stride(bm168x_copy_stride&& from) noexcept
    : bm168x_copy_stride() {
    *this = ::std::move(from);
  }

  inline bm168x_copy_stride& operator=(bm168x_copy_stride&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_copy_stride& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_copy_stride* internal_default_instance() {
    return reinterpret_cast<const bm168x_copy_stride*>(
               &_bm168x_copy_stride_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(bm168x_copy_stride* other);
  friend void swap(bm168x_copy_stride& a, bm168x_copy_stride& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_copy_stride* New() const final {
    return CreateMaybeMessage<bm168x_copy_stride>(NULL);
  }

  bm168x_copy_stride* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_copy_stride>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_copy_stride& from);
  void MergeFrom(const bm168x_copy_stride& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_copy_stride* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src = 2;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src() const;
  ::bmnet::bm168x_lir::Operand* release_src();
  ::bmnet::bm168x_lir::Operand* mutable_src();
  void set_allocated_src(::bmnet::bm168x_lir::Operand* src);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_copy_stride)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src();
  void clear_has_src();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_copy_gdma : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_copy_gdma) */ {
 public:
  bm168x_copy_gdma();
  virtual ~bm168x_copy_gdma();

  bm168x_copy_gdma(const bm168x_copy_gdma& from);

  inline bm168x_copy_gdma& operator=(const bm168x_copy_gdma& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_copy_gdma(bm168x_copy_gdma&& from) noexcept
    : bm168x_copy_gdma() {
    *this = ::std::move(from);
  }

  inline bm168x_copy_gdma& operator=(bm168x_copy_gdma&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_copy_gdma& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_copy_gdma* internal_default_instance() {
    return reinterpret_cast<const bm168x_copy_gdma*>(
               &_bm168x_copy_gdma_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(bm168x_copy_gdma* other);
  friend void swap(bm168x_copy_gdma& a, bm168x_copy_gdma& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_copy_gdma* New() const final {
    return CreateMaybeMessage<bm168x_copy_gdma>(NULL);
  }

  bm168x_copy_gdma* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_copy_gdma>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_copy_gdma& from);
  void MergeFrom(const bm168x_copy_gdma& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_copy_gdma* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src = 2;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src() const;
  ::bmnet::bm168x_lir::Operand* release_src();
  ::bmnet::bm168x_lir::Operand* mutable_src();
  void set_allocated_src(::bmnet::bm168x_lir::Operand* src);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_copy_gdma)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src();
  void clear_has_src();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_conv : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_conv) */ {
 public:
  bm168x_tl_conv();
  virtual ~bm168x_tl_conv();

  bm168x_tl_conv(const bm168x_tl_conv& from);

  inline bm168x_tl_conv& operator=(const bm168x_tl_conv& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_conv(bm168x_tl_conv&& from) noexcept
    : bm168x_tl_conv() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_conv& operator=(bm168x_tl_conv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_conv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_conv* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_conv*>(
               &_bm168x_tl_conv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(bm168x_tl_conv* other);
  friend void swap(bm168x_tl_conv& a, bm168x_tl_conv& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_conv* New() const final {
    return CreateMaybeMessage<bm168x_tl_conv>(NULL);
  }

  bm168x_tl_conv* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_conv>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_conv& from);
  void MergeFrom(const bm168x_tl_conv& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_conv* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 insert = 5;
  int insert_size() const;
  void clear_insert();
  static const int kInsertFieldNumber = 5;
  ::google::protobuf::uint32 insert(int index) const;
  void set_insert(int index, ::google::protobuf::uint32 value);
  void add_insert(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      insert() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_insert();

  // repeated uint32 dilation = 6;
  int dilation_size() const;
  void clear_dilation();
  static const int kDilationFieldNumber = 6;
  ::google::protobuf::uint32 dilation(int index) const;
  void set_dilation(int index, ::google::protobuf::uint32 value);
  void add_dilation(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dilation() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dilation();

  // repeated uint32 pad = 7;
  int pad_size() const;
  void clear_pad();
  static const int kPadFieldNumber = 7;
  ::google::protobuf::uint32 pad(int index) const;
  void set_pad(int index, ::google::protobuf::uint32 value);
  void add_pad(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 stride = 8;
  int stride_size() const;
  void clear_stride();
  static const int kStrideFieldNumber = 8;
  ::google::protobuf::uint32 stride(int index) const;
  void set_stride(int index, ::google::protobuf::uint32 value);
  void add_stride(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 kernel = 9;
  int kernel_size() const;
  void clear_kernel();
  static const int kKernelFieldNumber = 9;
  ::google::protobuf::uint32 kernel(int index) const;
  void set_kernel(int index, ::google::protobuf::uint32 value);
  void add_kernel(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel();

  // repeated uint32 kstride = 10;
  int kstride_size() const;
  void clear_kstride();
  static const int kKstrideFieldNumber = 10;
  ::google::protobuf::uint32 kstride(int index) const;
  void set_kstride(int index, ::google::protobuf::uint32 value);
  void add_kstride(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kstride() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kstride();

  // optional .bmnet.bm168x_lir.Operand ofmap = 1;
  bool has_ofmap() const;
  void clear_ofmap();
  static const int kOfmapFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_ofmap() const;
  public:
  const ::bmnet::bm168x_lir::Operand& ofmap() const;
  ::bmnet::bm168x_lir::Operand* release_ofmap();
  ::bmnet::bm168x_lir::Operand* mutable_ofmap();
  void set_allocated_ofmap(::bmnet::bm168x_lir::Operand* ofmap);

  // optional .bmnet.bm168x_lir.Operand ifmap = 2;
  bool has_ifmap() const;
  void clear_ifmap();
  static const int kIfmapFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_ifmap() const;
  public:
  const ::bmnet::bm168x_lir::Operand& ifmap() const;
  ::bmnet::bm168x_lir::Operand* release_ifmap();
  ::bmnet::bm168x_lir::Operand* mutable_ifmap();
  void set_allocated_ifmap(::bmnet::bm168x_lir::Operand* ifmap);

  // optional .bmnet.bm168x_lir.Operand weight = 3;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 3;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_weight() const;
  public:
  const ::bmnet::bm168x_lir::Operand& weight() const;
  ::bmnet::bm168x_lir::Operand* release_weight();
  ::bmnet::bm168x_lir::Operand* mutable_weight();
  void set_allocated_weight(::bmnet::bm168x_lir::Operand* weight);

  // optional .bmnet.bm168x_lir.Operand bias = 4;
  bool has_bias() const;
  void clear_bias();
  static const int kBiasFieldNumber = 4;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_bias() const;
  public:
  const ::bmnet::bm168x_lir::Operand& bias() const;
  ::bmnet::bm168x_lir::Operand* release_bias();
  ::bmnet::bm168x_lir::Operand* mutable_bias();
  void set_allocated_bias(::bmnet::bm168x_lir::Operand* bias);

  // optional bool flip = 11;
  bool has_flip() const;
  void clear_flip();
  static const int kFlipFieldNumber = 11;
  bool flip() const;
  void set_flip(bool value);

  // optional bool result_add = 12;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 12;
  bool result_add() const;
  void set_result_add(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_conv)
 private:
  void set_has_ofmap();
  void clear_has_ofmap();
  void set_has_ifmap();
  void clear_has_ifmap();
  void set_has_weight();
  void clear_has_weight();
  void set_has_bias();
  void clear_has_bias();
  void set_has_flip();
  void clear_has_flip();
  void set_has_result_add();
  void clear_has_result_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > insert_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dilation_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kstride_;
  ::bmnet::bm168x_lir::Operand* ofmap_;
  ::bmnet::bm168x_lir::Operand* ifmap_;
  ::bmnet::bm168x_lir::Operand* weight_;
  ::bmnet::bm168x_lir::Operand* bias_;
  bool flip_;
  bool result_add_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_pooling : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_pooling) */ {
 public:
  bm168x_tl_pooling();
  virtual ~bm168x_tl_pooling();

  bm168x_tl_pooling(const bm168x_tl_pooling& from);

  inline bm168x_tl_pooling& operator=(const bm168x_tl_pooling& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_pooling(bm168x_tl_pooling&& from) noexcept
    : bm168x_tl_pooling() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_pooling& operator=(bm168x_tl_pooling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_pooling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_pooling* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_pooling*>(
               &_bm168x_tl_pooling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(bm168x_tl_pooling* other);
  friend void swap(bm168x_tl_pooling& a, bm168x_tl_pooling& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_pooling* New() const final {
    return CreateMaybeMessage<bm168x_tl_pooling>(NULL);
  }

  bm168x_tl_pooling* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_pooling>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_pooling& from);
  void MergeFrom(const bm168x_tl_pooling& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_pooling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 insert = 4;
  int insert_size() const;
  void clear_insert();
  static const int kInsertFieldNumber = 4;
  ::google::protobuf::uint32 insert(int index) const;
  void set_insert(int index, ::google::protobuf::uint32 value);
  void add_insert(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      insert() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_insert();

  // repeated uint32 pad = 5;
  int pad_size() const;
  void clear_pad();
  static const int kPadFieldNumber = 5;
  ::google::protobuf::uint32 pad(int index) const;
  void set_pad(int index, ::google::protobuf::uint32 value);
  void add_pad(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 stride = 6;
  int stride_size() const;
  void clear_stride();
  static const int kStrideFieldNumber = 6;
  ::google::protobuf::uint32 stride(int index) const;
  void set_stride(int index, ::google::protobuf::uint32 value);
  void add_stride(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 kernel = 7;
  int kernel_size() const;
  void clear_kernel();
  static const int kKernelFieldNumber = 7;
  ::google::protobuf::uint32 kernel(int index) const;
  void set_kernel(int index, ::google::protobuf::uint32 value);
  void add_kernel(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel();

  // optional .bmnet.bm168x_lir.Operand ofmap = 1;
  bool has_ofmap() const;
  void clear_ofmap();
  static const int kOfmapFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_ofmap() const;
  public:
  const ::bmnet::bm168x_lir::Operand& ofmap() const;
  ::bmnet::bm168x_lir::Operand* release_ofmap();
  ::bmnet::bm168x_lir::Operand* mutable_ofmap();
  void set_allocated_ofmap(::bmnet::bm168x_lir::Operand* ofmap);

  // optional .bmnet.bm168x_lir.Operand ifmap = 2;
  bool has_ifmap() const;
  void clear_ifmap();
  static const int kIfmapFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_ifmap() const;
  public:
  const ::bmnet::bm168x_lir::Operand& ifmap() const;
  ::bmnet::bm168x_lir::Operand* release_ifmap();
  ::bmnet::bm168x_lir::Operand* mutable_ifmap();
  void set_allocated_ifmap(::bmnet::bm168x_lir::Operand* ifmap);

  // optional bool avg_pooling = 3;
  bool has_avg_pooling() const;
  void clear_avg_pooling();
  static const int kAvgPoolingFieldNumber = 3;
  bool avg_pooling() const;
  void set_avg_pooling(bool value);

  // optional float avg_const = 8;
  bool has_avg_const() const;
  void clear_avg_const();
  static const int kAvgConstFieldNumber = 8;
  float avg_const() const;
  void set_avg_const(float value);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_pooling)
 private:
  void set_has_ofmap();
  void clear_has_ofmap();
  void set_has_ifmap();
  void clear_has_ifmap();
  void set_has_avg_pooling();
  void clear_has_avg_pooling();
  void set_has_avg_const();
  void clear_has_avg_const();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > insert_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_;
  ::bmnet::bm168x_lir::Operand* ofmap_;
  ::bmnet::bm168x_lir::Operand* ifmap_;
  bool avg_pooling_;
  float avg_const_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_arithmetic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_arithmetic) */ {
 public:
  bm168x_tl_arithmetic();
  virtual ~bm168x_tl_arithmetic();

  bm168x_tl_arithmetic(const bm168x_tl_arithmetic& from);

  inline bm168x_tl_arithmetic& operator=(const bm168x_tl_arithmetic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_arithmetic(bm168x_tl_arithmetic&& from) noexcept
    : bm168x_tl_arithmetic() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_arithmetic& operator=(bm168x_tl_arithmetic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_arithmetic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_arithmetic* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_arithmetic*>(
               &_bm168x_tl_arithmetic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(bm168x_tl_arithmetic* other);
  friend void swap(bm168x_tl_arithmetic& a, bm168x_tl_arithmetic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_arithmetic* New() const final {
    return CreateMaybeMessage<bm168x_tl_arithmetic>(NULL);
  }

  bm168x_tl_arithmetic* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_arithmetic>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_arithmetic& from);
  void MergeFrom(const bm168x_tl_arithmetic& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_arithmetic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src0 = 2;
  bool has_src0() const;
  void clear_src0();
  static const int kSrc0FieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src0() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src0() const;
  ::bmnet::bm168x_lir::Operand* release_src0();
  ::bmnet::bm168x_lir::Operand* mutable_src0();
  void set_allocated_src0(::bmnet::bm168x_lir::Operand* src0);

  // optional .bmnet.bm168x_lir.Operand src1 = 3;
  bool has_src1() const;
  void clear_src1();
  static const int kSrc1FieldNumber = 3;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src1() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src1() const;
  ::bmnet::bm168x_lir::Operand* release_src1();
  ::bmnet::bm168x_lir::Operand* mutable_src1();
  void set_allocated_src1(::bmnet::bm168x_lir::Operand* src1);

  // optional .bmnet.bm168x_lir.ArithmeticOpCode code = 4;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  ::bmnet::bm168x_lir::ArithmeticOpCode code() const;
  void set_code(::bmnet::bm168x_lir::ArithmeticOpCode value);

  // optional bool result_add = 5;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 5;
  bool result_add() const;
  void set_result_add(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_arithmetic)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src0();
  void clear_has_src0();
  void set_has_src1();
  void clear_has_src1();
  void set_has_code();
  void clear_has_code();
  void set_has_result_add();
  void clear_has_result_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src0_;
  ::bmnet::bm168x_lir::Operand* src1_;
  int code_;
  bool result_add_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_md_scalar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_md_scalar) */ {
 public:
  bm168x_tl_md_scalar();
  virtual ~bm168x_tl_md_scalar();

  bm168x_tl_md_scalar(const bm168x_tl_md_scalar& from);

  inline bm168x_tl_md_scalar& operator=(const bm168x_tl_md_scalar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_md_scalar(bm168x_tl_md_scalar&& from) noexcept
    : bm168x_tl_md_scalar() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_md_scalar& operator=(bm168x_tl_md_scalar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_md_scalar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_md_scalar* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_md_scalar*>(
               &_bm168x_tl_md_scalar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(bm168x_tl_md_scalar* other);
  friend void swap(bm168x_tl_md_scalar& a, bm168x_tl_md_scalar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_md_scalar* New() const final {
    return CreateMaybeMessage<bm168x_tl_md_scalar>(NULL);
  }

  bm168x_tl_md_scalar* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_md_scalar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_md_scalar& from);
  void MergeFrom(const bm168x_tl_md_scalar& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_md_scalar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src0 = 2;
  bool has_src0() const;
  void clear_src0();
  static const int kSrc0FieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src0() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src0() const;
  ::bmnet::bm168x_lir::Operand* release_src0();
  ::bmnet::bm168x_lir::Operand* mutable_src0();
  void set_allocated_src0(::bmnet::bm168x_lir::Operand* src0);

  // optional .bmnet.bm168x_lir.Operand src1 = 3;
  bool has_src1() const;
  void clear_src1();
  static const int kSrc1FieldNumber = 3;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src1() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src1() const;
  ::bmnet::bm168x_lir::Operand* release_src1();
  ::bmnet::bm168x_lir::Operand* mutable_src1();
  void set_allocated_src1(::bmnet::bm168x_lir::Operand* src1);

  // optional .bmnet.bm168x_lir.ArithmeticOpCode code = 4;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  ::bmnet::bm168x_lir::ArithmeticOpCode code() const;
  void set_code(::bmnet::bm168x_lir::ArithmeticOpCode value);

  // optional bool result_add = 5;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 5;
  bool result_add() const;
  void set_result_add(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_md_scalar)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src0();
  void clear_has_src0();
  void set_has_src1();
  void clear_has_src1();
  void set_has_code();
  void clear_has_code();
  void set_has_result_add();
  void clear_has_result_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src0_;
  ::bmnet::bm168x_lir::Operand* src1_;
  int code_;
  bool result_add_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_fill : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_fill) */ {
 public:
  bm168x_tl_fill();
  virtual ~bm168x_tl_fill();

  bm168x_tl_fill(const bm168x_tl_fill& from);

  inline bm168x_tl_fill& operator=(const bm168x_tl_fill& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_fill(bm168x_tl_fill&& from) noexcept
    : bm168x_tl_fill() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_fill& operator=(bm168x_tl_fill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_fill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_fill* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_fill*>(
               &_bm168x_tl_fill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(bm168x_tl_fill* other);
  friend void swap(bm168x_tl_fill& a, bm168x_tl_fill& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_fill* New() const final {
    return CreateMaybeMessage<bm168x_tl_fill>(NULL);
  }

  bm168x_tl_fill* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_fill>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_fill& from);
  void MergeFrom(const bm168x_tl_fill& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_fill* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand r = 1;
  bool has_r() const;
  void clear_r();
  static const int kRFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_r() const;
  public:
  const ::bmnet::bm168x_lir::Operand& r() const;
  ::bmnet::bm168x_lir::Operand* release_r();
  ::bmnet::bm168x_lir::Operand* mutable_r();
  void set_allocated_r(::bmnet::bm168x_lir::Operand* r);

  // optional .bmnet.bm168x_lir.Operand a = 2;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_a() const;
  public:
  const ::bmnet::bm168x_lir::Operand& a() const;
  ::bmnet::bm168x_lir::Operand* release_a();
  ::bmnet::bm168x_lir::Operand* mutable_a();
  void set_allocated_a(::bmnet::bm168x_lir::Operand* a);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_fill)
 private:
  void set_has_r();
  void clear_has_r();
  void set_has_a();
  void clear_has_a();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* r_;
  ::bmnet::bm168x_lir::Operand* a_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_clear : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_clear) */ {
 public:
  bm168x_tl_clear();
  virtual ~bm168x_tl_clear();

  bm168x_tl_clear(const bm168x_tl_clear& from);

  inline bm168x_tl_clear& operator=(const bm168x_tl_clear& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_clear(bm168x_tl_clear&& from) noexcept
    : bm168x_tl_clear() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_clear& operator=(bm168x_tl_clear&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_clear& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_clear* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_clear*>(
               &_bm168x_tl_clear_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(bm168x_tl_clear* other);
  friend void swap(bm168x_tl_clear& a, bm168x_tl_clear& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_clear* New() const final {
    return CreateMaybeMessage<bm168x_tl_clear>(NULL);
  }

  bm168x_tl_clear* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_clear>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_clear& from);
  void MergeFrom(const bm168x_tl_clear& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_clear* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand r = 1;
  bool has_r() const;
  void clear_r();
  static const int kRFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_r() const;
  public:
  const ::bmnet::bm168x_lir::Operand& r() const;
  ::bmnet::bm168x_lir::Operand* release_r();
  ::bmnet::bm168x_lir::Operand* mutable_r();
  void set_allocated_r(::bmnet::bm168x_lir::Operand* r);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_clear)
 private:
  void set_has_r();
  void clear_has_r();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* r_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_sfu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_sfu) */ {
 public:
  bm168x_tl_sfu();
  virtual ~bm168x_tl_sfu();

  bm168x_tl_sfu(const bm168x_tl_sfu& from);

  inline bm168x_tl_sfu& operator=(const bm168x_tl_sfu& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_sfu(bm168x_tl_sfu&& from) noexcept
    : bm168x_tl_sfu() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_sfu& operator=(bm168x_tl_sfu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_sfu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_sfu* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_sfu*>(
               &_bm168x_tl_sfu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(bm168x_tl_sfu* other);
  friend void swap(bm168x_tl_sfu& a, bm168x_tl_sfu& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_sfu* New() const final {
    return CreateMaybeMessage<bm168x_tl_sfu>(NULL);
  }

  bm168x_tl_sfu* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_sfu>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_sfu& from);
  void MergeFrom(const bm168x_tl_sfu& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_sfu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src = 2;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src() const;
  ::bmnet::bm168x_lir::Operand* release_src();
  ::bmnet::bm168x_lir::Operand* mutable_src();
  void set_allocated_src(::bmnet::bm168x_lir::Operand* src);

  // optional .bmnet.bm168x_lir.SfuOpCode code = 3;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  ::bmnet::bm168x_lir::SfuOpCode code() const;
  void set_code(::bmnet::bm168x_lir::SfuOpCode value);

  // optional float a = 4;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 4;
  float a() const;
  void set_a(float value);

  // optional int32 n = 5;
  bool has_n() const;
  void clear_n();
  static const int kNFieldNumber = 5;
  ::google::protobuf::int32 n() const;
  void set_n(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_sfu)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src();
  void clear_has_src();
  void set_has_code();
  void clear_has_code();
  void set_has_a();
  void clear_has_a();
  void set_has_n();
  void clear_has_n();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src_;
  int code_;
  float a_;
  ::google::protobuf::int32 n_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_mac : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_mac) */ {
 public:
  bm168x_tl_mac();
  virtual ~bm168x_tl_mac();

  bm168x_tl_mac(const bm168x_tl_mac& from);

  inline bm168x_tl_mac& operator=(const bm168x_tl_mac& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_mac(bm168x_tl_mac&& from) noexcept
    : bm168x_tl_mac() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_mac& operator=(bm168x_tl_mac&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_mac& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_mac* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_mac*>(
               &_bm168x_tl_mac_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(bm168x_tl_mac* other);
  friend void swap(bm168x_tl_mac& a, bm168x_tl_mac& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_mac* New() const final {
    return CreateMaybeMessage<bm168x_tl_mac>(NULL);
  }

  bm168x_tl_mac* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_mac>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_mac& from);
  void MergeFrom(const bm168x_tl_mac& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_mac* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src0 = 2;
  bool has_src0() const;
  void clear_src0();
  static const int kSrc0FieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src0() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src0() const;
  ::bmnet::bm168x_lir::Operand* release_src0();
  ::bmnet::bm168x_lir::Operand* mutable_src0();
  void set_allocated_src0(::bmnet::bm168x_lir::Operand* src0);

  // optional .bmnet.bm168x_lir.Operand src1 = 3;
  bool has_src1() const;
  void clear_src1();
  static const int kSrc1FieldNumber = 3;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src1() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src1() const;
  ::bmnet::bm168x_lir::Operand* release_src1();
  ::bmnet::bm168x_lir::Operand* mutable_src1();
  void set_allocated_src1(::bmnet::bm168x_lir::Operand* src1);

  // optional .bmnet.bm168x_lir.Operand src2 = 4;
  bool has_src2() const;
  void clear_src2();
  static const int kSrc2FieldNumber = 4;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src2() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src2() const;
  ::bmnet::bm168x_lir::Operand* release_src2();
  ::bmnet::bm168x_lir::Operand* mutable_src2();
  void set_allocated_src2(::bmnet::bm168x_lir::Operand* src2);

  // optional bool result_add = 5;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 5;
  bool result_add() const;
  void set_result_add(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_mac)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src0();
  void clear_has_src0();
  void set_has_src1();
  void clear_has_src1();
  void set_has_src2();
  void clear_has_src2();
  void set_has_result_add();
  void clear_has_result_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src0_;
  ::bmnet::bm168x_lir::Operand* src1_;
  ::bmnet::bm168x_lir::Operand* src2_;
  bool result_add_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_add_square : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_add_square) */ {
 public:
  bm168x_tl_add_square();
  virtual ~bm168x_tl_add_square();

  bm168x_tl_add_square(const bm168x_tl_add_square& from);

  inline bm168x_tl_add_square& operator=(const bm168x_tl_add_square& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_add_square(bm168x_tl_add_square&& from) noexcept
    : bm168x_tl_add_square() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_add_square& operator=(bm168x_tl_add_square&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_add_square& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_add_square* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_add_square*>(
               &_bm168x_tl_add_square_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(bm168x_tl_add_square* other);
  friend void swap(bm168x_tl_add_square& a, bm168x_tl_add_square& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_add_square* New() const final {
    return CreateMaybeMessage<bm168x_tl_add_square>(NULL);
  }

  bm168x_tl_add_square* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_add_square>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_add_square& from);
  void MergeFrom(const bm168x_tl_add_square& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_add_square* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand r = 1;
  bool has_r() const;
  void clear_r();
  static const int kRFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_r() const;
  public:
  const ::bmnet::bm168x_lir::Operand& r() const;
  ::bmnet::bm168x_lir::Operand* release_r();
  ::bmnet::bm168x_lir::Operand* mutable_r();
  void set_allocated_r(::bmnet::bm168x_lir::Operand* r);

  // optional .bmnet.bm168x_lir.Operand a = 2;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_a() const;
  public:
  const ::bmnet::bm168x_lir::Operand& a() const;
  ::bmnet::bm168x_lir::Operand* release_a();
  ::bmnet::bm168x_lir::Operand* mutable_a();
  void set_allocated_a(::bmnet::bm168x_lir::Operand* a);

  // optional .bmnet.bm168x_lir.Operand b = 3;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 3;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_b() const;
  public:
  const ::bmnet::bm168x_lir::Operand& b() const;
  ::bmnet::bm168x_lir::Operand* release_b();
  ::bmnet::bm168x_lir::Operand* mutable_b();
  void set_allocated_b(::bmnet::bm168x_lir::Operand* b);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_add_square)
 private:
  void set_has_r();
  void clear_has_r();
  void set_has_a();
  void clear_has_a();
  void set_has_b();
  void clear_has_b();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* r_;
  ::bmnet::bm168x_lir::Operand* a_;
  ::bmnet::bm168x_lir::Operand* b_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_sub_square : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_sub_square) */ {
 public:
  bm168x_tl_sub_square();
  virtual ~bm168x_tl_sub_square();

  bm168x_tl_sub_square(const bm168x_tl_sub_square& from);

  inline bm168x_tl_sub_square& operator=(const bm168x_tl_sub_square& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_sub_square(bm168x_tl_sub_square&& from) noexcept
    : bm168x_tl_sub_square() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_sub_square& operator=(bm168x_tl_sub_square&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_sub_square& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_sub_square* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_sub_square*>(
               &_bm168x_tl_sub_square_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(bm168x_tl_sub_square* other);
  friend void swap(bm168x_tl_sub_square& a, bm168x_tl_sub_square& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_sub_square* New() const final {
    return CreateMaybeMessage<bm168x_tl_sub_square>(NULL);
  }

  bm168x_tl_sub_square* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_sub_square>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_sub_square& from);
  void MergeFrom(const bm168x_tl_sub_square& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_sub_square* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand r = 1;
  bool has_r() const;
  void clear_r();
  static const int kRFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_r() const;
  public:
  const ::bmnet::bm168x_lir::Operand& r() const;
  ::bmnet::bm168x_lir::Operand* release_r();
  ::bmnet::bm168x_lir::Operand* mutable_r();
  void set_allocated_r(::bmnet::bm168x_lir::Operand* r);

  // optional .bmnet.bm168x_lir.Operand a = 2;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_a() const;
  public:
  const ::bmnet::bm168x_lir::Operand& a() const;
  ::bmnet::bm168x_lir::Operand* release_a();
  ::bmnet::bm168x_lir::Operand* mutable_a();
  void set_allocated_a(::bmnet::bm168x_lir::Operand* a);

  // optional .bmnet.bm168x_lir.Operand b = 3;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 3;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_b() const;
  public:
  const ::bmnet::bm168x_lir::Operand& b() const;
  ::bmnet::bm168x_lir::Operand* release_b();
  ::bmnet::bm168x_lir::Operand* mutable_b();
  void set_allocated_b(::bmnet::bm168x_lir::Operand* b);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_sub_square)
 private:
  void set_has_r();
  void clear_has_r();
  void set_has_a();
  void clear_has_a();
  void set_has_b();
  void clear_has_b();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* r_;
  ::bmnet::bm168x_lir::Operand* a_;
  ::bmnet::bm168x_lir::Operand* b_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_max : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_max) */ {
 public:
  bm168x_tl_max();
  virtual ~bm168x_tl_max();

  bm168x_tl_max(const bm168x_tl_max& from);

  inline bm168x_tl_max& operator=(const bm168x_tl_max& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_max(bm168x_tl_max&& from) noexcept
    : bm168x_tl_max() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_max& operator=(bm168x_tl_max&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_max& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_max* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_max*>(
               &_bm168x_tl_max_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(bm168x_tl_max* other);
  friend void swap(bm168x_tl_max& a, bm168x_tl_max& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_max* New() const final {
    return CreateMaybeMessage<bm168x_tl_max>(NULL);
  }

  bm168x_tl_max* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_max>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_max& from);
  void MergeFrom(const bm168x_tl_max& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_max* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src0 = 2;
  bool has_src0() const;
  void clear_src0();
  static const int kSrc0FieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src0() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src0() const;
  ::bmnet::bm168x_lir::Operand* release_src0();
  ::bmnet::bm168x_lir::Operand* mutable_src0();
  void set_allocated_src0(::bmnet::bm168x_lir::Operand* src0);

  // optional .bmnet.bm168x_lir.Operand src1 = 3;
  bool has_src1() const;
  void clear_src1();
  static const int kSrc1FieldNumber = 3;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src1() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src1() const;
  ::bmnet::bm168x_lir::Operand* release_src1();
  ::bmnet::bm168x_lir::Operand* mutable_src1();
  void set_allocated_src1(::bmnet::bm168x_lir::Operand* src1);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_max)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src0();
  void clear_has_src0();
  void set_has_src1();
  void clear_has_src1();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src0_;
  ::bmnet::bm168x_lir::Operand* src1_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_cmp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_cmp) */ {
 public:
  bm168x_tl_cmp();
  virtual ~bm168x_tl_cmp();

  bm168x_tl_cmp(const bm168x_tl_cmp& from);

  inline bm168x_tl_cmp& operator=(const bm168x_tl_cmp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_cmp(bm168x_tl_cmp&& from) noexcept
    : bm168x_tl_cmp() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_cmp& operator=(bm168x_tl_cmp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_cmp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_cmp* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_cmp*>(
               &_bm168x_tl_cmp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(bm168x_tl_cmp* other);
  friend void swap(bm168x_tl_cmp& a, bm168x_tl_cmp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_cmp* New() const final {
    return CreateMaybeMessage<bm168x_tl_cmp>(NULL);
  }

  bm168x_tl_cmp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_cmp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_cmp& from);
  void MergeFrom(const bm168x_tl_cmp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_cmp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst0 = 1;
  bool has_dst0() const;
  void clear_dst0();
  static const int kDst0FieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst0() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst0() const;
  ::bmnet::bm168x_lir::Operand* release_dst0();
  ::bmnet::bm168x_lir::Operand* mutable_dst0();
  void set_allocated_dst0(::bmnet::bm168x_lir::Operand* dst0);

  // optional .bmnet.bm168x_lir.Operand dst1 = 2;
  bool has_dst1() const;
  void clear_dst1();
  static const int kDst1FieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst1() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst1() const;
  ::bmnet::bm168x_lir::Operand* release_dst1();
  ::bmnet::bm168x_lir::Operand* mutable_dst1();
  void set_allocated_dst1(::bmnet::bm168x_lir::Operand* dst1);

  // optional .bmnet.bm168x_lir.Operand src0 = 3;
  bool has_src0() const;
  void clear_src0();
  static const int kSrc0FieldNumber = 3;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src0() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src0() const;
  ::bmnet::bm168x_lir::Operand* release_src0();
  ::bmnet::bm168x_lir::Operand* mutable_src0();
  void set_allocated_src0(::bmnet::bm168x_lir::Operand* src0);

  // optional .bmnet.bm168x_lir.Operand src1 = 4;
  bool has_src1() const;
  void clear_src1();
  static const int kSrc1FieldNumber = 4;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src1() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src1() const;
  ::bmnet::bm168x_lir::Operand* release_src1();
  ::bmnet::bm168x_lir::Operand* mutable_src1();
  void set_allocated_src1(::bmnet::bm168x_lir::Operand* src1);

  // optional .bmnet.bm168x_lir.Operand src2 = 5;
  bool has_src2() const;
  void clear_src2();
  static const int kSrc2FieldNumber = 5;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src2() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src2() const;
  ::bmnet::bm168x_lir::Operand* release_src2();
  ::bmnet::bm168x_lir::Operand* mutable_src2();
  void set_allocated_src2(::bmnet::bm168x_lir::Operand* src2);

  // optional .bmnet.bm168x_lir.Operand src3 = 6;
  bool has_src3() const;
  void clear_src3();
  static const int kSrc3FieldNumber = 6;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src3() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src3() const;
  ::bmnet::bm168x_lir::Operand* release_src3();
  ::bmnet::bm168x_lir::Operand* mutable_src3();
  void set_allocated_src3(::bmnet::bm168x_lir::Operand* src3);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_cmp)
 private:
  void set_has_dst0();
  void clear_has_dst0();
  void set_has_dst1();
  void clear_has_dst1();
  void set_has_src0();
  void clear_has_src0();
  void set_has_src1();
  void clear_has_src1();
  void set_has_src2();
  void clear_has_src2();
  void set_has_src3();
  void clear_has_src3();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst0_;
  ::bmnet::bm168x_lir::Operand* dst1_;
  ::bmnet::bm168x_lir::Operand* src0_;
  ::bmnet::bm168x_lir::Operand* src1_;
  ::bmnet::bm168x_lir::Operand* src2_;
  ::bmnet::bm168x_lir::Operand* src3_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_sum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_sum) */ {
 public:
  bm168x_tl_sum();
  virtual ~bm168x_tl_sum();

  bm168x_tl_sum(const bm168x_tl_sum& from);

  inline bm168x_tl_sum& operator=(const bm168x_tl_sum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_sum(bm168x_tl_sum&& from) noexcept
    : bm168x_tl_sum() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_sum& operator=(bm168x_tl_sum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_sum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_sum* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_sum*>(
               &_bm168x_tl_sum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(bm168x_tl_sum* other);
  friend void swap(bm168x_tl_sum& a, bm168x_tl_sum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_sum* New() const final {
    return CreateMaybeMessage<bm168x_tl_sum>(NULL);
  }

  bm168x_tl_sum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_sum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_sum& from);
  void MergeFrom(const bm168x_tl_sum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_sum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src = 2;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src() const;
  ::bmnet::bm168x_lir::Operand* release_src();
  ::bmnet::bm168x_lir::Operand* mutable_src();
  void set_allocated_src(::bmnet::bm168x_lir::Operand* src);

  // optional bool result_add = 3;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 3;
  bool result_add() const;
  void set_result_add(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_sum)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src();
  void clear_has_src();
  void set_has_result_add();
  void clear_has_result_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src_;
  bool result_add_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_img_sum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_img_sum) */ {
 public:
  bm168x_tl_img_sum();
  virtual ~bm168x_tl_img_sum();

  bm168x_tl_img_sum(const bm168x_tl_img_sum& from);

  inline bm168x_tl_img_sum& operator=(const bm168x_tl_img_sum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_img_sum(bm168x_tl_img_sum&& from) noexcept
    : bm168x_tl_img_sum() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_img_sum& operator=(bm168x_tl_img_sum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_img_sum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_img_sum* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_img_sum*>(
               &_bm168x_tl_img_sum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(bm168x_tl_img_sum* other);
  friend void swap(bm168x_tl_img_sum& a, bm168x_tl_img_sum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_img_sum* New() const final {
    return CreateMaybeMessage<bm168x_tl_img_sum>(NULL);
  }

  bm168x_tl_img_sum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_img_sum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_img_sum& from);
  void MergeFrom(const bm168x_tl_img_sum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_img_sum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src = 2;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src() const;
  ::bmnet::bm168x_lir::Operand* release_src();
  ::bmnet::bm168x_lir::Operand* mutable_src();
  void set_allocated_src(::bmnet::bm168x_lir::Operand* src);

  // optional bool result_add = 3;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 3;
  bool result_add() const;
  void set_result_add(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_img_sum)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src();
  void clear_has_src();
  void set_has_result_add();
  void clear_has_result_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src_;
  bool result_add_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bm168x_tl_matrix_mac : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm168x_lir.bm168x_tl_matrix_mac) */ {
 public:
  bm168x_tl_matrix_mac();
  virtual ~bm168x_tl_matrix_mac();

  bm168x_tl_matrix_mac(const bm168x_tl_matrix_mac& from);

  inline bm168x_tl_matrix_mac& operator=(const bm168x_tl_matrix_mac& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bm168x_tl_matrix_mac(bm168x_tl_matrix_mac&& from) noexcept
    : bm168x_tl_matrix_mac() {
    *this = ::std::move(from);
  }

  inline bm168x_tl_matrix_mac& operator=(bm168x_tl_matrix_mac&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bm168x_tl_matrix_mac& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bm168x_tl_matrix_mac* internal_default_instance() {
    return reinterpret_cast<const bm168x_tl_matrix_mac*>(
               &_bm168x_tl_matrix_mac_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(bm168x_tl_matrix_mac* other);
  friend void swap(bm168x_tl_matrix_mac& a, bm168x_tl_matrix_mac& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bm168x_tl_matrix_mac* New() const final {
    return CreateMaybeMessage<bm168x_tl_matrix_mac>(NULL);
  }

  bm168x_tl_matrix_mac* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bm168x_tl_matrix_mac>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bm168x_tl_matrix_mac& from);
  void MergeFrom(const bm168x_tl_matrix_mac& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bm168x_tl_matrix_mac* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.bm168x_lir.Operand dst = 1;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 1;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_dst() const;
  public:
  const ::bmnet::bm168x_lir::Operand& dst() const;
  ::bmnet::bm168x_lir::Operand* release_dst();
  ::bmnet::bm168x_lir::Operand* mutable_dst();
  void set_allocated_dst(::bmnet::bm168x_lir::Operand* dst);

  // optional .bmnet.bm168x_lir.Operand src0 = 2;
  bool has_src0() const;
  void clear_src0();
  static const int kSrc0FieldNumber = 2;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src0() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src0() const;
  ::bmnet::bm168x_lir::Operand* release_src0();
  ::bmnet::bm168x_lir::Operand* mutable_src0();
  void set_allocated_src0(::bmnet::bm168x_lir::Operand* src0);

  // optional .bmnet.bm168x_lir.Operand src1 = 3;
  bool has_src1() const;
  void clear_src1();
  static const int kSrc1FieldNumber = 3;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src1() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src1() const;
  ::bmnet::bm168x_lir::Operand* release_src1();
  ::bmnet::bm168x_lir::Operand* mutable_src1();
  void set_allocated_src1(::bmnet::bm168x_lir::Operand* src1);

  // optional .bmnet.bm168x_lir.Operand src2 = 4;
  bool has_src2() const;
  void clear_src2();
  static const int kSrc2FieldNumber = 4;
  private:
  const ::bmnet::bm168x_lir::Operand& _internal_src2() const;
  public:
  const ::bmnet::bm168x_lir::Operand& src2() const;
  ::bmnet::bm168x_lir::Operand* release_src2();
  ::bmnet::bm168x_lir::Operand* mutable_src2();
  void set_allocated_src2(::bmnet::bm168x_lir::Operand* src2);

  // optional bool src0_transposed = 5;
  bool has_src0_transposed() const;
  void clear_src0_transposed();
  static const int kSrc0TransposedFieldNumber = 5;
  bool src0_transposed() const;
  void set_src0_transposed(bool value);

  // optional bool result_add = 6;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 6;
  bool result_add() const;
  void set_result_add(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm168x_lir.bm168x_tl_matrix_mac)
 private:
  void set_has_dst();
  void clear_has_dst();
  void set_has_src0();
  void clear_has_src0();
  void set_has_src1();
  void clear_has_src1();
  void set_has_src2();
  void clear_has_src2();
  void set_has_src0_transposed();
  void clear_has_src0_transposed();
  void set_has_result_add();
  void clear_has_result_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::bmnet::bm168x_lir::Operand* dst_;
  ::bmnet::bm168x_lir::Operand* src0_;
  ::bmnet::bm168x_lir::Operand* src1_;
  ::bmnet::bm168x_lir::Operand* src2_;
  bool src0_transposed_;
  bool result_add_;
  friend struct ::protobuf_bmnet_2fbm168x_5flir_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LirArray

// repeated .bmnet.bm168x_lir.Lir lir = 1;
inline int LirArray::lir_size() const {
  return lir_.size();
}
inline void LirArray::clear_lir() {
  lir_.Clear();
}
inline ::bmnet::bm168x_lir::Lir* LirArray::mutable_lir(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.LirArray.lir)
  return lir_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bmnet::bm168x_lir::Lir >*
LirArray::mutable_lir() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm168x_lir.LirArray.lir)
  return &lir_;
}
inline const ::bmnet::bm168x_lir::Lir& LirArray::lir(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.LirArray.lir)
  return lir_.Get(index);
}
inline ::bmnet::bm168x_lir::Lir* LirArray::add_lir() {
  // @@protoc_insertion_point(field_add:bmnet.bm168x_lir.LirArray.lir)
  return lir_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bmnet::bm168x_lir::Lir >&
LirArray::lir() const {
  // @@protoc_insertion_point(field_list:bmnet.bm168x_lir.LirArray.lir)
  return lir_;
}

// -------------------------------------------------------------------

// Operand

// optional string name = 1;
inline bool Operand::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operand::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Operand::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Operand::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Operand::name() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Operand.name)
  return name_.GetNoArena();
}
inline void Operand::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.Operand.name)
}
#if LANG_CXX11
inline void Operand::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bmnet.bm168x_lir.Operand.name)
}
#endif
inline void Operand::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bmnet.bm168x_lir.Operand.name)
}
inline void Operand::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bmnet.bm168x_lir.Operand.name)
}
inline ::std::string* Operand::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Operand.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operand::release_name() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Operand.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operand::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Operand.name)
}

// optional .bmnet.bm168x_lir.Operand.OperandType type = 2;
inline bool Operand::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Operand::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Operand::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Operand::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::bmnet::bm168x_lir::Operand_OperandType Operand::type() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Operand.type)
  return static_cast< ::bmnet::bm168x_lir::Operand_OperandType >(type_);
}
inline void Operand::set_type(::bmnet::bm168x_lir::Operand_OperandType value) {
  assert(::bmnet::bm168x_lir::Operand_OperandType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.Operand.type)
}

// repeated uint32 dims = 3;
inline int Operand::dims_size() const {
  return dims_.size();
}
inline void Operand::clear_dims() {
  dims_.Clear();
}
inline ::google::protobuf::uint32 Operand::dims(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Operand.dims)
  return dims_.Get(index);
}
inline void Operand::set_dims(int index, ::google::protobuf::uint32 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.Operand.dims)
}
inline void Operand::add_dims(::google::protobuf::uint32 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm168x_lir.Operand.dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Operand::dims() const {
  // @@protoc_insertion_point(field_list:bmnet.bm168x_lir.Operand.dims)
  return dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Operand::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm168x_lir.Operand.dims)
  return &dims_;
}

// repeated uint64 stride = 4;
inline int Operand::stride_size() const {
  return stride_.size();
}
inline void Operand::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint64 Operand::stride(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Operand.stride)
  return stride_.Get(index);
}
inline void Operand::set_stride(int index, ::google::protobuf::uint64 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.Operand.stride)
}
inline void Operand::add_stride(::google::protobuf::uint64 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm168x_lir.Operand.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Operand::stride() const {
  // @@protoc_insertion_point(field_list:bmnet.bm168x_lir.Operand.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Operand::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm168x_lir.Operand.stride)
  return &stride_;
}

// optional uint32 laddr = 5;
inline bool Operand::has_laddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Operand::set_has_laddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Operand::clear_has_laddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Operand::clear_laddr() {
  laddr_ = 0u;
  clear_has_laddr();
}
inline ::google::protobuf::uint32 Operand::laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Operand.laddr)
  return laddr_;
}
inline void Operand::set_laddr(::google::protobuf::uint32 value) {
  set_has_laddr();
  laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.Operand.laddr)
}

// optional uint64 gaddr = 6;
inline bool Operand::has_gaddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Operand::set_has_gaddr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Operand::clear_has_gaddr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Operand::clear_gaddr() {
  gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_gaddr();
}
inline ::google::protobuf::uint64 Operand::gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Operand.gaddr)
  return gaddr_;
}
inline void Operand::set_gaddr(::google::protobuf::uint64 value) {
  set_has_gaddr();
  gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.Operand.gaddr)
}

// optional float fval = 7;
inline bool Operand::has_fval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Operand::set_has_fval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Operand::clear_has_fval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Operand::clear_fval() {
  fval_ = 0;
  clear_has_fval();
}
inline float Operand::fval() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Operand.fval)
  return fval_;
}
inline void Operand::set_fval(float value) {
  set_has_fval();
  fval_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.Operand.fval)
}

// optional .bmnet.bm168x_lir.LIR_FMT fmt = 8 [default = LIR_FMT_F32];
inline bool Operand::has_fmt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Operand::set_has_fmt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Operand::clear_has_fmt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Operand::clear_fmt() {
  fmt_ = 0;
  clear_has_fmt();
}
inline ::bmnet::bm168x_lir::LIR_FMT Operand::fmt() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Operand.fmt)
  return static_cast< ::bmnet::bm168x_lir::LIR_FMT >(fmt_);
}
inline void Operand::set_fmt(::bmnet::bm168x_lir::LIR_FMT value) {
  assert(::bmnet::bm168x_lir::LIR_FMT_IsValid(value));
  set_has_fmt();
  fmt_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.Operand.fmt)
}

// -------------------------------------------------------------------

// Lir

// optional string name = 1;
inline bool Lir::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lir::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lir::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lir::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Lir::name() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.name)
  return name_.GetNoArena();
}
inline void Lir::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.Lir.name)
}
#if LANG_CXX11
inline void Lir::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bmnet.bm168x_lir.Lir.name)
}
#endif
inline void Lir::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bmnet.bm168x_lir.Lir.name)
}
inline void Lir::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bmnet.bm168x_lir.Lir.name)
}
inline ::std::string* Lir::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lir::release_name() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lir::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.name)
}

// optional string type = 2;
inline bool Lir::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lir::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lir::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lir::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Lir::type() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.type)
  return type_.GetNoArena();
}
inline void Lir::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.Lir.type)
}
#if LANG_CXX11
inline void Lir::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bmnet.bm168x_lir.Lir.type)
}
#endif
inline void Lir::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bmnet.bm168x_lir.Lir.type)
}
inline void Lir::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bmnet.bm168x_lir.Lir.type)
}
inline ::std::string* Lir::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lir::release_type() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lir::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.type)
}

// optional .bmnet.bm168x_lir.bm168x_tl_load tl_load = 3;
inline bool Lir::has_tl_load() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lir::set_has_tl_load() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lir::clear_has_tl_load() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lir::clear_tl_load() {
  if (tl_load_ != NULL) tl_load_->Clear();
  clear_has_tl_load();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_load& Lir::_internal_tl_load() const {
  return *tl_load_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_load& Lir::tl_load() const {
  const ::bmnet::bm168x_lir::bm168x_tl_load* p = tl_load_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_load)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_load*>(
      &::bmnet::bm168x_lir::_bm168x_tl_load_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_load* Lir::release_tl_load() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_load)
  clear_has_tl_load();
  ::bmnet::bm168x_lir::bm168x_tl_load* temp = tl_load_;
  tl_load_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_load* Lir::mutable_tl_load() {
  set_has_tl_load();
  if (tl_load_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_load>(GetArenaNoVirtual());
    tl_load_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_load)
  return tl_load_;
}
inline void Lir::set_allocated_tl_load(::bmnet::bm168x_lir::bm168x_tl_load* tl_load) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_load_;
  }
  if (tl_load) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_load = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_load, submessage_arena);
    }
    set_has_tl_load();
  } else {
    clear_has_tl_load();
  }
  tl_load_ = tl_load;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_load)
}

// optional .bmnet.bm168x_lir.bm168x_tl_store tl_store = 4;
inline bool Lir::has_tl_store() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lir::set_has_tl_store() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lir::clear_has_tl_store() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lir::clear_tl_store() {
  if (tl_store_ != NULL) tl_store_->Clear();
  clear_has_tl_store();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_store& Lir::_internal_tl_store() const {
  return *tl_store_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_store& Lir::tl_store() const {
  const ::bmnet::bm168x_lir::bm168x_tl_store* p = tl_store_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_store)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_store*>(
      &::bmnet::bm168x_lir::_bm168x_tl_store_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_store* Lir::release_tl_store() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_store)
  clear_has_tl_store();
  ::bmnet::bm168x_lir::bm168x_tl_store* temp = tl_store_;
  tl_store_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_store* Lir::mutable_tl_store() {
  set_has_tl_store();
  if (tl_store_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_store>(GetArenaNoVirtual());
    tl_store_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_store)
  return tl_store_;
}
inline void Lir::set_allocated_tl_store(::bmnet::bm168x_lir::bm168x_tl_store* tl_store) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_store_;
  }
  if (tl_store) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_store = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_store, submessage_arena);
    }
    set_has_tl_store();
  } else {
    clear_has_tl_store();
  }
  tl_store_ = tl_store;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_store)
}

// optional .bmnet.bm168x_lir.bm168x_copy_stride copy_stride = 5;
inline bool Lir::has_copy_stride() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Lir::set_has_copy_stride() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Lir::clear_has_copy_stride() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Lir::clear_copy_stride() {
  if (copy_stride_ != NULL) copy_stride_->Clear();
  clear_has_copy_stride();
}
inline const ::bmnet::bm168x_lir::bm168x_copy_stride& Lir::_internal_copy_stride() const {
  return *copy_stride_;
}
inline const ::bmnet::bm168x_lir::bm168x_copy_stride& Lir::copy_stride() const {
  const ::bmnet::bm168x_lir::bm168x_copy_stride* p = copy_stride_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.copy_stride)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_copy_stride*>(
      &::bmnet::bm168x_lir::_bm168x_copy_stride_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_copy_stride* Lir::release_copy_stride() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.copy_stride)
  clear_has_copy_stride();
  ::bmnet::bm168x_lir::bm168x_copy_stride* temp = copy_stride_;
  copy_stride_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_copy_stride* Lir::mutable_copy_stride() {
  set_has_copy_stride();
  if (copy_stride_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_copy_stride>(GetArenaNoVirtual());
    copy_stride_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.copy_stride)
  return copy_stride_;
}
inline void Lir::set_allocated_copy_stride(::bmnet::bm168x_lir::bm168x_copy_stride* copy_stride) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete copy_stride_;
  }
  if (copy_stride) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      copy_stride = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, copy_stride, submessage_arena);
    }
    set_has_copy_stride();
  } else {
    clear_has_copy_stride();
  }
  copy_stride_ = copy_stride;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.copy_stride)
}

// optional .bmnet.bm168x_lir.bm168x_copy_gdma copy_gdma = 6;
inline bool Lir::has_copy_gdma() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Lir::set_has_copy_gdma() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Lir::clear_has_copy_gdma() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Lir::clear_copy_gdma() {
  if (copy_gdma_ != NULL) copy_gdma_->Clear();
  clear_has_copy_gdma();
}
inline const ::bmnet::bm168x_lir::bm168x_copy_gdma& Lir::_internal_copy_gdma() const {
  return *copy_gdma_;
}
inline const ::bmnet::bm168x_lir::bm168x_copy_gdma& Lir::copy_gdma() const {
  const ::bmnet::bm168x_lir::bm168x_copy_gdma* p = copy_gdma_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.copy_gdma)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_copy_gdma*>(
      &::bmnet::bm168x_lir::_bm168x_copy_gdma_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_copy_gdma* Lir::release_copy_gdma() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.copy_gdma)
  clear_has_copy_gdma();
  ::bmnet::bm168x_lir::bm168x_copy_gdma* temp = copy_gdma_;
  copy_gdma_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_copy_gdma* Lir::mutable_copy_gdma() {
  set_has_copy_gdma();
  if (copy_gdma_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_copy_gdma>(GetArenaNoVirtual());
    copy_gdma_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.copy_gdma)
  return copy_gdma_;
}
inline void Lir::set_allocated_copy_gdma(::bmnet::bm168x_lir::bm168x_copy_gdma* copy_gdma) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete copy_gdma_;
  }
  if (copy_gdma) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      copy_gdma = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, copy_gdma, submessage_arena);
    }
    set_has_copy_gdma();
  } else {
    clear_has_copy_gdma();
  }
  copy_gdma_ = copy_gdma;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.copy_gdma)
}

// optional .bmnet.bm168x_lir.bm168x_tl_lrn_shift tl_lrn_shift = 7;
inline bool Lir::has_tl_lrn_shift() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Lir::set_has_tl_lrn_shift() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Lir::clear_has_tl_lrn_shift() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Lir::clear_tl_lrn_shift() {
  if (tl_lrn_shift_ != NULL) tl_lrn_shift_->Clear();
  clear_has_tl_lrn_shift();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_lrn_shift& Lir::_internal_tl_lrn_shift() const {
  return *tl_lrn_shift_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_lrn_shift& Lir::tl_lrn_shift() const {
  const ::bmnet::bm168x_lir::bm168x_tl_lrn_shift* p = tl_lrn_shift_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_lrn_shift)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_lrn_shift*>(
      &::bmnet::bm168x_lir::_bm168x_tl_lrn_shift_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_lrn_shift* Lir::release_tl_lrn_shift() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_lrn_shift)
  clear_has_tl_lrn_shift();
  ::bmnet::bm168x_lir::bm168x_tl_lrn_shift* temp = tl_lrn_shift_;
  tl_lrn_shift_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_lrn_shift* Lir::mutable_tl_lrn_shift() {
  set_has_tl_lrn_shift();
  if (tl_lrn_shift_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_lrn_shift>(GetArenaNoVirtual());
    tl_lrn_shift_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_lrn_shift)
  return tl_lrn_shift_;
}
inline void Lir::set_allocated_tl_lrn_shift(::bmnet::bm168x_lir::bm168x_tl_lrn_shift* tl_lrn_shift) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_lrn_shift_;
  }
  if (tl_lrn_shift) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_lrn_shift = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_lrn_shift, submessage_arena);
    }
    set_has_tl_lrn_shift();
  } else {
    clear_has_tl_lrn_shift();
  }
  tl_lrn_shift_ = tl_lrn_shift;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_lrn_shift)
}

// optional .bmnet.bm168x_lir.bm168x_tl_cw_transpose tl_cw_transpose = 8;
inline bool Lir::has_tl_cw_transpose() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Lir::set_has_tl_cw_transpose() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Lir::clear_has_tl_cw_transpose() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Lir::clear_tl_cw_transpose() {
  if (tl_cw_transpose_ != NULL) tl_cw_transpose_->Clear();
  clear_has_tl_cw_transpose();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_cw_transpose& Lir::_internal_tl_cw_transpose() const {
  return *tl_cw_transpose_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_cw_transpose& Lir::tl_cw_transpose() const {
  const ::bmnet::bm168x_lir::bm168x_tl_cw_transpose* p = tl_cw_transpose_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_cw_transpose)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_cw_transpose*>(
      &::bmnet::bm168x_lir::_bm168x_tl_cw_transpose_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_cw_transpose* Lir::release_tl_cw_transpose() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_cw_transpose)
  clear_has_tl_cw_transpose();
  ::bmnet::bm168x_lir::bm168x_tl_cw_transpose* temp = tl_cw_transpose_;
  tl_cw_transpose_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_cw_transpose* Lir::mutable_tl_cw_transpose() {
  set_has_tl_cw_transpose();
  if (tl_cw_transpose_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_cw_transpose>(GetArenaNoVirtual());
    tl_cw_transpose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_cw_transpose)
  return tl_cw_transpose_;
}
inline void Lir::set_allocated_tl_cw_transpose(::bmnet::bm168x_lir::bm168x_tl_cw_transpose* tl_cw_transpose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_cw_transpose_;
  }
  if (tl_cw_transpose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_cw_transpose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_cw_transpose, submessage_arena);
    }
    set_has_tl_cw_transpose();
  } else {
    clear_has_tl_cw_transpose();
  }
  tl_cw_transpose_ = tl_cw_transpose;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_cw_transpose)
}

// optional .bmnet.bm168x_lir.bm168x_g_copy g_copy = 9;
inline bool Lir::has_g_copy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Lir::set_has_g_copy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Lir::clear_has_g_copy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Lir::clear_g_copy() {
  if (g_copy_ != NULL) g_copy_->Clear();
  clear_has_g_copy();
}
inline const ::bmnet::bm168x_lir::bm168x_g_copy& Lir::_internal_g_copy() const {
  return *g_copy_;
}
inline const ::bmnet::bm168x_lir::bm168x_g_copy& Lir::g_copy() const {
  const ::bmnet::bm168x_lir::bm168x_g_copy* p = g_copy_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.g_copy)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_g_copy*>(
      &::bmnet::bm168x_lir::_bm168x_g_copy_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_g_copy* Lir::release_g_copy() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.g_copy)
  clear_has_g_copy();
  ::bmnet::bm168x_lir::bm168x_g_copy* temp = g_copy_;
  g_copy_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_g_copy* Lir::mutable_g_copy() {
  set_has_g_copy();
  if (g_copy_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_g_copy>(GetArenaNoVirtual());
    g_copy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.g_copy)
  return g_copy_;
}
inline void Lir::set_allocated_g_copy(::bmnet::bm168x_lir::bm168x_g_copy* g_copy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete g_copy_;
  }
  if (g_copy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      g_copy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, g_copy, submessage_arena);
    }
    set_has_g_copy();
  } else {
    clear_has_g_copy();
  }
  g_copy_ = g_copy;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.g_copy)
}

// optional .bmnet.bm168x_lir.bm168x_tl_conv tl_conv = 10;
inline bool Lir::has_tl_conv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Lir::set_has_tl_conv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Lir::clear_has_tl_conv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Lir::clear_tl_conv() {
  if (tl_conv_ != NULL) tl_conv_->Clear();
  clear_has_tl_conv();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_conv& Lir::_internal_tl_conv() const {
  return *tl_conv_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_conv& Lir::tl_conv() const {
  const ::bmnet::bm168x_lir::bm168x_tl_conv* p = tl_conv_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_conv)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_conv*>(
      &::bmnet::bm168x_lir::_bm168x_tl_conv_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_conv* Lir::release_tl_conv() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_conv)
  clear_has_tl_conv();
  ::bmnet::bm168x_lir::bm168x_tl_conv* temp = tl_conv_;
  tl_conv_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_conv* Lir::mutable_tl_conv() {
  set_has_tl_conv();
  if (tl_conv_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_conv>(GetArenaNoVirtual());
    tl_conv_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_conv)
  return tl_conv_;
}
inline void Lir::set_allocated_tl_conv(::bmnet::bm168x_lir::bm168x_tl_conv* tl_conv) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_conv_;
  }
  if (tl_conv) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_conv = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_conv, submessage_arena);
    }
    set_has_tl_conv();
  } else {
    clear_has_tl_conv();
  }
  tl_conv_ = tl_conv;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_conv)
}

// optional .bmnet.bm168x_lir.bm168x_tl_pooling tl_pooling = 11;
inline bool Lir::has_tl_pooling() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Lir::set_has_tl_pooling() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Lir::clear_has_tl_pooling() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Lir::clear_tl_pooling() {
  if (tl_pooling_ != NULL) tl_pooling_->Clear();
  clear_has_tl_pooling();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_pooling& Lir::_internal_tl_pooling() const {
  return *tl_pooling_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_pooling& Lir::tl_pooling() const {
  const ::bmnet::bm168x_lir::bm168x_tl_pooling* p = tl_pooling_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_pooling)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_pooling*>(
      &::bmnet::bm168x_lir::_bm168x_tl_pooling_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_pooling* Lir::release_tl_pooling() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_pooling)
  clear_has_tl_pooling();
  ::bmnet::bm168x_lir::bm168x_tl_pooling* temp = tl_pooling_;
  tl_pooling_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_pooling* Lir::mutable_tl_pooling() {
  set_has_tl_pooling();
  if (tl_pooling_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_pooling>(GetArenaNoVirtual());
    tl_pooling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_pooling)
  return tl_pooling_;
}
inline void Lir::set_allocated_tl_pooling(::bmnet::bm168x_lir::bm168x_tl_pooling* tl_pooling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_pooling_;
  }
  if (tl_pooling) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_pooling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_pooling, submessage_arena);
    }
    set_has_tl_pooling();
  } else {
    clear_has_tl_pooling();
  }
  tl_pooling_ = tl_pooling;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_pooling)
}

// optional .bmnet.bm168x_lir.bm168x_tl_arithmetic tl_arithmetic = 12;
inline bool Lir::has_tl_arithmetic() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Lir::set_has_tl_arithmetic() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Lir::clear_has_tl_arithmetic() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Lir::clear_tl_arithmetic() {
  if (tl_arithmetic_ != NULL) tl_arithmetic_->Clear();
  clear_has_tl_arithmetic();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_arithmetic& Lir::_internal_tl_arithmetic() const {
  return *tl_arithmetic_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_arithmetic& Lir::tl_arithmetic() const {
  const ::bmnet::bm168x_lir::bm168x_tl_arithmetic* p = tl_arithmetic_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_arithmetic)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_arithmetic*>(
      &::bmnet::bm168x_lir::_bm168x_tl_arithmetic_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_arithmetic* Lir::release_tl_arithmetic() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_arithmetic)
  clear_has_tl_arithmetic();
  ::bmnet::bm168x_lir::bm168x_tl_arithmetic* temp = tl_arithmetic_;
  tl_arithmetic_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_arithmetic* Lir::mutable_tl_arithmetic() {
  set_has_tl_arithmetic();
  if (tl_arithmetic_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_arithmetic>(GetArenaNoVirtual());
    tl_arithmetic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_arithmetic)
  return tl_arithmetic_;
}
inline void Lir::set_allocated_tl_arithmetic(::bmnet::bm168x_lir::bm168x_tl_arithmetic* tl_arithmetic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_arithmetic_;
  }
  if (tl_arithmetic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_arithmetic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_arithmetic, submessage_arena);
    }
    set_has_tl_arithmetic();
  } else {
    clear_has_tl_arithmetic();
  }
  tl_arithmetic_ = tl_arithmetic;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_arithmetic)
}

// optional .bmnet.bm168x_lir.bm168x_tl_md_scalar tl_md_scalar = 13;
inline bool Lir::has_tl_md_scalar() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Lir::set_has_tl_md_scalar() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Lir::clear_has_tl_md_scalar() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Lir::clear_tl_md_scalar() {
  if (tl_md_scalar_ != NULL) tl_md_scalar_->Clear();
  clear_has_tl_md_scalar();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_md_scalar& Lir::_internal_tl_md_scalar() const {
  return *tl_md_scalar_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_md_scalar& Lir::tl_md_scalar() const {
  const ::bmnet::bm168x_lir::bm168x_tl_md_scalar* p = tl_md_scalar_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_md_scalar)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_md_scalar*>(
      &::bmnet::bm168x_lir::_bm168x_tl_md_scalar_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_md_scalar* Lir::release_tl_md_scalar() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_md_scalar)
  clear_has_tl_md_scalar();
  ::bmnet::bm168x_lir::bm168x_tl_md_scalar* temp = tl_md_scalar_;
  tl_md_scalar_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_md_scalar* Lir::mutable_tl_md_scalar() {
  set_has_tl_md_scalar();
  if (tl_md_scalar_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_md_scalar>(GetArenaNoVirtual());
    tl_md_scalar_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_md_scalar)
  return tl_md_scalar_;
}
inline void Lir::set_allocated_tl_md_scalar(::bmnet::bm168x_lir::bm168x_tl_md_scalar* tl_md_scalar) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_md_scalar_;
  }
  if (tl_md_scalar) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_md_scalar = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_md_scalar, submessage_arena);
    }
    set_has_tl_md_scalar();
  } else {
    clear_has_tl_md_scalar();
  }
  tl_md_scalar_ = tl_md_scalar;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_md_scalar)
}

// optional .bmnet.bm168x_lir.bm168x_tl_fill tl_fill = 14;
inline bool Lir::has_tl_fill() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Lir::set_has_tl_fill() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Lir::clear_has_tl_fill() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Lir::clear_tl_fill() {
  if (tl_fill_ != NULL) tl_fill_->Clear();
  clear_has_tl_fill();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_fill& Lir::_internal_tl_fill() const {
  return *tl_fill_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_fill& Lir::tl_fill() const {
  const ::bmnet::bm168x_lir::bm168x_tl_fill* p = tl_fill_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_fill)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_fill*>(
      &::bmnet::bm168x_lir::_bm168x_tl_fill_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_fill* Lir::release_tl_fill() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_fill)
  clear_has_tl_fill();
  ::bmnet::bm168x_lir::bm168x_tl_fill* temp = tl_fill_;
  tl_fill_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_fill* Lir::mutable_tl_fill() {
  set_has_tl_fill();
  if (tl_fill_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_fill>(GetArenaNoVirtual());
    tl_fill_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_fill)
  return tl_fill_;
}
inline void Lir::set_allocated_tl_fill(::bmnet::bm168x_lir::bm168x_tl_fill* tl_fill) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_fill_;
  }
  if (tl_fill) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_fill = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_fill, submessage_arena);
    }
    set_has_tl_fill();
  } else {
    clear_has_tl_fill();
  }
  tl_fill_ = tl_fill;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_fill)
}

// optional .bmnet.bm168x_lir.bm168x_tl_clear tl_clear = 15;
inline bool Lir::has_tl_clear() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Lir::set_has_tl_clear() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Lir::clear_has_tl_clear() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Lir::clear_tl_clear() {
  if (tl_clear_ != NULL) tl_clear_->Clear();
  clear_has_tl_clear();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_clear& Lir::_internal_tl_clear() const {
  return *tl_clear_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_clear& Lir::tl_clear() const {
  const ::bmnet::bm168x_lir::bm168x_tl_clear* p = tl_clear_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_clear)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_clear*>(
      &::bmnet::bm168x_lir::_bm168x_tl_clear_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_clear* Lir::release_tl_clear() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_clear)
  clear_has_tl_clear();
  ::bmnet::bm168x_lir::bm168x_tl_clear* temp = tl_clear_;
  tl_clear_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_clear* Lir::mutable_tl_clear() {
  set_has_tl_clear();
  if (tl_clear_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_clear>(GetArenaNoVirtual());
    tl_clear_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_clear)
  return tl_clear_;
}
inline void Lir::set_allocated_tl_clear(::bmnet::bm168x_lir::bm168x_tl_clear* tl_clear) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_clear_;
  }
  if (tl_clear) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_clear = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_clear, submessage_arena);
    }
    set_has_tl_clear();
  } else {
    clear_has_tl_clear();
  }
  tl_clear_ = tl_clear;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_clear)
}

// optional .bmnet.bm168x_lir.bm168x_tl_sfu tl_sfu = 16;
inline bool Lir::has_tl_sfu() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Lir::set_has_tl_sfu() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Lir::clear_has_tl_sfu() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Lir::clear_tl_sfu() {
  if (tl_sfu_ != NULL) tl_sfu_->Clear();
  clear_has_tl_sfu();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_sfu& Lir::_internal_tl_sfu() const {
  return *tl_sfu_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_sfu& Lir::tl_sfu() const {
  const ::bmnet::bm168x_lir::bm168x_tl_sfu* p = tl_sfu_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_sfu)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_sfu*>(
      &::bmnet::bm168x_lir::_bm168x_tl_sfu_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_sfu* Lir::release_tl_sfu() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_sfu)
  clear_has_tl_sfu();
  ::bmnet::bm168x_lir::bm168x_tl_sfu* temp = tl_sfu_;
  tl_sfu_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_sfu* Lir::mutable_tl_sfu() {
  set_has_tl_sfu();
  if (tl_sfu_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_sfu>(GetArenaNoVirtual());
    tl_sfu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_sfu)
  return tl_sfu_;
}
inline void Lir::set_allocated_tl_sfu(::bmnet::bm168x_lir::bm168x_tl_sfu* tl_sfu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_sfu_;
  }
  if (tl_sfu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_sfu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_sfu, submessage_arena);
    }
    set_has_tl_sfu();
  } else {
    clear_has_tl_sfu();
  }
  tl_sfu_ = tl_sfu;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_sfu)
}

// optional .bmnet.bm168x_lir.bm168x_tl_mac tl_mac = 17;
inline bool Lir::has_tl_mac() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Lir::set_has_tl_mac() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Lir::clear_has_tl_mac() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Lir::clear_tl_mac() {
  if (tl_mac_ != NULL) tl_mac_->Clear();
  clear_has_tl_mac();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_mac& Lir::_internal_tl_mac() const {
  return *tl_mac_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_mac& Lir::tl_mac() const {
  const ::bmnet::bm168x_lir::bm168x_tl_mac* p = tl_mac_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_mac)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_mac*>(
      &::bmnet::bm168x_lir::_bm168x_tl_mac_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_mac* Lir::release_tl_mac() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_mac)
  clear_has_tl_mac();
  ::bmnet::bm168x_lir::bm168x_tl_mac* temp = tl_mac_;
  tl_mac_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_mac* Lir::mutable_tl_mac() {
  set_has_tl_mac();
  if (tl_mac_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_mac>(GetArenaNoVirtual());
    tl_mac_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_mac)
  return tl_mac_;
}
inline void Lir::set_allocated_tl_mac(::bmnet::bm168x_lir::bm168x_tl_mac* tl_mac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_mac_;
  }
  if (tl_mac) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_mac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_mac, submessage_arena);
    }
    set_has_tl_mac();
  } else {
    clear_has_tl_mac();
  }
  tl_mac_ = tl_mac;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_mac)
}

// optional .bmnet.bm168x_lir.bm168x_tl_add_square tl_add_square = 18;
inline bool Lir::has_tl_add_square() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Lir::set_has_tl_add_square() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Lir::clear_has_tl_add_square() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Lir::clear_tl_add_square() {
  if (tl_add_square_ != NULL) tl_add_square_->Clear();
  clear_has_tl_add_square();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_add_square& Lir::_internal_tl_add_square() const {
  return *tl_add_square_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_add_square& Lir::tl_add_square() const {
  const ::bmnet::bm168x_lir::bm168x_tl_add_square* p = tl_add_square_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_add_square)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_add_square*>(
      &::bmnet::bm168x_lir::_bm168x_tl_add_square_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_add_square* Lir::release_tl_add_square() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_add_square)
  clear_has_tl_add_square();
  ::bmnet::bm168x_lir::bm168x_tl_add_square* temp = tl_add_square_;
  tl_add_square_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_add_square* Lir::mutable_tl_add_square() {
  set_has_tl_add_square();
  if (tl_add_square_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_add_square>(GetArenaNoVirtual());
    tl_add_square_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_add_square)
  return tl_add_square_;
}
inline void Lir::set_allocated_tl_add_square(::bmnet::bm168x_lir::bm168x_tl_add_square* tl_add_square) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_add_square_;
  }
  if (tl_add_square) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_add_square = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_add_square, submessage_arena);
    }
    set_has_tl_add_square();
  } else {
    clear_has_tl_add_square();
  }
  tl_add_square_ = tl_add_square;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_add_square)
}

// optional .bmnet.bm168x_lir.bm168x_tl_sub_square tl_sub_square = 19;
inline bool Lir::has_tl_sub_square() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Lir::set_has_tl_sub_square() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Lir::clear_has_tl_sub_square() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Lir::clear_tl_sub_square() {
  if (tl_sub_square_ != NULL) tl_sub_square_->Clear();
  clear_has_tl_sub_square();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_sub_square& Lir::_internal_tl_sub_square() const {
  return *tl_sub_square_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_sub_square& Lir::tl_sub_square() const {
  const ::bmnet::bm168x_lir::bm168x_tl_sub_square* p = tl_sub_square_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_sub_square)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_sub_square*>(
      &::bmnet::bm168x_lir::_bm168x_tl_sub_square_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_sub_square* Lir::release_tl_sub_square() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_sub_square)
  clear_has_tl_sub_square();
  ::bmnet::bm168x_lir::bm168x_tl_sub_square* temp = tl_sub_square_;
  tl_sub_square_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_sub_square* Lir::mutable_tl_sub_square() {
  set_has_tl_sub_square();
  if (tl_sub_square_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_sub_square>(GetArenaNoVirtual());
    tl_sub_square_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_sub_square)
  return tl_sub_square_;
}
inline void Lir::set_allocated_tl_sub_square(::bmnet::bm168x_lir::bm168x_tl_sub_square* tl_sub_square) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_sub_square_;
  }
  if (tl_sub_square) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_sub_square = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_sub_square, submessage_arena);
    }
    set_has_tl_sub_square();
  } else {
    clear_has_tl_sub_square();
  }
  tl_sub_square_ = tl_sub_square;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_sub_square)
}

// optional .bmnet.bm168x_lir.bm168x_tl_max tl_max = 20;
inline bool Lir::has_tl_max() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Lir::set_has_tl_max() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Lir::clear_has_tl_max() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Lir::clear_tl_max() {
  if (tl_max_ != NULL) tl_max_->Clear();
  clear_has_tl_max();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_max& Lir::_internal_tl_max() const {
  return *tl_max_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_max& Lir::tl_max() const {
  const ::bmnet::bm168x_lir::bm168x_tl_max* p = tl_max_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_max)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_max*>(
      &::bmnet::bm168x_lir::_bm168x_tl_max_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_max* Lir::release_tl_max() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_max)
  clear_has_tl_max();
  ::bmnet::bm168x_lir::bm168x_tl_max* temp = tl_max_;
  tl_max_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_max* Lir::mutable_tl_max() {
  set_has_tl_max();
  if (tl_max_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_max>(GetArenaNoVirtual());
    tl_max_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_max)
  return tl_max_;
}
inline void Lir::set_allocated_tl_max(::bmnet::bm168x_lir::bm168x_tl_max* tl_max) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_max_;
  }
  if (tl_max) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_max = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_max, submessage_arena);
    }
    set_has_tl_max();
  } else {
    clear_has_tl_max();
  }
  tl_max_ = tl_max;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_max)
}

// optional .bmnet.bm168x_lir.bm168x_tl_cmp tl_cmp = 21;
inline bool Lir::has_tl_cmp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Lir::set_has_tl_cmp() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Lir::clear_has_tl_cmp() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Lir::clear_tl_cmp() {
  if (tl_cmp_ != NULL) tl_cmp_->Clear();
  clear_has_tl_cmp();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_cmp& Lir::_internal_tl_cmp() const {
  return *tl_cmp_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_cmp& Lir::tl_cmp() const {
  const ::bmnet::bm168x_lir::bm168x_tl_cmp* p = tl_cmp_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_cmp)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_cmp*>(
      &::bmnet::bm168x_lir::_bm168x_tl_cmp_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_cmp* Lir::release_tl_cmp() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_cmp)
  clear_has_tl_cmp();
  ::bmnet::bm168x_lir::bm168x_tl_cmp* temp = tl_cmp_;
  tl_cmp_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_cmp* Lir::mutable_tl_cmp() {
  set_has_tl_cmp();
  if (tl_cmp_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_cmp>(GetArenaNoVirtual());
    tl_cmp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_cmp)
  return tl_cmp_;
}
inline void Lir::set_allocated_tl_cmp(::bmnet::bm168x_lir::bm168x_tl_cmp* tl_cmp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_cmp_;
  }
  if (tl_cmp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_cmp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_cmp, submessage_arena);
    }
    set_has_tl_cmp();
  } else {
    clear_has_tl_cmp();
  }
  tl_cmp_ = tl_cmp;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_cmp)
}

// optional .bmnet.bm168x_lir.bm168x_tl_sum tl_sum = 22;
inline bool Lir::has_tl_sum() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Lir::set_has_tl_sum() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Lir::clear_has_tl_sum() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Lir::clear_tl_sum() {
  if (tl_sum_ != NULL) tl_sum_->Clear();
  clear_has_tl_sum();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_sum& Lir::_internal_tl_sum() const {
  return *tl_sum_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_sum& Lir::tl_sum() const {
  const ::bmnet::bm168x_lir::bm168x_tl_sum* p = tl_sum_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_sum)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_sum*>(
      &::bmnet::bm168x_lir::_bm168x_tl_sum_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_sum* Lir::release_tl_sum() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_sum)
  clear_has_tl_sum();
  ::bmnet::bm168x_lir::bm168x_tl_sum* temp = tl_sum_;
  tl_sum_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_sum* Lir::mutable_tl_sum() {
  set_has_tl_sum();
  if (tl_sum_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_sum>(GetArenaNoVirtual());
    tl_sum_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_sum)
  return tl_sum_;
}
inline void Lir::set_allocated_tl_sum(::bmnet::bm168x_lir::bm168x_tl_sum* tl_sum) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_sum_;
  }
  if (tl_sum) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_sum = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_sum, submessage_arena);
    }
    set_has_tl_sum();
  } else {
    clear_has_tl_sum();
  }
  tl_sum_ = tl_sum;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_sum)
}

// optional .bmnet.bm168x_lir.bm168x_tl_img_sum tl_img_sum = 23;
inline bool Lir::has_tl_img_sum() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Lir::set_has_tl_img_sum() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Lir::clear_has_tl_img_sum() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Lir::clear_tl_img_sum() {
  if (tl_img_sum_ != NULL) tl_img_sum_->Clear();
  clear_has_tl_img_sum();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_img_sum& Lir::_internal_tl_img_sum() const {
  return *tl_img_sum_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_img_sum& Lir::tl_img_sum() const {
  const ::bmnet::bm168x_lir::bm168x_tl_img_sum* p = tl_img_sum_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_img_sum)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_img_sum*>(
      &::bmnet::bm168x_lir::_bm168x_tl_img_sum_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_img_sum* Lir::release_tl_img_sum() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_img_sum)
  clear_has_tl_img_sum();
  ::bmnet::bm168x_lir::bm168x_tl_img_sum* temp = tl_img_sum_;
  tl_img_sum_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_img_sum* Lir::mutable_tl_img_sum() {
  set_has_tl_img_sum();
  if (tl_img_sum_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_img_sum>(GetArenaNoVirtual());
    tl_img_sum_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_img_sum)
  return tl_img_sum_;
}
inline void Lir::set_allocated_tl_img_sum(::bmnet::bm168x_lir::bm168x_tl_img_sum* tl_img_sum) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_img_sum_;
  }
  if (tl_img_sum) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_img_sum = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_img_sum, submessage_arena);
    }
    set_has_tl_img_sum();
  } else {
    clear_has_tl_img_sum();
  }
  tl_img_sum_ = tl_img_sum;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_img_sum)
}

// optional .bmnet.bm168x_lir.bm168x_tl_matrix_mac tl_matrix_mac = 24;
inline bool Lir::has_tl_matrix_mac() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Lir::set_has_tl_matrix_mac() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Lir::clear_has_tl_matrix_mac() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Lir::clear_tl_matrix_mac() {
  if (tl_matrix_mac_ != NULL) tl_matrix_mac_->Clear();
  clear_has_tl_matrix_mac();
}
inline const ::bmnet::bm168x_lir::bm168x_tl_matrix_mac& Lir::_internal_tl_matrix_mac() const {
  return *tl_matrix_mac_;
}
inline const ::bmnet::bm168x_lir::bm168x_tl_matrix_mac& Lir::tl_matrix_mac() const {
  const ::bmnet::bm168x_lir::bm168x_tl_matrix_mac* p = tl_matrix_mac_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.Lir.tl_matrix_mac)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::bm168x_tl_matrix_mac*>(
      &::bmnet::bm168x_lir::_bm168x_tl_matrix_mac_default_instance_);
}
inline ::bmnet::bm168x_lir::bm168x_tl_matrix_mac* Lir::release_tl_matrix_mac() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.Lir.tl_matrix_mac)
  clear_has_tl_matrix_mac();
  ::bmnet::bm168x_lir::bm168x_tl_matrix_mac* temp = tl_matrix_mac_;
  tl_matrix_mac_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::bm168x_tl_matrix_mac* Lir::mutable_tl_matrix_mac() {
  set_has_tl_matrix_mac();
  if (tl_matrix_mac_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::bm168x_tl_matrix_mac>(GetArenaNoVirtual());
    tl_matrix_mac_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.Lir.tl_matrix_mac)
  return tl_matrix_mac_;
}
inline void Lir::set_allocated_tl_matrix_mac(::bmnet::bm168x_lir::bm168x_tl_matrix_mac* tl_matrix_mac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_matrix_mac_;
  }
  if (tl_matrix_mac) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_matrix_mac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_matrix_mac, submessage_arena);
    }
    set_has_tl_matrix_mac();
  } else {
    clear_has_tl_matrix_mac();
  }
  tl_matrix_mac_ = tl_matrix_mac;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.Lir.tl_matrix_mac)
}

// -------------------------------------------------------------------

// bm168x_tl_load

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_tl_load::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_load::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_load::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_load::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_load::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_load::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_load.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_load::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_load.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_load::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_load.dst)
  return dst_;
}
inline void bm168x_tl_load::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_load.dst)
}

// optional .bmnet.bm168x_lir.Operand src = 2;
inline bool bm168x_tl_load::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_load::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_load::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_load::clear_src() {
  if (src_ != NULL) src_->Clear();
  clear_has_src();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_load::_internal_src() const {
  return *src_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_load::src() const {
  const ::bmnet::bm168x_lir::Operand* p = src_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_load.src)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_load::release_src() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_load.src)
  clear_has_src();
  ::bmnet::bm168x_lir::Operand* temp = src_;
  src_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_load::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_load.src)
  return src_;
}
inline void bm168x_tl_load::set_allocated_src(::bmnet::bm168x_lir::Operand* src) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src_;
  }
  if (src) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    set_has_src();
  } else {
    clear_has_src();
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_load.src)
}

// optional bool transposed = 7;
inline bool bm168x_tl_load::has_transposed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_load::set_has_transposed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_load::clear_has_transposed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_load::clear_transposed() {
  transposed_ = false;
  clear_has_transposed();
}
inline bool bm168x_tl_load::transposed() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_load.transposed)
  return transposed_;
}
inline void bm168x_tl_load::set_transposed(bool value) {
  set_has_transposed();
  transposed_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_load.transposed)
}

// optional bool result_add = 8;
inline bool bm168x_tl_load::has_result_add() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bm168x_tl_load::set_has_result_add() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bm168x_tl_load::clear_has_result_add() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bm168x_tl_load::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool bm168x_tl_load::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_load.result_add)
  return result_add_;
}
inline void bm168x_tl_load::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_load.result_add)
}

// -------------------------------------------------------------------

// bm168x_tl_store

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_tl_store::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_store::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_store::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_store::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_store::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_store::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_store.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_store::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_store.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_store::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_store.dst)
  return dst_;
}
inline void bm168x_tl_store::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_store.dst)
}

// optional .bmnet.bm168x_lir.Operand src = 2;
inline bool bm168x_tl_store::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_store::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_store::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_store::clear_src() {
  if (src_ != NULL) src_->Clear();
  clear_has_src();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_store::_internal_src() const {
  return *src_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_store::src() const {
  const ::bmnet::bm168x_lir::Operand* p = src_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_store.src)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_store::release_src() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_store.src)
  clear_has_src();
  ::bmnet::bm168x_lir::Operand* temp = src_;
  src_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_store::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_store.src)
  return src_;
}
inline void bm168x_tl_store::set_allocated_src(::bmnet::bm168x_lir::Operand* src) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src_;
  }
  if (src) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    set_has_src();
  } else {
    clear_has_src();
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_store.src)
}

// optional bool transposed = 7;
inline bool bm168x_tl_store::has_transposed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_store::set_has_transposed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_store::clear_has_transposed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_store::clear_transposed() {
  transposed_ = false;
  clear_has_transposed();
}
inline bool bm168x_tl_store::transposed() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_store.transposed)
  return transposed_;
}
inline void bm168x_tl_store::set_transposed(bool value) {
  set_has_transposed();
  transposed_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_store.transposed)
}

// optional bool result_add = 8;
inline bool bm168x_tl_store::has_result_add() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bm168x_tl_store::set_has_result_add() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bm168x_tl_store::clear_has_result_add() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bm168x_tl_store::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool bm168x_tl_store::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_store.result_add)
  return result_add_;
}
inline void bm168x_tl_store::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_store.result_add)
}

// -------------------------------------------------------------------

// bm168x_tl_lrn_shift

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_tl_lrn_shift::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_lrn_shift::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_lrn_shift::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_lrn_shift::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_lrn_shift::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_lrn_shift::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_lrn_shift.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_lrn_shift::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_lrn_shift.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_lrn_shift::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_lrn_shift.dst)
  return dst_;
}
inline void bm168x_tl_lrn_shift::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_lrn_shift.dst)
}

// optional .bmnet.bm168x_lir.Operand src = 2;
inline bool bm168x_tl_lrn_shift::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_lrn_shift::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_lrn_shift::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_lrn_shift::clear_src() {
  if (src_ != NULL) src_->Clear();
  clear_has_src();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_lrn_shift::_internal_src() const {
  return *src_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_lrn_shift::src() const {
  const ::bmnet::bm168x_lir::Operand* p = src_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_lrn_shift.src)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_lrn_shift::release_src() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_lrn_shift.src)
  clear_has_src();
  ::bmnet::bm168x_lir::Operand* temp = src_;
  src_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_lrn_shift::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_lrn_shift.src)
  return src_;
}
inline void bm168x_tl_lrn_shift::set_allocated_src(::bmnet::bm168x_lir::Operand* src) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src_;
  }
  if (src) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    set_has_src();
  } else {
    clear_has_src();
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_lrn_shift.src)
}

// -------------------------------------------------------------------

// bm168x_tl_cw_transpose

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_tl_cw_transpose::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_cw_transpose::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_cw_transpose::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_cw_transpose::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cw_transpose::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cw_transpose::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_cw_transpose.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cw_transpose::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_cw_transpose.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cw_transpose::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_cw_transpose.dst)
  return dst_;
}
inline void bm168x_tl_cw_transpose::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_cw_transpose.dst)
}

// optional .bmnet.bm168x_lir.Operand src = 2;
inline bool bm168x_tl_cw_transpose::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_cw_transpose::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_cw_transpose::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_cw_transpose::clear_src() {
  if (src_ != NULL) src_->Clear();
  clear_has_src();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cw_transpose::_internal_src() const {
  return *src_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cw_transpose::src() const {
  const ::bmnet::bm168x_lir::Operand* p = src_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_cw_transpose.src)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cw_transpose::release_src() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_cw_transpose.src)
  clear_has_src();
  ::bmnet::bm168x_lir::Operand* temp = src_;
  src_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cw_transpose::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_cw_transpose.src)
  return src_;
}
inline void bm168x_tl_cw_transpose::set_allocated_src(::bmnet::bm168x_lir::Operand* src) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src_;
  }
  if (src) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    set_has_src();
  } else {
    clear_has_src();
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_cw_transpose.src)
}

// -------------------------------------------------------------------

// bm168x_g_copy

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_g_copy::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_g_copy::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_g_copy::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_g_copy::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_g_copy::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_g_copy::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_g_copy.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_g_copy::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_g_copy.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_g_copy::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_g_copy.dst)
  return dst_;
}
inline void bm168x_g_copy::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_g_copy.dst)
}

// optional .bmnet.bm168x_lir.Operand src = 2;
inline bool bm168x_g_copy::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_g_copy::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_g_copy::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_g_copy::clear_src() {
  if (src_ != NULL) src_->Clear();
  clear_has_src();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_g_copy::_internal_src() const {
  return *src_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_g_copy::src() const {
  const ::bmnet::bm168x_lir::Operand* p = src_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_g_copy.src)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_g_copy::release_src() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_g_copy.src)
  clear_has_src();
  ::bmnet::bm168x_lir::Operand* temp = src_;
  src_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_g_copy::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_g_copy.src)
  return src_;
}
inline void bm168x_g_copy::set_allocated_src(::bmnet::bm168x_lir::Operand* src) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src_;
  }
  if (src) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    set_has_src();
  } else {
    clear_has_src();
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_g_copy.src)
}

// optional bool transposed = 3;
inline bool bm168x_g_copy::has_transposed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_g_copy::set_has_transposed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_g_copy::clear_has_transposed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_g_copy::clear_transposed() {
  transposed_ = false;
  clear_has_transposed();
}
inline bool bm168x_g_copy::transposed() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_g_copy.transposed)
  return transposed_;
}
inline void bm168x_g_copy::set_transposed(bool value) {
  set_has_transposed();
  transposed_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_g_copy.transposed)
}

// optional bool result_add = 4;
inline bool bm168x_g_copy::has_result_add() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bm168x_g_copy::set_has_result_add() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bm168x_g_copy::clear_has_result_add() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bm168x_g_copy::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool bm168x_g_copy::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_g_copy.result_add)
  return result_add_;
}
inline void bm168x_g_copy::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_g_copy.result_add)
}

// -------------------------------------------------------------------

// bm168x_copy_stride

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_copy_stride::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_copy_stride::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_copy_stride::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_copy_stride::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_copy_stride::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_copy_stride::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_copy_stride.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_copy_stride::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_copy_stride.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_copy_stride::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_copy_stride.dst)
  return dst_;
}
inline void bm168x_copy_stride::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_copy_stride.dst)
}

// optional .bmnet.bm168x_lir.Operand src = 2;
inline bool bm168x_copy_stride::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_copy_stride::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_copy_stride::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_copy_stride::clear_src() {
  if (src_ != NULL) src_->Clear();
  clear_has_src();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_copy_stride::_internal_src() const {
  return *src_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_copy_stride::src() const {
  const ::bmnet::bm168x_lir::Operand* p = src_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_copy_stride.src)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_copy_stride::release_src() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_copy_stride.src)
  clear_has_src();
  ::bmnet::bm168x_lir::Operand* temp = src_;
  src_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_copy_stride::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_copy_stride.src)
  return src_;
}
inline void bm168x_copy_stride::set_allocated_src(::bmnet::bm168x_lir::Operand* src) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src_;
  }
  if (src) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    set_has_src();
  } else {
    clear_has_src();
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_copy_stride.src)
}

// -------------------------------------------------------------------

// bm168x_copy_gdma

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_copy_gdma::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_copy_gdma::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_copy_gdma::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_copy_gdma::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_copy_gdma::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_copy_gdma::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_copy_gdma.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_copy_gdma::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_copy_gdma.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_copy_gdma::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_copy_gdma.dst)
  return dst_;
}
inline void bm168x_copy_gdma::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_copy_gdma.dst)
}

// optional .bmnet.bm168x_lir.Operand src = 2;
inline bool bm168x_copy_gdma::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_copy_gdma::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_copy_gdma::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_copy_gdma::clear_src() {
  if (src_ != NULL) src_->Clear();
  clear_has_src();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_copy_gdma::_internal_src() const {
  return *src_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_copy_gdma::src() const {
  const ::bmnet::bm168x_lir::Operand* p = src_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_copy_gdma.src)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_copy_gdma::release_src() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_copy_gdma.src)
  clear_has_src();
  ::bmnet::bm168x_lir::Operand* temp = src_;
  src_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_copy_gdma::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_copy_gdma.src)
  return src_;
}
inline void bm168x_copy_gdma::set_allocated_src(::bmnet::bm168x_lir::Operand* src) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src_;
  }
  if (src) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    set_has_src();
  } else {
    clear_has_src();
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_copy_gdma.src)
}

// -------------------------------------------------------------------

// bm168x_tl_conv

// optional .bmnet.bm168x_lir.Operand ofmap = 1;
inline bool bm168x_tl_conv::has_ofmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_conv::set_has_ofmap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_conv::clear_has_ofmap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_conv::clear_ofmap() {
  if (ofmap_ != NULL) ofmap_->Clear();
  clear_has_ofmap();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_conv::_internal_ofmap() const {
  return *ofmap_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_conv::ofmap() const {
  const ::bmnet::bm168x_lir::Operand* p = ofmap_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_conv.ofmap)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_conv::release_ofmap() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_conv.ofmap)
  clear_has_ofmap();
  ::bmnet::bm168x_lir::Operand* temp = ofmap_;
  ofmap_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_conv::mutable_ofmap() {
  set_has_ofmap();
  if (ofmap_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    ofmap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_conv.ofmap)
  return ofmap_;
}
inline void bm168x_tl_conv::set_allocated_ofmap(::bmnet::bm168x_lir::Operand* ofmap) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ofmap_;
  }
  if (ofmap) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ofmap = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ofmap, submessage_arena);
    }
    set_has_ofmap();
  } else {
    clear_has_ofmap();
  }
  ofmap_ = ofmap;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_conv.ofmap)
}

// optional .bmnet.bm168x_lir.Operand ifmap = 2;
inline bool bm168x_tl_conv::has_ifmap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_conv::set_has_ifmap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_conv::clear_has_ifmap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_conv::clear_ifmap() {
  if (ifmap_ != NULL) ifmap_->Clear();
  clear_has_ifmap();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_conv::_internal_ifmap() const {
  return *ifmap_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_conv::ifmap() const {
  const ::bmnet::bm168x_lir::Operand* p = ifmap_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_conv.ifmap)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_conv::release_ifmap() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_conv.ifmap)
  clear_has_ifmap();
  ::bmnet::bm168x_lir::Operand* temp = ifmap_;
  ifmap_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_conv::mutable_ifmap() {
  set_has_ifmap();
  if (ifmap_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    ifmap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_conv.ifmap)
  return ifmap_;
}
inline void bm168x_tl_conv::set_allocated_ifmap(::bmnet::bm168x_lir::Operand* ifmap) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ifmap_;
  }
  if (ifmap) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ifmap = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ifmap, submessage_arena);
    }
    set_has_ifmap();
  } else {
    clear_has_ifmap();
  }
  ifmap_ = ifmap;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_conv.ifmap)
}

// optional .bmnet.bm168x_lir.Operand weight = 3;
inline bool bm168x_tl_conv::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_conv::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_conv::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_conv::clear_weight() {
  if (weight_ != NULL) weight_->Clear();
  clear_has_weight();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_conv::_internal_weight() const {
  return *weight_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_conv::weight() const {
  const ::bmnet::bm168x_lir::Operand* p = weight_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_conv.weight)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_conv::release_weight() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_conv.weight)
  clear_has_weight();
  ::bmnet::bm168x_lir::Operand* temp = weight_;
  weight_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_conv::mutable_weight() {
  set_has_weight();
  if (weight_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    weight_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_conv.weight)
  return weight_;
}
inline void bm168x_tl_conv::set_allocated_weight(::bmnet::bm168x_lir::Operand* weight) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_;
  }
  if (weight) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight, submessage_arena);
    }
    set_has_weight();
  } else {
    clear_has_weight();
  }
  weight_ = weight;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_conv.weight)
}

// optional .bmnet.bm168x_lir.Operand bias = 4;
inline bool bm168x_tl_conv::has_bias() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bm168x_tl_conv::set_has_bias() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bm168x_tl_conv::clear_has_bias() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bm168x_tl_conv::clear_bias() {
  if (bias_ != NULL) bias_->Clear();
  clear_has_bias();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_conv::_internal_bias() const {
  return *bias_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_conv::bias() const {
  const ::bmnet::bm168x_lir::Operand* p = bias_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_conv.bias)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_conv::release_bias() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_conv.bias)
  clear_has_bias();
  ::bmnet::bm168x_lir::Operand* temp = bias_;
  bias_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_conv::mutable_bias() {
  set_has_bias();
  if (bias_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    bias_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_conv.bias)
  return bias_;
}
inline void bm168x_tl_conv::set_allocated_bias(::bmnet::bm168x_lir::Operand* bias) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_;
  }
  if (bias) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    set_has_bias();
  } else {
    clear_has_bias();
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_conv.bias)
}

// repeated uint32 insert = 5;
inline int bm168x_tl_conv::insert_size() const {
  return insert_.size();
}
inline void bm168x_tl_conv::clear_insert() {
  insert_.Clear();
}
inline ::google::protobuf::uint32 bm168x_tl_conv::insert(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_conv.insert)
  return insert_.Get(index);
}
inline void bm168x_tl_conv::set_insert(int index, ::google::protobuf::uint32 value) {
  insert_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_conv.insert)
}
inline void bm168x_tl_conv::add_insert(::google::protobuf::uint32 value) {
  insert_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm168x_lir.bm168x_tl_conv.insert)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
bm168x_tl_conv::insert() const {
  // @@protoc_insertion_point(field_list:bmnet.bm168x_lir.bm168x_tl_conv.insert)
  return insert_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
bm168x_tl_conv::mutable_insert() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm168x_lir.bm168x_tl_conv.insert)
  return &insert_;
}

// repeated uint32 dilation = 6;
inline int bm168x_tl_conv::dilation_size() const {
  return dilation_.size();
}
inline void bm168x_tl_conv::clear_dilation() {
  dilation_.Clear();
}
inline ::google::protobuf::uint32 bm168x_tl_conv::dilation(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_conv.dilation)
  return dilation_.Get(index);
}
inline void bm168x_tl_conv::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_conv.dilation)
}
inline void bm168x_tl_conv::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm168x_lir.bm168x_tl_conv.dilation)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
bm168x_tl_conv::dilation() const {
  // @@protoc_insertion_point(field_list:bmnet.bm168x_lir.bm168x_tl_conv.dilation)
  return dilation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
bm168x_tl_conv::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm168x_lir.bm168x_tl_conv.dilation)
  return &dilation_;
}

// repeated uint32 pad = 7;
inline int bm168x_tl_conv::pad_size() const {
  return pad_.size();
}
inline void bm168x_tl_conv::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 bm168x_tl_conv::pad(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_conv.pad)
  return pad_.Get(index);
}
inline void bm168x_tl_conv::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_conv.pad)
}
inline void bm168x_tl_conv::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm168x_lir.bm168x_tl_conv.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
bm168x_tl_conv::pad() const {
  // @@protoc_insertion_point(field_list:bmnet.bm168x_lir.bm168x_tl_conv.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
bm168x_tl_conv::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm168x_lir.bm168x_tl_conv.pad)
  return &pad_;
}

// repeated uint32 stride = 8;
inline int bm168x_tl_conv::stride_size() const {
  return stride_.size();
}
inline void bm168x_tl_conv::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 bm168x_tl_conv::stride(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_conv.stride)
  return stride_.Get(index);
}
inline void bm168x_tl_conv::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_conv.stride)
}
inline void bm168x_tl_conv::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm168x_lir.bm168x_tl_conv.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
bm168x_tl_conv::stride() const {
  // @@protoc_insertion_point(field_list:bmnet.bm168x_lir.bm168x_tl_conv.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
bm168x_tl_conv::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm168x_lir.bm168x_tl_conv.stride)
  return &stride_;
}

// repeated uint32 kernel = 9;
inline int bm168x_tl_conv::kernel_size() const {
  return kernel_.size();
}
inline void bm168x_tl_conv::clear_kernel() {
  kernel_.Clear();
}
inline ::google::protobuf::uint32 bm168x_tl_conv::kernel(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_conv.kernel)
  return kernel_.Get(index);
}
inline void bm168x_tl_conv::set_kernel(int index, ::google::protobuf::uint32 value) {
  kernel_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_conv.kernel)
}
inline void bm168x_tl_conv::add_kernel(::google::protobuf::uint32 value) {
  kernel_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm168x_lir.bm168x_tl_conv.kernel)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
bm168x_tl_conv::kernel() const {
  // @@protoc_insertion_point(field_list:bmnet.bm168x_lir.bm168x_tl_conv.kernel)
  return kernel_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
bm168x_tl_conv::mutable_kernel() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm168x_lir.bm168x_tl_conv.kernel)
  return &kernel_;
}

// repeated uint32 kstride = 10;
inline int bm168x_tl_conv::kstride_size() const {
  return kstride_.size();
}
inline void bm168x_tl_conv::clear_kstride() {
  kstride_.Clear();
}
inline ::google::protobuf::uint32 bm168x_tl_conv::kstride(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_conv.kstride)
  return kstride_.Get(index);
}
inline void bm168x_tl_conv::set_kstride(int index, ::google::protobuf::uint32 value) {
  kstride_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_conv.kstride)
}
inline void bm168x_tl_conv::add_kstride(::google::protobuf::uint32 value) {
  kstride_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm168x_lir.bm168x_tl_conv.kstride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
bm168x_tl_conv::kstride() const {
  // @@protoc_insertion_point(field_list:bmnet.bm168x_lir.bm168x_tl_conv.kstride)
  return kstride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
bm168x_tl_conv::mutable_kstride() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm168x_lir.bm168x_tl_conv.kstride)
  return &kstride_;
}

// optional bool flip = 11;
inline bool bm168x_tl_conv::has_flip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bm168x_tl_conv::set_has_flip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bm168x_tl_conv::clear_has_flip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bm168x_tl_conv::clear_flip() {
  flip_ = false;
  clear_has_flip();
}
inline bool bm168x_tl_conv::flip() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_conv.flip)
  return flip_;
}
inline void bm168x_tl_conv::set_flip(bool value) {
  set_has_flip();
  flip_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_conv.flip)
}

// optional bool result_add = 12;
inline bool bm168x_tl_conv::has_result_add() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void bm168x_tl_conv::set_has_result_add() {
  _has_bits_[0] |= 0x00000020u;
}
inline void bm168x_tl_conv::clear_has_result_add() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void bm168x_tl_conv::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool bm168x_tl_conv::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_conv.result_add)
  return result_add_;
}
inline void bm168x_tl_conv::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_conv.result_add)
}

// -------------------------------------------------------------------

// bm168x_tl_pooling

// optional .bmnet.bm168x_lir.Operand ofmap = 1;
inline bool bm168x_tl_pooling::has_ofmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_pooling::set_has_ofmap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_pooling::clear_has_ofmap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_pooling::clear_ofmap() {
  if (ofmap_ != NULL) ofmap_->Clear();
  clear_has_ofmap();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_pooling::_internal_ofmap() const {
  return *ofmap_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_pooling::ofmap() const {
  const ::bmnet::bm168x_lir::Operand* p = ofmap_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_pooling.ofmap)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_pooling::release_ofmap() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_pooling.ofmap)
  clear_has_ofmap();
  ::bmnet::bm168x_lir::Operand* temp = ofmap_;
  ofmap_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_pooling::mutable_ofmap() {
  set_has_ofmap();
  if (ofmap_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    ofmap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_pooling.ofmap)
  return ofmap_;
}
inline void bm168x_tl_pooling::set_allocated_ofmap(::bmnet::bm168x_lir::Operand* ofmap) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ofmap_;
  }
  if (ofmap) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ofmap = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ofmap, submessage_arena);
    }
    set_has_ofmap();
  } else {
    clear_has_ofmap();
  }
  ofmap_ = ofmap;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_pooling.ofmap)
}

// optional .bmnet.bm168x_lir.Operand ifmap = 2;
inline bool bm168x_tl_pooling::has_ifmap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_pooling::set_has_ifmap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_pooling::clear_has_ifmap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_pooling::clear_ifmap() {
  if (ifmap_ != NULL) ifmap_->Clear();
  clear_has_ifmap();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_pooling::_internal_ifmap() const {
  return *ifmap_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_pooling::ifmap() const {
  const ::bmnet::bm168x_lir::Operand* p = ifmap_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_pooling.ifmap)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_pooling::release_ifmap() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_pooling.ifmap)
  clear_has_ifmap();
  ::bmnet::bm168x_lir::Operand* temp = ifmap_;
  ifmap_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_pooling::mutable_ifmap() {
  set_has_ifmap();
  if (ifmap_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    ifmap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_pooling.ifmap)
  return ifmap_;
}
inline void bm168x_tl_pooling::set_allocated_ifmap(::bmnet::bm168x_lir::Operand* ifmap) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ifmap_;
  }
  if (ifmap) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ifmap = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ifmap, submessage_arena);
    }
    set_has_ifmap();
  } else {
    clear_has_ifmap();
  }
  ifmap_ = ifmap;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_pooling.ifmap)
}

// optional bool avg_pooling = 3;
inline bool bm168x_tl_pooling::has_avg_pooling() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_pooling::set_has_avg_pooling() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_pooling::clear_has_avg_pooling() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_pooling::clear_avg_pooling() {
  avg_pooling_ = false;
  clear_has_avg_pooling();
}
inline bool bm168x_tl_pooling::avg_pooling() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_pooling.avg_pooling)
  return avg_pooling_;
}
inline void bm168x_tl_pooling::set_avg_pooling(bool value) {
  set_has_avg_pooling();
  avg_pooling_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_pooling.avg_pooling)
}

// repeated uint32 insert = 4;
inline int bm168x_tl_pooling::insert_size() const {
  return insert_.size();
}
inline void bm168x_tl_pooling::clear_insert() {
  insert_.Clear();
}
inline ::google::protobuf::uint32 bm168x_tl_pooling::insert(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_pooling.insert)
  return insert_.Get(index);
}
inline void bm168x_tl_pooling::set_insert(int index, ::google::protobuf::uint32 value) {
  insert_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_pooling.insert)
}
inline void bm168x_tl_pooling::add_insert(::google::protobuf::uint32 value) {
  insert_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm168x_lir.bm168x_tl_pooling.insert)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
bm168x_tl_pooling::insert() const {
  // @@protoc_insertion_point(field_list:bmnet.bm168x_lir.bm168x_tl_pooling.insert)
  return insert_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
bm168x_tl_pooling::mutable_insert() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm168x_lir.bm168x_tl_pooling.insert)
  return &insert_;
}

// repeated uint32 pad = 5;
inline int bm168x_tl_pooling::pad_size() const {
  return pad_.size();
}
inline void bm168x_tl_pooling::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 bm168x_tl_pooling::pad(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_pooling.pad)
  return pad_.Get(index);
}
inline void bm168x_tl_pooling::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_pooling.pad)
}
inline void bm168x_tl_pooling::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm168x_lir.bm168x_tl_pooling.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
bm168x_tl_pooling::pad() const {
  // @@protoc_insertion_point(field_list:bmnet.bm168x_lir.bm168x_tl_pooling.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
bm168x_tl_pooling::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm168x_lir.bm168x_tl_pooling.pad)
  return &pad_;
}

// repeated uint32 stride = 6;
inline int bm168x_tl_pooling::stride_size() const {
  return stride_.size();
}
inline void bm168x_tl_pooling::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 bm168x_tl_pooling::stride(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_pooling.stride)
  return stride_.Get(index);
}
inline void bm168x_tl_pooling::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_pooling.stride)
}
inline void bm168x_tl_pooling::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm168x_lir.bm168x_tl_pooling.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
bm168x_tl_pooling::stride() const {
  // @@protoc_insertion_point(field_list:bmnet.bm168x_lir.bm168x_tl_pooling.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
bm168x_tl_pooling::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm168x_lir.bm168x_tl_pooling.stride)
  return &stride_;
}

// repeated uint32 kernel = 7;
inline int bm168x_tl_pooling::kernel_size() const {
  return kernel_.size();
}
inline void bm168x_tl_pooling::clear_kernel() {
  kernel_.Clear();
}
inline ::google::protobuf::uint32 bm168x_tl_pooling::kernel(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_pooling.kernel)
  return kernel_.Get(index);
}
inline void bm168x_tl_pooling::set_kernel(int index, ::google::protobuf::uint32 value) {
  kernel_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_pooling.kernel)
}
inline void bm168x_tl_pooling::add_kernel(::google::protobuf::uint32 value) {
  kernel_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm168x_lir.bm168x_tl_pooling.kernel)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
bm168x_tl_pooling::kernel() const {
  // @@protoc_insertion_point(field_list:bmnet.bm168x_lir.bm168x_tl_pooling.kernel)
  return kernel_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
bm168x_tl_pooling::mutable_kernel() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm168x_lir.bm168x_tl_pooling.kernel)
  return &kernel_;
}

// optional float avg_const = 8;
inline bool bm168x_tl_pooling::has_avg_const() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bm168x_tl_pooling::set_has_avg_const() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bm168x_tl_pooling::clear_has_avg_const() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bm168x_tl_pooling::clear_avg_const() {
  avg_const_ = 0;
  clear_has_avg_const();
}
inline float bm168x_tl_pooling::avg_const() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_pooling.avg_const)
  return avg_const_;
}
inline void bm168x_tl_pooling::set_avg_const(float value) {
  set_has_avg_const();
  avg_const_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_pooling.avg_const)
}

// -------------------------------------------------------------------

// bm168x_tl_arithmetic

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_tl_arithmetic::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_arithmetic::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_arithmetic::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_arithmetic::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_arithmetic::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_arithmetic::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_arithmetic.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_arithmetic::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_arithmetic.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_arithmetic::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_arithmetic.dst)
  return dst_;
}
inline void bm168x_tl_arithmetic::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_arithmetic.dst)
}

// optional .bmnet.bm168x_lir.Operand src0 = 2;
inline bool bm168x_tl_arithmetic::has_src0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_arithmetic::set_has_src0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_arithmetic::clear_has_src0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_arithmetic::clear_src0() {
  if (src0_ != NULL) src0_->Clear();
  clear_has_src0();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_arithmetic::_internal_src0() const {
  return *src0_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_arithmetic::src0() const {
  const ::bmnet::bm168x_lir::Operand* p = src0_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_arithmetic.src0)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_arithmetic::release_src0() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_arithmetic.src0)
  clear_has_src0();
  ::bmnet::bm168x_lir::Operand* temp = src0_;
  src0_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_arithmetic::mutable_src0() {
  set_has_src0();
  if (src0_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src0_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_arithmetic.src0)
  return src0_;
}
inline void bm168x_tl_arithmetic::set_allocated_src0(::bmnet::bm168x_lir::Operand* src0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src0_;
  }
  if (src0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src0, submessage_arena);
    }
    set_has_src0();
  } else {
    clear_has_src0();
  }
  src0_ = src0;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_arithmetic.src0)
}

// optional .bmnet.bm168x_lir.Operand src1 = 3;
inline bool bm168x_tl_arithmetic::has_src1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_arithmetic::set_has_src1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_arithmetic::clear_has_src1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_arithmetic::clear_src1() {
  if (src1_ != NULL) src1_->Clear();
  clear_has_src1();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_arithmetic::_internal_src1() const {
  return *src1_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_arithmetic::src1() const {
  const ::bmnet::bm168x_lir::Operand* p = src1_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_arithmetic.src1)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_arithmetic::release_src1() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_arithmetic.src1)
  clear_has_src1();
  ::bmnet::bm168x_lir::Operand* temp = src1_;
  src1_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_arithmetic::mutable_src1() {
  set_has_src1();
  if (src1_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_arithmetic.src1)
  return src1_;
}
inline void bm168x_tl_arithmetic::set_allocated_src1(::bmnet::bm168x_lir::Operand* src1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src1_;
  }
  if (src1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src1, submessage_arena);
    }
    set_has_src1();
  } else {
    clear_has_src1();
  }
  src1_ = src1;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_arithmetic.src1)
}

// optional .bmnet.bm168x_lir.ArithmeticOpCode code = 4;
inline bool bm168x_tl_arithmetic::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bm168x_tl_arithmetic::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bm168x_tl_arithmetic::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bm168x_tl_arithmetic::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::bmnet::bm168x_lir::ArithmeticOpCode bm168x_tl_arithmetic::code() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_arithmetic.code)
  return static_cast< ::bmnet::bm168x_lir::ArithmeticOpCode >(code_);
}
inline void bm168x_tl_arithmetic::set_code(::bmnet::bm168x_lir::ArithmeticOpCode value) {
  assert(::bmnet::bm168x_lir::ArithmeticOpCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_arithmetic.code)
}

// optional bool result_add = 5;
inline bool bm168x_tl_arithmetic::has_result_add() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bm168x_tl_arithmetic::set_has_result_add() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bm168x_tl_arithmetic::clear_has_result_add() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bm168x_tl_arithmetic::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool bm168x_tl_arithmetic::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_arithmetic.result_add)
  return result_add_;
}
inline void bm168x_tl_arithmetic::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_arithmetic.result_add)
}

// -------------------------------------------------------------------

// bm168x_tl_md_scalar

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_tl_md_scalar::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_md_scalar::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_md_scalar::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_md_scalar::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_md_scalar::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_md_scalar::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_md_scalar.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_md_scalar::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_md_scalar.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_md_scalar::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_md_scalar.dst)
  return dst_;
}
inline void bm168x_tl_md_scalar::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_md_scalar.dst)
}

// optional .bmnet.bm168x_lir.Operand src0 = 2;
inline bool bm168x_tl_md_scalar::has_src0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_md_scalar::set_has_src0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_md_scalar::clear_has_src0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_md_scalar::clear_src0() {
  if (src0_ != NULL) src0_->Clear();
  clear_has_src0();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_md_scalar::_internal_src0() const {
  return *src0_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_md_scalar::src0() const {
  const ::bmnet::bm168x_lir::Operand* p = src0_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_md_scalar.src0)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_md_scalar::release_src0() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_md_scalar.src0)
  clear_has_src0();
  ::bmnet::bm168x_lir::Operand* temp = src0_;
  src0_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_md_scalar::mutable_src0() {
  set_has_src0();
  if (src0_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src0_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_md_scalar.src0)
  return src0_;
}
inline void bm168x_tl_md_scalar::set_allocated_src0(::bmnet::bm168x_lir::Operand* src0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src0_;
  }
  if (src0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src0, submessage_arena);
    }
    set_has_src0();
  } else {
    clear_has_src0();
  }
  src0_ = src0;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_md_scalar.src0)
}

// optional .bmnet.bm168x_lir.Operand src1 = 3;
inline bool bm168x_tl_md_scalar::has_src1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_md_scalar::set_has_src1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_md_scalar::clear_has_src1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_md_scalar::clear_src1() {
  if (src1_ != NULL) src1_->Clear();
  clear_has_src1();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_md_scalar::_internal_src1() const {
  return *src1_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_md_scalar::src1() const {
  const ::bmnet::bm168x_lir::Operand* p = src1_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_md_scalar.src1)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_md_scalar::release_src1() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_md_scalar.src1)
  clear_has_src1();
  ::bmnet::bm168x_lir::Operand* temp = src1_;
  src1_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_md_scalar::mutable_src1() {
  set_has_src1();
  if (src1_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_md_scalar.src1)
  return src1_;
}
inline void bm168x_tl_md_scalar::set_allocated_src1(::bmnet::bm168x_lir::Operand* src1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src1_;
  }
  if (src1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src1, submessage_arena);
    }
    set_has_src1();
  } else {
    clear_has_src1();
  }
  src1_ = src1;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_md_scalar.src1)
}

// optional .bmnet.bm168x_lir.ArithmeticOpCode code = 4;
inline bool bm168x_tl_md_scalar::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bm168x_tl_md_scalar::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bm168x_tl_md_scalar::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bm168x_tl_md_scalar::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::bmnet::bm168x_lir::ArithmeticOpCode bm168x_tl_md_scalar::code() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_md_scalar.code)
  return static_cast< ::bmnet::bm168x_lir::ArithmeticOpCode >(code_);
}
inline void bm168x_tl_md_scalar::set_code(::bmnet::bm168x_lir::ArithmeticOpCode value) {
  assert(::bmnet::bm168x_lir::ArithmeticOpCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_md_scalar.code)
}

// optional bool result_add = 5;
inline bool bm168x_tl_md_scalar::has_result_add() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bm168x_tl_md_scalar::set_has_result_add() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bm168x_tl_md_scalar::clear_has_result_add() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bm168x_tl_md_scalar::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool bm168x_tl_md_scalar::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_md_scalar.result_add)
  return result_add_;
}
inline void bm168x_tl_md_scalar::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_md_scalar.result_add)
}

// -------------------------------------------------------------------

// bm168x_tl_fill

// optional .bmnet.bm168x_lir.Operand r = 1;
inline bool bm168x_tl_fill::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_fill::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_fill::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_fill::clear_r() {
  if (r_ != NULL) r_->Clear();
  clear_has_r();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_fill::_internal_r() const {
  return *r_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_fill::r() const {
  const ::bmnet::bm168x_lir::Operand* p = r_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_fill.r)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_fill::release_r() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_fill.r)
  clear_has_r();
  ::bmnet::bm168x_lir::Operand* temp = r_;
  r_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_fill::mutable_r() {
  set_has_r();
  if (r_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    r_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_fill.r)
  return r_;
}
inline void bm168x_tl_fill::set_allocated_r(::bmnet::bm168x_lir::Operand* r) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete r_;
  }
  if (r) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      r = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, r, submessage_arena);
    }
    set_has_r();
  } else {
    clear_has_r();
  }
  r_ = r;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_fill.r)
}

// optional .bmnet.bm168x_lir.Operand a = 2;
inline bool bm168x_tl_fill::has_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_fill::set_has_a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_fill::clear_has_a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_fill::clear_a() {
  if (a_ != NULL) a_->Clear();
  clear_has_a();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_fill::_internal_a() const {
  return *a_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_fill::a() const {
  const ::bmnet::bm168x_lir::Operand* p = a_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_fill.a)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_fill::release_a() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_fill.a)
  clear_has_a();
  ::bmnet::bm168x_lir::Operand* temp = a_;
  a_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_fill::mutable_a() {
  set_has_a();
  if (a_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    a_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_fill.a)
  return a_;
}
inline void bm168x_tl_fill::set_allocated_a(::bmnet::bm168x_lir::Operand* a) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete a_;
  }
  if (a) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      a = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    set_has_a();
  } else {
    clear_has_a();
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_fill.a)
}

// -------------------------------------------------------------------

// bm168x_tl_clear

// optional .bmnet.bm168x_lir.Operand r = 1;
inline bool bm168x_tl_clear::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_clear::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_clear::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_clear::clear_r() {
  if (r_ != NULL) r_->Clear();
  clear_has_r();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_clear::_internal_r() const {
  return *r_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_clear::r() const {
  const ::bmnet::bm168x_lir::Operand* p = r_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_clear.r)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_clear::release_r() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_clear.r)
  clear_has_r();
  ::bmnet::bm168x_lir::Operand* temp = r_;
  r_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_clear::mutable_r() {
  set_has_r();
  if (r_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    r_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_clear.r)
  return r_;
}
inline void bm168x_tl_clear::set_allocated_r(::bmnet::bm168x_lir::Operand* r) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete r_;
  }
  if (r) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      r = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, r, submessage_arena);
    }
    set_has_r();
  } else {
    clear_has_r();
  }
  r_ = r;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_clear.r)
}

// -------------------------------------------------------------------

// bm168x_tl_sfu

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_tl_sfu::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_sfu::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_sfu::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_sfu::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sfu::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sfu::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_sfu.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sfu::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_sfu.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sfu::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_sfu.dst)
  return dst_;
}
inline void bm168x_tl_sfu::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_sfu.dst)
}

// optional .bmnet.bm168x_lir.Operand src = 2;
inline bool bm168x_tl_sfu::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_sfu::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_sfu::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_sfu::clear_src() {
  if (src_ != NULL) src_->Clear();
  clear_has_src();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sfu::_internal_src() const {
  return *src_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sfu::src() const {
  const ::bmnet::bm168x_lir::Operand* p = src_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_sfu.src)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sfu::release_src() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_sfu.src)
  clear_has_src();
  ::bmnet::bm168x_lir::Operand* temp = src_;
  src_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sfu::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_sfu.src)
  return src_;
}
inline void bm168x_tl_sfu::set_allocated_src(::bmnet::bm168x_lir::Operand* src) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src_;
  }
  if (src) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    set_has_src();
  } else {
    clear_has_src();
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_sfu.src)
}

// optional .bmnet.bm168x_lir.SfuOpCode code = 3;
inline bool bm168x_tl_sfu::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_sfu::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_sfu::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_sfu::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::bmnet::bm168x_lir::SfuOpCode bm168x_tl_sfu::code() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_sfu.code)
  return static_cast< ::bmnet::bm168x_lir::SfuOpCode >(code_);
}
inline void bm168x_tl_sfu::set_code(::bmnet::bm168x_lir::SfuOpCode value) {
  assert(::bmnet::bm168x_lir::SfuOpCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_sfu.code)
}

// optional float a = 4;
inline bool bm168x_tl_sfu::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bm168x_tl_sfu::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bm168x_tl_sfu::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bm168x_tl_sfu::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline float bm168x_tl_sfu::a() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_sfu.a)
  return a_;
}
inline void bm168x_tl_sfu::set_a(float value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_sfu.a)
}

// optional int32 n = 5;
inline bool bm168x_tl_sfu::has_n() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bm168x_tl_sfu::set_has_n() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bm168x_tl_sfu::clear_has_n() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bm168x_tl_sfu::clear_n() {
  n_ = 0;
  clear_has_n();
}
inline ::google::protobuf::int32 bm168x_tl_sfu::n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_sfu.n)
  return n_;
}
inline void bm168x_tl_sfu::set_n(::google::protobuf::int32 value) {
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_sfu.n)
}

// -------------------------------------------------------------------

// bm168x_tl_mac

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_tl_mac::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_mac::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_mac::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_mac::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_mac::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_mac::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_mac.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_mac::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_mac.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_mac::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_mac.dst)
  return dst_;
}
inline void bm168x_tl_mac::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_mac.dst)
}

// optional .bmnet.bm168x_lir.Operand src0 = 2;
inline bool bm168x_tl_mac::has_src0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_mac::set_has_src0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_mac::clear_has_src0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_mac::clear_src0() {
  if (src0_ != NULL) src0_->Clear();
  clear_has_src0();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_mac::_internal_src0() const {
  return *src0_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_mac::src0() const {
  const ::bmnet::bm168x_lir::Operand* p = src0_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_mac.src0)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_mac::release_src0() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_mac.src0)
  clear_has_src0();
  ::bmnet::bm168x_lir::Operand* temp = src0_;
  src0_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_mac::mutable_src0() {
  set_has_src0();
  if (src0_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src0_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_mac.src0)
  return src0_;
}
inline void bm168x_tl_mac::set_allocated_src0(::bmnet::bm168x_lir::Operand* src0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src0_;
  }
  if (src0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src0, submessage_arena);
    }
    set_has_src0();
  } else {
    clear_has_src0();
  }
  src0_ = src0;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_mac.src0)
}

// optional .bmnet.bm168x_lir.Operand src1 = 3;
inline bool bm168x_tl_mac::has_src1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_mac::set_has_src1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_mac::clear_has_src1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_mac::clear_src1() {
  if (src1_ != NULL) src1_->Clear();
  clear_has_src1();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_mac::_internal_src1() const {
  return *src1_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_mac::src1() const {
  const ::bmnet::bm168x_lir::Operand* p = src1_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_mac.src1)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_mac::release_src1() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_mac.src1)
  clear_has_src1();
  ::bmnet::bm168x_lir::Operand* temp = src1_;
  src1_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_mac::mutable_src1() {
  set_has_src1();
  if (src1_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_mac.src1)
  return src1_;
}
inline void bm168x_tl_mac::set_allocated_src1(::bmnet::bm168x_lir::Operand* src1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src1_;
  }
  if (src1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src1, submessage_arena);
    }
    set_has_src1();
  } else {
    clear_has_src1();
  }
  src1_ = src1;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_mac.src1)
}

// optional .bmnet.bm168x_lir.Operand src2 = 4;
inline bool bm168x_tl_mac::has_src2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bm168x_tl_mac::set_has_src2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bm168x_tl_mac::clear_has_src2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bm168x_tl_mac::clear_src2() {
  if (src2_ != NULL) src2_->Clear();
  clear_has_src2();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_mac::_internal_src2() const {
  return *src2_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_mac::src2() const {
  const ::bmnet::bm168x_lir::Operand* p = src2_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_mac.src2)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_mac::release_src2() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_mac.src2)
  clear_has_src2();
  ::bmnet::bm168x_lir::Operand* temp = src2_;
  src2_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_mac::mutable_src2() {
  set_has_src2();
  if (src2_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_mac.src2)
  return src2_;
}
inline void bm168x_tl_mac::set_allocated_src2(::bmnet::bm168x_lir::Operand* src2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src2_;
  }
  if (src2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src2, submessage_arena);
    }
    set_has_src2();
  } else {
    clear_has_src2();
  }
  src2_ = src2;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_mac.src2)
}

// optional bool result_add = 5;
inline bool bm168x_tl_mac::has_result_add() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bm168x_tl_mac::set_has_result_add() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bm168x_tl_mac::clear_has_result_add() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bm168x_tl_mac::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool bm168x_tl_mac::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_mac.result_add)
  return result_add_;
}
inline void bm168x_tl_mac::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_mac.result_add)
}

// -------------------------------------------------------------------

// bm168x_tl_add_square

// optional .bmnet.bm168x_lir.Operand r = 1;
inline bool bm168x_tl_add_square::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_add_square::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_add_square::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_add_square::clear_r() {
  if (r_ != NULL) r_->Clear();
  clear_has_r();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_add_square::_internal_r() const {
  return *r_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_add_square::r() const {
  const ::bmnet::bm168x_lir::Operand* p = r_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_add_square.r)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_add_square::release_r() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_add_square.r)
  clear_has_r();
  ::bmnet::bm168x_lir::Operand* temp = r_;
  r_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_add_square::mutable_r() {
  set_has_r();
  if (r_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    r_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_add_square.r)
  return r_;
}
inline void bm168x_tl_add_square::set_allocated_r(::bmnet::bm168x_lir::Operand* r) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete r_;
  }
  if (r) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      r = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, r, submessage_arena);
    }
    set_has_r();
  } else {
    clear_has_r();
  }
  r_ = r;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_add_square.r)
}

// optional .bmnet.bm168x_lir.Operand a = 2;
inline bool bm168x_tl_add_square::has_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_add_square::set_has_a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_add_square::clear_has_a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_add_square::clear_a() {
  if (a_ != NULL) a_->Clear();
  clear_has_a();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_add_square::_internal_a() const {
  return *a_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_add_square::a() const {
  const ::bmnet::bm168x_lir::Operand* p = a_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_add_square.a)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_add_square::release_a() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_add_square.a)
  clear_has_a();
  ::bmnet::bm168x_lir::Operand* temp = a_;
  a_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_add_square::mutable_a() {
  set_has_a();
  if (a_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    a_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_add_square.a)
  return a_;
}
inline void bm168x_tl_add_square::set_allocated_a(::bmnet::bm168x_lir::Operand* a) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete a_;
  }
  if (a) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      a = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    set_has_a();
  } else {
    clear_has_a();
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_add_square.a)
}

// optional .bmnet.bm168x_lir.Operand b = 3;
inline bool bm168x_tl_add_square::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_add_square::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_add_square::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_add_square::clear_b() {
  if (b_ != NULL) b_->Clear();
  clear_has_b();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_add_square::_internal_b() const {
  return *b_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_add_square::b() const {
  const ::bmnet::bm168x_lir::Operand* p = b_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_add_square.b)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_add_square::release_b() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_add_square.b)
  clear_has_b();
  ::bmnet::bm168x_lir::Operand* temp = b_;
  b_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_add_square::mutable_b() {
  set_has_b();
  if (b_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    b_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_add_square.b)
  return b_;
}
inline void bm168x_tl_add_square::set_allocated_b(::bmnet::bm168x_lir::Operand* b) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete b_;
  }
  if (b) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      b = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    set_has_b();
  } else {
    clear_has_b();
  }
  b_ = b;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_add_square.b)
}

// -------------------------------------------------------------------

// bm168x_tl_sub_square

// optional .bmnet.bm168x_lir.Operand r = 1;
inline bool bm168x_tl_sub_square::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_sub_square::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_sub_square::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_sub_square::clear_r() {
  if (r_ != NULL) r_->Clear();
  clear_has_r();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sub_square::_internal_r() const {
  return *r_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sub_square::r() const {
  const ::bmnet::bm168x_lir::Operand* p = r_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_sub_square.r)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sub_square::release_r() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_sub_square.r)
  clear_has_r();
  ::bmnet::bm168x_lir::Operand* temp = r_;
  r_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sub_square::mutable_r() {
  set_has_r();
  if (r_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    r_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_sub_square.r)
  return r_;
}
inline void bm168x_tl_sub_square::set_allocated_r(::bmnet::bm168x_lir::Operand* r) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete r_;
  }
  if (r) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      r = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, r, submessage_arena);
    }
    set_has_r();
  } else {
    clear_has_r();
  }
  r_ = r;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_sub_square.r)
}

// optional .bmnet.bm168x_lir.Operand a = 2;
inline bool bm168x_tl_sub_square::has_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_sub_square::set_has_a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_sub_square::clear_has_a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_sub_square::clear_a() {
  if (a_ != NULL) a_->Clear();
  clear_has_a();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sub_square::_internal_a() const {
  return *a_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sub_square::a() const {
  const ::bmnet::bm168x_lir::Operand* p = a_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_sub_square.a)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sub_square::release_a() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_sub_square.a)
  clear_has_a();
  ::bmnet::bm168x_lir::Operand* temp = a_;
  a_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sub_square::mutable_a() {
  set_has_a();
  if (a_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    a_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_sub_square.a)
  return a_;
}
inline void bm168x_tl_sub_square::set_allocated_a(::bmnet::bm168x_lir::Operand* a) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete a_;
  }
  if (a) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      a = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    set_has_a();
  } else {
    clear_has_a();
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_sub_square.a)
}

// optional .bmnet.bm168x_lir.Operand b = 3;
inline bool bm168x_tl_sub_square::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_sub_square::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_sub_square::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_sub_square::clear_b() {
  if (b_ != NULL) b_->Clear();
  clear_has_b();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sub_square::_internal_b() const {
  return *b_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sub_square::b() const {
  const ::bmnet::bm168x_lir::Operand* p = b_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_sub_square.b)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sub_square::release_b() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_sub_square.b)
  clear_has_b();
  ::bmnet::bm168x_lir::Operand* temp = b_;
  b_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sub_square::mutable_b() {
  set_has_b();
  if (b_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    b_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_sub_square.b)
  return b_;
}
inline void bm168x_tl_sub_square::set_allocated_b(::bmnet::bm168x_lir::Operand* b) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete b_;
  }
  if (b) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      b = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    set_has_b();
  } else {
    clear_has_b();
  }
  b_ = b;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_sub_square.b)
}

// -------------------------------------------------------------------

// bm168x_tl_max

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_tl_max::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_max::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_max::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_max::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_max::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_max::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_max.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_max::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_max.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_max::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_max.dst)
  return dst_;
}
inline void bm168x_tl_max::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_max.dst)
}

// optional .bmnet.bm168x_lir.Operand src0 = 2;
inline bool bm168x_tl_max::has_src0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_max::set_has_src0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_max::clear_has_src0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_max::clear_src0() {
  if (src0_ != NULL) src0_->Clear();
  clear_has_src0();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_max::_internal_src0() const {
  return *src0_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_max::src0() const {
  const ::bmnet::bm168x_lir::Operand* p = src0_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_max.src0)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_max::release_src0() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_max.src0)
  clear_has_src0();
  ::bmnet::bm168x_lir::Operand* temp = src0_;
  src0_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_max::mutable_src0() {
  set_has_src0();
  if (src0_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src0_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_max.src0)
  return src0_;
}
inline void bm168x_tl_max::set_allocated_src0(::bmnet::bm168x_lir::Operand* src0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src0_;
  }
  if (src0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src0, submessage_arena);
    }
    set_has_src0();
  } else {
    clear_has_src0();
  }
  src0_ = src0;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_max.src0)
}

// optional .bmnet.bm168x_lir.Operand src1 = 3;
inline bool bm168x_tl_max::has_src1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_max::set_has_src1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_max::clear_has_src1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_max::clear_src1() {
  if (src1_ != NULL) src1_->Clear();
  clear_has_src1();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_max::_internal_src1() const {
  return *src1_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_max::src1() const {
  const ::bmnet::bm168x_lir::Operand* p = src1_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_max.src1)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_max::release_src1() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_max.src1)
  clear_has_src1();
  ::bmnet::bm168x_lir::Operand* temp = src1_;
  src1_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_max::mutable_src1() {
  set_has_src1();
  if (src1_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_max.src1)
  return src1_;
}
inline void bm168x_tl_max::set_allocated_src1(::bmnet::bm168x_lir::Operand* src1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src1_;
  }
  if (src1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src1, submessage_arena);
    }
    set_has_src1();
  } else {
    clear_has_src1();
  }
  src1_ = src1;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_max.src1)
}

// -------------------------------------------------------------------

// bm168x_tl_cmp

// optional .bmnet.bm168x_lir.Operand dst0 = 1;
inline bool bm168x_tl_cmp::has_dst0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_cmp::set_has_dst0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_cmp::clear_has_dst0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_cmp::clear_dst0() {
  if (dst0_ != NULL) dst0_->Clear();
  clear_has_dst0();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cmp::_internal_dst0() const {
  return *dst0_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cmp::dst0() const {
  const ::bmnet::bm168x_lir::Operand* p = dst0_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_cmp.dst0)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cmp::release_dst0() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_cmp.dst0)
  clear_has_dst0();
  ::bmnet::bm168x_lir::Operand* temp = dst0_;
  dst0_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cmp::mutable_dst0() {
  set_has_dst0();
  if (dst0_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst0_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_cmp.dst0)
  return dst0_;
}
inline void bm168x_tl_cmp::set_allocated_dst0(::bmnet::bm168x_lir::Operand* dst0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst0_;
  }
  if (dst0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst0, submessage_arena);
    }
    set_has_dst0();
  } else {
    clear_has_dst0();
  }
  dst0_ = dst0;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_cmp.dst0)
}

// optional .bmnet.bm168x_lir.Operand dst1 = 2;
inline bool bm168x_tl_cmp::has_dst1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_cmp::set_has_dst1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_cmp::clear_has_dst1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_cmp::clear_dst1() {
  if (dst1_ != NULL) dst1_->Clear();
  clear_has_dst1();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cmp::_internal_dst1() const {
  return *dst1_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cmp::dst1() const {
  const ::bmnet::bm168x_lir::Operand* p = dst1_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_cmp.dst1)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cmp::release_dst1() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_cmp.dst1)
  clear_has_dst1();
  ::bmnet::bm168x_lir::Operand* temp = dst1_;
  dst1_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cmp::mutable_dst1() {
  set_has_dst1();
  if (dst1_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_cmp.dst1)
  return dst1_;
}
inline void bm168x_tl_cmp::set_allocated_dst1(::bmnet::bm168x_lir::Operand* dst1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst1_;
  }
  if (dst1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst1, submessage_arena);
    }
    set_has_dst1();
  } else {
    clear_has_dst1();
  }
  dst1_ = dst1;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_cmp.dst1)
}

// optional .bmnet.bm168x_lir.Operand src0 = 3;
inline bool bm168x_tl_cmp::has_src0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_cmp::set_has_src0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_cmp::clear_has_src0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_cmp::clear_src0() {
  if (src0_ != NULL) src0_->Clear();
  clear_has_src0();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cmp::_internal_src0() const {
  return *src0_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cmp::src0() const {
  const ::bmnet::bm168x_lir::Operand* p = src0_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_cmp.src0)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cmp::release_src0() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_cmp.src0)
  clear_has_src0();
  ::bmnet::bm168x_lir::Operand* temp = src0_;
  src0_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cmp::mutable_src0() {
  set_has_src0();
  if (src0_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src0_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_cmp.src0)
  return src0_;
}
inline void bm168x_tl_cmp::set_allocated_src0(::bmnet::bm168x_lir::Operand* src0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src0_;
  }
  if (src0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src0, submessage_arena);
    }
    set_has_src0();
  } else {
    clear_has_src0();
  }
  src0_ = src0;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_cmp.src0)
}

// optional .bmnet.bm168x_lir.Operand src1 = 4;
inline bool bm168x_tl_cmp::has_src1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bm168x_tl_cmp::set_has_src1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bm168x_tl_cmp::clear_has_src1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bm168x_tl_cmp::clear_src1() {
  if (src1_ != NULL) src1_->Clear();
  clear_has_src1();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cmp::_internal_src1() const {
  return *src1_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cmp::src1() const {
  const ::bmnet::bm168x_lir::Operand* p = src1_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_cmp.src1)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cmp::release_src1() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_cmp.src1)
  clear_has_src1();
  ::bmnet::bm168x_lir::Operand* temp = src1_;
  src1_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cmp::mutable_src1() {
  set_has_src1();
  if (src1_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_cmp.src1)
  return src1_;
}
inline void bm168x_tl_cmp::set_allocated_src1(::bmnet::bm168x_lir::Operand* src1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src1_;
  }
  if (src1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src1, submessage_arena);
    }
    set_has_src1();
  } else {
    clear_has_src1();
  }
  src1_ = src1;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_cmp.src1)
}

// optional .bmnet.bm168x_lir.Operand src2 = 5;
inline bool bm168x_tl_cmp::has_src2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bm168x_tl_cmp::set_has_src2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bm168x_tl_cmp::clear_has_src2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bm168x_tl_cmp::clear_src2() {
  if (src2_ != NULL) src2_->Clear();
  clear_has_src2();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cmp::_internal_src2() const {
  return *src2_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cmp::src2() const {
  const ::bmnet::bm168x_lir::Operand* p = src2_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_cmp.src2)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cmp::release_src2() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_cmp.src2)
  clear_has_src2();
  ::bmnet::bm168x_lir::Operand* temp = src2_;
  src2_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cmp::mutable_src2() {
  set_has_src2();
  if (src2_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_cmp.src2)
  return src2_;
}
inline void bm168x_tl_cmp::set_allocated_src2(::bmnet::bm168x_lir::Operand* src2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src2_;
  }
  if (src2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src2, submessage_arena);
    }
    set_has_src2();
  } else {
    clear_has_src2();
  }
  src2_ = src2;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_cmp.src2)
}

// optional .bmnet.bm168x_lir.Operand src3 = 6;
inline bool bm168x_tl_cmp::has_src3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void bm168x_tl_cmp::set_has_src3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void bm168x_tl_cmp::clear_has_src3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void bm168x_tl_cmp::clear_src3() {
  if (src3_ != NULL) src3_->Clear();
  clear_has_src3();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cmp::_internal_src3() const {
  return *src3_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_cmp::src3() const {
  const ::bmnet::bm168x_lir::Operand* p = src3_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_cmp.src3)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cmp::release_src3() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_cmp.src3)
  clear_has_src3();
  ::bmnet::bm168x_lir::Operand* temp = src3_;
  src3_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_cmp::mutable_src3() {
  set_has_src3();
  if (src3_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src3_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_cmp.src3)
  return src3_;
}
inline void bm168x_tl_cmp::set_allocated_src3(::bmnet::bm168x_lir::Operand* src3) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src3_;
  }
  if (src3) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src3 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src3, submessage_arena);
    }
    set_has_src3();
  } else {
    clear_has_src3();
  }
  src3_ = src3;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_cmp.src3)
}

// -------------------------------------------------------------------

// bm168x_tl_sum

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_tl_sum::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_sum::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_sum::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_sum::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sum::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sum::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_sum.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sum::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_sum.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sum::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_sum.dst)
  return dst_;
}
inline void bm168x_tl_sum::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_sum.dst)
}

// optional .bmnet.bm168x_lir.Operand src = 2;
inline bool bm168x_tl_sum::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_sum::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_sum::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_sum::clear_src() {
  if (src_ != NULL) src_->Clear();
  clear_has_src();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sum::_internal_src() const {
  return *src_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_sum::src() const {
  const ::bmnet::bm168x_lir::Operand* p = src_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_sum.src)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sum::release_src() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_sum.src)
  clear_has_src();
  ::bmnet::bm168x_lir::Operand* temp = src_;
  src_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_sum::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_sum.src)
  return src_;
}
inline void bm168x_tl_sum::set_allocated_src(::bmnet::bm168x_lir::Operand* src) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src_;
  }
  if (src) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    set_has_src();
  } else {
    clear_has_src();
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_sum.src)
}

// optional bool result_add = 3;
inline bool bm168x_tl_sum::has_result_add() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_sum::set_has_result_add() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_sum::clear_has_result_add() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_sum::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool bm168x_tl_sum::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_sum.result_add)
  return result_add_;
}
inline void bm168x_tl_sum::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_sum.result_add)
}

// -------------------------------------------------------------------

// bm168x_tl_img_sum

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_tl_img_sum::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_img_sum::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_img_sum::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_img_sum::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_img_sum::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_img_sum::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_img_sum.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_img_sum::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_img_sum.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_img_sum::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_img_sum.dst)
  return dst_;
}
inline void bm168x_tl_img_sum::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_img_sum.dst)
}

// optional .bmnet.bm168x_lir.Operand src = 2;
inline bool bm168x_tl_img_sum::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_img_sum::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_img_sum::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_img_sum::clear_src() {
  if (src_ != NULL) src_->Clear();
  clear_has_src();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_img_sum::_internal_src() const {
  return *src_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_img_sum::src() const {
  const ::bmnet::bm168x_lir::Operand* p = src_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_img_sum.src)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_img_sum::release_src() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_img_sum.src)
  clear_has_src();
  ::bmnet::bm168x_lir::Operand* temp = src_;
  src_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_img_sum::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_img_sum.src)
  return src_;
}
inline void bm168x_tl_img_sum::set_allocated_src(::bmnet::bm168x_lir::Operand* src) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src_;
  }
  if (src) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    set_has_src();
  } else {
    clear_has_src();
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_img_sum.src)
}

// optional bool result_add = 3;
inline bool bm168x_tl_img_sum::has_result_add() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_img_sum::set_has_result_add() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_img_sum::clear_has_result_add() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_img_sum::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool bm168x_tl_img_sum::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_img_sum.result_add)
  return result_add_;
}
inline void bm168x_tl_img_sum::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_img_sum.result_add)
}

// -------------------------------------------------------------------

// bm168x_tl_matrix_mac

// optional .bmnet.bm168x_lir.Operand dst = 1;
inline bool bm168x_tl_matrix_mac::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bm168x_tl_matrix_mac::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bm168x_tl_matrix_mac::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bm168x_tl_matrix_mac::clear_dst() {
  if (dst_ != NULL) dst_->Clear();
  clear_has_dst();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_matrix_mac::_internal_dst() const {
  return *dst_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_matrix_mac::dst() const {
  const ::bmnet::bm168x_lir::Operand* p = dst_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_matrix_mac.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_matrix_mac::release_dst() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_matrix_mac.dst)
  clear_has_dst();
  ::bmnet::bm168x_lir::Operand* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_matrix_mac::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_matrix_mac.dst)
  return dst_;
}
inline void bm168x_tl_matrix_mac::set_allocated_dst(::bmnet::bm168x_lir::Operand* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_matrix_mac.dst)
}

// optional .bmnet.bm168x_lir.Operand src0 = 2;
inline bool bm168x_tl_matrix_mac::has_src0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bm168x_tl_matrix_mac::set_has_src0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bm168x_tl_matrix_mac::clear_has_src0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bm168x_tl_matrix_mac::clear_src0() {
  if (src0_ != NULL) src0_->Clear();
  clear_has_src0();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_matrix_mac::_internal_src0() const {
  return *src0_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_matrix_mac::src0() const {
  const ::bmnet::bm168x_lir::Operand* p = src0_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src0)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_matrix_mac::release_src0() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src0)
  clear_has_src0();
  ::bmnet::bm168x_lir::Operand* temp = src0_;
  src0_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_matrix_mac::mutable_src0() {
  set_has_src0();
  if (src0_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src0_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src0)
  return src0_;
}
inline void bm168x_tl_matrix_mac::set_allocated_src0(::bmnet::bm168x_lir::Operand* src0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src0_;
  }
  if (src0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src0, submessage_arena);
    }
    set_has_src0();
  } else {
    clear_has_src0();
  }
  src0_ = src0;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src0)
}

// optional .bmnet.bm168x_lir.Operand src1 = 3;
inline bool bm168x_tl_matrix_mac::has_src1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bm168x_tl_matrix_mac::set_has_src1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bm168x_tl_matrix_mac::clear_has_src1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bm168x_tl_matrix_mac::clear_src1() {
  if (src1_ != NULL) src1_->Clear();
  clear_has_src1();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_matrix_mac::_internal_src1() const {
  return *src1_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_matrix_mac::src1() const {
  const ::bmnet::bm168x_lir::Operand* p = src1_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src1)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_matrix_mac::release_src1() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src1)
  clear_has_src1();
  ::bmnet::bm168x_lir::Operand* temp = src1_;
  src1_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_matrix_mac::mutable_src1() {
  set_has_src1();
  if (src1_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src1)
  return src1_;
}
inline void bm168x_tl_matrix_mac::set_allocated_src1(::bmnet::bm168x_lir::Operand* src1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src1_;
  }
  if (src1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src1, submessage_arena);
    }
    set_has_src1();
  } else {
    clear_has_src1();
  }
  src1_ = src1;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src1)
}

// optional .bmnet.bm168x_lir.Operand src2 = 4;
inline bool bm168x_tl_matrix_mac::has_src2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bm168x_tl_matrix_mac::set_has_src2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bm168x_tl_matrix_mac::clear_has_src2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bm168x_tl_matrix_mac::clear_src2() {
  if (src2_ != NULL) src2_->Clear();
  clear_has_src2();
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_matrix_mac::_internal_src2() const {
  return *src2_;
}
inline const ::bmnet::bm168x_lir::Operand& bm168x_tl_matrix_mac::src2() const {
  const ::bmnet::bm168x_lir::Operand* p = src2_;
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src2)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm168x_lir::Operand*>(
      &::bmnet::bm168x_lir::_Operand_default_instance_);
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_matrix_mac::release_src2() {
  // @@protoc_insertion_point(field_release:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src2)
  clear_has_src2();
  ::bmnet::bm168x_lir::Operand* temp = src2_;
  src2_ = NULL;
  return temp;
}
inline ::bmnet::bm168x_lir::Operand* bm168x_tl_matrix_mac::mutable_src2() {
  set_has_src2();
  if (src2_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm168x_lir::Operand>(GetArenaNoVirtual());
    src2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src2)
  return src2_;
}
inline void bm168x_tl_matrix_mac::set_allocated_src2(::bmnet::bm168x_lir::Operand* src2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src2_;
  }
  if (src2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src2, submessage_arena);
    }
    set_has_src2();
  } else {
    clear_has_src2();
  }
  src2_ = src2;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src2)
}

// optional bool src0_transposed = 5;
inline bool bm168x_tl_matrix_mac::has_src0_transposed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bm168x_tl_matrix_mac::set_has_src0_transposed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bm168x_tl_matrix_mac::clear_has_src0_transposed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bm168x_tl_matrix_mac::clear_src0_transposed() {
  src0_transposed_ = false;
  clear_has_src0_transposed();
}
inline bool bm168x_tl_matrix_mac::src0_transposed() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src0_transposed)
  return src0_transposed_;
}
inline void bm168x_tl_matrix_mac::set_src0_transposed(bool value) {
  set_has_src0_transposed();
  src0_transposed_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_matrix_mac.src0_transposed)
}

// optional bool result_add = 6;
inline bool bm168x_tl_matrix_mac::has_result_add() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void bm168x_tl_matrix_mac::set_has_result_add() {
  _has_bits_[0] |= 0x00000020u;
}
inline void bm168x_tl_matrix_mac::clear_has_result_add() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void bm168x_tl_matrix_mac::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool bm168x_tl_matrix_mac::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm168x_lir.bm168x_tl_matrix_mac.result_add)
  return result_add_;
}
inline void bm168x_tl_matrix_mac::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm168x_lir.bm168x_tl_matrix_mac.result_add)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bm168x_lir
}  // namespace bmnet

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bmnet::bm168x_lir::Operand_OperandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::bm168x_lir::Operand_OperandType>() {
  return ::bmnet::bm168x_lir::Operand_OperandType_descriptor();
}
template <> struct is_proto_enum< ::bmnet::bm168x_lir::LIR_FMT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::bm168x_lir::LIR_FMT>() {
  return ::bmnet::bm168x_lir::LIR_FMT_descriptor();
}
template <> struct is_proto_enum< ::bmnet::bm168x_lir::ArithmeticOpCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::bm168x_lir::ArithmeticOpCode>() {
  return ::bmnet::bm168x_lir::ArithmeticOpCode_descriptor();
}
template <> struct is_proto_enum< ::bmnet::bm168x_lir::SfuOpCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::bm168x_lir::SfuOpCode>() {
  return ::bmnet::bm168x_lir::SfuOpCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_bmnet_2fbm168x_5flir_2eproto
