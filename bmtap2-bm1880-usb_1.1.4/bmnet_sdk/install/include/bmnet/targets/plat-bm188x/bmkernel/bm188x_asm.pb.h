// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bm188x_asm.proto

#ifndef PROTOBUF_INCLUDED_bm188x_5fasm_2eproto
#define PROTOBUF_INCLUDED_bm188x_5fasm_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_bm188x_5fasm_2eproto 

namespace protobuf_bm188x_5fasm_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[44];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_bm188x_5fasm_2eproto
namespace bmnet {
namespace bm1880 {
class CommandBuffer;
class CommandBufferDefaultTypeInternal;
extern CommandBufferDefaultTypeInternal _CommandBuffer_default_instance_;
class Inst;
class InstDefaultTypeInternal;
extern InstDefaultTypeInternal _Inst_default_instance_;
class Inst_bmnet_arithmetic_fixed_forward_bmkernel;
class Inst_bmnet_arithmetic_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_arithmetic_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_arithmetic_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel;
class Inst_bmnet_batchnorm_fixed_forward_inference_bmkernelDefaultTypeInternal;
extern Inst_bmnet_batchnorm_fixed_forward_inference_bmkernelDefaultTypeInternal _Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel_default_instance_;
class Inst_bmnet_clip_fixed_forward_bmkernel;
class Inst_bmnet_clip_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_clip_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_clip_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_concat_fixed_forward_bmkernel;
class Inst_bmnet_concat_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_concat_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_concat_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_conv_fixed_forward_bmkernel;
class Inst_bmnet_conv_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_conv_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_conv_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_conv_parallel_fixed_forward_bmkernel;
class Inst_bmnet_conv_parallel_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_conv_parallel_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_conv_parallel_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_crop_fixed_forward_bmkernel;
class Inst_bmnet_crop_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_crop_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_crop_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_deconv_fixed_forward_bmkernel;
class Inst_bmnet_deconv_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_deconv_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_deconv_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_eltwise_fixed_forward_bmkernel;
class Inst_bmnet_eltwise_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_eltwise_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_eltwise_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_fc_fixed_forward_bmkernel;
class Inst_bmnet_fc_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_fc_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_fc_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_joinone_fixed_forward_bmkernel;
class Inst_bmnet_joinone_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_joinone_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_joinone_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_leakyrelu_fixed_forward_bmkernel;
class Inst_bmnet_leakyrelu_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_leakyrelu_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_leakyrelu_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_lrn_fixed_forward_bmkernel;
class Inst_bmnet_lrn_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_lrn_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_lrn_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_normalize_fixed_forward_bmkernel;
class Inst_bmnet_normalize_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_normalize_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_normalize_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_permute_fixed_forward_bmkernel;
class Inst_bmnet_permute_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_permute_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_permute_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_pooling_fixed_forward_bmkernel;
class Inst_bmnet_pooling_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_pooling_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_pooling_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_prelu_fixed_forward_bmkernel;
class Inst_bmnet_prelu_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_prelu_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_prelu_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_priorbox_fixed_forward_bmkernel;
class Inst_bmnet_priorbox_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_priorbox_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_priorbox_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_quantization_fixed_forward_bmkernel;
class Inst_bmnet_quantization_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_quantization_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_quantization_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_relu_fixed_forward_bmkernel;
class Inst_bmnet_relu_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_relu_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_relu_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_reshape_fixed_forward_bmkernel;
class Inst_bmnet_reshape_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_reshape_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_reshape_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_scale_fixed_forward_bmkernel;
class Inst_bmnet_scale_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_scale_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_scale_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_sigmoid_fixed_forward_bmkernel;
class Inst_bmnet_sigmoid_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_sigmoid_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_sigmoid_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_slice_fixed_forward_bmkernel;
class Inst_bmnet_slice_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_slice_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_slice_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_split_fixed_forward_bmkernel;
class Inst_bmnet_split_fixed_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_split_fixed_forward_bmkernelDefaultTypeInternal _Inst_bmnet_split_fixed_forward_bmkernel_default_instance_;
class Inst_bmnet_tl_activation_forward_bmkernel;
class Inst_bmnet_tl_activation_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_activation_forward_bmkernelDefaultTypeInternal _Inst_bmnet_tl_activation_forward_bmkernel_default_instance_;
class Inst_bmnet_tl_batchnorm_forward_bmkernel;
class Inst_bmnet_tl_batchnorm_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_batchnorm_forward_bmkernelDefaultTypeInternal _Inst_bmnet_tl_batchnorm_forward_bmkernel_default_instance_;
class Inst_bmnet_tl_conv_forward_bmkernel;
class Inst_bmnet_tl_conv_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_conv_forward_bmkernelDefaultTypeInternal _Inst_bmnet_tl_conv_forward_bmkernel_default_instance_;
class Inst_bmnet_tl_deconv_forward_bmkernel;
class Inst_bmnet_tl_deconv_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_deconv_forward_bmkernelDefaultTypeInternal _Inst_bmnet_tl_deconv_forward_bmkernel_default_instance_;
class Inst_bmnet_tl_eltwise_forward_bmkernel;
class Inst_bmnet_tl_eltwise_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_eltwise_forward_bmkernelDefaultTypeInternal _Inst_bmnet_tl_eltwise_forward_bmkernel_default_instance_;
class Inst_bmnet_tl_fc_forward_bmkernel;
class Inst_bmnet_tl_fc_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_fc_forward_bmkernelDefaultTypeInternal _Inst_bmnet_tl_fc_forward_bmkernel_default_instance_;
class Inst_bmnet_tl_load_bmkernel;
class Inst_bmnet_tl_load_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_load_bmkernelDefaultTypeInternal _Inst_bmnet_tl_load_bmkernel_default_instance_;
class Inst_bmnet_tl_load_stride_bmkernel;
class Inst_bmnet_tl_load_stride_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_load_stride_bmkernelDefaultTypeInternal _Inst_bmnet_tl_load_stride_bmkernel_default_instance_;
class Inst_bmnet_tl_lrn_forward_bmkernel;
class Inst_bmnet_tl_lrn_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_lrn_forward_bmkernelDefaultTypeInternal _Inst_bmnet_tl_lrn_forward_bmkernel_default_instance_;
class Inst_bmnet_tl_pooling_forward_bmkernel;
class Inst_bmnet_tl_pooling_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_pooling_forward_bmkernelDefaultTypeInternal _Inst_bmnet_tl_pooling_forward_bmkernel_default_instance_;
class Inst_bmnet_tl_quantization_forward_bmkernel;
class Inst_bmnet_tl_quantization_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_quantization_forward_bmkernelDefaultTypeInternal _Inst_bmnet_tl_quantization_forward_bmkernel_default_instance_;
class Inst_bmnet_tl_relu_forward_bmkernel;
class Inst_bmnet_tl_relu_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_relu_forward_bmkernelDefaultTypeInternal _Inst_bmnet_tl_relu_forward_bmkernel_default_instance_;
class Inst_bmnet_tl_scale_forward_bmkernel;
class Inst_bmnet_tl_scale_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_scale_forward_bmkernelDefaultTypeInternal _Inst_bmnet_tl_scale_forward_bmkernel_default_instance_;
class Inst_bmnet_tl_store_bmkernel;
class Inst_bmnet_tl_store_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_store_bmkernelDefaultTypeInternal _Inst_bmnet_tl_store_bmkernel_default_instance_;
class Inst_bmnet_tl_store_stride_bmkernel;
class Inst_bmnet_tl_store_stride_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_store_stride_bmkernelDefaultTypeInternal _Inst_bmnet_tl_store_stride_bmkernel_default_instance_;
class Inst_bmnet_tl_upsample_forward_bmkernel;
class Inst_bmnet_tl_upsample_forward_bmkernelDefaultTypeInternal;
extern Inst_bmnet_tl_upsample_forward_bmkernelDefaultTypeInternal _Inst_bmnet_tl_upsample_forward_bmkernel_default_instance_;
class Inst_bmnet_upsample_fixed_bmkernel;
class Inst_bmnet_upsample_fixed_bmkernelDefaultTypeInternal;
extern Inst_bmnet_upsample_fixed_bmkernelDefaultTypeInternal _Inst_bmnet_upsample_fixed_bmkernel_default_instance_;
}  // namespace bm1880
}  // namespace bmnet
namespace google {
namespace protobuf {
template<> ::bmnet::bm1880::CommandBuffer* Arena::CreateMaybeMessage<::bmnet::bm1880::CommandBuffer>(Arena*);
template<> ::bmnet::bm1880::Inst* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel>(Arena*);
template<> ::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel* Arena::CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace bmnet {
namespace bm1880 {

enum Inst_ActivationMethod {
  Inst_ActivationMethod_RELU = 0,
  Inst_ActivationMethod_SIGMOID = 1,
  Inst_ActivationMethod_TANH = 2,
  Inst_ActivationMethod_ELU = 3,
  Inst_ActivationMethod_PRELU = 4
};
bool Inst_ActivationMethod_IsValid(int value);
const Inst_ActivationMethod Inst_ActivationMethod_ActivationMethod_MIN = Inst_ActivationMethod_RELU;
const Inst_ActivationMethod Inst_ActivationMethod_ActivationMethod_MAX = Inst_ActivationMethod_PRELU;
const int Inst_ActivationMethod_ActivationMethod_ARRAYSIZE = Inst_ActivationMethod_ActivationMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* Inst_ActivationMethod_descriptor();
inline const ::std::string& Inst_ActivationMethod_Name(Inst_ActivationMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    Inst_ActivationMethod_descriptor(), value);
}
inline bool Inst_ActivationMethod_Parse(
    const ::std::string& name, Inst_ActivationMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Inst_ActivationMethod>(
    Inst_ActivationMethod_descriptor(), name, value);
}
// ===================================================================

class CommandBuffer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.CommandBuffer) */ {
 public:
  CommandBuffer();
  virtual ~CommandBuffer();

  CommandBuffer(const CommandBuffer& from);

  inline CommandBuffer& operator=(const CommandBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandBuffer(CommandBuffer&& from) noexcept
    : CommandBuffer() {
    *this = ::std::move(from);
  }

  inline CommandBuffer& operator=(CommandBuffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandBuffer* internal_default_instance() {
    return reinterpret_cast<const CommandBuffer*>(
               &_CommandBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CommandBuffer* other);
  friend void swap(CommandBuffer& a, CommandBuffer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandBuffer* New() const final {
    return CreateMaybeMessage<CommandBuffer>(NULL);
  }

  CommandBuffer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommandBuffer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommandBuffer& from);
  void MergeFrom(const CommandBuffer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandBuffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bmnet.bm1880.Inst inst = 1;
  int inst_size() const;
  void clear_inst();
  static const int kInstFieldNumber = 1;
  ::bmnet::bm1880::Inst* mutable_inst(int index);
  ::google::protobuf::RepeatedPtrField< ::bmnet::bm1880::Inst >*
      mutable_inst();
  const ::bmnet::bm1880::Inst& inst(int index) const;
  ::bmnet::bm1880::Inst* add_inst();
  const ::google::protobuf::RepeatedPtrField< ::bmnet::bm1880::Inst >&
      inst() const;

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.CommandBuffer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bmnet::bm1880::Inst > inst_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_pooling_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_pooling_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_pooling_fixed_forward_bmkernel();

  Inst_bmnet_pooling_fixed_forward_bmkernel(const Inst_bmnet_pooling_fixed_forward_bmkernel& from);

  inline Inst_bmnet_pooling_fixed_forward_bmkernel& operator=(const Inst_bmnet_pooling_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_pooling_fixed_forward_bmkernel(Inst_bmnet_pooling_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_pooling_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_pooling_fixed_forward_bmkernel& operator=(Inst_bmnet_pooling_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_pooling_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_pooling_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_pooling_fixed_forward_bmkernel*>(
               &_Inst_bmnet_pooling_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Inst_bmnet_pooling_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_pooling_fixed_forward_bmkernel& a, Inst_bmnet_pooling_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_pooling_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_pooling_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_pooling_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_pooling_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_pooling_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_pooling_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_pooling_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated int32 threshold_x_quantized = 26;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 26;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 ifmap_gaddr = 6;
  bool has_ifmap_gaddr() const;
  void clear_ifmap_gaddr();
  static const int kIfmapGaddrFieldNumber = 6;
  ::google::protobuf::uint64 ifmap_gaddr() const;
  void set_ifmap_gaddr(::google::protobuf::uint64 value);

  // optional uint64 ofmap_gaddr = 7;
  bool has_ofmap_gaddr() const;
  void clear_ofmap_gaddr();
  static const int kOfmapGaddrFieldNumber = 7;
  ::google::protobuf::uint64 ofmap_gaddr() const;
  void set_ofmap_gaddr(::google::protobuf::uint64 value);

  // optional uint64 index_gaddr = 8;
  bool has_index_gaddr() const;
  void clear_index_gaddr();
  static const int kIndexGaddrFieldNumber = 8;
  ::google::protobuf::uint64 index_gaddr() const;
  void set_index_gaddr(::google::protobuf::uint64 value);

  // optional uint64 o_findex_gaddr = 9;
  bool has_o_findex_gaddr() const;
  void clear_o_findex_gaddr();
  static const int kOFindexGaddrFieldNumber = 9;
  ::google::protobuf::uint64 o_findex_gaddr() const;
  void set_o_findex_gaddr(::google::protobuf::uint64 value);

  // optional int32 n = 10;
  bool has_n() const;
  void clear_n();
  static const int kNFieldNumber = 10;
  ::google::protobuf::int32 n() const;
  void set_n(::google::protobuf::int32 value);

  // optional int32 c = 11;
  bool has_c() const;
  void clear_c();
  static const int kCFieldNumber = 11;
  ::google::protobuf::int32 c() const;
  void set_c(::google::protobuf::int32 value);

  // optional int32 h = 12;
  bool has_h() const;
  void clear_h();
  static const int kHFieldNumber = 12;
  ::google::protobuf::int32 h() const;
  void set_h(::google::protobuf::int32 value);

  // optional int32 w = 13;
  bool has_w() const;
  void clear_w();
  static const int kWFieldNumber = 13;
  ::google::protobuf::int32 w() const;
  void set_w(::google::protobuf::int32 value);

  // optional int32 kh = 14;
  bool has_kh() const;
  void clear_kh();
  static const int kKhFieldNumber = 14;
  ::google::protobuf::int32 kh() const;
  void set_kh(::google::protobuf::int32 value);

  // optional int32 kw = 15;
  bool has_kw() const;
  void clear_kw();
  static const int kKwFieldNumber = 15;
  ::google::protobuf::int32 kw() const;
  void set_kw(::google::protobuf::int32 value);

  // optional int32 pad_top = 16;
  bool has_pad_top() const;
  void clear_pad_top();
  static const int kPadTopFieldNumber = 16;
  ::google::protobuf::int32 pad_top() const;
  void set_pad_top(::google::protobuf::int32 value);

  // optional int32 pad_bot = 17;
  bool has_pad_bot() const;
  void clear_pad_bot();
  static const int kPadBotFieldNumber = 17;
  ::google::protobuf::int32 pad_bot() const;
  void set_pad_bot(::google::protobuf::int32 value);

  // optional int32 pad_left = 18;
  bool has_pad_left() const;
  void clear_pad_left();
  static const int kPadLeftFieldNumber = 18;
  ::google::protobuf::int32 pad_left() const;
  void set_pad_left(::google::protobuf::int32 value);

  // optional int32 pad_right = 19;
  bool has_pad_right() const;
  void clear_pad_right();
  static const int kPadRightFieldNumber = 19;
  ::google::protobuf::int32 pad_right() const;
  void set_pad_right(::google::protobuf::int32 value);

  // optional int32 stride_h = 20;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 20;
  ::google::protobuf::int32 stride_h() const;
  void set_stride_h(::google::protobuf::int32 value);

  // optional int32 stride_w = 21;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 21;
  ::google::protobuf::int32 stride_w() const;
  void set_stride_w(::google::protobuf::int32 value);

  // optional int32 is_avg_pooling = 22;
  bool has_is_avg_pooling() const;
  void clear_is_avg_pooling();
  static const int kIsAvgPoolingFieldNumber = 22;
  ::google::protobuf::int32 is_avg_pooling() const;
  void set_is_avg_pooling(::google::protobuf::int32 value);

  // optional float avg_const = 23;
  bool has_avg_const() const;
  void clear_avg_const();
  static const int kAvgConstFieldNumber = 23;
  float avg_const() const;
  void set_avg_const(float value);

  // optional int32 do_relu = 24;
  bool has_do_relu() const;
  void clear_do_relu();
  static const int kDoReluFieldNumber = 24;
  ::google::protobuf::int32 do_relu() const;
  void set_do_relu(::google::protobuf::int32 value);

  // optional int32 right_shift_width = 25;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 25;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // optional bool ceil_mode = 27;
  bool has_ceil_mode() const;
  void clear_ceil_mode();
  static const int kCeilModeFieldNumber = 27;
  bool ceil_mode() const;
  void set_ceil_mode(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_ifmap_gaddr();
  void clear_has_ifmap_gaddr();
  void set_has_ofmap_gaddr();
  void clear_has_ofmap_gaddr();
  void set_has_index_gaddr();
  void clear_has_index_gaddr();
  void set_has_o_findex_gaddr();
  void clear_has_o_findex_gaddr();
  void set_has_n();
  void clear_has_n();
  void set_has_c();
  void clear_has_c();
  void set_has_h();
  void clear_has_h();
  void set_has_w();
  void clear_has_w();
  void set_has_kh();
  void clear_has_kh();
  void set_has_kw();
  void clear_has_kw();
  void set_has_pad_top();
  void clear_has_pad_top();
  void set_has_pad_bot();
  void clear_has_pad_bot();
  void set_has_pad_left();
  void clear_has_pad_left();
  void set_has_pad_right();
  void clear_has_pad_right();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_is_avg_pooling();
  void clear_has_is_avg_pooling();
  void set_has_avg_const();
  void clear_has_avg_const();
  void set_has_do_relu();
  void clear_has_do_relu();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();
  void set_has_ceil_mode();
  void clear_has_ceil_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 ifmap_gaddr_;
  ::google::protobuf::uint64 ofmap_gaddr_;
  ::google::protobuf::uint64 index_gaddr_;
  ::google::protobuf::uint64 o_findex_gaddr_;
  ::google::protobuf::int32 n_;
  ::google::protobuf::int32 c_;
  ::google::protobuf::int32 h_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 kh_;
  ::google::protobuf::int32 kw_;
  ::google::protobuf::int32 pad_top_;
  ::google::protobuf::int32 pad_bot_;
  ::google::protobuf::int32 pad_left_;
  ::google::protobuf::int32 pad_right_;
  ::google::protobuf::int32 stride_h_;
  ::google::protobuf::int32 stride_w_;
  ::google::protobuf::int32 is_avg_pooling_;
  float avg_const_;
  ::google::protobuf::int32 do_relu_;
  ::google::protobuf::int32 right_shift_width_;
  bool ceil_mode_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_conv_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_conv_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_conv_fixed_forward_bmkernel();

  Inst_bmnet_conv_fixed_forward_bmkernel(const Inst_bmnet_conv_fixed_forward_bmkernel& from);

  inline Inst_bmnet_conv_fixed_forward_bmkernel& operator=(const Inst_bmnet_conv_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_conv_fixed_forward_bmkernel(Inst_bmnet_conv_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_conv_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_conv_fixed_forward_bmkernel& operator=(Inst_bmnet_conv_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_conv_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_conv_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_conv_fixed_forward_bmkernel*>(
               &_Inst_bmnet_conv_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Inst_bmnet_conv_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_conv_fixed_forward_bmkernel& a, Inst_bmnet_conv_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_conv_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_conv_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_conv_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_conv_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_conv_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_conv_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_conv_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated float activation_arg = 39;
  int activation_arg_size() const;
  void clear_activation_arg();
  static const int kActivationArgFieldNumber = 39;
  float activation_arg(int index) const;
  void set_activation_arg(int index, float value);
  void add_activation_arg(float value);
  const ::google::protobuf::RepeatedField< float >&
      activation_arg() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_activation_arg();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 ga_ifmap = 6;
  bool has_ga_ifmap() const;
  void clear_ga_ifmap();
  static const int kGaIfmapFieldNumber = 6;
  ::google::protobuf::uint64 ga_ifmap() const;
  void set_ga_ifmap(::google::protobuf::uint64 value);

  // optional uint64 ga_ofmap = 7;
  bool has_ga_ofmap() const;
  void clear_ga_ofmap();
  static const int kGaOfmapFieldNumber = 7;
  ::google::protobuf::uint64 ga_ofmap() const;
  void set_ga_ofmap(::google::protobuf::uint64 value);

  // optional uint64 ga_weight = 8;
  bool has_ga_weight() const;
  void clear_ga_weight();
  static const int kGaWeightFieldNumber = 8;
  ::google::protobuf::uint64 ga_weight() const;
  void set_ga_weight(::google::protobuf::uint64 value);

  // optional uint64 ga_bias = 9;
  bool has_ga_bias() const;
  void clear_ga_bias();
  static const int kGaBiasFieldNumber = 9;
  ::google::protobuf::uint64 ga_bias() const;
  void set_ga_bias(::google::protobuf::uint64 value);

  // optional uint64 ga_bn_mean = 10;
  bool has_ga_bn_mean() const;
  void clear_ga_bn_mean();
  static const int kGaBnMeanFieldNumber = 10;
  ::google::protobuf::uint64 ga_bn_mean() const;
  void set_ga_bn_mean(::google::protobuf::uint64 value);

  // optional uint64 ga_bn_variance = 11;
  bool has_ga_bn_variance() const;
  void clear_ga_bn_variance();
  static const int kGaBnVarianceFieldNumber = 11;
  ::google::protobuf::uint64 ga_bn_variance() const;
  void set_ga_bn_variance(::google::protobuf::uint64 value);

  // optional uint64 ga_scale = 12;
  bool has_ga_scale() const;
  void clear_ga_scale();
  static const int kGaScaleFieldNumber = 12;
  ::google::protobuf::uint64 ga_scale() const;
  void set_ga_scale(::google::protobuf::uint64 value);

  // optional uint64 ga_scale_bias = 13;
  bool has_ga_scale_bias() const;
  void clear_ga_scale_bias();
  static const int kGaScaleBiasFieldNumber = 13;
  ::google::protobuf::uint64 ga_scale_bias() const;
  void set_ga_scale_bias(::google::protobuf::uint64 value);

  // optional int32 input_n = 14;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 14;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 15;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 15;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 16;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 16;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 17;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 17;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 groups = 18;
  bool has_groups() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 18;
  ::google::protobuf::int32 groups() const;
  void set_groups(::google::protobuf::int32 value);

  // optional int32 output_c = 19;
  bool has_output_c() const;
  void clear_output_c();
  static const int kOutputCFieldNumber = 19;
  ::google::protobuf::int32 output_c() const;
  void set_output_c(::google::protobuf::int32 value);

  // optional uint32 kh = 20;
  bool has_kh() const;
  void clear_kh();
  static const int kKhFieldNumber = 20;
  ::google::protobuf::uint32 kh() const;
  void set_kh(::google::protobuf::uint32 value);

  // optional uint32 kw = 21;
  bool has_kw() const;
  void clear_kw();
  static const int kKwFieldNumber = 21;
  ::google::protobuf::uint32 kw() const;
  void set_kw(::google::protobuf::uint32 value);

  // optional uint32 dilation_h = 22;
  bool has_dilation_h() const;
  void clear_dilation_h();
  static const int kDilationHFieldNumber = 22;
  ::google::protobuf::uint32 dilation_h() const;
  void set_dilation_h(::google::protobuf::uint32 value);

  // optional uint32 dilation_w = 23;
  bool has_dilation_w() const;
  void clear_dilation_w();
  static const int kDilationWFieldNumber = 23;
  ::google::protobuf::uint32 dilation_w() const;
  void set_dilation_w(::google::protobuf::uint32 value);

  // optional uint32 pad_top = 24;
  bool has_pad_top() const;
  void clear_pad_top();
  static const int kPadTopFieldNumber = 24;
  ::google::protobuf::uint32 pad_top() const;
  void set_pad_top(::google::protobuf::uint32 value);

  // optional uint32 pad_bottom = 25;
  bool has_pad_bottom() const;
  void clear_pad_bottom();
  static const int kPadBottomFieldNumber = 25;
  ::google::protobuf::uint32 pad_bottom() const;
  void set_pad_bottom(::google::protobuf::uint32 value);

  // optional uint32 pad_left = 26;
  bool has_pad_left() const;
  void clear_pad_left();
  static const int kPadLeftFieldNumber = 26;
  ::google::protobuf::uint32 pad_left() const;
  void set_pad_left(::google::protobuf::uint32 value);

  // optional uint32 pad_right = 27;
  bool has_pad_right() const;
  void clear_pad_right();
  static const int kPadRightFieldNumber = 27;
  ::google::protobuf::uint32 pad_right() const;
  void set_pad_right(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 28;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 28;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 29;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 29;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional int32 result_add = 30;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 30;
  ::google::protobuf::int32 result_add() const;
  void set_result_add(::google::protobuf::int32 value);

  // optional int32 do_bias = 31;
  bool has_do_bias() const;
  void clear_do_bias();
  static const int kDoBiasFieldNumber = 31;
  ::google::protobuf::int32 do_bias() const;
  void set_do_bias(::google::protobuf::int32 value);

  // optional int32 do_bn = 32;
  bool has_do_bn() const;
  void clear_do_bn();
  static const int kDoBnFieldNumber = 32;
  ::google::protobuf::int32 do_bn() const;
  void set_do_bn(::google::protobuf::int32 value);

  // optional int32 do_scale = 33;
  bool has_do_scale() const;
  void clear_do_scale();
  static const int kDoScaleFieldNumber = 33;
  ::google::protobuf::int32 do_scale() const;
  void set_do_scale(::google::protobuf::int32 value);

  // optional int32 do_scale_bias = 34;
  bool has_do_scale_bias() const;
  void clear_do_scale_bias();
  static const int kDoScaleBiasFieldNumber = 34;
  ::google::protobuf::int32 do_scale_bias() const;
  void set_do_scale_bias(::google::protobuf::int32 value);

  // optional int32 do_activation = 35;
  bool has_do_activation() const;
  void clear_do_activation();
  static const int kDoActivationFieldNumber = 35;
  ::google::protobuf::int32 do_activation() const;
  void set_do_activation(::google::protobuf::int32 value);

  // optional float bn_scale = 36;
  bool has_bn_scale() const;
  void clear_bn_scale();
  static const int kBnScaleFieldNumber = 36;
  float bn_scale() const;
  void set_bn_scale(float value);

  // optional float bn_eps = 37;
  bool has_bn_eps() const;
  void clear_bn_eps();
  static const int kBnEpsFieldNumber = 37;
  float bn_eps() const;
  void set_bn_eps(float value);

  // optional uint64 activation_ga_slope = 40;
  bool has_activation_ga_slope() const;
  void clear_activation_ga_slope();
  static const int kActivationGaSlopeFieldNumber = 40;
  ::google::protobuf::uint64 activation_ga_slope() const;
  void set_activation_ga_slope(::google::protobuf::uint64 value);

  // optional int32 activation_method = 38;
  bool has_activation_method() const;
  void clear_activation_method();
  static const int kActivationMethodFieldNumber = 38;
  ::google::protobuf::int32 activation_method() const;
  void set_activation_method(::google::protobuf::int32 value);

  // optional int32 activation_gt_scale = 42;
  bool has_activation_gt_scale() const;
  void clear_activation_gt_scale();
  static const int kActivationGtScaleFieldNumber = 42;
  ::google::protobuf::int32 activation_gt_scale() const;
  void set_activation_gt_scale(::google::protobuf::int32 value);

  // optional int32 activation_gt_rshift = 43;
  bool has_activation_gt_rshift() const;
  void clear_activation_gt_rshift();
  static const int kActivationGtRshiftFieldNumber = 43;
  ::google::protobuf::int32 activation_gt_rshift() const;
  void set_activation_gt_rshift(::google::protobuf::int32 value);

  // optional int32 activation_le_scale = 44;
  bool has_activation_le_scale() const;
  void clear_activation_le_scale();
  static const int kActivationLeScaleFieldNumber = 44;
  ::google::protobuf::int32 activation_le_scale() const;
  void set_activation_le_scale(::google::protobuf::int32 value);

  // optional int32 activation_le_rshift = 45;
  bool has_activation_le_rshift() const;
  void clear_activation_le_rshift();
  static const int kActivationLeRshiftFieldNumber = 45;
  ::google::protobuf::int32 activation_le_rshift() const;
  void set_activation_le_rshift(::google::protobuf::int32 value);

  // optional bool activation_channel_shared = 41;
  bool has_activation_channel_shared() const;
  void clear_activation_channel_shared();
  static const int kActivationChannelSharedFieldNumber = 41;
  bool activation_channel_shared() const;
  void set_activation_channel_shared(bool value);

  // optional bool use_winograd = 49;
  bool has_use_winograd() const;
  void clear_use_winograd();
  static const int kUseWinogradFieldNumber = 49;
  bool use_winograd() const;
  void set_use_winograd(bool value);

  // optional int32 right_shift_width = 46;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 46;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // optional int32 bn_right_shift_width = 47;
  bool has_bn_right_shift_width() const;
  void clear_bn_right_shift_width();
  static const int kBnRightShiftWidthFieldNumber = 47;
  ::google::protobuf::int32 bn_right_shift_width() const;
  void set_bn_right_shift_width(::google::protobuf::int32 value);

  // optional int32 scalar_right_shift_width = 48;
  bool has_scalar_right_shift_width() const;
  void clear_scalar_right_shift_width();
  static const int kScalarRightShiftWidthFieldNumber = 48;
  ::google::protobuf::int32 scalar_right_shift_width() const;
  void set_scalar_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_ga_ifmap();
  void clear_has_ga_ifmap();
  void set_has_ga_ofmap();
  void clear_has_ga_ofmap();
  void set_has_ga_weight();
  void clear_has_ga_weight();
  void set_has_ga_bias();
  void clear_has_ga_bias();
  void set_has_ga_bn_mean();
  void clear_has_ga_bn_mean();
  void set_has_ga_bn_variance();
  void clear_has_ga_bn_variance();
  void set_has_ga_scale();
  void clear_has_ga_scale();
  void set_has_ga_scale_bias();
  void clear_has_ga_scale_bias();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_groups();
  void clear_has_groups();
  void set_has_output_c();
  void clear_has_output_c();
  void set_has_kh();
  void clear_has_kh();
  void set_has_kw();
  void clear_has_kw();
  void set_has_dilation_h();
  void clear_has_dilation_h();
  void set_has_dilation_w();
  void clear_has_dilation_w();
  void set_has_pad_top();
  void clear_has_pad_top();
  void set_has_pad_bottom();
  void clear_has_pad_bottom();
  void set_has_pad_left();
  void clear_has_pad_left();
  void set_has_pad_right();
  void clear_has_pad_right();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_result_add();
  void clear_has_result_add();
  void set_has_do_bias();
  void clear_has_do_bias();
  void set_has_do_bn();
  void clear_has_do_bn();
  void set_has_do_scale();
  void clear_has_do_scale();
  void set_has_do_scale_bias();
  void clear_has_do_scale_bias();
  void set_has_do_activation();
  void clear_has_do_activation();
  void set_has_bn_scale();
  void clear_has_bn_scale();
  void set_has_bn_eps();
  void clear_has_bn_eps();
  void set_has_activation_method();
  void clear_has_activation_method();
  void set_has_activation_ga_slope();
  void clear_has_activation_ga_slope();
  void set_has_activation_channel_shared();
  void clear_has_activation_channel_shared();
  void set_has_activation_gt_scale();
  void clear_has_activation_gt_scale();
  void set_has_activation_gt_rshift();
  void clear_has_activation_gt_rshift();
  void set_has_activation_le_scale();
  void clear_has_activation_le_scale();
  void set_has_activation_le_rshift();
  void clear_has_activation_le_rshift();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();
  void set_has_bn_right_shift_width();
  void clear_has_bn_right_shift_width();
  void set_has_scalar_right_shift_width();
  void clear_has_scalar_right_shift_width();
  void set_has_use_winograd();
  void clear_has_use_winograd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< float > activation_arg_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 ga_ifmap_;
  ::google::protobuf::uint64 ga_ofmap_;
  ::google::protobuf::uint64 ga_weight_;
  ::google::protobuf::uint64 ga_bias_;
  ::google::protobuf::uint64 ga_bn_mean_;
  ::google::protobuf::uint64 ga_bn_variance_;
  ::google::protobuf::uint64 ga_scale_;
  ::google::protobuf::uint64 ga_scale_bias_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 groups_;
  ::google::protobuf::int32 output_c_;
  ::google::protobuf::uint32 kh_;
  ::google::protobuf::uint32 kw_;
  ::google::protobuf::uint32 dilation_h_;
  ::google::protobuf::uint32 dilation_w_;
  ::google::protobuf::uint32 pad_top_;
  ::google::protobuf::uint32 pad_bottom_;
  ::google::protobuf::uint32 pad_left_;
  ::google::protobuf::uint32 pad_right_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::google::protobuf::int32 result_add_;
  ::google::protobuf::int32 do_bias_;
  ::google::protobuf::int32 do_bn_;
  ::google::protobuf::int32 do_scale_;
  ::google::protobuf::int32 do_scale_bias_;
  ::google::protobuf::int32 do_activation_;
  float bn_scale_;
  float bn_eps_;
  ::google::protobuf::uint64 activation_ga_slope_;
  ::google::protobuf::int32 activation_method_;
  ::google::protobuf::int32 activation_gt_scale_;
  ::google::protobuf::int32 activation_gt_rshift_;
  ::google::protobuf::int32 activation_le_scale_;
  ::google::protobuf::int32 activation_le_rshift_;
  bool activation_channel_shared_;
  bool use_winograd_;
  ::google::protobuf::int32 right_shift_width_;
  ::google::protobuf::int32 bn_right_shift_width_;
  ::google::protobuf::int32 scalar_right_shift_width_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_conv_parallel_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_conv_parallel_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_conv_parallel_fixed_forward_bmkernel();

  Inst_bmnet_conv_parallel_fixed_forward_bmkernel(const Inst_bmnet_conv_parallel_fixed_forward_bmkernel& from);

  inline Inst_bmnet_conv_parallel_fixed_forward_bmkernel& operator=(const Inst_bmnet_conv_parallel_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_conv_parallel_fixed_forward_bmkernel(Inst_bmnet_conv_parallel_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_conv_parallel_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_conv_parallel_fixed_forward_bmkernel& operator=(Inst_bmnet_conv_parallel_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_conv_parallel_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_conv_parallel_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_conv_parallel_fixed_forward_bmkernel*>(
               &_Inst_bmnet_conv_parallel_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Inst_bmnet_conv_parallel_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_conv_parallel_fixed_forward_bmkernel& a, Inst_bmnet_conv_parallel_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_conv_parallel_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_conv_parallel_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_conv_parallel_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_conv_parallel_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_conv_parallel_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_conv_parallel_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_conv_parallel_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated float activation_arg = 39;
  int activation_arg_size() const;
  void clear_activation_arg();
  static const int kActivationArgFieldNumber = 39;
  float activation_arg(int index) const;
  void set_activation_arg(int index, float value);
  void add_activation_arg(float value);
  const ::google::protobuf::RepeatedField< float >&
      activation_arg() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_activation_arg();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 ga_ifmap = 6;
  bool has_ga_ifmap() const;
  void clear_ga_ifmap();
  static const int kGaIfmapFieldNumber = 6;
  ::google::protobuf::uint64 ga_ifmap() const;
  void set_ga_ifmap(::google::protobuf::uint64 value);

  // optional uint64 ga_ofmap = 7;
  bool has_ga_ofmap() const;
  void clear_ga_ofmap();
  static const int kGaOfmapFieldNumber = 7;
  ::google::protobuf::uint64 ga_ofmap() const;
  void set_ga_ofmap(::google::protobuf::uint64 value);

  // optional uint64 ga_weight = 8;
  bool has_ga_weight() const;
  void clear_ga_weight();
  static const int kGaWeightFieldNumber = 8;
  ::google::protobuf::uint64 ga_weight() const;
  void set_ga_weight(::google::protobuf::uint64 value);

  // optional uint64 ga_bias = 9;
  bool has_ga_bias() const;
  void clear_ga_bias();
  static const int kGaBiasFieldNumber = 9;
  ::google::protobuf::uint64 ga_bias() const;
  void set_ga_bias(::google::protobuf::uint64 value);

  // optional uint64 ga_bn_mean = 10;
  bool has_ga_bn_mean() const;
  void clear_ga_bn_mean();
  static const int kGaBnMeanFieldNumber = 10;
  ::google::protobuf::uint64 ga_bn_mean() const;
  void set_ga_bn_mean(::google::protobuf::uint64 value);

  // optional uint64 ga_bn_variance = 11;
  bool has_ga_bn_variance() const;
  void clear_ga_bn_variance();
  static const int kGaBnVarianceFieldNumber = 11;
  ::google::protobuf::uint64 ga_bn_variance() const;
  void set_ga_bn_variance(::google::protobuf::uint64 value);

  // optional uint64 ga_scale = 12;
  bool has_ga_scale() const;
  void clear_ga_scale();
  static const int kGaScaleFieldNumber = 12;
  ::google::protobuf::uint64 ga_scale() const;
  void set_ga_scale(::google::protobuf::uint64 value);

  // optional uint64 ga_scale_bias = 13;
  bool has_ga_scale_bias() const;
  void clear_ga_scale_bias();
  static const int kGaScaleBiasFieldNumber = 13;
  ::google::protobuf::uint64 ga_scale_bias() const;
  void set_ga_scale_bias(::google::protobuf::uint64 value);

  // optional int32 input_n = 14;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 14;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 15;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 15;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 16;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 16;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 17;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 17;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 groups = 18;
  bool has_groups() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 18;
  ::google::protobuf::int32 groups() const;
  void set_groups(::google::protobuf::int32 value);

  // optional int32 output_c = 19;
  bool has_output_c() const;
  void clear_output_c();
  static const int kOutputCFieldNumber = 19;
  ::google::protobuf::int32 output_c() const;
  void set_output_c(::google::protobuf::int32 value);

  // optional uint32 kh = 20;
  bool has_kh() const;
  void clear_kh();
  static const int kKhFieldNumber = 20;
  ::google::protobuf::uint32 kh() const;
  void set_kh(::google::protobuf::uint32 value);

  // optional uint32 kw = 21;
  bool has_kw() const;
  void clear_kw();
  static const int kKwFieldNumber = 21;
  ::google::protobuf::uint32 kw() const;
  void set_kw(::google::protobuf::uint32 value);

  // optional uint32 dilation_h = 22;
  bool has_dilation_h() const;
  void clear_dilation_h();
  static const int kDilationHFieldNumber = 22;
  ::google::protobuf::uint32 dilation_h() const;
  void set_dilation_h(::google::protobuf::uint32 value);

  // optional uint32 dilation_w = 23;
  bool has_dilation_w() const;
  void clear_dilation_w();
  static const int kDilationWFieldNumber = 23;
  ::google::protobuf::uint32 dilation_w() const;
  void set_dilation_w(::google::protobuf::uint32 value);

  // optional uint32 pad_top = 24;
  bool has_pad_top() const;
  void clear_pad_top();
  static const int kPadTopFieldNumber = 24;
  ::google::protobuf::uint32 pad_top() const;
  void set_pad_top(::google::protobuf::uint32 value);

  // optional uint32 pad_bottom = 25;
  bool has_pad_bottom() const;
  void clear_pad_bottom();
  static const int kPadBottomFieldNumber = 25;
  ::google::protobuf::uint32 pad_bottom() const;
  void set_pad_bottom(::google::protobuf::uint32 value);

  // optional uint32 pad_left = 26;
  bool has_pad_left() const;
  void clear_pad_left();
  static const int kPadLeftFieldNumber = 26;
  ::google::protobuf::uint32 pad_left() const;
  void set_pad_left(::google::protobuf::uint32 value);

  // optional uint32 pad_right = 27;
  bool has_pad_right() const;
  void clear_pad_right();
  static const int kPadRightFieldNumber = 27;
  ::google::protobuf::uint32 pad_right() const;
  void set_pad_right(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 28;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 28;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 29;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 29;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional int32 result_add = 30;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 30;
  ::google::protobuf::int32 result_add() const;
  void set_result_add(::google::protobuf::int32 value);

  // optional int32 do_bias = 31;
  bool has_do_bias() const;
  void clear_do_bias();
  static const int kDoBiasFieldNumber = 31;
  ::google::protobuf::int32 do_bias() const;
  void set_do_bias(::google::protobuf::int32 value);

  // optional int32 do_bn = 32;
  bool has_do_bn() const;
  void clear_do_bn();
  static const int kDoBnFieldNumber = 32;
  ::google::protobuf::int32 do_bn() const;
  void set_do_bn(::google::protobuf::int32 value);

  // optional int32 do_scale = 33;
  bool has_do_scale() const;
  void clear_do_scale();
  static const int kDoScaleFieldNumber = 33;
  ::google::protobuf::int32 do_scale() const;
  void set_do_scale(::google::protobuf::int32 value);

  // optional int32 do_scale_bias = 34;
  bool has_do_scale_bias() const;
  void clear_do_scale_bias();
  static const int kDoScaleBiasFieldNumber = 34;
  ::google::protobuf::int32 do_scale_bias() const;
  void set_do_scale_bias(::google::protobuf::int32 value);

  // optional int32 do_activation = 35;
  bool has_do_activation() const;
  void clear_do_activation();
  static const int kDoActivationFieldNumber = 35;
  ::google::protobuf::int32 do_activation() const;
  void set_do_activation(::google::protobuf::int32 value);

  // optional float bn_scale = 36;
  bool has_bn_scale() const;
  void clear_bn_scale();
  static const int kBnScaleFieldNumber = 36;
  float bn_scale() const;
  void set_bn_scale(float value);

  // optional float bn_eps = 37;
  bool has_bn_eps() const;
  void clear_bn_eps();
  static const int kBnEpsFieldNumber = 37;
  float bn_eps() const;
  void set_bn_eps(float value);

  // optional uint64 activation_ga_slope = 40;
  bool has_activation_ga_slope() const;
  void clear_activation_ga_slope();
  static const int kActivationGaSlopeFieldNumber = 40;
  ::google::protobuf::uint64 activation_ga_slope() const;
  void set_activation_ga_slope(::google::protobuf::uint64 value);

  // optional int32 activation_method = 38;
  bool has_activation_method() const;
  void clear_activation_method();
  static const int kActivationMethodFieldNumber = 38;
  ::google::protobuf::int32 activation_method() const;
  void set_activation_method(::google::protobuf::int32 value);

  // optional int32 activation_gt_scale = 42;
  bool has_activation_gt_scale() const;
  void clear_activation_gt_scale();
  static const int kActivationGtScaleFieldNumber = 42;
  ::google::protobuf::int32 activation_gt_scale() const;
  void set_activation_gt_scale(::google::protobuf::int32 value);

  // optional int32 activation_gt_rshift = 43;
  bool has_activation_gt_rshift() const;
  void clear_activation_gt_rshift();
  static const int kActivationGtRshiftFieldNumber = 43;
  ::google::protobuf::int32 activation_gt_rshift() const;
  void set_activation_gt_rshift(::google::protobuf::int32 value);

  // optional int32 activation_le_scale = 44;
  bool has_activation_le_scale() const;
  void clear_activation_le_scale();
  static const int kActivationLeScaleFieldNumber = 44;
  ::google::protobuf::int32 activation_le_scale() const;
  void set_activation_le_scale(::google::protobuf::int32 value);

  // optional int32 activation_le_rshift = 45;
  bool has_activation_le_rshift() const;
  void clear_activation_le_rshift();
  static const int kActivationLeRshiftFieldNumber = 45;
  ::google::protobuf::int32 activation_le_rshift() const;
  void set_activation_le_rshift(::google::protobuf::int32 value);

  // optional bool activation_channel_shared = 41;
  bool has_activation_channel_shared() const;
  void clear_activation_channel_shared();
  static const int kActivationChannelSharedFieldNumber = 41;
  bool activation_channel_shared() const;
  void set_activation_channel_shared(bool value);

  // optional bool use_winograd = 49;
  bool has_use_winograd() const;
  void clear_use_winograd();
  static const int kUseWinogradFieldNumber = 49;
  bool use_winograd() const;
  void set_use_winograd(bool value);

  // optional int32 right_shift_width = 46;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 46;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // optional int32 bn_right_shift_width = 47;
  bool has_bn_right_shift_width() const;
  void clear_bn_right_shift_width();
  static const int kBnRightShiftWidthFieldNumber = 47;
  ::google::protobuf::int32 bn_right_shift_width() const;
  void set_bn_right_shift_width(::google::protobuf::int32 value);

  // optional int32 scale_right_shift_width = 48;
  bool has_scale_right_shift_width() const;
  void clear_scale_right_shift_width();
  static const int kScaleRightShiftWidthFieldNumber = 48;
  ::google::protobuf::int32 scale_right_shift_width() const;
  void set_scale_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_ga_ifmap();
  void clear_has_ga_ifmap();
  void set_has_ga_ofmap();
  void clear_has_ga_ofmap();
  void set_has_ga_weight();
  void clear_has_ga_weight();
  void set_has_ga_bias();
  void clear_has_ga_bias();
  void set_has_ga_bn_mean();
  void clear_has_ga_bn_mean();
  void set_has_ga_bn_variance();
  void clear_has_ga_bn_variance();
  void set_has_ga_scale();
  void clear_has_ga_scale();
  void set_has_ga_scale_bias();
  void clear_has_ga_scale_bias();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_groups();
  void clear_has_groups();
  void set_has_output_c();
  void clear_has_output_c();
  void set_has_kh();
  void clear_has_kh();
  void set_has_kw();
  void clear_has_kw();
  void set_has_dilation_h();
  void clear_has_dilation_h();
  void set_has_dilation_w();
  void clear_has_dilation_w();
  void set_has_pad_top();
  void clear_has_pad_top();
  void set_has_pad_bottom();
  void clear_has_pad_bottom();
  void set_has_pad_left();
  void clear_has_pad_left();
  void set_has_pad_right();
  void clear_has_pad_right();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_result_add();
  void clear_has_result_add();
  void set_has_do_bias();
  void clear_has_do_bias();
  void set_has_do_bn();
  void clear_has_do_bn();
  void set_has_do_scale();
  void clear_has_do_scale();
  void set_has_do_scale_bias();
  void clear_has_do_scale_bias();
  void set_has_do_activation();
  void clear_has_do_activation();
  void set_has_bn_scale();
  void clear_has_bn_scale();
  void set_has_bn_eps();
  void clear_has_bn_eps();
  void set_has_activation_method();
  void clear_has_activation_method();
  void set_has_activation_ga_slope();
  void clear_has_activation_ga_slope();
  void set_has_activation_channel_shared();
  void clear_has_activation_channel_shared();
  void set_has_activation_gt_scale();
  void clear_has_activation_gt_scale();
  void set_has_activation_gt_rshift();
  void clear_has_activation_gt_rshift();
  void set_has_activation_le_scale();
  void clear_has_activation_le_scale();
  void set_has_activation_le_rshift();
  void clear_has_activation_le_rshift();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();
  void set_has_bn_right_shift_width();
  void clear_has_bn_right_shift_width();
  void set_has_scale_right_shift_width();
  void clear_has_scale_right_shift_width();
  void set_has_use_winograd();
  void clear_has_use_winograd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< float > activation_arg_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 ga_ifmap_;
  ::google::protobuf::uint64 ga_ofmap_;
  ::google::protobuf::uint64 ga_weight_;
  ::google::protobuf::uint64 ga_bias_;
  ::google::protobuf::uint64 ga_bn_mean_;
  ::google::protobuf::uint64 ga_bn_variance_;
  ::google::protobuf::uint64 ga_scale_;
  ::google::protobuf::uint64 ga_scale_bias_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 groups_;
  ::google::protobuf::int32 output_c_;
  ::google::protobuf::uint32 kh_;
  ::google::protobuf::uint32 kw_;
  ::google::protobuf::uint32 dilation_h_;
  ::google::protobuf::uint32 dilation_w_;
  ::google::protobuf::uint32 pad_top_;
  ::google::protobuf::uint32 pad_bottom_;
  ::google::protobuf::uint32 pad_left_;
  ::google::protobuf::uint32 pad_right_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::google::protobuf::int32 result_add_;
  ::google::protobuf::int32 do_bias_;
  ::google::protobuf::int32 do_bn_;
  ::google::protobuf::int32 do_scale_;
  ::google::protobuf::int32 do_scale_bias_;
  ::google::protobuf::int32 do_activation_;
  float bn_scale_;
  float bn_eps_;
  ::google::protobuf::uint64 activation_ga_slope_;
  ::google::protobuf::int32 activation_method_;
  ::google::protobuf::int32 activation_gt_scale_;
  ::google::protobuf::int32 activation_gt_rshift_;
  ::google::protobuf::int32 activation_le_scale_;
  ::google::protobuf::int32 activation_le_rshift_;
  bool activation_channel_shared_;
  bool use_winograd_;
  ::google::protobuf::int32 right_shift_width_;
  ::google::protobuf::int32 bn_right_shift_width_;
  ::google::protobuf::int32 scale_right_shift_width_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_fc_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_fc_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_fc_fixed_forward_bmkernel();

  Inst_bmnet_fc_fixed_forward_bmkernel(const Inst_bmnet_fc_fixed_forward_bmkernel& from);

  inline Inst_bmnet_fc_fixed_forward_bmkernel& operator=(const Inst_bmnet_fc_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_fc_fixed_forward_bmkernel(Inst_bmnet_fc_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_fc_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_fc_fixed_forward_bmkernel& operator=(Inst_bmnet_fc_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_fc_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_fc_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_fc_fixed_forward_bmkernel*>(
               &_Inst_bmnet_fc_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Inst_bmnet_fc_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_fc_fixed_forward_bmkernel& a, Inst_bmnet_fc_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_fc_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_fc_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_fc_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_fc_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_fc_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_fc_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_fc_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 bottom_data_gaddr = 6;
  bool has_bottom_data_gaddr() const;
  void clear_bottom_data_gaddr();
  static const int kBottomDataGaddrFieldNumber = 6;
  ::google::protobuf::uint64 bottom_data_gaddr() const;
  void set_bottom_data_gaddr(::google::protobuf::uint64 value);

  // optional uint64 weight_data_gaddr = 7;
  bool has_weight_data_gaddr() const;
  void clear_weight_data_gaddr();
  static const int kWeightDataGaddrFieldNumber = 7;
  ::google::protobuf::uint64 weight_data_gaddr() const;
  void set_weight_data_gaddr(::google::protobuf::uint64 value);

  // optional uint64 bias_data_gaddr = 8;
  bool has_bias_data_gaddr() const;
  void clear_bias_data_gaddr();
  static const int kBiasDataGaddrFieldNumber = 8;
  ::google::protobuf::uint64 bias_data_gaddr() const;
  void set_bias_data_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_data_gaddr = 9;
  bool has_top_data_gaddr() const;
  void clear_top_data_gaddr();
  static const int kTopDataGaddrFieldNumber = 9;
  ::google::protobuf::uint64 top_data_gaddr() const;
  void set_top_data_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_row_num = 10;
  bool has_input_row_num() const;
  void clear_input_row_num();
  static const int kInputRowNumFieldNumber = 10;
  ::google::protobuf::int32 input_row_num() const;
  void set_input_row_num(::google::protobuf::int32 value);

  // optional int32 input_col_num = 11;
  bool has_input_col_num() const;
  void clear_input_col_num();
  static const int kInputColNumFieldNumber = 11;
  ::google::protobuf::int32 input_col_num() const;
  void set_input_col_num(::google::protobuf::int32 value);

  // optional int32 weight_col_num = 12;
  bool has_weight_col_num() const;
  void clear_weight_col_num();
  static const int kWeightColNumFieldNumber = 12;
  ::google::protobuf::int32 weight_col_num() const;
  void set_weight_col_num(::google::protobuf::int32 value);

  // optional int32 have_bias = 13;
  bool has_have_bias() const;
  void clear_have_bias();
  static const int kHaveBiasFieldNumber = 13;
  ::google::protobuf::int32 have_bias() const;
  void set_have_bias(::google::protobuf::int32 value);

  // optional int32 do_activation = 14;
  bool has_do_activation() const;
  void clear_do_activation();
  static const int kDoActivationFieldNumber = 14;
  ::google::protobuf::int32 do_activation() const;
  void set_do_activation(::google::protobuf::int32 value);

  // optional int32 activation_method = 15;
  bool has_activation_method() const;
  void clear_activation_method();
  static const int kActivationMethodFieldNumber = 15;
  ::google::protobuf::int32 activation_method() const;
  void set_activation_method(::google::protobuf::int32 value);

  // optional uint64 activation_ga_slope = 16;
  bool has_activation_ga_slope() const;
  void clear_activation_ga_slope();
  static const int kActivationGaSlopeFieldNumber = 16;
  ::google::protobuf::uint64 activation_ga_slope() const;
  void set_activation_ga_slope(::google::protobuf::uint64 value);

  // optional int32 activation_channel_shared = 17;
  bool has_activation_channel_shared() const;
  void clear_activation_channel_shared();
  static const int kActivationChannelSharedFieldNumber = 17;
  ::google::protobuf::int32 activation_channel_shared() const;
  void set_activation_channel_shared(::google::protobuf::int32 value);

  // optional int32 activation_gt_scale = 18;
  bool has_activation_gt_scale() const;
  void clear_activation_gt_scale();
  static const int kActivationGtScaleFieldNumber = 18;
  ::google::protobuf::int32 activation_gt_scale() const;
  void set_activation_gt_scale(::google::protobuf::int32 value);

  // optional int32 activation_gt_rshift = 19;
  bool has_activation_gt_rshift() const;
  void clear_activation_gt_rshift();
  static const int kActivationGtRshiftFieldNumber = 19;
  ::google::protobuf::int32 activation_gt_rshift() const;
  void set_activation_gt_rshift(::google::protobuf::int32 value);

  // optional int32 activation_le_scale = 20;
  bool has_activation_le_scale() const;
  void clear_activation_le_scale();
  static const int kActivationLeScaleFieldNumber = 20;
  ::google::protobuf::int32 activation_le_scale() const;
  void set_activation_le_scale(::google::protobuf::int32 value);

  // optional int32 activation_le_rshift = 21;
  bool has_activation_le_rshift() const;
  void clear_activation_le_rshift();
  static const int kActivationLeRshiftFieldNumber = 21;
  ::google::protobuf::int32 activation_le_rshift() const;
  void set_activation_le_rshift(::google::protobuf::int32 value);

  // optional bool weight_transpose = 22;
  bool has_weight_transpose() const;
  void clear_weight_transpose();
  static const int kWeightTransposeFieldNumber = 22;
  bool weight_transpose() const;
  void set_weight_transpose(bool value);

  // optional int32 left_shift_width = 23;
  bool has_left_shift_width() const;
  void clear_left_shift_width();
  static const int kLeftShiftWidthFieldNumber = 23;
  ::google::protobuf::int32 left_shift_width() const;
  void set_left_shift_width(::google::protobuf::int32 value);

  // optional int32 right_shift_width = 24;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 24;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_bottom_data_gaddr();
  void clear_has_bottom_data_gaddr();
  void set_has_weight_data_gaddr();
  void clear_has_weight_data_gaddr();
  void set_has_bias_data_gaddr();
  void clear_has_bias_data_gaddr();
  void set_has_top_data_gaddr();
  void clear_has_top_data_gaddr();
  void set_has_input_row_num();
  void clear_has_input_row_num();
  void set_has_input_col_num();
  void clear_has_input_col_num();
  void set_has_weight_col_num();
  void clear_has_weight_col_num();
  void set_has_have_bias();
  void clear_has_have_bias();
  void set_has_do_activation();
  void clear_has_do_activation();
  void set_has_activation_method();
  void clear_has_activation_method();
  void set_has_activation_ga_slope();
  void clear_has_activation_ga_slope();
  void set_has_activation_channel_shared();
  void clear_has_activation_channel_shared();
  void set_has_activation_gt_scale();
  void clear_has_activation_gt_scale();
  void set_has_activation_gt_rshift();
  void clear_has_activation_gt_rshift();
  void set_has_activation_le_scale();
  void clear_has_activation_le_scale();
  void set_has_activation_le_rshift();
  void clear_has_activation_le_rshift();
  void set_has_weight_transpose();
  void clear_has_weight_transpose();
  void set_has_left_shift_width();
  void clear_has_left_shift_width();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 bottom_data_gaddr_;
  ::google::protobuf::uint64 weight_data_gaddr_;
  ::google::protobuf::uint64 bias_data_gaddr_;
  ::google::protobuf::uint64 top_data_gaddr_;
  ::google::protobuf::int32 input_row_num_;
  ::google::protobuf::int32 input_col_num_;
  ::google::protobuf::int32 weight_col_num_;
  ::google::protobuf::int32 have_bias_;
  ::google::protobuf::int32 do_activation_;
  ::google::protobuf::int32 activation_method_;
  ::google::protobuf::uint64 activation_ga_slope_;
  ::google::protobuf::int32 activation_channel_shared_;
  ::google::protobuf::int32 activation_gt_scale_;
  ::google::protobuf::int32 activation_gt_rshift_;
  ::google::protobuf::int32 activation_le_scale_;
  ::google::protobuf::int32 activation_le_rshift_;
  bool weight_transpose_;
  ::google::protobuf::int32 left_shift_width_;
  ::google::protobuf::int32 right_shift_width_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_relu_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_relu_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_relu_fixed_forward_bmkernel();

  Inst_bmnet_relu_fixed_forward_bmkernel(const Inst_bmnet_relu_fixed_forward_bmkernel& from);

  inline Inst_bmnet_relu_fixed_forward_bmkernel& operator=(const Inst_bmnet_relu_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_relu_fixed_forward_bmkernel(Inst_bmnet_relu_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_relu_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_relu_fixed_forward_bmkernel& operator=(Inst_bmnet_relu_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_relu_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_relu_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_relu_fixed_forward_bmkernel*>(
               &_Inst_bmnet_relu_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Inst_bmnet_relu_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_relu_fixed_forward_bmkernel& a, Inst_bmnet_relu_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_relu_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_relu_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_relu_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_relu_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_relu_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_relu_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_relu_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 bottom_gaddr = 6;
  bool has_bottom_gaddr() const;
  void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 6;
  ::google::protobuf::uint64 bottom_gaddr() const;
  void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 7;
  bool has_top_gaddr() const;
  void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 7;
  ::google::protobuf::uint64 top_gaddr() const;
  void set_top_gaddr(::google::protobuf::uint64 value);

  // optional float negative_slope = 8;
  bool has_negative_slope() const;
  void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 8;
  float negative_slope() const;
  void set_negative_slope(float value);

  // optional int32 input_n = 9;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 9;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 10;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 10;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 11;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 11;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 12;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 12;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_bottom_gaddr();
  void clear_has_bottom_gaddr();
  void set_has_top_gaddr();
  void clear_has_top_gaddr();
  void set_has_negative_slope();
  void clear_has_negative_slope();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  float negative_slope_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_clip_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_clip_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_clip_fixed_forward_bmkernel();

  Inst_bmnet_clip_fixed_forward_bmkernel(const Inst_bmnet_clip_fixed_forward_bmkernel& from);

  inline Inst_bmnet_clip_fixed_forward_bmkernel& operator=(const Inst_bmnet_clip_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_clip_fixed_forward_bmkernel(Inst_bmnet_clip_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_clip_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_clip_fixed_forward_bmkernel& operator=(Inst_bmnet_clip_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_clip_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_clip_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_clip_fixed_forward_bmkernel*>(
               &_Inst_bmnet_clip_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Inst_bmnet_clip_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_clip_fixed_forward_bmkernel& a, Inst_bmnet_clip_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_clip_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_clip_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_clip_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_clip_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_clip_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_clip_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_clip_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 bottom_gaddr = 6;
  bool has_bottom_gaddr() const;
  void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 6;
  ::google::protobuf::uint64 bottom_gaddr() const;
  void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 7;
  bool has_top_gaddr() const;
  void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 7;
  ::google::protobuf::uint64 top_gaddr() const;
  void set_top_gaddr(::google::protobuf::uint64 value);

  // optional int32 max = 8;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 8;
  ::google::protobuf::int32 max() const;
  void set_max(::google::protobuf::int32 value);

  // optional int32 min = 9;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 9;
  ::google::protobuf::int32 min() const;
  void set_min(::google::protobuf::int32 value);

  // optional int32 input_n = 10;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 10;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 11;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 11;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 12;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 12;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 13;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 13;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_bottom_gaddr();
  void clear_has_bottom_gaddr();
  void set_has_top_gaddr();
  void clear_has_top_gaddr();
  void set_has_max();
  void clear_has_max();
  void set_has_min();
  void clear_has_min();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  ::google::protobuf::int32 max_;
  ::google::protobuf::int32 min_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_leakyrelu_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_leakyrelu_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_leakyrelu_fixed_forward_bmkernel();

  Inst_bmnet_leakyrelu_fixed_forward_bmkernel(const Inst_bmnet_leakyrelu_fixed_forward_bmkernel& from);

  inline Inst_bmnet_leakyrelu_fixed_forward_bmkernel& operator=(const Inst_bmnet_leakyrelu_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_leakyrelu_fixed_forward_bmkernel(Inst_bmnet_leakyrelu_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_leakyrelu_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_leakyrelu_fixed_forward_bmkernel& operator=(Inst_bmnet_leakyrelu_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_leakyrelu_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_leakyrelu_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_leakyrelu_fixed_forward_bmkernel*>(
               &_Inst_bmnet_leakyrelu_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Inst_bmnet_leakyrelu_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_leakyrelu_fixed_forward_bmkernel& a, Inst_bmnet_leakyrelu_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_leakyrelu_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_leakyrelu_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_leakyrelu_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_leakyrelu_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_leakyrelu_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_leakyrelu_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_leakyrelu_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_gaddr = 6;
  bool has_input_gaddr() const;
  void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_gaddr() const;
  void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 7;
  bool has_output_gaddr() const;
  void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 7;
  ::google::protobuf::uint64 output_gaddr() const;
  void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 8;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 8;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 9;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 9;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 10;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 10;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 11;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 11;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 GT_right_shift_width = 12;
  bool has_gt_right_shift_width() const;
  void clear_gt_right_shift_width();
  static const int kGTRightShiftWidthFieldNumber = 12;
  ::google::protobuf::int32 gt_right_shift_width() const;
  void set_gt_right_shift_width(::google::protobuf::int32 value);

  // optional int32 LE_right_shift_width = 13;
  bool has_le_right_shift_width() const;
  void clear_le_right_shift_width();
  static const int kLERightShiftWidthFieldNumber = 13;
  ::google::protobuf::int32 le_right_shift_width() const;
  void set_le_right_shift_width(::google::protobuf::int32 value);

  // optional int32 GT_scale = 14;
  bool has_gt_scale() const;
  void clear_gt_scale();
  static const int kGTScaleFieldNumber = 14;
  ::google::protobuf::int32 gt_scale() const;
  void set_gt_scale(::google::protobuf::int32 value);

  // optional int32 LE_scale = 15;
  bool has_le_scale() const;
  void clear_le_scale();
  static const int kLEScaleFieldNumber = 15;
  ::google::protobuf::int32 le_scale() const;
  void set_le_scale(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_gaddr();
  void clear_has_input_gaddr();
  void set_has_output_gaddr();
  void clear_has_output_gaddr();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_gt_right_shift_width();
  void clear_has_gt_right_shift_width();
  void set_has_le_right_shift_width();
  void clear_has_le_right_shift_width();
  void set_has_gt_scale();
  void clear_has_gt_scale();
  void set_has_le_scale();
  void clear_has_le_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 gt_right_shift_width_;
  ::google::protobuf::int32 le_right_shift_width_;
  ::google::protobuf::int32 gt_scale_;
  ::google::protobuf::int32 le_scale_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_prelu_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_prelu_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_prelu_fixed_forward_bmkernel();

  Inst_bmnet_prelu_fixed_forward_bmkernel(const Inst_bmnet_prelu_fixed_forward_bmkernel& from);

  inline Inst_bmnet_prelu_fixed_forward_bmkernel& operator=(const Inst_bmnet_prelu_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_prelu_fixed_forward_bmkernel(Inst_bmnet_prelu_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_prelu_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_prelu_fixed_forward_bmkernel& operator=(Inst_bmnet_prelu_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_prelu_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_prelu_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_prelu_fixed_forward_bmkernel*>(
               &_Inst_bmnet_prelu_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Inst_bmnet_prelu_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_prelu_fixed_forward_bmkernel& a, Inst_bmnet_prelu_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_prelu_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_prelu_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_prelu_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_prelu_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_prelu_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_prelu_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_prelu_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_gaddr = 6;
  bool has_input_gaddr() const;
  void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_gaddr() const;
  void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 slope_gaddr = 7;
  bool has_slope_gaddr() const;
  void clear_slope_gaddr();
  static const int kSlopeGaddrFieldNumber = 7;
  ::google::protobuf::uint64 slope_gaddr() const;
  void set_slope_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 8;
  bool has_output_gaddr() const;
  void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 8;
  ::google::protobuf::uint64 output_gaddr() const;
  void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 channel_shared = 9;
  bool has_channel_shared() const;
  void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 9;
  ::google::protobuf::int32 channel_shared() const;
  void set_channel_shared(::google::protobuf::int32 value);

  // optional int32 slope = 10;
  bool has_slope() const;
  void clear_slope();
  static const int kSlopeFieldNumber = 10;
  ::google::protobuf::int32 slope() const;
  void set_slope(::google::protobuf::int32 value);

  // optional int32 input_n = 11;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 11;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 12;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 12;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 13;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 13;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 14;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 14;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 GT_scale = 15;
  bool has_gt_scale() const;
  void clear_gt_scale();
  static const int kGTScaleFieldNumber = 15;
  ::google::protobuf::int32 gt_scale() const;
  void set_gt_scale(::google::protobuf::int32 value);

  // optional int32 GT_right_shift_width = 16;
  bool has_gt_right_shift_width() const;
  void clear_gt_right_shift_width();
  static const int kGTRightShiftWidthFieldNumber = 16;
  ::google::protobuf::int32 gt_right_shift_width() const;
  void set_gt_right_shift_width(::google::protobuf::int32 value);

  // optional int32 LE_right_shift_width = 17;
  bool has_le_right_shift_width() const;
  void clear_le_right_shift_width();
  static const int kLERightShiftWidthFieldNumber = 17;
  ::google::protobuf::int32 le_right_shift_width() const;
  void set_le_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_gaddr();
  void clear_has_input_gaddr();
  void set_has_slope_gaddr();
  void clear_has_slope_gaddr();
  void set_has_output_gaddr();
  void clear_has_output_gaddr();
  void set_has_channel_shared();
  void clear_has_channel_shared();
  void set_has_slope();
  void clear_has_slope();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_gt_scale();
  void clear_has_gt_scale();
  void set_has_gt_right_shift_width();
  void clear_has_gt_right_shift_width();
  void set_has_le_right_shift_width();
  void clear_has_le_right_shift_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 slope_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 channel_shared_;
  ::google::protobuf::int32 slope_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 gt_scale_;
  ::google::protobuf::int32 gt_right_shift_width_;
  ::google::protobuf::int32 le_right_shift_width_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_sigmoid_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_sigmoid_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_sigmoid_fixed_forward_bmkernel();

  Inst_bmnet_sigmoid_fixed_forward_bmkernel(const Inst_bmnet_sigmoid_fixed_forward_bmkernel& from);

  inline Inst_bmnet_sigmoid_fixed_forward_bmkernel& operator=(const Inst_bmnet_sigmoid_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_sigmoid_fixed_forward_bmkernel(Inst_bmnet_sigmoid_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_sigmoid_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_sigmoid_fixed_forward_bmkernel& operator=(Inst_bmnet_sigmoid_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_sigmoid_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_sigmoid_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_sigmoid_fixed_forward_bmkernel*>(
               &_Inst_bmnet_sigmoid_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Inst_bmnet_sigmoid_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_sigmoid_fixed_forward_bmkernel& a, Inst_bmnet_sigmoid_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_sigmoid_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_sigmoid_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_sigmoid_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_sigmoid_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_sigmoid_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_sigmoid_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_sigmoid_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 bottom_gaddr = 6;
  bool has_bottom_gaddr() const;
  void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 6;
  ::google::protobuf::uint64 bottom_gaddr() const;
  void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 7;
  bool has_top_gaddr() const;
  void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 7;
  ::google::protobuf::uint64 top_gaddr() const;
  void set_top_gaddr(::google::protobuf::uint64 value);

  // optional uint64 sg_lut_gaddr = 8;
  bool has_sg_lut_gaddr() const;
  void clear_sg_lut_gaddr();
  static const int kSgLutGaddrFieldNumber = 8;
  ::google::protobuf::uint64 sg_lut_gaddr() const;
  void set_sg_lut_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 9;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 9;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 10;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 10;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 11;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 11;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 12;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 12;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_bottom_gaddr();
  void clear_has_bottom_gaddr();
  void set_has_top_gaddr();
  void clear_has_top_gaddr();
  void set_has_sg_lut_gaddr();
  void clear_has_sg_lut_gaddr();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  ::google::protobuf::uint64 sg_lut_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel) */ {
 public:
  Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel();
  virtual ~Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel();

  Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel(const Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel& from);

  inline Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel& operator=(const Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel(Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel&& from) noexcept
    : Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel& operator=(Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel*>(
               &_Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* other);
  friend void swap(Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel& a, Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel>(NULL);
  }

  Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel& from);
  void MergeFrom(const Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 bottom_gaddr = 6;
  bool has_bottom_gaddr() const;
  void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 6;
  ::google::protobuf::uint64 bottom_gaddr() const;
  void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 mean_ma_gaddr = 7;
  bool has_mean_ma_gaddr() const;
  void clear_mean_ma_gaddr();
  static const int kMeanMaGaddrFieldNumber = 7;
  ::google::protobuf::uint64 mean_ma_gaddr() const;
  void set_mean_ma_gaddr(::google::protobuf::uint64 value);

  // optional uint64 variance_ma_gaddr = 8;
  bool has_variance_ma_gaddr() const;
  void clear_variance_ma_gaddr();
  static const int kVarianceMaGaddrFieldNumber = 8;
  ::google::protobuf::uint64 variance_ma_gaddr() const;
  void set_variance_ma_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 9;
  bool has_top_gaddr() const;
  void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 9;
  ::google::protobuf::uint64 top_gaddr() const;
  void set_top_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 10;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 10;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 11;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 11;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 12;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 12;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 13;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 13;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 right_shift_width = 14;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 14;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_bottom_gaddr();
  void clear_has_bottom_gaddr();
  void set_has_mean_ma_gaddr();
  void clear_has_mean_ma_gaddr();
  void set_has_variance_ma_gaddr();
  void clear_has_variance_ma_gaddr();
  void set_has_top_gaddr();
  void clear_has_top_gaddr();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 mean_ma_gaddr_;
  ::google::protobuf::uint64 variance_ma_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 right_shift_width_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_scale_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_scale_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_scale_fixed_forward_bmkernel();

  Inst_bmnet_scale_fixed_forward_bmkernel(const Inst_bmnet_scale_fixed_forward_bmkernel& from);

  inline Inst_bmnet_scale_fixed_forward_bmkernel& operator=(const Inst_bmnet_scale_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_scale_fixed_forward_bmkernel(Inst_bmnet_scale_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_scale_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_scale_fixed_forward_bmkernel& operator=(Inst_bmnet_scale_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_scale_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_scale_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_scale_fixed_forward_bmkernel*>(
               &_Inst_bmnet_scale_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Inst_bmnet_scale_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_scale_fixed_forward_bmkernel& a, Inst_bmnet_scale_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_scale_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_scale_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_scale_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_scale_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_scale_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_scale_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_scale_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_gaddr = 6;
  bool has_input_gaddr() const;
  void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_gaddr() const;
  void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 scale_gaddr = 7;
  bool has_scale_gaddr() const;
  void clear_scale_gaddr();
  static const int kScaleGaddrFieldNumber = 7;
  ::google::protobuf::uint64 scale_gaddr() const;
  void set_scale_gaddr(::google::protobuf::uint64 value);

  // optional uint64 bias_gaddr = 8;
  bool has_bias_gaddr() const;
  void clear_bias_gaddr();
  static const int kBiasGaddrFieldNumber = 8;
  ::google::protobuf::uint64 bias_gaddr() const;
  void set_bias_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 9;
  bool has_output_gaddr() const;
  void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 9;
  ::google::protobuf::uint64 output_gaddr() const;
  void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 10;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 10;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 11;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 11;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 12;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 12;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 13;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 13;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 scale_dim = 14;
  bool has_scale_dim() const;
  void clear_scale_dim();
  static const int kScaleDimFieldNumber = 14;
  ::google::protobuf::int32 scale_dim() const;
  void set_scale_dim(::google::protobuf::int32 value);

  // optional int32 inner_dim = 15;
  bool has_inner_dim() const;
  void clear_inner_dim();
  static const int kInnerDimFieldNumber = 15;
  ::google::protobuf::int32 inner_dim() const;
  void set_inner_dim(::google::protobuf::int32 value);

  // optional int32 right_shift_width = 16;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 16;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_gaddr();
  void clear_has_input_gaddr();
  void set_has_scale_gaddr();
  void clear_has_scale_gaddr();
  void set_has_bias_gaddr();
  void clear_has_bias_gaddr();
  void set_has_output_gaddr();
  void clear_has_output_gaddr();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_scale_dim();
  void clear_has_scale_dim();
  void set_has_inner_dim();
  void clear_has_inner_dim();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 scale_gaddr_;
  ::google::protobuf::uint64 bias_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 scale_dim_;
  ::google::protobuf::int32 inner_dim_;
  ::google::protobuf::int32 right_shift_width_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_reshape_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_reshape_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_reshape_fixed_forward_bmkernel();

  Inst_bmnet_reshape_fixed_forward_bmkernel(const Inst_bmnet_reshape_fixed_forward_bmkernel& from);

  inline Inst_bmnet_reshape_fixed_forward_bmkernel& operator=(const Inst_bmnet_reshape_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_reshape_fixed_forward_bmkernel(Inst_bmnet_reshape_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_reshape_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_reshape_fixed_forward_bmkernel& operator=(Inst_bmnet_reshape_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_reshape_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_reshape_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_reshape_fixed_forward_bmkernel*>(
               &_Inst_bmnet_reshape_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Inst_bmnet_reshape_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_reshape_fixed_forward_bmkernel& a, Inst_bmnet_reshape_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_reshape_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_reshape_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_reshape_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_reshape_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_reshape_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_reshape_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_reshape_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated int32 output_dim = 9;
  int output_dim_size() const;
  void clear_output_dim();
  static const int kOutputDimFieldNumber = 9;
  ::google::protobuf::int32 output_dim(int index) const;
  void set_output_dim(int index, ::google::protobuf::int32 value);
  void add_output_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      output_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_output_dim();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_gaddr = 6;
  bool has_input_gaddr() const;
  void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_gaddr() const;
  void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 7;
  bool has_output_gaddr() const;
  void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 7;
  ::google::protobuf::uint64 output_gaddr() const;
  void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 output_dim_len = 8;
  bool has_output_dim_len() const;
  void clear_output_dim_len();
  static const int kOutputDimLenFieldNumber = 8;
  ::google::protobuf::int32 output_dim_len() const;
  void set_output_dim_len(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_gaddr();
  void clear_has_input_gaddr();
  void set_has_output_gaddr();
  void clear_has_output_gaddr();
  void set_has_output_dim_len();
  void clear_has_output_dim_len();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > output_dim_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 output_dim_len_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_split_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_split_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_split_fixed_forward_bmkernel();

  Inst_bmnet_split_fixed_forward_bmkernel(const Inst_bmnet_split_fixed_forward_bmkernel& from);

  inline Inst_bmnet_split_fixed_forward_bmkernel& operator=(const Inst_bmnet_split_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_split_fixed_forward_bmkernel(Inst_bmnet_split_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_split_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_split_fixed_forward_bmkernel& operator=(Inst_bmnet_split_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_split_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_split_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_split_fixed_forward_bmkernel*>(
               &_Inst_bmnet_split_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Inst_bmnet_split_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_split_fixed_forward_bmkernel& a, Inst_bmnet_split_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_split_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_split_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_split_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_split_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_split_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_split_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_split_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated uint64 top_gaddr = 7;
  int top_gaddr_size() const;
  void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 7;
  ::google::protobuf::uint64 top_gaddr(int index) const;
  void set_top_gaddr(int index, ::google::protobuf::uint64 value);
  void add_top_gaddr(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      top_gaddr() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_top_gaddr();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 bottom_gaddr = 6;
  bool has_bottom_gaddr() const;
  void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 6;
  ::google::protobuf::uint64 bottom_gaddr() const;
  void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional int32 top_size = 8;
  bool has_top_size() const;
  void clear_top_size();
  static const int kTopSizeFieldNumber = 8;
  ::google::protobuf::int32 top_size() const;
  void set_top_size(::google::protobuf::int32 value);

  // optional int32 input_n = 9;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 9;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 10;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 10;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 11;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 11;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 12;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 12;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_bottom_gaddr();
  void clear_has_bottom_gaddr();
  void set_has_top_size();
  void clear_has_top_size();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > top_gaddr_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::int32 top_size_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_concat_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_concat_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_concat_fixed_forward_bmkernel();

  Inst_bmnet_concat_fixed_forward_bmkernel(const Inst_bmnet_concat_fixed_forward_bmkernel& from);

  inline Inst_bmnet_concat_fixed_forward_bmkernel& operator=(const Inst_bmnet_concat_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_concat_fixed_forward_bmkernel(Inst_bmnet_concat_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_concat_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_concat_fixed_forward_bmkernel& operator=(Inst_bmnet_concat_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_concat_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_concat_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_concat_fixed_forward_bmkernel*>(
               &_Inst_bmnet_concat_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Inst_bmnet_concat_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_concat_fixed_forward_bmkernel& a, Inst_bmnet_concat_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_concat_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_concat_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_concat_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_concat_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_concat_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_concat_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_concat_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated uint64 input_gaddrs = 6;
  int input_gaddrs_size() const;
  void clear_input_gaddrs();
  static const int kInputGaddrsFieldNumber = 6;
  ::google::protobuf::uint64 input_gaddrs(int index) const;
  void set_input_gaddrs(int index, ::google::protobuf::uint64 value);
  void add_input_gaddrs(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      input_gaddrs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_input_gaddrs();

  // repeated int32 input_dims = 8;
  int input_dims_size() const;
  void clear_input_dims();
  static const int kInputDimsFieldNumber = 8;
  ::google::protobuf::int32 input_dims(int index) const;
  void set_input_dims(int index, ::google::protobuf::int32 value);
  void add_input_dims(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dims();

  // repeated int32 output_dim = 12;
  int output_dim_size() const;
  void clear_output_dim();
  static const int kOutputDimFieldNumber = 12;
  ::google::protobuf::int32 output_dim(int index) const;
  void set_output_dim(int index, ::google::protobuf::int32 value);
  void add_output_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      output_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_output_dim();

  // repeated int32 right_shift_width = 14;
  int right_shift_width_size() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 14;
  ::google::protobuf::int32 right_shift_width(int index) const;
  void set_right_shift_width(int index, ::google::protobuf::int32 value);
  void add_right_shift_width(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      right_shift_width() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_right_shift_width();

  // repeated int32 threshold_x_quantized = 15;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 15;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 output_gaddr = 7;
  bool has_output_gaddr() const;
  void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 7;
  ::google::protobuf::uint64 output_gaddr() const;
  void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_num = 9;
  bool has_input_num() const;
  void clear_input_num();
  static const int kInputNumFieldNumber = 9;
  ::google::protobuf::int32 input_num() const;
  void set_input_num(::google::protobuf::int32 value);

  // optional int32 concat_axis = 10;
  bool has_concat_axis() const;
  void clear_concat_axis();
  static const int kConcatAxisFieldNumber = 10;
  ::google::protobuf::int32 concat_axis() const;
  void set_concat_axis(::google::protobuf::int32 value);

  // optional int32 output_dim_len = 11;
  bool has_output_dim_len() const;
  void clear_output_dim_len();
  static const int kOutputDimLenFieldNumber = 11;
  ::google::protobuf::int32 output_dim_len() const;
  void set_output_dim_len(::google::protobuf::int32 value);

  // optional int32 need_quantize_num = 13;
  bool has_need_quantize_num() const;
  void clear_need_quantize_num();
  static const int kNeedQuantizeNumFieldNumber = 13;
  ::google::protobuf::int32 need_quantize_num() const;
  void set_need_quantize_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_output_gaddr();
  void clear_has_output_gaddr();
  void set_has_input_num();
  void clear_has_input_num();
  void set_has_concat_axis();
  void clear_has_concat_axis();
  void set_has_output_dim_len();
  void clear_has_output_dim_len();
  void set_has_need_quantize_num();
  void clear_has_need_quantize_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > input_gaddrs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dims_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > output_dim_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > right_shift_width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 input_num_;
  ::google::protobuf::int32 concat_axis_;
  ::google::protobuf::int32 output_dim_len_;
  ::google::protobuf::int32 need_quantize_num_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_eltwise_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_eltwise_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_eltwise_fixed_forward_bmkernel();

  Inst_bmnet_eltwise_fixed_forward_bmkernel(const Inst_bmnet_eltwise_fixed_forward_bmkernel& from);

  inline Inst_bmnet_eltwise_fixed_forward_bmkernel& operator=(const Inst_bmnet_eltwise_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_eltwise_fixed_forward_bmkernel(Inst_bmnet_eltwise_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_eltwise_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_eltwise_fixed_forward_bmkernel& operator=(Inst_bmnet_eltwise_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_eltwise_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_eltwise_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_eltwise_fixed_forward_bmkernel*>(
               &_Inst_bmnet_eltwise_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Inst_bmnet_eltwise_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_eltwise_fixed_forward_bmkernel& a, Inst_bmnet_eltwise_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_eltwise_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_eltwise_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_eltwise_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_eltwise_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_eltwise_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_eltwise_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_eltwise_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated uint64 ga_input = 6;
  int ga_input_size() const;
  void clear_ga_input();
  static const int kGaInputFieldNumber = 6;
  ::google::protobuf::uint64 ga_input(int index) const;
  void set_ga_input(int index, ::google::protobuf::uint64 value);
  void add_ga_input(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ga_input() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ga_input();

  // repeated int32 threshold_x_quantized = 17;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 17;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // repeated int32 coeffs = 18;
  int coeffs_size() const;
  void clear_coeffs();
  static const int kCoeffsFieldNumber = 18;
  ::google::protobuf::int32 coeffs(int index) const;
  void set_coeffs(int index, ::google::protobuf::int32 value);
  void add_coeffs(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      coeffs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_coeffs();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 ga_output = 7;
  bool has_ga_output() const;
  void clear_ga_output();
  static const int kGaOutputFieldNumber = 7;
  ::google::protobuf::uint64 ga_output() const;
  void set_ga_output(::google::protobuf::uint64 value);

  // optional int32 input_size = 8;
  bool has_input_size() const;
  void clear_input_size();
  static const int kInputSizeFieldNumber = 8;
  ::google::protobuf::int32 input_size() const;
  void set_input_size(::google::protobuf::int32 value);

  // optional int32 op = 9;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 9;
  ::google::protobuf::int32 op() const;
  void set_op(::google::protobuf::int32 value);

  // optional int32 input_n = 10;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 10;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 11;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 11;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 12;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 12;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 13;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 13;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional bool do_relu = 14;
  bool has_do_relu() const;
  void clear_do_relu();
  static const int kDoReluFieldNumber = 14;
  bool do_relu() const;
  void set_do_relu(bool value);

  // optional float relu_slope = 15;
  bool has_relu_slope() const;
  void clear_relu_slope();
  static const int kReluSlopeFieldNumber = 15;
  float relu_slope() const;
  void set_relu_slope(float value);

  // optional int32 right_shift_width = 16;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 16;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_ga_output();
  void clear_has_ga_output();
  void set_has_input_size();
  void clear_has_input_size();
  void set_has_op();
  void clear_has_op();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_do_relu();
  void clear_has_do_relu();
  void set_has_relu_slope();
  void clear_has_relu_slope();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ga_input_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > coeffs_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 ga_output_;
  ::google::protobuf::int32 input_size_;
  ::google::protobuf::int32 op_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  bool do_relu_;
  float relu_slope_;
  ::google::protobuf::int32 right_shift_width_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_permute_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_permute_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_permute_fixed_forward_bmkernel();

  Inst_bmnet_permute_fixed_forward_bmkernel(const Inst_bmnet_permute_fixed_forward_bmkernel& from);

  inline Inst_bmnet_permute_fixed_forward_bmkernel& operator=(const Inst_bmnet_permute_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_permute_fixed_forward_bmkernel(Inst_bmnet_permute_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_permute_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_permute_fixed_forward_bmkernel& operator=(Inst_bmnet_permute_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_permute_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_permute_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_permute_fixed_forward_bmkernel*>(
               &_Inst_bmnet_permute_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Inst_bmnet_permute_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_permute_fixed_forward_bmkernel& a, Inst_bmnet_permute_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_permute_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_permute_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_permute_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_permute_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_permute_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_permute_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_permute_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_gaddr = 6;
  bool has_input_gaddr() const;
  void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_gaddr() const;
  void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 7;
  bool has_output_gaddr() const;
  void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 7;
  ::google::protobuf::uint64 output_gaddr() const;
  void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 8;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 8;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 9;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 9;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 10;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 10;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 11;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 11;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 output_n = 12;
  bool has_output_n() const;
  void clear_output_n();
  static const int kOutputNFieldNumber = 12;
  ::google::protobuf::int32 output_n() const;
  void set_output_n(::google::protobuf::int32 value);

  // optional int32 output_c = 13;
  bool has_output_c() const;
  void clear_output_c();
  static const int kOutputCFieldNumber = 13;
  ::google::protobuf::int32 output_c() const;
  void set_output_c(::google::protobuf::int32 value);

  // optional int32 output_h = 14;
  bool has_output_h() const;
  void clear_output_h();
  static const int kOutputHFieldNumber = 14;
  ::google::protobuf::int32 output_h() const;
  void set_output_h(::google::protobuf::int32 value);

  // optional int32 output_w = 15;
  bool has_output_w() const;
  void clear_output_w();
  static const int kOutputWFieldNumber = 15;
  ::google::protobuf::int32 output_w() const;
  void set_output_w(::google::protobuf::int32 value);

  // optional int32 order_n = 16;
  bool has_order_n() const;
  void clear_order_n();
  static const int kOrderNFieldNumber = 16;
  ::google::protobuf::int32 order_n() const;
  void set_order_n(::google::protobuf::int32 value);

  // optional int32 order_c = 17;
  bool has_order_c() const;
  void clear_order_c();
  static const int kOrderCFieldNumber = 17;
  ::google::protobuf::int32 order_c() const;
  void set_order_c(::google::protobuf::int32 value);

  // optional int32 order_h = 18;
  bool has_order_h() const;
  void clear_order_h();
  static const int kOrderHFieldNumber = 18;
  ::google::protobuf::int32 order_h() const;
  void set_order_h(::google::protobuf::int32 value);

  // optional int32 order_w = 19;
  bool has_order_w() const;
  void clear_order_w();
  static const int kOrderWFieldNumber = 19;
  ::google::protobuf::int32 order_w() const;
  void set_order_w(::google::protobuf::int32 value);

  // optional bool need_permute = 20;
  bool has_need_permute() const;
  void clear_need_permute();
  static const int kNeedPermuteFieldNumber = 20;
  bool need_permute() const;
  void set_need_permute(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_gaddr();
  void clear_has_input_gaddr();
  void set_has_output_gaddr();
  void clear_has_output_gaddr();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_output_n();
  void clear_has_output_n();
  void set_has_output_c();
  void clear_has_output_c();
  void set_has_output_h();
  void clear_has_output_h();
  void set_has_output_w();
  void clear_has_output_w();
  void set_has_order_n();
  void clear_has_order_n();
  void set_has_order_c();
  void clear_has_order_c();
  void set_has_order_h();
  void clear_has_order_h();
  void set_has_order_w();
  void clear_has_order_w();
  void set_has_need_permute();
  void clear_has_need_permute();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 output_n_;
  ::google::protobuf::int32 output_c_;
  ::google::protobuf::int32 output_h_;
  ::google::protobuf::int32 output_w_;
  ::google::protobuf::int32 order_n_;
  ::google::protobuf::int32 order_c_;
  ::google::protobuf::int32 order_h_;
  ::google::protobuf::int32 order_w_;
  bool need_permute_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_priorbox_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_priorbox_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_priorbox_fixed_forward_bmkernel();

  Inst_bmnet_priorbox_fixed_forward_bmkernel(const Inst_bmnet_priorbox_fixed_forward_bmkernel& from);

  inline Inst_bmnet_priorbox_fixed_forward_bmkernel& operator=(const Inst_bmnet_priorbox_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_priorbox_fixed_forward_bmkernel(Inst_bmnet_priorbox_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_priorbox_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_priorbox_fixed_forward_bmkernel& operator=(Inst_bmnet_priorbox_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_priorbox_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_priorbox_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_priorbox_fixed_forward_bmkernel*>(
               &_Inst_bmnet_priorbox_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Inst_bmnet_priorbox_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_priorbox_fixed_forward_bmkernel& a, Inst_bmnet_priorbox_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_priorbox_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_priorbox_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_priorbox_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_priorbox_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_priorbox_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_priorbox_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_priorbox_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 weight_data_gaddr = 6;
  bool has_weight_data_gaddr() const;
  void clear_weight_data_gaddr();
  static const int kWeightDataGaddrFieldNumber = 6;
  ::google::protobuf::uint64 weight_data_gaddr() const;
  void set_weight_data_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 7;
  bool has_output_gaddr() const;
  void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 7;
  ::google::protobuf::uint64 output_gaddr() const;
  void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 output_c = 8;
  bool has_output_c() const;
  void clear_output_c();
  static const int kOutputCFieldNumber = 8;
  ::google::protobuf::int32 output_c() const;
  void set_output_c(::google::protobuf::int32 value);

  // optional int32 output_h = 9;
  bool has_output_h() const;
  void clear_output_h();
  static const int kOutputHFieldNumber = 9;
  ::google::protobuf::int32 output_h() const;
  void set_output_h(::google::protobuf::int32 value);

  // optional int32 output_w = 10;
  bool has_output_w() const;
  void clear_output_w();
  static const int kOutputWFieldNumber = 10;
  ::google::protobuf::int32 output_w() const;
  void set_output_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_weight_data_gaddr();
  void clear_has_weight_data_gaddr();
  void set_has_output_gaddr();
  void clear_has_output_gaddr();
  void set_has_output_c();
  void clear_has_output_c();
  void set_has_output_h();
  void clear_has_output_h();
  void set_has_output_w();
  void clear_has_output_w();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 weight_data_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 output_c_;
  ::google::protobuf::int32 output_h_;
  ::google::protobuf::int32 output_w_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_lrn_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_lrn_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_lrn_fixed_forward_bmkernel();

  Inst_bmnet_lrn_fixed_forward_bmkernel(const Inst_bmnet_lrn_fixed_forward_bmkernel& from);

  inline Inst_bmnet_lrn_fixed_forward_bmkernel& operator=(const Inst_bmnet_lrn_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_lrn_fixed_forward_bmkernel(Inst_bmnet_lrn_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_lrn_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_lrn_fixed_forward_bmkernel& operator=(Inst_bmnet_lrn_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_lrn_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_lrn_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_lrn_fixed_forward_bmkernel*>(
               &_Inst_bmnet_lrn_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(Inst_bmnet_lrn_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_lrn_fixed_forward_bmkernel& a, Inst_bmnet_lrn_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_lrn_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_lrn_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_lrn_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_lrn_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_lrn_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_lrn_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_lrn_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated int32 threshold_x_quantized = 17;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 17;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 bottom_gaddr = 6;
  bool has_bottom_gaddr() const;
  void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 6;
  ::google::protobuf::uint64 bottom_gaddr() const;
  void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 7;
  bool has_top_gaddr() const;
  void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 7;
  ::google::protobuf::uint64 top_gaddr() const;
  void set_top_gaddr(::google::protobuf::uint64 value);

  // optional uint64 sqr_lut_gaddr = 8;
  bool has_sqr_lut_gaddr() const;
  void clear_sqr_lut_gaddr();
  static const int kSqrLutGaddrFieldNumber = 8;
  ::google::protobuf::uint64 sqr_lut_gaddr() const;
  void set_sqr_lut_gaddr(::google::protobuf::uint64 value);

  // optional uint64 power_lut_gaddr = 9;
  bool has_power_lut_gaddr() const;
  void clear_power_lut_gaddr();
  static const int kPowerLutGaddrFieldNumber = 9;
  ::google::protobuf::uint64 power_lut_gaddr() const;
  void set_power_lut_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 10;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 10;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 11;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 11;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 12;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 12;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 13;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 13;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 size = 14;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 14;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional int32 sum_right_shift_width = 15;
  bool has_sum_right_shift_width() const;
  void clear_sum_right_shift_width();
  static const int kSumRightShiftWidthFieldNumber = 15;
  ::google::protobuf::int32 sum_right_shift_width() const;
  void set_sum_right_shift_width(::google::protobuf::int32 value);

  // optional int32 lrn_right_shift_width = 16;
  bool has_lrn_right_shift_width() const;
  void clear_lrn_right_shift_width();
  static const int kLrnRightShiftWidthFieldNumber = 16;
  ::google::protobuf::int32 lrn_right_shift_width() const;
  void set_lrn_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_bottom_gaddr();
  void clear_has_bottom_gaddr();
  void set_has_top_gaddr();
  void clear_has_top_gaddr();
  void set_has_sqr_lut_gaddr();
  void clear_has_sqr_lut_gaddr();
  void set_has_power_lut_gaddr();
  void clear_has_power_lut_gaddr();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_size();
  void clear_has_size();
  void set_has_sum_right_shift_width();
  void clear_has_sum_right_shift_width();
  void set_has_lrn_right_shift_width();
  void clear_has_lrn_right_shift_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  ::google::protobuf::uint64 sqr_lut_gaddr_;
  ::google::protobuf::uint64 power_lut_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 sum_right_shift_width_;
  ::google::protobuf::int32 lrn_right_shift_width_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_upsample_fixed_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel) */ {
 public:
  Inst_bmnet_upsample_fixed_bmkernel();
  virtual ~Inst_bmnet_upsample_fixed_bmkernel();

  Inst_bmnet_upsample_fixed_bmkernel(const Inst_bmnet_upsample_fixed_bmkernel& from);

  inline Inst_bmnet_upsample_fixed_bmkernel& operator=(const Inst_bmnet_upsample_fixed_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_upsample_fixed_bmkernel(Inst_bmnet_upsample_fixed_bmkernel&& from) noexcept
    : Inst_bmnet_upsample_fixed_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_upsample_fixed_bmkernel& operator=(Inst_bmnet_upsample_fixed_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_upsample_fixed_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_upsample_fixed_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_upsample_fixed_bmkernel*>(
               &_Inst_bmnet_upsample_fixed_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(Inst_bmnet_upsample_fixed_bmkernel* other);
  friend void swap(Inst_bmnet_upsample_fixed_bmkernel& a, Inst_bmnet_upsample_fixed_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_upsample_fixed_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_upsample_fixed_bmkernel>(NULL);
  }

  Inst_bmnet_upsample_fixed_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_upsample_fixed_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_upsample_fixed_bmkernel& from);
  void MergeFrom(const Inst_bmnet_upsample_fixed_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_upsample_fixed_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 ga_ifmap = 6;
  bool has_ga_ifmap() const;
  void clear_ga_ifmap();
  static const int kGaIfmapFieldNumber = 6;
  ::google::protobuf::uint64 ga_ifmap() const;
  void set_ga_ifmap(::google::protobuf::uint64 value);

  // optional uint64 ga_ofmap = 7;
  bool has_ga_ofmap() const;
  void clear_ga_ofmap();
  static const int kGaOfmapFieldNumber = 7;
  ::google::protobuf::uint64 ga_ofmap() const;
  void set_ga_ofmap(::google::protobuf::uint64 value);

  // optional int32 input_n = 8;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 8;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 9;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 9;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 10;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 10;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 11;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 11;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 h_factor = 12;
  bool has_h_factor() const;
  void clear_h_factor();
  static const int kHFactorFieldNumber = 12;
  ::google::protobuf::int32 h_factor() const;
  void set_h_factor(::google::protobuf::int32 value);

  // optional int32 w_factor = 13;
  bool has_w_factor() const;
  void clear_w_factor();
  static const int kWFactorFieldNumber = 13;
  ::google::protobuf::int32 w_factor() const;
  void set_w_factor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_ga_ifmap();
  void clear_has_ga_ifmap();
  void set_has_ga_ofmap();
  void clear_has_ga_ofmap();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_h_factor();
  void clear_has_h_factor();
  void set_has_w_factor();
  void clear_has_w_factor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 ga_ifmap_;
  ::google::protobuf::uint64 ga_ofmap_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 h_factor_;
  ::google::protobuf::int32 w_factor_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_normalize_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_normalize_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_normalize_fixed_forward_bmkernel();

  Inst_bmnet_normalize_fixed_forward_bmkernel(const Inst_bmnet_normalize_fixed_forward_bmkernel& from);

  inline Inst_bmnet_normalize_fixed_forward_bmkernel& operator=(const Inst_bmnet_normalize_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_normalize_fixed_forward_bmkernel(Inst_bmnet_normalize_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_normalize_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_normalize_fixed_forward_bmkernel& operator=(Inst_bmnet_normalize_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_normalize_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_normalize_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_normalize_fixed_forward_bmkernel*>(
               &_Inst_bmnet_normalize_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(Inst_bmnet_normalize_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_normalize_fixed_forward_bmkernel& a, Inst_bmnet_normalize_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_normalize_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_normalize_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_normalize_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_normalize_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_normalize_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_normalize_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_normalize_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated int32 scales = 14;
  int scales_size() const;
  void clear_scales();
  static const int kScalesFieldNumber = 14;
  ::google::protobuf::int32 scales(int index) const;
  void set_scales(int index, ::google::protobuf::int32 value);
  void add_scales(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      scales() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_scales();

  // repeated int32 threshold_x_quantized = 22;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 22;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_gaddr = 6;
  bool has_input_gaddr() const;
  void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_gaddr() const;
  void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 7;
  bool has_output_gaddr() const;
  void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 7;
  ::google::protobuf::uint64 output_gaddr() const;
  void set_output_gaddr(::google::protobuf::uint64 value);

  // optional uint64 scale_gaddr = 9;
  bool has_scale_gaddr() const;
  void clear_scale_gaddr();
  static const int kScaleGaddrFieldNumber = 9;
  ::google::protobuf::uint64 scale_gaddr() const;
  void set_scale_gaddr(::google::protobuf::uint64 value);

  // optional uint64 sqr_lut_gaddr = 10;
  bool has_sqr_lut_gaddr() const;
  void clear_sqr_lut_gaddr();
  static const int kSqrLutGaddrFieldNumber = 10;
  ::google::protobuf::uint64 sqr_lut_gaddr() const;
  void set_sqr_lut_gaddr(::google::protobuf::uint64 value);

  // optional uint64 sqrt_lut_gaddr = 11;
  bool has_sqrt_lut_gaddr() const;
  void clear_sqrt_lut_gaddr();
  static const int kSqrtLutGaddrFieldNumber = 11;
  ::google::protobuf::uint64 sqrt_lut_gaddr() const;
  void set_sqrt_lut_gaddr(::google::protobuf::uint64 value);

  // optional bool has_scale_blob = 8;
  bool has_has_scale_blob() const;
  void clear_has_scale_blob();
  static const int kHasScaleBlobFieldNumber = 8;
  bool has_scale_blob() const;
  void set_has_scale_blob(bool value);

  // optional bool across_spatial = 12;
  bool has_across_spatial() const;
  void clear_across_spatial();
  static const int kAcrossSpatialFieldNumber = 12;
  bool across_spatial() const;
  void set_across_spatial(bool value);

  // optional bool channel_shared = 13;
  bool has_channel_shared() const;
  void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 13;
  bool channel_shared() const;
  void set_channel_shared(bool value);

  // optional int32 input_n = 15;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 15;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 16;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 16;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 17;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 17;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 18;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 18;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 sum_right_shift_width = 19;
  bool has_sum_right_shift_width() const;
  void clear_sum_right_shift_width();
  static const int kSumRightShiftWidthFieldNumber = 19;
  ::google::protobuf::int32 sum_right_shift_width() const;
  void set_sum_right_shift_width(::google::protobuf::int32 value);

  // optional int32 norma_right_shift_width = 20;
  bool has_norma_right_shift_width() const;
  void clear_norma_right_shift_width();
  static const int kNormaRightShiftWidthFieldNumber = 20;
  ::google::protobuf::int32 norma_right_shift_width() const;
  void set_norma_right_shift_width(::google::protobuf::int32 value);

  // optional int32 scale_right_shift_width = 21;
  bool has_scale_right_shift_width() const;
  void clear_scale_right_shift_width();
  static const int kScaleRightShiftWidthFieldNumber = 21;
  ::google::protobuf::int32 scale_right_shift_width() const;
  void set_scale_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_gaddr();
  void clear_has_input_gaddr();
  void set_has_output_gaddr();
  void clear_has_output_gaddr();
  void set_has_has_scale_blob();
  void clear_has_has_scale_blob();
  void set_has_scale_gaddr();
  void clear_has_scale_gaddr();
  void set_has_sqr_lut_gaddr();
  void clear_has_sqr_lut_gaddr();
  void set_has_sqrt_lut_gaddr();
  void clear_has_sqrt_lut_gaddr();
  void set_has_across_spatial();
  void clear_has_across_spatial();
  void set_has_channel_shared();
  void clear_has_channel_shared();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_sum_right_shift_width();
  void clear_has_sum_right_shift_width();
  void set_has_norma_right_shift_width();
  void clear_has_norma_right_shift_width();
  void set_has_scale_right_shift_width();
  void clear_has_scale_right_shift_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > scales_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::uint64 scale_gaddr_;
  ::google::protobuf::uint64 sqr_lut_gaddr_;
  ::google::protobuf::uint64 sqrt_lut_gaddr_;
  bool has_scale_blob_;
  bool across_spatial_;
  bool channel_shared_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 sum_right_shift_width_;
  ::google::protobuf::int32 norma_right_shift_width_;
  ::google::protobuf::int32 scale_right_shift_width_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_deconv_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_deconv_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_deconv_fixed_forward_bmkernel();

  Inst_bmnet_deconv_fixed_forward_bmkernel(const Inst_bmnet_deconv_fixed_forward_bmkernel& from);

  inline Inst_bmnet_deconv_fixed_forward_bmkernel& operator=(const Inst_bmnet_deconv_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_deconv_fixed_forward_bmkernel(Inst_bmnet_deconv_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_deconv_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_deconv_fixed_forward_bmkernel& operator=(Inst_bmnet_deconv_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_deconv_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_deconv_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_deconv_fixed_forward_bmkernel*>(
               &_Inst_bmnet_deconv_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(Inst_bmnet_deconv_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_deconv_fixed_forward_bmkernel& a, Inst_bmnet_deconv_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_deconv_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_deconv_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_deconv_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_deconv_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_deconv_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_deconv_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_deconv_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 ga_ifmap = 6;
  bool has_ga_ifmap() const;
  void clear_ga_ifmap();
  static const int kGaIfmapFieldNumber = 6;
  ::google::protobuf::uint64 ga_ifmap() const;
  void set_ga_ifmap(::google::protobuf::uint64 value);

  // optional uint64 ga_ofmap = 7;
  bool has_ga_ofmap() const;
  void clear_ga_ofmap();
  static const int kGaOfmapFieldNumber = 7;
  ::google::protobuf::uint64 ga_ofmap() const;
  void set_ga_ofmap(::google::protobuf::uint64 value);

  // optional uint64 ga_weight = 8;
  bool has_ga_weight() const;
  void clear_ga_weight();
  static const int kGaWeightFieldNumber = 8;
  ::google::protobuf::uint64 ga_weight() const;
  void set_ga_weight(::google::protobuf::uint64 value);

  // optional uint64 ga_bias = 9;
  bool has_ga_bias() const;
  void clear_ga_bias();
  static const int kGaBiasFieldNumber = 9;
  ::google::protobuf::uint64 ga_bias() const;
  void set_ga_bias(::google::protobuf::uint64 value);

  // optional int32 input_n = 10;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 10;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 11;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 11;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 12;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 12;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 13;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 13;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 groups = 14;
  bool has_groups() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 14;
  ::google::protobuf::int32 groups() const;
  void set_groups(::google::protobuf::int32 value);

  // optional int32 output_c = 15;
  bool has_output_c() const;
  void clear_output_c();
  static const int kOutputCFieldNumber = 15;
  ::google::protobuf::int32 output_c() const;
  void set_output_c(::google::protobuf::int32 value);

  // optional int32 output_h = 16;
  bool has_output_h() const;
  void clear_output_h();
  static const int kOutputHFieldNumber = 16;
  ::google::protobuf::int32 output_h() const;
  void set_output_h(::google::protobuf::int32 value);

  // optional int32 output_w = 17;
  bool has_output_w() const;
  void clear_output_w();
  static const int kOutputWFieldNumber = 17;
  ::google::protobuf::int32 output_w() const;
  void set_output_w(::google::protobuf::int32 value);

  // optional int32 kh = 18;
  bool has_kh() const;
  void clear_kh();
  static const int kKhFieldNumber = 18;
  ::google::protobuf::int32 kh() const;
  void set_kh(::google::protobuf::int32 value);

  // optional int32 kw = 19;
  bool has_kw() const;
  void clear_kw();
  static const int kKwFieldNumber = 19;
  ::google::protobuf::int32 kw() const;
  void set_kw(::google::protobuf::int32 value);

  // optional int32 dh = 20;
  bool has_dh() const;
  void clear_dh();
  static const int kDhFieldNumber = 20;
  ::google::protobuf::int32 dh() const;
  void set_dh(::google::protobuf::int32 value);

  // optional int32 dw = 21;
  bool has_dw() const;
  void clear_dw();
  static const int kDwFieldNumber = 21;
  ::google::protobuf::int32 dw() const;
  void set_dw(::google::protobuf::int32 value);

  // optional int32 pad_top = 22;
  bool has_pad_top() const;
  void clear_pad_top();
  static const int kPadTopFieldNumber = 22;
  ::google::protobuf::int32 pad_top() const;
  void set_pad_top(::google::protobuf::int32 value);

  // optional int32 pad_bottom = 23;
  bool has_pad_bottom() const;
  void clear_pad_bottom();
  static const int kPadBottomFieldNumber = 23;
  ::google::protobuf::int32 pad_bottom() const;
  void set_pad_bottom(::google::protobuf::int32 value);

  // optional int32 pad_left = 24;
  bool has_pad_left() const;
  void clear_pad_left();
  static const int kPadLeftFieldNumber = 24;
  ::google::protobuf::int32 pad_left() const;
  void set_pad_left(::google::protobuf::int32 value);

  // optional int32 pad_right = 25;
  bool has_pad_right() const;
  void clear_pad_right();
  static const int kPadRightFieldNumber = 25;
  ::google::protobuf::int32 pad_right() const;
  void set_pad_right(::google::protobuf::int32 value);

  // optional int32 stride_h = 26;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 26;
  ::google::protobuf::int32 stride_h() const;
  void set_stride_h(::google::protobuf::int32 value);

  // optional int32 stride_w = 27;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 27;
  ::google::protobuf::int32 stride_w() const;
  void set_stride_w(::google::protobuf::int32 value);

  // optional bool using_bias = 28;
  bool has_using_bias() const;
  void clear_using_bias();
  static const int kUsingBiasFieldNumber = 28;
  bool using_bias() const;
  void set_using_bias(bool value);

  // optional bool result_add = 29;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 29;
  bool result_add() const;
  void set_result_add(bool value);

  // optional bool do_relu = 30;
  bool has_do_relu() const;
  void clear_do_relu();
  static const int kDoReluFieldNumber = 30;
  bool do_relu() const;
  void set_do_relu(bool value);

  // optional bool use_winograd = 32;
  bool has_use_winograd() const;
  void clear_use_winograd();
  static const int kUseWinogradFieldNumber = 32;
  bool use_winograd() const;
  void set_use_winograd(bool value);

  // optional int32 right_shift_width = 31;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 31;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_ga_ifmap();
  void clear_has_ga_ifmap();
  void set_has_ga_ofmap();
  void clear_has_ga_ofmap();
  void set_has_ga_weight();
  void clear_has_ga_weight();
  void set_has_ga_bias();
  void clear_has_ga_bias();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_groups();
  void clear_has_groups();
  void set_has_output_c();
  void clear_has_output_c();
  void set_has_output_h();
  void clear_has_output_h();
  void set_has_output_w();
  void clear_has_output_w();
  void set_has_kh();
  void clear_has_kh();
  void set_has_kw();
  void clear_has_kw();
  void set_has_dh();
  void clear_has_dh();
  void set_has_dw();
  void clear_has_dw();
  void set_has_pad_top();
  void clear_has_pad_top();
  void set_has_pad_bottom();
  void clear_has_pad_bottom();
  void set_has_pad_left();
  void clear_has_pad_left();
  void set_has_pad_right();
  void clear_has_pad_right();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_using_bias();
  void clear_has_using_bias();
  void set_has_result_add();
  void clear_has_result_add();
  void set_has_do_relu();
  void clear_has_do_relu();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();
  void set_has_use_winograd();
  void clear_has_use_winograd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 ga_ifmap_;
  ::google::protobuf::uint64 ga_ofmap_;
  ::google::protobuf::uint64 ga_weight_;
  ::google::protobuf::uint64 ga_bias_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 groups_;
  ::google::protobuf::int32 output_c_;
  ::google::protobuf::int32 output_h_;
  ::google::protobuf::int32 output_w_;
  ::google::protobuf::int32 kh_;
  ::google::protobuf::int32 kw_;
  ::google::protobuf::int32 dh_;
  ::google::protobuf::int32 dw_;
  ::google::protobuf::int32 pad_top_;
  ::google::protobuf::int32 pad_bottom_;
  ::google::protobuf::int32 pad_left_;
  ::google::protobuf::int32 pad_right_;
  ::google::protobuf::int32 stride_h_;
  ::google::protobuf::int32 stride_w_;
  bool using_bias_;
  bool result_add_;
  bool do_relu_;
  bool use_winograd_;
  ::google::protobuf::int32 right_shift_width_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_crop_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_crop_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_crop_fixed_forward_bmkernel();

  Inst_bmnet_crop_fixed_forward_bmkernel(const Inst_bmnet_crop_fixed_forward_bmkernel& from);

  inline Inst_bmnet_crop_fixed_forward_bmkernel& operator=(const Inst_bmnet_crop_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_crop_fixed_forward_bmkernel(Inst_bmnet_crop_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_crop_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_crop_fixed_forward_bmkernel& operator=(Inst_bmnet_crop_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_crop_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_crop_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_crop_fixed_forward_bmkernel*>(
               &_Inst_bmnet_crop_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Inst_bmnet_crop_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_crop_fixed_forward_bmkernel& a, Inst_bmnet_crop_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_crop_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_crop_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_crop_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_crop_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_crop_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_crop_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_crop_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated int32 input_dim = 8;
  int input_dim_size() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 8;
  ::google::protobuf::int32 input_dim(int index) const;
  void set_input_dim(int index, ::google::protobuf::int32 value);
  void add_input_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // repeated int32 output_dim = 9;
  int output_dim_size() const;
  void clear_output_dim();
  static const int kOutputDimFieldNumber = 9;
  ::google::protobuf::int32 output_dim(int index) const;
  void set_output_dim(int index, ::google::protobuf::int32 value);
  void add_output_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      output_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_output_dim();

  // repeated int32 offsets = 10;
  int offsets_size() const;
  void clear_offsets();
  static const int kOffsetsFieldNumber = 10;
  ::google::protobuf::int32 offsets(int index) const;
  void set_offsets(int index, ::google::protobuf::int32 value);
  void add_offsets(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      offsets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_offsets();

  // repeated int32 threshold_x_quantized = 13;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 13;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_gaddr = 6;
  bool has_input_gaddr() const;
  void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_gaddr() const;
  void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 7;
  bool has_output_gaddr() const;
  void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 7;
  ::google::protobuf::uint64 output_gaddr() const;
  void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 output_dim_len = 11;
  bool has_output_dim_len() const;
  void clear_output_dim_len();
  static const int kOutputDimLenFieldNumber = 11;
  ::google::protobuf::int32 output_dim_len() const;
  void set_output_dim_len(::google::protobuf::int32 value);

  // optional int32 right_shift_width = 12;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 12;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_gaddr();
  void clear_has_input_gaddr();
  void set_has_output_gaddr();
  void clear_has_output_gaddr();
  void set_has_output_dim_len();
  void clear_has_output_dim_len();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > output_dim_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > offsets_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 output_dim_len_;
  ::google::protobuf::int32 right_shift_width_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_arithmetic_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_arithmetic_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_arithmetic_fixed_forward_bmkernel();

  Inst_bmnet_arithmetic_fixed_forward_bmkernel(const Inst_bmnet_arithmetic_fixed_forward_bmkernel& from);

  inline Inst_bmnet_arithmetic_fixed_forward_bmkernel& operator=(const Inst_bmnet_arithmetic_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_arithmetic_fixed_forward_bmkernel(Inst_bmnet_arithmetic_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_arithmetic_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_arithmetic_fixed_forward_bmkernel& operator=(Inst_bmnet_arithmetic_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_arithmetic_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_arithmetic_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_arithmetic_fixed_forward_bmkernel*>(
               &_Inst_bmnet_arithmetic_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(Inst_bmnet_arithmetic_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_arithmetic_fixed_forward_bmkernel& a, Inst_bmnet_arithmetic_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_arithmetic_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_arithmetic_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_arithmetic_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_arithmetic_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_arithmetic_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_arithmetic_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_arithmetic_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated int32 threshold_x_quantized = 23;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 23;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_gaddr_0 = 6;
  bool has_input_gaddr_0() const;
  void clear_input_gaddr_0();
  static const int kInputGaddr0FieldNumber = 6;
  ::google::protobuf::uint64 input_gaddr_0() const;
  void set_input_gaddr_0(::google::protobuf::uint64 value);

  // optional uint64 inout_gaddr_1 = 7;
  bool has_inout_gaddr_1() const;
  void clear_inout_gaddr_1();
  static const int kInoutGaddr1FieldNumber = 7;
  ::google::protobuf::uint64 inout_gaddr_1() const;
  void set_inout_gaddr_1(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 8;
  bool has_output_gaddr() const;
  void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 8;
  ::google::protobuf::uint64 output_gaddr() const;
  void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_0_n = 9;
  bool has_input_0_n() const;
  void clear_input_0_n();
  static const int kInput0NFieldNumber = 9;
  ::google::protobuf::int32 input_0_n() const;
  void set_input_0_n(::google::protobuf::int32 value);

  // optional int32 input_0_c = 10;
  bool has_input_0_c() const;
  void clear_input_0_c();
  static const int kInput0CFieldNumber = 10;
  ::google::protobuf::int32 input_0_c() const;
  void set_input_0_c(::google::protobuf::int32 value);

  // optional int32 input_0_h = 11;
  bool has_input_0_h() const;
  void clear_input_0_h();
  static const int kInput0HFieldNumber = 11;
  ::google::protobuf::int32 input_0_h() const;
  void set_input_0_h(::google::protobuf::int32 value);

  // optional int32 input_0_w = 12;
  bool has_input_0_w() const;
  void clear_input_0_w();
  static const int kInput0WFieldNumber = 12;
  ::google::protobuf::int32 input_0_w() const;
  void set_input_0_w(::google::protobuf::int32 value);

  // optional int32 input_1_n = 13;
  bool has_input_1_n() const;
  void clear_input_1_n();
  static const int kInput1NFieldNumber = 13;
  ::google::protobuf::int32 input_1_n() const;
  void set_input_1_n(::google::protobuf::int32 value);

  // optional int32 input_1_c = 14;
  bool has_input_1_c() const;
  void clear_input_1_c();
  static const int kInput1CFieldNumber = 14;
  ::google::protobuf::int32 input_1_c() const;
  void set_input_1_c(::google::protobuf::int32 value);

  // optional int32 input_1_h = 15;
  bool has_input_1_h() const;
  void clear_input_1_h();
  static const int kInput1HFieldNumber = 15;
  ::google::protobuf::int32 input_1_h() const;
  void set_input_1_h(::google::protobuf::int32 value);

  // optional int32 input_1_w = 16;
  bool has_input_1_w() const;
  void clear_input_1_w();
  static const int kInput1WFieldNumber = 16;
  ::google::protobuf::int32 input_1_w() const;
  void set_input_1_w(::google::protobuf::int32 value);

  // optional int32 output_n = 17;
  bool has_output_n() const;
  void clear_output_n();
  static const int kOutputNFieldNumber = 17;
  ::google::protobuf::int32 output_n() const;
  void set_output_n(::google::protobuf::int32 value);

  // optional int32 output_c = 18;
  bool has_output_c() const;
  void clear_output_c();
  static const int kOutputCFieldNumber = 18;
  ::google::protobuf::int32 output_c() const;
  void set_output_c(::google::protobuf::int32 value);

  // optional int32 output_h = 19;
  bool has_output_h() const;
  void clear_output_h();
  static const int kOutputHFieldNumber = 19;
  ::google::protobuf::int32 output_h() const;
  void set_output_h(::google::protobuf::int32 value);

  // optional int32 output_w = 20;
  bool has_output_w() const;
  void clear_output_w();
  static const int kOutputWFieldNumber = 20;
  ::google::protobuf::int32 output_w() const;
  void set_output_w(::google::protobuf::int32 value);

  // optional int32 op = 21;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 21;
  ::google::protobuf::int32 op() const;
  void set_op(::google::protobuf::int32 value);

  // optional int32 right_shift_width = 22;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 22;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_gaddr_0();
  void clear_has_input_gaddr_0();
  void set_has_inout_gaddr_1();
  void clear_has_inout_gaddr_1();
  void set_has_output_gaddr();
  void clear_has_output_gaddr();
  void set_has_input_0_n();
  void clear_has_input_0_n();
  void set_has_input_0_c();
  void clear_has_input_0_c();
  void set_has_input_0_h();
  void clear_has_input_0_h();
  void set_has_input_0_w();
  void clear_has_input_0_w();
  void set_has_input_1_n();
  void clear_has_input_1_n();
  void set_has_input_1_c();
  void clear_has_input_1_c();
  void set_has_input_1_h();
  void clear_has_input_1_h();
  void set_has_input_1_w();
  void clear_has_input_1_w();
  void set_has_output_n();
  void clear_has_output_n();
  void set_has_output_c();
  void clear_has_output_c();
  void set_has_output_h();
  void clear_has_output_h();
  void set_has_output_w();
  void clear_has_output_w();
  void set_has_op();
  void clear_has_op();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_gaddr_0_;
  ::google::protobuf::uint64 inout_gaddr_1_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 input_0_n_;
  ::google::protobuf::int32 input_0_c_;
  ::google::protobuf::int32 input_0_h_;
  ::google::protobuf::int32 input_0_w_;
  ::google::protobuf::int32 input_1_n_;
  ::google::protobuf::int32 input_1_c_;
  ::google::protobuf::int32 input_1_h_;
  ::google::protobuf::int32 input_1_w_;
  ::google::protobuf::int32 output_n_;
  ::google::protobuf::int32 output_c_;
  ::google::protobuf::int32 output_h_;
  ::google::protobuf::int32 output_w_;
  ::google::protobuf::int32 op_;
  ::google::protobuf::int32 right_shift_width_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_joinone_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_joinone_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_joinone_fixed_forward_bmkernel();

  Inst_bmnet_joinone_fixed_forward_bmkernel(const Inst_bmnet_joinone_fixed_forward_bmkernel& from);

  inline Inst_bmnet_joinone_fixed_forward_bmkernel& operator=(const Inst_bmnet_joinone_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_joinone_fixed_forward_bmkernel(Inst_bmnet_joinone_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_joinone_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_joinone_fixed_forward_bmkernel& operator=(Inst_bmnet_joinone_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_joinone_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_joinone_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_joinone_fixed_forward_bmkernel*>(
               &_Inst_bmnet_joinone_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(Inst_bmnet_joinone_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_joinone_fixed_forward_bmkernel& a, Inst_bmnet_joinone_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_joinone_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_joinone_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_joinone_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_joinone_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_joinone_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_joinone_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_joinone_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated int32 input_dim = 8;
  int input_dim_size() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 8;
  ::google::protobuf::int32 input_dim(int index) const;
  void set_input_dim(int index, ::google::protobuf::int32 value);
  void add_input_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_gaddr = 6;
  bool has_input_gaddr() const;
  void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_gaddr() const;
  void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 7;
  bool has_output_gaddr() const;
  void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 7;
  ::google::protobuf::uint64 output_gaddr() const;
  void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 dim_size = 9;
  bool has_dim_size() const;
  void clear_dim_size();
  static const int kDimSizeFieldNumber = 9;
  ::google::protobuf::int32 dim_size() const;
  void set_dim_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_gaddr();
  void clear_has_input_gaddr();
  void set_has_output_gaddr();
  void clear_has_output_gaddr();
  void set_has_dim_size();
  void clear_has_dim_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 dim_size_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_quantization_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_quantization_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_quantization_fixed_forward_bmkernel();

  Inst_bmnet_quantization_fixed_forward_bmkernel(const Inst_bmnet_quantization_fixed_forward_bmkernel& from);

  inline Inst_bmnet_quantization_fixed_forward_bmkernel& operator=(const Inst_bmnet_quantization_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_quantization_fixed_forward_bmkernel(Inst_bmnet_quantization_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_quantization_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_quantization_fixed_forward_bmkernel& operator=(Inst_bmnet_quantization_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_quantization_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_quantization_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_quantization_fixed_forward_bmkernel*>(
               &_Inst_bmnet_quantization_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Inst_bmnet_quantization_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_quantization_fixed_forward_bmkernel& a, Inst_bmnet_quantization_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_quantization_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_quantization_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_quantization_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_quantization_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_quantization_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_quantization_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_quantization_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated int32 input_dim = 9;
  int input_dim_size() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 9;
  ::google::protobuf::int32 input_dim(int index) const;
  void set_input_dim(int index, ::google::protobuf::int32 value);
  void add_input_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // repeated int32 output_dim = 10;
  int output_dim_size() const;
  void clear_output_dim();
  static const int kOutputDimFieldNumber = 10;
  ::google::protobuf::int32 output_dim(int index) const;
  void set_output_dim(int index, ::google::protobuf::int32 value);
  void add_output_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      output_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_output_dim();

  // repeated int32 right_shift_width = 13;
  int right_shift_width_size() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 13;
  ::google::protobuf::int32 right_shift_width(int index) const;
  void set_right_shift_width(int index, ::google::protobuf::int32 value);
  void add_right_shift_width(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      right_shift_width() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_right_shift_width();

  // repeated int32 threshold_x_quantized = 14;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 14;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_gaddr = 6;
  bool has_input_gaddr() const;
  void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_gaddr() const;
  void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 7;
  bool has_output_gaddr() const;
  void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 7;
  ::google::protobuf::uint64 output_gaddr() const;
  void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 dim_size = 8;
  bool has_dim_size() const;
  void clear_dim_size();
  static const int kDimSizeFieldNumber = 8;
  ::google::protobuf::int32 dim_size() const;
  void set_dim_size(::google::protobuf::int32 value);

  // optional int32 op = 11;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 11;
  ::google::protobuf::int32 op() const;
  void set_op(::google::protobuf::int32 value);

  // optional int32 quantization_num = 12;
  bool has_quantization_num() const;
  void clear_quantization_num();
  static const int kQuantizationNumFieldNumber = 12;
  ::google::protobuf::int32 quantization_num() const;
  void set_quantization_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_gaddr();
  void clear_has_input_gaddr();
  void set_has_output_gaddr();
  void clear_has_output_gaddr();
  void set_has_dim_size();
  void clear_has_dim_size();
  void set_has_op();
  void clear_has_op();
  void set_has_quantization_num();
  void clear_has_quantization_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > output_dim_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > right_shift_width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 dim_size_;
  ::google::protobuf::int32 op_;
  ::google::protobuf::int32 quantization_num_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_slice_fixed_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel) */ {
 public:
  Inst_bmnet_slice_fixed_forward_bmkernel();
  virtual ~Inst_bmnet_slice_fixed_forward_bmkernel();

  Inst_bmnet_slice_fixed_forward_bmkernel(const Inst_bmnet_slice_fixed_forward_bmkernel& from);

  inline Inst_bmnet_slice_fixed_forward_bmkernel& operator=(const Inst_bmnet_slice_fixed_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_slice_fixed_forward_bmkernel(Inst_bmnet_slice_fixed_forward_bmkernel&& from) noexcept
    : Inst_bmnet_slice_fixed_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_slice_fixed_forward_bmkernel& operator=(Inst_bmnet_slice_fixed_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_slice_fixed_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_slice_fixed_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_slice_fixed_forward_bmkernel*>(
               &_Inst_bmnet_slice_fixed_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(Inst_bmnet_slice_fixed_forward_bmkernel* other);
  friend void swap(Inst_bmnet_slice_fixed_forward_bmkernel& a, Inst_bmnet_slice_fixed_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_slice_fixed_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_slice_fixed_forward_bmkernel>(NULL);
  }

  Inst_bmnet_slice_fixed_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_slice_fixed_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_slice_fixed_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_slice_fixed_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_slice_fixed_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated uint64 output_gaddrs = 7;
  int output_gaddrs_size() const;
  void clear_output_gaddrs();
  static const int kOutputGaddrsFieldNumber = 7;
  ::google::protobuf::uint64 output_gaddrs(int index) const;
  void set_output_gaddrs(int index, ::google::protobuf::uint64 value);
  void add_output_gaddrs(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      output_gaddrs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_output_gaddrs();

  // repeated int32 input_dim = 9;
  int input_dim_size() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 9;
  ::google::protobuf::int32 input_dim(int index) const;
  void set_input_dim(int index, ::google::protobuf::int32 value);
  void add_input_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // repeated int32 output_dims = 11;
  int output_dims_size() const;
  void clear_output_dims();
  static const int kOutputDimsFieldNumber = 11;
  ::google::protobuf::int32 output_dims(int index) const;
  void set_output_dims(int index, ::google::protobuf::int32 value);
  void add_output_dims(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      output_dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_output_dims();

  // repeated int32 right_shift_width = 14;
  int right_shift_width_size() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 14;
  ::google::protobuf::int32 right_shift_width(int index) const;
  void set_right_shift_width(int index, ::google::protobuf::int32 value);
  void add_right_shift_width(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      right_shift_width() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_right_shift_width();

  // repeated int32 threshold_x_quantized = 15;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 15;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_gaddr = 6;
  bool has_input_gaddr() const;
  void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_gaddr() const;
  void set_input_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_dim_len = 8;
  bool has_input_dim_len() const;
  void clear_input_dim_len();
  static const int kInputDimLenFieldNumber = 8;
  ::google::protobuf::int32 input_dim_len() const;
  void set_input_dim_len(::google::protobuf::int32 value);

  // optional int32 slice_axis = 10;
  bool has_slice_axis() const;
  void clear_slice_axis();
  static const int kSliceAxisFieldNumber = 10;
  ::google::protobuf::int32 slice_axis() const;
  void set_slice_axis(::google::protobuf::int32 value);

  // optional int32 output_num = 12;
  bool has_output_num() const;
  void clear_output_num();
  static const int kOutputNumFieldNumber = 12;
  ::google::protobuf::int32 output_num() const;
  void set_output_num(::google::protobuf::int32 value);

  // optional int32 need_quantize_num = 13;
  bool has_need_quantize_num() const;
  void clear_need_quantize_num();
  static const int kNeedQuantizeNumFieldNumber = 13;
  ::google::protobuf::int32 need_quantize_num() const;
  void set_need_quantize_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_gaddr();
  void clear_has_input_gaddr();
  void set_has_input_dim_len();
  void clear_has_input_dim_len();
  void set_has_slice_axis();
  void clear_has_slice_axis();
  void set_has_output_num();
  void clear_has_output_num();
  void set_has_need_quantize_num();
  void clear_has_need_quantize_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > output_gaddrs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > output_dims_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > right_shift_width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::int32 input_dim_len_;
  ::google::protobuf::int32 slice_axis_;
  ::google::protobuf::int32 output_num_;
  ::google::protobuf::int32 need_quantize_num_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_conv_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel) */ {
 public:
  Inst_bmnet_tl_conv_forward_bmkernel();
  virtual ~Inst_bmnet_tl_conv_forward_bmkernel();

  Inst_bmnet_tl_conv_forward_bmkernel(const Inst_bmnet_tl_conv_forward_bmkernel& from);

  inline Inst_bmnet_tl_conv_forward_bmkernel& operator=(const Inst_bmnet_tl_conv_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_conv_forward_bmkernel(Inst_bmnet_tl_conv_forward_bmkernel&& from) noexcept
    : Inst_bmnet_tl_conv_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_conv_forward_bmkernel& operator=(Inst_bmnet_tl_conv_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_conv_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_conv_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_conv_forward_bmkernel*>(
               &_Inst_bmnet_tl_conv_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(Inst_bmnet_tl_conv_forward_bmkernel* other);
  friend void swap(Inst_bmnet_tl_conv_forward_bmkernel& a, Inst_bmnet_tl_conv_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_conv_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_conv_forward_bmkernel>(NULL);
  }

  Inst_bmnet_tl_conv_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_conv_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_conv_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_conv_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_conv_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated uint32 group_weight = 10;
  int group_weight_size() const;
  void clear_group_weight();
  static const int kGroupWeightFieldNumber = 10;
  ::google::protobuf::uint32 group_weight(int index) const;
  void set_group_weight(int index, ::google::protobuf::uint32 value);
  void add_group_weight(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      group_weight() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_group_weight();

  // repeated uint32 group_bias = 11;
  int group_bias_size() const;
  void clear_group_bias();
  static const int kGroupBiasFieldNumber = 11;
  ::google::protobuf::uint32 group_bias(int index) const;
  void set_group_bias(int index, ::google::protobuf::uint32 value);
  void add_group_bias(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      group_bias() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_group_bias();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 la_ifmap = 6;
  bool has_la_ifmap() const;
  void clear_la_ifmap();
  static const int kLaIfmapFieldNumber = 6;
  ::google::protobuf::uint64 la_ifmap() const;
  void set_la_ifmap(::google::protobuf::uint64 value);

  // optional uint64 la_ofmap = 7;
  bool has_la_ofmap() const;
  void clear_la_ofmap();
  static const int kLaOfmapFieldNumber = 7;
  ::google::protobuf::uint64 la_ofmap() const;
  void set_la_ofmap(::google::protobuf::uint64 value);

  // optional uint64 la_weight = 8;
  bool has_la_weight() const;
  void clear_la_weight();
  static const int kLaWeightFieldNumber = 8;
  ::google::protobuf::uint64 la_weight() const;
  void set_la_weight(::google::protobuf::uint64 value);

  // optional uint64 la_bias = 9;
  bool has_la_bias() const;
  void clear_la_bias();
  static const int kLaBiasFieldNumber = 9;
  ::google::protobuf::uint64 la_bias() const;
  void set_la_bias(::google::protobuf::uint64 value);

  // optional int32 input_n = 12;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 12;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 13;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 13;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 14;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 14;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 15;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 15;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 group = 16;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 16;
  ::google::protobuf::int32 group() const;
  void set_group(::google::protobuf::int32 value);

  // optional int32 output_c = 17;
  bool has_output_c() const;
  void clear_output_c();
  static const int kOutputCFieldNumber = 17;
  ::google::protobuf::int32 output_c() const;
  void set_output_c(::google::protobuf::int32 value);

  // optional int32 output_h = 18;
  bool has_output_h() const;
  void clear_output_h();
  static const int kOutputHFieldNumber = 18;
  ::google::protobuf::int32 output_h() const;
  void set_output_h(::google::protobuf::int32 value);

  // optional int32 output_w = 19;
  bool has_output_w() const;
  void clear_output_w();
  static const int kOutputWFieldNumber = 19;
  ::google::protobuf::int32 output_w() const;
  void set_output_w(::google::protobuf::int32 value);

  // optional uint32 kh = 20;
  bool has_kh() const;
  void clear_kh();
  static const int kKhFieldNumber = 20;
  ::google::protobuf::uint32 kh() const;
  void set_kh(::google::protobuf::uint32 value);

  // optional uint32 kw = 21;
  bool has_kw() const;
  void clear_kw();
  static const int kKwFieldNumber = 21;
  ::google::protobuf::uint32 kw() const;
  void set_kw(::google::protobuf::uint32 value);

  // optional uint32 dh = 22;
  bool has_dh() const;
  void clear_dh();
  static const int kDhFieldNumber = 22;
  ::google::protobuf::uint32 dh() const;
  void set_dh(::google::protobuf::uint32 value);

  // optional uint32 dw = 23;
  bool has_dw() const;
  void clear_dw();
  static const int kDwFieldNumber = 23;
  ::google::protobuf::uint32 dw() const;
  void set_dw(::google::protobuf::uint32 value);

  // optional uint32 pad_h_top = 24;
  bool has_pad_h_top() const;
  void clear_pad_h_top();
  static const int kPadHTopFieldNumber = 24;
  ::google::protobuf::uint32 pad_h_top() const;
  void set_pad_h_top(::google::protobuf::uint32 value);

  // optional uint32 pad_h_bottom = 25;
  bool has_pad_h_bottom() const;
  void clear_pad_h_bottom();
  static const int kPadHBottomFieldNumber = 25;
  ::google::protobuf::uint32 pad_h_bottom() const;
  void set_pad_h_bottom(::google::protobuf::uint32 value);

  // optional uint32 pad_w_left = 26;
  bool has_pad_w_left() const;
  void clear_pad_w_left();
  static const int kPadWLeftFieldNumber = 26;
  ::google::protobuf::uint32 pad_w_left() const;
  void set_pad_w_left(::google::protobuf::uint32 value);

  // optional uint32 pad_w_right = 27;
  bool has_pad_w_right() const;
  void clear_pad_w_right();
  static const int kPadWRightFieldNumber = 27;
  ::google::protobuf::uint32 pad_w_right() const;
  void set_pad_w_right(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 28;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 28;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 29;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 29;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional uint32 result_add = 30;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 30;
  ::google::protobuf::uint32 result_add() const;
  void set_result_add(::google::protobuf::uint32 value);

  // optional uint32 ctrl = 31;
  bool has_ctrl() const;
  void clear_ctrl();
  static const int kCtrlFieldNumber = 31;
  ::google::protobuf::uint32 ctrl() const;
  void set_ctrl(::google::protobuf::uint32 value);

  // optional int32 rshift = 32;
  bool has_rshift() const;
  void clear_rshift();
  static const int kRshiftFieldNumber = 32;
  ::google::protobuf::int32 rshift() const;
  void set_rshift(::google::protobuf::int32 value);

  // optional bool do_bias = 33;
  bool has_do_bias() const;
  void clear_do_bias();
  static const int kDoBiasFieldNumber = 33;
  bool do_bias() const;
  void set_do_bias(bool value);

  // optional bool use_winograd = 34;
  bool has_use_winograd() const;
  void clear_use_winograd();
  static const int kUseWinogradFieldNumber = 34;
  bool use_winograd() const;
  void set_use_winograd(bool value);

  // optional bool do_relu = 35;
  bool has_do_relu() const;
  void clear_do_relu();
  static const int kDoReluFieldNumber = 35;
  bool do_relu() const;
  void set_do_relu(bool value);

  // optional bool h_slice_skip_first = 36;
  bool has_h_slice_skip_first() const;
  void clear_h_slice_skip_first();
  static const int kHSliceSkipFirstFieldNumber = 36;
  bool h_slice_skip_first() const;
  void set_h_slice_skip_first(bool value);

  // optional bool h_slice_skip_last = 37;
  bool has_h_slice_skip_last() const;
  void clear_h_slice_skip_last();
  static const int kHSliceSkipLastFieldNumber = 37;
  bool h_slice_skip_last() const;
  void set_h_slice_skip_last(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_la_ifmap();
  void clear_has_la_ifmap();
  void set_has_la_ofmap();
  void clear_has_la_ofmap();
  void set_has_la_weight();
  void clear_has_la_weight();
  void set_has_la_bias();
  void clear_has_la_bias();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_group();
  void clear_has_group();
  void set_has_output_c();
  void clear_has_output_c();
  void set_has_output_h();
  void clear_has_output_h();
  void set_has_output_w();
  void clear_has_output_w();
  void set_has_kh();
  void clear_has_kh();
  void set_has_kw();
  void clear_has_kw();
  void set_has_dh();
  void clear_has_dh();
  void set_has_dw();
  void clear_has_dw();
  void set_has_pad_h_top();
  void clear_has_pad_h_top();
  void set_has_pad_h_bottom();
  void clear_has_pad_h_bottom();
  void set_has_pad_w_left();
  void clear_has_pad_w_left();
  void set_has_pad_w_right();
  void clear_has_pad_w_right();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_result_add();
  void clear_has_result_add();
  void set_has_ctrl();
  void clear_has_ctrl();
  void set_has_rshift();
  void clear_has_rshift();
  void set_has_do_bias();
  void clear_has_do_bias();
  void set_has_use_winograd();
  void clear_has_use_winograd();
  void set_has_do_relu();
  void clear_has_do_relu();
  void set_has_h_slice_skip_first();
  void clear_has_h_slice_skip_first();
  void set_has_h_slice_skip_last();
  void clear_has_h_slice_skip_last();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > group_weight_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > group_bias_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 la_ifmap_;
  ::google::protobuf::uint64 la_ofmap_;
  ::google::protobuf::uint64 la_weight_;
  ::google::protobuf::uint64 la_bias_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 output_c_;
  ::google::protobuf::int32 output_h_;
  ::google::protobuf::int32 output_w_;
  ::google::protobuf::uint32 kh_;
  ::google::protobuf::uint32 kw_;
  ::google::protobuf::uint32 dh_;
  ::google::protobuf::uint32 dw_;
  ::google::protobuf::uint32 pad_h_top_;
  ::google::protobuf::uint32 pad_h_bottom_;
  ::google::protobuf::uint32 pad_w_left_;
  ::google::protobuf::uint32 pad_w_right_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::google::protobuf::uint32 result_add_;
  ::google::protobuf::uint32 ctrl_;
  ::google::protobuf::int32 rshift_;
  bool do_bias_;
  bool use_winograd_;
  bool do_relu_;
  bool h_slice_skip_first_;
  bool h_slice_skip_last_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_activation_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel) */ {
 public:
  Inst_bmnet_tl_activation_forward_bmkernel();
  virtual ~Inst_bmnet_tl_activation_forward_bmkernel();

  Inst_bmnet_tl_activation_forward_bmkernel(const Inst_bmnet_tl_activation_forward_bmkernel& from);

  inline Inst_bmnet_tl_activation_forward_bmkernel& operator=(const Inst_bmnet_tl_activation_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_activation_forward_bmkernel(Inst_bmnet_tl_activation_forward_bmkernel&& from) noexcept
    : Inst_bmnet_tl_activation_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_activation_forward_bmkernel& operator=(Inst_bmnet_tl_activation_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_activation_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_activation_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_activation_forward_bmkernel*>(
               &_Inst_bmnet_tl_activation_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(Inst_bmnet_tl_activation_forward_bmkernel* other);
  friend void swap(Inst_bmnet_tl_activation_forward_bmkernel& a, Inst_bmnet_tl_activation_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_activation_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_activation_forward_bmkernel>(NULL);
  }

  Inst_bmnet_tl_activation_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_activation_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_activation_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_activation_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_activation_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated float activation_arg = 20;
  int activation_arg_size() const;
  void clear_activation_arg();
  static const int kActivationArgFieldNumber = 20;
  float activation_arg(int index) const;
  void set_activation_arg(int index, float value);
  void add_activation_arg(float value);
  const ::google::protobuf::RepeatedField< float >&
      activation_arg() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_activation_arg();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_laddr = 6;
  bool has_input_laddr() const;
  void clear_input_laddr();
  static const int kInputLaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_laddr() const;
  void set_input_laddr(::google::protobuf::uint64 value);

  // optional uint64 output_laddr = 7;
  bool has_output_laddr() const;
  void clear_output_laddr();
  static const int kOutputLaddrFieldNumber = 7;
  ::google::protobuf::uint64 output_laddr() const;
  void set_output_laddr(::google::protobuf::uint64 value);

  // optional uint64 weight_laddr = 8;
  bool has_weight_laddr() const;
  void clear_weight_laddr();
  static const int kWeightLaddrFieldNumber = 8;
  ::google::protobuf::uint64 weight_laddr() const;
  void set_weight_laddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 9;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 9;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 10;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 10;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 11;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 11;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 12;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 12;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 gt_rshift = 13;
  bool has_gt_rshift() const;
  void clear_gt_rshift();
  static const int kGtRshiftFieldNumber = 13;
  ::google::protobuf::int32 gt_rshift() const;
  void set_gt_rshift(::google::protobuf::int32 value);

  // optional int32 le_rshift = 14;
  bool has_le_rshift() const;
  void clear_le_rshift();
  static const int kLeRshiftFieldNumber = 14;
  ::google::protobuf::int32 le_rshift() const;
  void set_le_rshift(::google::protobuf::int32 value);

  // optional int32 gt_scale = 15;
  bool has_gt_scale() const;
  void clear_gt_scale();
  static const int kGtScaleFieldNumber = 15;
  ::google::protobuf::int32 gt_scale() const;
  void set_gt_scale(::google::protobuf::int32 value);

  // optional int32 le_scale = 16;
  bool has_le_scale() const;
  void clear_le_scale();
  static const int kLeScaleFieldNumber = 16;
  ::google::protobuf::int32 le_scale() const;
  void set_le_scale(::google::protobuf::int32 value);

  // optional int32 gt_right_shift_width = 17;
  bool has_gt_right_shift_width() const;
  void clear_gt_right_shift_width();
  static const int kGtRightShiftWidthFieldNumber = 17;
  ::google::protobuf::int32 gt_right_shift_width() const;
  void set_gt_right_shift_width(::google::protobuf::int32 value);

  // optional int32 le_right_shift_width = 18;
  bool has_le_right_shift_width() const;
  void clear_le_right_shift_width();
  static const int kLeRightShiftWidthFieldNumber = 18;
  ::google::protobuf::int32 le_right_shift_width() const;
  void set_le_right_shift_width(::google::protobuf::int32 value);

  // optional int32 activation_arg_len = 19;
  bool has_activation_arg_len() const;
  void clear_activation_arg_len();
  static const int kActivationArgLenFieldNumber = 19;
  ::google::protobuf::int32 activation_arg_len() const;
  void set_activation_arg_len(::google::protobuf::int32 value);

  // optional bool channel_shared = 21;
  bool has_channel_shared() const;
  void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 21;
  bool channel_shared() const;
  void set_channel_shared(bool value);

  // optional .bmnet.bm1880.Inst.ActivationMethod activation_type = 22;
  bool has_activation_type() const;
  void clear_activation_type();
  static const int kActivationTypeFieldNumber = 22;
  ::bmnet::bm1880::Inst_ActivationMethod activation_type() const;
  void set_activation_type(::bmnet::bm1880::Inst_ActivationMethod value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_laddr();
  void clear_has_input_laddr();
  void set_has_output_laddr();
  void clear_has_output_laddr();
  void set_has_weight_laddr();
  void clear_has_weight_laddr();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_gt_rshift();
  void clear_has_gt_rshift();
  void set_has_le_rshift();
  void clear_has_le_rshift();
  void set_has_gt_scale();
  void clear_has_gt_scale();
  void set_has_le_scale();
  void clear_has_le_scale();
  void set_has_gt_right_shift_width();
  void clear_has_gt_right_shift_width();
  void set_has_le_right_shift_width();
  void clear_has_le_right_shift_width();
  void set_has_activation_arg_len();
  void clear_has_activation_arg_len();
  void set_has_channel_shared();
  void clear_has_channel_shared();
  void set_has_activation_type();
  void clear_has_activation_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< float > activation_arg_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_laddr_;
  ::google::protobuf::uint64 output_laddr_;
  ::google::protobuf::uint64 weight_laddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 gt_rshift_;
  ::google::protobuf::int32 le_rshift_;
  ::google::protobuf::int32 gt_scale_;
  ::google::protobuf::int32 le_scale_;
  ::google::protobuf::int32 gt_right_shift_width_;
  ::google::protobuf::int32 le_right_shift_width_;
  ::google::protobuf::int32 activation_arg_len_;
  bool channel_shared_;
  int activation_type_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_scale_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel) */ {
 public:
  Inst_bmnet_tl_scale_forward_bmkernel();
  virtual ~Inst_bmnet_tl_scale_forward_bmkernel();

  Inst_bmnet_tl_scale_forward_bmkernel(const Inst_bmnet_tl_scale_forward_bmkernel& from);

  inline Inst_bmnet_tl_scale_forward_bmkernel& operator=(const Inst_bmnet_tl_scale_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_scale_forward_bmkernel(Inst_bmnet_tl_scale_forward_bmkernel&& from) noexcept
    : Inst_bmnet_tl_scale_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_scale_forward_bmkernel& operator=(Inst_bmnet_tl_scale_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_scale_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_scale_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_scale_forward_bmkernel*>(
               &_Inst_bmnet_tl_scale_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(Inst_bmnet_tl_scale_forward_bmkernel* other);
  friend void swap(Inst_bmnet_tl_scale_forward_bmkernel& a, Inst_bmnet_tl_scale_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_scale_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_scale_forward_bmkernel>(NULL);
  }

  Inst_bmnet_tl_scale_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_scale_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_scale_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_scale_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_scale_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_laddr = 6;
  bool has_input_laddr() const;
  void clear_input_laddr();
  static const int kInputLaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_laddr() const;
  void set_input_laddr(::google::protobuf::uint64 value);

  // optional uint64 output_laddr = 7;
  bool has_output_laddr() const;
  void clear_output_laddr();
  static const int kOutputLaddrFieldNumber = 7;
  ::google::protobuf::uint64 output_laddr() const;
  void set_output_laddr(::google::protobuf::uint64 value);

  // optional uint64 scale_laddr = 8;
  bool has_scale_laddr() const;
  void clear_scale_laddr();
  static const int kScaleLaddrFieldNumber = 8;
  ::google::protobuf::uint64 scale_laddr() const;
  void set_scale_laddr(::google::protobuf::uint64 value);

  // optional uint64 bias_laddr = 9;
  bool has_bias_laddr() const;
  void clear_bias_laddr();
  static const int kBiasLaddrFieldNumber = 9;
  ::google::protobuf::uint64 bias_laddr() const;
  void set_bias_laddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 10;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 10;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 11;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 11;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 12;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 12;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 13;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 13;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 scale_dim = 14;
  bool has_scale_dim() const;
  void clear_scale_dim();
  static const int kScaleDimFieldNumber = 14;
  ::google::protobuf::int32 scale_dim() const;
  void set_scale_dim(::google::protobuf::int32 value);

  // optional int32 right_shift_width = 15;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 15;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // optional bool do_bias = 16;
  bool has_do_bias() const;
  void clear_do_bias();
  static const int kDoBiasFieldNumber = 16;
  bool do_bias() const;
  void set_do_bias(bool value);

  // optional bool do_relu = 17;
  bool has_do_relu() const;
  void clear_do_relu();
  static const int kDoReluFieldNumber = 17;
  bool do_relu() const;
  void set_do_relu(bool value);

  // optional float relu_slope = 18;
  bool has_relu_slope() const;
  void clear_relu_slope();
  static const int kReluSlopeFieldNumber = 18;
  float relu_slope() const;
  void set_relu_slope(float value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_laddr();
  void clear_has_input_laddr();
  void set_has_output_laddr();
  void clear_has_output_laddr();
  void set_has_scale_laddr();
  void clear_has_scale_laddr();
  void set_has_bias_laddr();
  void clear_has_bias_laddr();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_scale_dim();
  void clear_has_scale_dim();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();
  void set_has_do_bias();
  void clear_has_do_bias();
  void set_has_do_relu();
  void clear_has_do_relu();
  void set_has_relu_slope();
  void clear_has_relu_slope();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_laddr_;
  ::google::protobuf::uint64 output_laddr_;
  ::google::protobuf::uint64 scale_laddr_;
  ::google::protobuf::uint64 bias_laddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 scale_dim_;
  ::google::protobuf::int32 right_shift_width_;
  bool do_bias_;
  bool do_relu_;
  float relu_slope_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_batchnorm_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel) */ {
 public:
  Inst_bmnet_tl_batchnorm_forward_bmkernel();
  virtual ~Inst_bmnet_tl_batchnorm_forward_bmkernel();

  Inst_bmnet_tl_batchnorm_forward_bmkernel(const Inst_bmnet_tl_batchnorm_forward_bmkernel& from);

  inline Inst_bmnet_tl_batchnorm_forward_bmkernel& operator=(const Inst_bmnet_tl_batchnorm_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_batchnorm_forward_bmkernel(Inst_bmnet_tl_batchnorm_forward_bmkernel&& from) noexcept
    : Inst_bmnet_tl_batchnorm_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_batchnorm_forward_bmkernel& operator=(Inst_bmnet_tl_batchnorm_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_batchnorm_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_batchnorm_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_batchnorm_forward_bmkernel*>(
               &_Inst_bmnet_tl_batchnorm_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(Inst_bmnet_tl_batchnorm_forward_bmkernel* other);
  friend void swap(Inst_bmnet_tl_batchnorm_forward_bmkernel& a, Inst_bmnet_tl_batchnorm_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_batchnorm_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_batchnorm_forward_bmkernel>(NULL);
  }

  Inst_bmnet_tl_batchnorm_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_batchnorm_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_batchnorm_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_batchnorm_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_batchnorm_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 bottom_laddr = 6;
  bool has_bottom_laddr() const;
  void clear_bottom_laddr();
  static const int kBottomLaddrFieldNumber = 6;
  ::google::protobuf::uint64 bottom_laddr() const;
  void set_bottom_laddr(::google::protobuf::uint64 value);

  // optional uint64 top_laddr = 7;
  bool has_top_laddr() const;
  void clear_top_laddr();
  static const int kTopLaddrFieldNumber = 7;
  ::google::protobuf::uint64 top_laddr() const;
  void set_top_laddr(::google::protobuf::uint64 value);

  // optional uint64 mean_laddr = 8;
  bool has_mean_laddr() const;
  void clear_mean_laddr();
  static const int kMeanLaddrFieldNumber = 8;
  ::google::protobuf::uint64 mean_laddr() const;
  void set_mean_laddr(::google::protobuf::uint64 value);

  // optional uint64 variance_laddr = 9;
  bool has_variance_laddr() const;
  void clear_variance_laddr();
  static const int kVarianceLaddrFieldNumber = 9;
  ::google::protobuf::uint64 variance_laddr() const;
  void set_variance_laddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 10;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 10;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 11;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 11;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 12;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 12;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 13;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 13;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 right_shift_width = 14;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 14;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // optional bool do_relu = 15;
  bool has_do_relu() const;
  void clear_do_relu();
  static const int kDoReluFieldNumber = 15;
  bool do_relu() const;
  void set_do_relu(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_bottom_laddr();
  void clear_has_bottom_laddr();
  void set_has_top_laddr();
  void clear_has_top_laddr();
  void set_has_mean_laddr();
  void clear_has_mean_laddr();
  void set_has_variance_laddr();
  void clear_has_variance_laddr();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();
  void set_has_do_relu();
  void clear_has_do_relu();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 bottom_laddr_;
  ::google::protobuf::uint64 top_laddr_;
  ::google::protobuf::uint64 mean_laddr_;
  ::google::protobuf::uint64 variance_laddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 right_shift_width_;
  bool do_relu_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_eltwise_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel) */ {
 public:
  Inst_bmnet_tl_eltwise_forward_bmkernel();
  virtual ~Inst_bmnet_tl_eltwise_forward_bmkernel();

  Inst_bmnet_tl_eltwise_forward_bmkernel(const Inst_bmnet_tl_eltwise_forward_bmkernel& from);

  inline Inst_bmnet_tl_eltwise_forward_bmkernel& operator=(const Inst_bmnet_tl_eltwise_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_eltwise_forward_bmkernel(Inst_bmnet_tl_eltwise_forward_bmkernel&& from) noexcept
    : Inst_bmnet_tl_eltwise_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_eltwise_forward_bmkernel& operator=(Inst_bmnet_tl_eltwise_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_eltwise_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_eltwise_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_eltwise_forward_bmkernel*>(
               &_Inst_bmnet_tl_eltwise_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(Inst_bmnet_tl_eltwise_forward_bmkernel* other);
  friend void swap(Inst_bmnet_tl_eltwise_forward_bmkernel& a, Inst_bmnet_tl_eltwise_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_eltwise_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_eltwise_forward_bmkernel>(NULL);
  }

  Inst_bmnet_tl_eltwise_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_eltwise_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_eltwise_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_eltwise_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_eltwise_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated uint64 la_input = 6;
  int la_input_size() const;
  void clear_la_input();
  static const int kLaInputFieldNumber = 6;
  ::google::protobuf::uint64 la_input(int index) const;
  void set_la_input(int index, ::google::protobuf::uint64 value);
  void add_la_input(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      la_input() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_la_input();

  // repeated int32 threshold_x_quantized = 16;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 16;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // repeated int32 coeffs = 20;
  int coeffs_size() const;
  void clear_coeffs();
  static const int kCoeffsFieldNumber = 20;
  ::google::protobuf::int32 coeffs(int index) const;
  void set_coeffs(int index, ::google::protobuf::int32 value);
  void add_coeffs(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      coeffs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_coeffs();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 la_output = 7;
  bool has_la_output() const;
  void clear_la_output();
  static const int kLaOutputFieldNumber = 7;
  ::google::protobuf::uint64 la_output() const;
  void set_la_output(::google::protobuf::uint64 value);

  // optional uint64 la_working = 8;
  bool has_la_working() const;
  void clear_la_working();
  static const int kLaWorkingFieldNumber = 8;
  ::google::protobuf::uint64 la_working() const;
  void set_la_working(::google::protobuf::uint64 value);

  // optional int32 input_n = 9;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 9;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 10;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 10;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 11;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 11;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 12;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 12;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 input_size = 13;
  bool has_input_size() const;
  void clear_input_size();
  static const int kInputSizeFieldNumber = 13;
  ::google::protobuf::int32 input_size() const;
  void set_input_size(::google::protobuf::int32 value);

  // optional int32 right_shift_width = 14;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 14;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // optional int32 op = 15;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 15;
  ::google::protobuf::int32 op() const;
  void set_op(::google::protobuf::int32 value);

  // optional bool use_default_coeff = 17;
  bool has_use_default_coeff() const;
  void clear_use_default_coeff();
  static const int kUseDefaultCoeffFieldNumber = 17;
  bool use_default_coeff() const;
  void set_use_default_coeff(bool value);

  // optional bool do_relu = 18;
  bool has_do_relu() const;
  void clear_do_relu();
  static const int kDoReluFieldNumber = 18;
  bool do_relu() const;
  void set_do_relu(bool value);

  // optional float relu_slope = 19;
  bool has_relu_slope() const;
  void clear_relu_slope();
  static const int kReluSlopeFieldNumber = 19;
  float relu_slope() const;
  void set_relu_slope(float value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_la_output();
  void clear_has_la_output();
  void set_has_la_working();
  void clear_has_la_working();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_input_size();
  void clear_has_input_size();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();
  void set_has_op();
  void clear_has_op();
  void set_has_use_default_coeff();
  void clear_has_use_default_coeff();
  void set_has_do_relu();
  void clear_has_do_relu();
  void set_has_relu_slope();
  void clear_has_relu_slope();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > la_input_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > coeffs_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 la_output_;
  ::google::protobuf::uint64 la_working_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 input_size_;
  ::google::protobuf::int32 right_shift_width_;
  ::google::protobuf::int32 op_;
  bool use_default_coeff_;
  bool do_relu_;
  float relu_slope_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_lrn_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel) */ {
 public:
  Inst_bmnet_tl_lrn_forward_bmkernel();
  virtual ~Inst_bmnet_tl_lrn_forward_bmkernel();

  Inst_bmnet_tl_lrn_forward_bmkernel(const Inst_bmnet_tl_lrn_forward_bmkernel& from);

  inline Inst_bmnet_tl_lrn_forward_bmkernel& operator=(const Inst_bmnet_tl_lrn_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_lrn_forward_bmkernel(Inst_bmnet_tl_lrn_forward_bmkernel&& from) noexcept
    : Inst_bmnet_tl_lrn_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_lrn_forward_bmkernel& operator=(Inst_bmnet_tl_lrn_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_lrn_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_lrn_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_lrn_forward_bmkernel*>(
               &_Inst_bmnet_tl_lrn_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(Inst_bmnet_tl_lrn_forward_bmkernel* other);
  friend void swap(Inst_bmnet_tl_lrn_forward_bmkernel& a, Inst_bmnet_tl_lrn_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_lrn_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_lrn_forward_bmkernel>(NULL);
  }

  Inst_bmnet_tl_lrn_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_lrn_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_lrn_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_lrn_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_lrn_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated int32 threshold_x_quantized = 18;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 18;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 bottom_laddr = 6;
  bool has_bottom_laddr() const;
  void clear_bottom_laddr();
  static const int kBottomLaddrFieldNumber = 6;
  ::google::protobuf::uint64 bottom_laddr() const;
  void set_bottom_laddr(::google::protobuf::uint64 value);

  // optional uint64 top_laddr = 7;
  bool has_top_laddr() const;
  void clear_top_laddr();
  static const int kTopLaddrFieldNumber = 7;
  ::google::protobuf::uint64 top_laddr() const;
  void set_top_laddr(::google::protobuf::uint64 value);

  // optional uint64 sqr_lut_laddr = 8;
  bool has_sqr_lut_laddr() const;
  void clear_sqr_lut_laddr();
  static const int kSqrLutLaddrFieldNumber = 8;
  ::google::protobuf::uint64 sqr_lut_laddr() const;
  void set_sqr_lut_laddr(::google::protobuf::uint64 value);

  // optional uint64 power_lut_laddr = 9;
  bool has_power_lut_laddr() const;
  void clear_power_lut_laddr();
  static const int kPowerLutLaddrFieldNumber = 9;
  ::google::protobuf::uint64 power_lut_laddr() const;
  void set_power_lut_laddr(::google::protobuf::uint64 value);

  // optional uint64 working_laddr = 10;
  bool has_working_laddr() const;
  void clear_working_laddr();
  static const int kWorkingLaddrFieldNumber = 10;
  ::google::protobuf::uint64 working_laddr() const;
  void set_working_laddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 11;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 11;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 12;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 12;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 13;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 13;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 14;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 14;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 size = 15;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 15;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional int32 sum_right_shift_width = 16;
  bool has_sum_right_shift_width() const;
  void clear_sum_right_shift_width();
  static const int kSumRightShiftWidthFieldNumber = 16;
  ::google::protobuf::int32 sum_right_shift_width() const;
  void set_sum_right_shift_width(::google::protobuf::int32 value);

  // optional int32 lrn_right_shift_width = 17;
  bool has_lrn_right_shift_width() const;
  void clear_lrn_right_shift_width();
  static const int kLrnRightShiftWidthFieldNumber = 17;
  ::google::protobuf::int32 lrn_right_shift_width() const;
  void set_lrn_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_bottom_laddr();
  void clear_has_bottom_laddr();
  void set_has_top_laddr();
  void clear_has_top_laddr();
  void set_has_sqr_lut_laddr();
  void clear_has_sqr_lut_laddr();
  void set_has_power_lut_laddr();
  void clear_has_power_lut_laddr();
  void set_has_working_laddr();
  void clear_has_working_laddr();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_size();
  void clear_has_size();
  void set_has_sum_right_shift_width();
  void clear_has_sum_right_shift_width();
  void set_has_lrn_right_shift_width();
  void clear_has_lrn_right_shift_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 bottom_laddr_;
  ::google::protobuf::uint64 top_laddr_;
  ::google::protobuf::uint64 sqr_lut_laddr_;
  ::google::protobuf::uint64 power_lut_laddr_;
  ::google::protobuf::uint64 working_laddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 sum_right_shift_width_;
  ::google::protobuf::int32 lrn_right_shift_width_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_pooling_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel) */ {
 public:
  Inst_bmnet_tl_pooling_forward_bmkernel();
  virtual ~Inst_bmnet_tl_pooling_forward_bmkernel();

  Inst_bmnet_tl_pooling_forward_bmkernel(const Inst_bmnet_tl_pooling_forward_bmkernel& from);

  inline Inst_bmnet_tl_pooling_forward_bmkernel& operator=(const Inst_bmnet_tl_pooling_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_pooling_forward_bmkernel(Inst_bmnet_tl_pooling_forward_bmkernel&& from) noexcept
    : Inst_bmnet_tl_pooling_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_pooling_forward_bmkernel& operator=(Inst_bmnet_tl_pooling_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_pooling_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_pooling_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_pooling_forward_bmkernel*>(
               &_Inst_bmnet_tl_pooling_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(Inst_bmnet_tl_pooling_forward_bmkernel* other);
  friend void swap(Inst_bmnet_tl_pooling_forward_bmkernel& a, Inst_bmnet_tl_pooling_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_pooling_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_pooling_forward_bmkernel>(NULL);
  }

  Inst_bmnet_tl_pooling_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_pooling_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_pooling_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_pooling_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_pooling_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 ifmap_laddr = 6;
  bool has_ifmap_laddr() const;
  void clear_ifmap_laddr();
  static const int kIfmapLaddrFieldNumber = 6;
  ::google::protobuf::uint64 ifmap_laddr() const;
  void set_ifmap_laddr(::google::protobuf::uint64 value);

  // optional uint64 ofmap_laddr = 7;
  bool has_ofmap_laddr() const;
  void clear_ofmap_laddr();
  static const int kOfmapLaddrFieldNumber = 7;
  ::google::protobuf::uint64 ofmap_laddr() const;
  void set_ofmap_laddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 8;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 8;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 9;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 9;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 10;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 10;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 11;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 11;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 output_n = 12;
  bool has_output_n() const;
  void clear_output_n();
  static const int kOutputNFieldNumber = 12;
  ::google::protobuf::int32 output_n() const;
  void set_output_n(::google::protobuf::int32 value);

  // optional int32 output_c = 13;
  bool has_output_c() const;
  void clear_output_c();
  static const int kOutputCFieldNumber = 13;
  ::google::protobuf::int32 output_c() const;
  void set_output_c(::google::protobuf::int32 value);

  // optional int32 output_h = 14;
  bool has_output_h() const;
  void clear_output_h();
  static const int kOutputHFieldNumber = 14;
  ::google::protobuf::int32 output_h() const;
  void set_output_h(::google::protobuf::int32 value);

  // optional int32 output_w = 15;
  bool has_output_w() const;
  void clear_output_w();
  static const int kOutputWFieldNumber = 15;
  ::google::protobuf::int32 output_w() const;
  void set_output_w(::google::protobuf::int32 value);

  // optional uint32 kh = 16;
  bool has_kh() const;
  void clear_kh();
  static const int kKhFieldNumber = 16;
  ::google::protobuf::uint32 kh() const;
  void set_kh(::google::protobuf::uint32 value);

  // optional uint32 kw = 17;
  bool has_kw() const;
  void clear_kw();
  static const int kKwFieldNumber = 17;
  ::google::protobuf::uint32 kw() const;
  void set_kw(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 18;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 18;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 19;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 19;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional uint32 pad_h_top = 20;
  bool has_pad_h_top() const;
  void clear_pad_h_top();
  static const int kPadHTopFieldNumber = 20;
  ::google::protobuf::uint32 pad_h_top() const;
  void set_pad_h_top(::google::protobuf::uint32 value);

  // optional uint32 pad_h_bottom = 21;
  bool has_pad_h_bottom() const;
  void clear_pad_h_bottom();
  static const int kPadHBottomFieldNumber = 21;
  ::google::protobuf::uint32 pad_h_bottom() const;
  void set_pad_h_bottom(::google::protobuf::uint32 value);

  // optional uint32 pad_w_left = 22;
  bool has_pad_w_left() const;
  void clear_pad_w_left();
  static const int kPadWLeftFieldNumber = 22;
  ::google::protobuf::uint32 pad_w_left() const;
  void set_pad_w_left(::google::protobuf::uint32 value);

  // optional uint32 pad_w_right = 23;
  bool has_pad_w_right() const;
  void clear_pad_w_right();
  static const int kPadWRightFieldNumber = 23;
  ::google::protobuf::uint32 pad_w_right() const;
  void set_pad_w_right(::google::protobuf::uint32 value);

  // optional bool is_avg_pooling = 24;
  bool has_is_avg_pooling() const;
  void clear_is_avg_pooling();
  static const int kIsAvgPoolingFieldNumber = 24;
  bool is_avg_pooling() const;
  void set_is_avg_pooling(bool value);

  // optional int32 right_shift_width = 25;
  bool has_right_shift_width() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 25;
  ::google::protobuf::int32 right_shift_width() const;
  void set_right_shift_width(::google::protobuf::int32 value);

  // optional int32 threshold_x_quantized = 26;
  bool has_threshold_x_quantized() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 26;
  ::google::protobuf::int32 threshold_x_quantized() const;
  void set_threshold_x_quantized(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_ifmap_laddr();
  void clear_has_ifmap_laddr();
  void set_has_ofmap_laddr();
  void clear_has_ofmap_laddr();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_output_n();
  void clear_has_output_n();
  void set_has_output_c();
  void clear_has_output_c();
  void set_has_output_h();
  void clear_has_output_h();
  void set_has_output_w();
  void clear_has_output_w();
  void set_has_kh();
  void clear_has_kh();
  void set_has_kw();
  void clear_has_kw();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_pad_h_top();
  void clear_has_pad_h_top();
  void set_has_pad_h_bottom();
  void clear_has_pad_h_bottom();
  void set_has_pad_w_left();
  void clear_has_pad_w_left();
  void set_has_pad_w_right();
  void clear_has_pad_w_right();
  void set_has_is_avg_pooling();
  void clear_has_is_avg_pooling();
  void set_has_right_shift_width();
  void clear_has_right_shift_width();
  void set_has_threshold_x_quantized();
  void clear_has_threshold_x_quantized();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 ifmap_laddr_;
  ::google::protobuf::uint64 ofmap_laddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 output_n_;
  ::google::protobuf::int32 output_c_;
  ::google::protobuf::int32 output_h_;
  ::google::protobuf::int32 output_w_;
  ::google::protobuf::uint32 kh_;
  ::google::protobuf::uint32 kw_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::google::protobuf::uint32 pad_h_top_;
  ::google::protobuf::uint32 pad_h_bottom_;
  ::google::protobuf::uint32 pad_w_left_;
  ::google::protobuf::uint32 pad_w_right_;
  bool is_avg_pooling_;
  ::google::protobuf::int32 right_shift_width_;
  ::google::protobuf::int32 threshold_x_quantized_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_upsample_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel) */ {
 public:
  Inst_bmnet_tl_upsample_forward_bmkernel();
  virtual ~Inst_bmnet_tl_upsample_forward_bmkernel();

  Inst_bmnet_tl_upsample_forward_bmkernel(const Inst_bmnet_tl_upsample_forward_bmkernel& from);

  inline Inst_bmnet_tl_upsample_forward_bmkernel& operator=(const Inst_bmnet_tl_upsample_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_upsample_forward_bmkernel(Inst_bmnet_tl_upsample_forward_bmkernel&& from) noexcept
    : Inst_bmnet_tl_upsample_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_upsample_forward_bmkernel& operator=(Inst_bmnet_tl_upsample_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_upsample_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_upsample_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_upsample_forward_bmkernel*>(
               &_Inst_bmnet_tl_upsample_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(Inst_bmnet_tl_upsample_forward_bmkernel* other);
  friend void swap(Inst_bmnet_tl_upsample_forward_bmkernel& a, Inst_bmnet_tl_upsample_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_upsample_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_upsample_forward_bmkernel>(NULL);
  }

  Inst_bmnet_tl_upsample_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_upsample_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_upsample_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_upsample_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_upsample_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 la_ifmap = 6;
  bool has_la_ifmap() const;
  void clear_la_ifmap();
  static const int kLaIfmapFieldNumber = 6;
  ::google::protobuf::uint64 la_ifmap() const;
  void set_la_ifmap(::google::protobuf::uint64 value);

  // optional uint64 la_ofmap = 7;
  bool has_la_ofmap() const;
  void clear_la_ofmap();
  static const int kLaOfmapFieldNumber = 7;
  ::google::protobuf::uint64 la_ofmap() const;
  void set_la_ofmap(::google::protobuf::uint64 value);

  // optional int32 input_n = 8;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 8;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 9;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 9;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 10;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 10;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 11;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 11;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 output_h = 12;
  bool has_output_h() const;
  void clear_output_h();
  static const int kOutputHFieldNumber = 12;
  ::google::protobuf::int32 output_h() const;
  void set_output_h(::google::protobuf::int32 value);

  // optional int32 output_w = 13;
  bool has_output_w() const;
  void clear_output_w();
  static const int kOutputWFieldNumber = 13;
  ::google::protobuf::int32 output_w() const;
  void set_output_w(::google::protobuf::int32 value);

  // optional int32 size = 14;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 14;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_la_ifmap();
  void clear_has_la_ifmap();
  void set_has_la_ofmap();
  void clear_has_la_ofmap();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_output_h();
  void clear_has_output_h();
  void set_has_output_w();
  void clear_has_output_w();
  void set_has_size();
  void clear_has_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 la_ifmap_;
  ::google::protobuf::uint64 la_ofmap_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 output_h_;
  ::google::protobuf::int32 output_w_;
  ::google::protobuf::int32 size_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_load_stride_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel) */ {
 public:
  Inst_bmnet_tl_load_stride_bmkernel();
  virtual ~Inst_bmnet_tl_load_stride_bmkernel();

  Inst_bmnet_tl_load_stride_bmkernel(const Inst_bmnet_tl_load_stride_bmkernel& from);

  inline Inst_bmnet_tl_load_stride_bmkernel& operator=(const Inst_bmnet_tl_load_stride_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_load_stride_bmkernel(Inst_bmnet_tl_load_stride_bmkernel&& from) noexcept
    : Inst_bmnet_tl_load_stride_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_load_stride_bmkernel& operator=(Inst_bmnet_tl_load_stride_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_load_stride_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_load_stride_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_load_stride_bmkernel*>(
               &_Inst_bmnet_tl_load_stride_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(Inst_bmnet_tl_load_stride_bmkernel* other);
  friend void swap(Inst_bmnet_tl_load_stride_bmkernel& a, Inst_bmnet_tl_load_stride_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_load_stride_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_load_stride_bmkernel>(NULL);
  }

  Inst_bmnet_tl_load_stride_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_load_stride_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_load_stride_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_load_stride_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_load_stride_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 ga_src = 6;
  bool has_ga_src() const;
  void clear_ga_src();
  static const int kGaSrcFieldNumber = 6;
  ::google::protobuf::uint64 ga_src() const;
  void set_ga_src(::google::protobuf::uint64 value);

  // optional uint64 la_dst = 7;
  bool has_la_dst() const;
  void clear_la_dst();
  static const int kLaDstFieldNumber = 7;
  ::google::protobuf::uint64 la_dst() const;
  void set_la_dst(::google::protobuf::uint64 value);

  // optional int32 Local_N = 8;
  bool has_local_n() const;
  void clear_local_n();
  static const int kLocalNFieldNumber = 8;
  ::google::protobuf::int32 local_n() const;
  void set_local_n(::google::protobuf::int32 value);

  // optional int32 Local_C = 9;
  bool has_local_c() const;
  void clear_local_c();
  static const int kLocalCFieldNumber = 9;
  ::google::protobuf::int32 local_c() const;
  void set_local_c(::google::protobuf::int32 value);

  // optional int32 Local_H = 10;
  bool has_local_h() const;
  void clear_local_h();
  static const int kLocalHFieldNumber = 10;
  ::google::protobuf::int32 local_h() const;
  void set_local_h(::google::protobuf::int32 value);

  // optional int32 Local_W = 11;
  bool has_local_w() const;
  void clear_local_w();
  static const int kLocalWFieldNumber = 11;
  ::google::protobuf::int32 local_w() const;
  void set_local_w(::google::protobuf::int32 value);

  // optional int32 Global_C = 12;
  bool has_global_c() const;
  void clear_global_c();
  static const int kGlobalCFieldNumber = 12;
  ::google::protobuf::int32 global_c() const;
  void set_global_c(::google::protobuf::int32 value);

  // optional int32 Global_H = 13;
  bool has_global_h() const;
  void clear_global_h();
  static const int kGlobalHFieldNumber = 13;
  ::google::protobuf::int32 global_h() const;
  void set_global_h(::google::protobuf::int32 value);

  // optional int32 Global_W = 14;
  bool has_global_w() const;
  void clear_global_w();
  static const int kGlobalWFieldNumber = 14;
  ::google::protobuf::int32 global_w() const;
  void set_global_w(::google::protobuf::int32 value);

  // optional bool DoTranspose = 15;
  bool has_dotranspose() const;
  void clear_dotranspose();
  static const int kDoTransposeFieldNumber = 15;
  bool dotranspose() const;
  void set_dotranspose(bool value);

  // optional bool DoAligned = 16;
  bool has_doaligned() const;
  void clear_doaligned();
  static const int kDoAlignedFieldNumber = 16;
  bool doaligned() const;
  void set_doaligned(bool value);

  // optional bool isNeuron = 17;
  bool has_isneuron() const;
  void clear_isneuron();
  static const int kIsNeuronFieldNumber = 17;
  bool isneuron() const;
  void set_isneuron(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_ga_src();
  void clear_has_ga_src();
  void set_has_la_dst();
  void clear_has_la_dst();
  void set_has_local_n();
  void clear_has_local_n();
  void set_has_local_c();
  void clear_has_local_c();
  void set_has_local_h();
  void clear_has_local_h();
  void set_has_local_w();
  void clear_has_local_w();
  void set_has_global_c();
  void clear_has_global_c();
  void set_has_global_h();
  void clear_has_global_h();
  void set_has_global_w();
  void clear_has_global_w();
  void set_has_dotranspose();
  void clear_has_dotranspose();
  void set_has_doaligned();
  void clear_has_doaligned();
  void set_has_isneuron();
  void clear_has_isneuron();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 ga_src_;
  ::google::protobuf::uint64 la_dst_;
  ::google::protobuf::int32 local_n_;
  ::google::protobuf::int32 local_c_;
  ::google::protobuf::int32 local_h_;
  ::google::protobuf::int32 local_w_;
  ::google::protobuf::int32 global_c_;
  ::google::protobuf::int32 global_h_;
  ::google::protobuf::int32 global_w_;
  bool dotranspose_;
  bool doaligned_;
  bool isneuron_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_load_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel) */ {
 public:
  Inst_bmnet_tl_load_bmkernel();
  virtual ~Inst_bmnet_tl_load_bmkernel();

  Inst_bmnet_tl_load_bmkernel(const Inst_bmnet_tl_load_bmkernel& from);

  inline Inst_bmnet_tl_load_bmkernel& operator=(const Inst_bmnet_tl_load_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_load_bmkernel(Inst_bmnet_tl_load_bmkernel&& from) noexcept
    : Inst_bmnet_tl_load_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_load_bmkernel& operator=(Inst_bmnet_tl_load_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_load_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_load_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_load_bmkernel*>(
               &_Inst_bmnet_tl_load_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(Inst_bmnet_tl_load_bmkernel* other);
  friend void swap(Inst_bmnet_tl_load_bmkernel& a, Inst_bmnet_tl_load_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_load_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_load_bmkernel>(NULL);
  }

  Inst_bmnet_tl_load_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_load_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_load_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_load_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_load_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 ga_src = 6;
  bool has_ga_src() const;
  void clear_ga_src();
  static const int kGaSrcFieldNumber = 6;
  ::google::protobuf::uint64 ga_src() const;
  void set_ga_src(::google::protobuf::uint64 value);

  // optional uint64 la_dst = 7;
  bool has_la_dst() const;
  void clear_la_dst();
  static const int kLaDstFieldNumber = 7;
  ::google::protobuf::uint64 la_dst() const;
  void set_la_dst(::google::protobuf::uint64 value);

  // optional int32 Local_N = 8;
  bool has_local_n() const;
  void clear_local_n();
  static const int kLocalNFieldNumber = 8;
  ::google::protobuf::int32 local_n() const;
  void set_local_n(::google::protobuf::int32 value);

  // optional int32 Local_C = 9;
  bool has_local_c() const;
  void clear_local_c();
  static const int kLocalCFieldNumber = 9;
  ::google::protobuf::int32 local_c() const;
  void set_local_c(::google::protobuf::int32 value);

  // optional int32 Local_H = 10;
  bool has_local_h() const;
  void clear_local_h();
  static const int kLocalHFieldNumber = 10;
  ::google::protobuf::int32 local_h() const;
  void set_local_h(::google::protobuf::int32 value);

  // optional int32 Local_W = 11;
  bool has_local_w() const;
  void clear_local_w();
  static const int kLocalWFieldNumber = 11;
  ::google::protobuf::int32 local_w() const;
  void set_local_w(::google::protobuf::int32 value);

  // optional int32 Global_C = 12;
  bool has_global_c() const;
  void clear_global_c();
  static const int kGlobalCFieldNumber = 12;
  ::google::protobuf::int32 global_c() const;
  void set_global_c(::google::protobuf::int32 value);

  // optional int32 Global_H = 13;
  bool has_global_h() const;
  void clear_global_h();
  static const int kGlobalHFieldNumber = 13;
  ::google::protobuf::int32 global_h() const;
  void set_global_h(::google::protobuf::int32 value);

  // optional int32 Global_W = 14;
  bool has_global_w() const;
  void clear_global_w();
  static const int kGlobalWFieldNumber = 14;
  ::google::protobuf::int32 global_w() const;
  void set_global_w(::google::protobuf::int32 value);

  // optional bool DoTranspose = 15;
  bool has_dotranspose() const;
  void clear_dotranspose();
  static const int kDoTransposeFieldNumber = 15;
  bool dotranspose() const;
  void set_dotranspose(bool value);

  // optional bool DoAligned = 16;
  bool has_doaligned() const;
  void clear_doaligned();
  static const int kDoAlignedFieldNumber = 16;
  bool doaligned() const;
  void set_doaligned(bool value);

  // optional bool isNeuron = 17;
  bool has_isneuron() const;
  void clear_isneuron();
  static const int kIsNeuronFieldNumber = 17;
  bool isneuron() const;
  void set_isneuron(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_ga_src();
  void clear_has_ga_src();
  void set_has_la_dst();
  void clear_has_la_dst();
  void set_has_local_n();
  void clear_has_local_n();
  void set_has_local_c();
  void clear_has_local_c();
  void set_has_local_h();
  void clear_has_local_h();
  void set_has_local_w();
  void clear_has_local_w();
  void set_has_global_c();
  void clear_has_global_c();
  void set_has_global_h();
  void clear_has_global_h();
  void set_has_global_w();
  void clear_has_global_w();
  void set_has_dotranspose();
  void clear_has_dotranspose();
  void set_has_doaligned();
  void clear_has_doaligned();
  void set_has_isneuron();
  void clear_has_isneuron();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 ga_src_;
  ::google::protobuf::uint64 la_dst_;
  ::google::protobuf::int32 local_n_;
  ::google::protobuf::int32 local_c_;
  ::google::protobuf::int32 local_h_;
  ::google::protobuf::int32 local_w_;
  ::google::protobuf::int32 global_c_;
  ::google::protobuf::int32 global_h_;
  ::google::protobuf::int32 global_w_;
  bool dotranspose_;
  bool doaligned_;
  bool isneuron_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_store_stride_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel) */ {
 public:
  Inst_bmnet_tl_store_stride_bmkernel();
  virtual ~Inst_bmnet_tl_store_stride_bmkernel();

  Inst_bmnet_tl_store_stride_bmkernel(const Inst_bmnet_tl_store_stride_bmkernel& from);

  inline Inst_bmnet_tl_store_stride_bmkernel& operator=(const Inst_bmnet_tl_store_stride_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_store_stride_bmkernel(Inst_bmnet_tl_store_stride_bmkernel&& from) noexcept
    : Inst_bmnet_tl_store_stride_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_store_stride_bmkernel& operator=(Inst_bmnet_tl_store_stride_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_store_stride_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_store_stride_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_store_stride_bmkernel*>(
               &_Inst_bmnet_tl_store_stride_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(Inst_bmnet_tl_store_stride_bmkernel* other);
  friend void swap(Inst_bmnet_tl_store_stride_bmkernel& a, Inst_bmnet_tl_store_stride_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_store_stride_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_store_stride_bmkernel>(NULL);
  }

  Inst_bmnet_tl_store_stride_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_store_stride_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_store_stride_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_store_stride_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_store_stride_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 ga_dst = 6;
  bool has_ga_dst() const;
  void clear_ga_dst();
  static const int kGaDstFieldNumber = 6;
  ::google::protobuf::uint64 ga_dst() const;
  void set_ga_dst(::google::protobuf::uint64 value);

  // optional uint64 la_src = 7;
  bool has_la_src() const;
  void clear_la_src();
  static const int kLaSrcFieldNumber = 7;
  ::google::protobuf::uint64 la_src() const;
  void set_la_src(::google::protobuf::uint64 value);

  // optional int32 Local_N = 8;
  bool has_local_n() const;
  void clear_local_n();
  static const int kLocalNFieldNumber = 8;
  ::google::protobuf::int32 local_n() const;
  void set_local_n(::google::protobuf::int32 value);

  // optional int32 Local_C = 9;
  bool has_local_c() const;
  void clear_local_c();
  static const int kLocalCFieldNumber = 9;
  ::google::protobuf::int32 local_c() const;
  void set_local_c(::google::protobuf::int32 value);

  // optional int32 Local_H = 10;
  bool has_local_h() const;
  void clear_local_h();
  static const int kLocalHFieldNumber = 10;
  ::google::protobuf::int32 local_h() const;
  void set_local_h(::google::protobuf::int32 value);

  // optional int32 Local_W = 11;
  bool has_local_w() const;
  void clear_local_w();
  static const int kLocalWFieldNumber = 11;
  ::google::protobuf::int32 local_w() const;
  void set_local_w(::google::protobuf::int32 value);

  // optional int32 Global_C = 12;
  bool has_global_c() const;
  void clear_global_c();
  static const int kGlobalCFieldNumber = 12;
  ::google::protobuf::int32 global_c() const;
  void set_global_c(::google::protobuf::int32 value);

  // optional int32 Global_H = 13;
  bool has_global_h() const;
  void clear_global_h();
  static const int kGlobalHFieldNumber = 13;
  ::google::protobuf::int32 global_h() const;
  void set_global_h(::google::protobuf::int32 value);

  // optional int32 Global_W = 14;
  bool has_global_w() const;
  void clear_global_w();
  static const int kGlobalWFieldNumber = 14;
  ::google::protobuf::int32 global_w() const;
  void set_global_w(::google::protobuf::int32 value);

  // optional bool DoTranspose = 15;
  bool has_dotranspose() const;
  void clear_dotranspose();
  static const int kDoTransposeFieldNumber = 15;
  bool dotranspose() const;
  void set_dotranspose(bool value);

  // optional bool DoAligned = 16;
  bool has_doaligned() const;
  void clear_doaligned();
  static const int kDoAlignedFieldNumber = 16;
  bool doaligned() const;
  void set_doaligned(bool value);

  // optional bool isNeuron = 17;
  bool has_isneuron() const;
  void clear_isneuron();
  static const int kIsNeuronFieldNumber = 17;
  bool isneuron() const;
  void set_isneuron(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_ga_dst();
  void clear_has_ga_dst();
  void set_has_la_src();
  void clear_has_la_src();
  void set_has_local_n();
  void clear_has_local_n();
  void set_has_local_c();
  void clear_has_local_c();
  void set_has_local_h();
  void clear_has_local_h();
  void set_has_local_w();
  void clear_has_local_w();
  void set_has_global_c();
  void clear_has_global_c();
  void set_has_global_h();
  void clear_has_global_h();
  void set_has_global_w();
  void clear_has_global_w();
  void set_has_dotranspose();
  void clear_has_dotranspose();
  void set_has_doaligned();
  void clear_has_doaligned();
  void set_has_isneuron();
  void clear_has_isneuron();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 ga_dst_;
  ::google::protobuf::uint64 la_src_;
  ::google::protobuf::int32 local_n_;
  ::google::protobuf::int32 local_c_;
  ::google::protobuf::int32 local_h_;
  ::google::protobuf::int32 local_w_;
  ::google::protobuf::int32 global_c_;
  ::google::protobuf::int32 global_h_;
  ::google::protobuf::int32 global_w_;
  bool dotranspose_;
  bool doaligned_;
  bool isneuron_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_store_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel) */ {
 public:
  Inst_bmnet_tl_store_bmkernel();
  virtual ~Inst_bmnet_tl_store_bmkernel();

  Inst_bmnet_tl_store_bmkernel(const Inst_bmnet_tl_store_bmkernel& from);

  inline Inst_bmnet_tl_store_bmkernel& operator=(const Inst_bmnet_tl_store_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_store_bmkernel(Inst_bmnet_tl_store_bmkernel&& from) noexcept
    : Inst_bmnet_tl_store_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_store_bmkernel& operator=(Inst_bmnet_tl_store_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_store_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_store_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_store_bmkernel*>(
               &_Inst_bmnet_tl_store_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(Inst_bmnet_tl_store_bmkernel* other);
  friend void swap(Inst_bmnet_tl_store_bmkernel& a, Inst_bmnet_tl_store_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_store_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_store_bmkernel>(NULL);
  }

  Inst_bmnet_tl_store_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_store_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_store_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_store_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_store_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 ga_dst = 6;
  bool has_ga_dst() const;
  void clear_ga_dst();
  static const int kGaDstFieldNumber = 6;
  ::google::protobuf::uint64 ga_dst() const;
  void set_ga_dst(::google::protobuf::uint64 value);

  // optional uint64 la_src = 7;
  bool has_la_src() const;
  void clear_la_src();
  static const int kLaSrcFieldNumber = 7;
  ::google::protobuf::uint64 la_src() const;
  void set_la_src(::google::protobuf::uint64 value);

  // optional int32 Local_N = 8;
  bool has_local_n() const;
  void clear_local_n();
  static const int kLocalNFieldNumber = 8;
  ::google::protobuf::int32 local_n() const;
  void set_local_n(::google::protobuf::int32 value);

  // optional int32 Local_C = 9;
  bool has_local_c() const;
  void clear_local_c();
  static const int kLocalCFieldNumber = 9;
  ::google::protobuf::int32 local_c() const;
  void set_local_c(::google::protobuf::int32 value);

  // optional int32 Local_H = 10;
  bool has_local_h() const;
  void clear_local_h();
  static const int kLocalHFieldNumber = 10;
  ::google::protobuf::int32 local_h() const;
  void set_local_h(::google::protobuf::int32 value);

  // optional int32 Local_W = 11;
  bool has_local_w() const;
  void clear_local_w();
  static const int kLocalWFieldNumber = 11;
  ::google::protobuf::int32 local_w() const;
  void set_local_w(::google::protobuf::int32 value);

  // optional int32 Global_C = 12;
  bool has_global_c() const;
  void clear_global_c();
  static const int kGlobalCFieldNumber = 12;
  ::google::protobuf::int32 global_c() const;
  void set_global_c(::google::protobuf::int32 value);

  // optional int32 Global_H = 13;
  bool has_global_h() const;
  void clear_global_h();
  static const int kGlobalHFieldNumber = 13;
  ::google::protobuf::int32 global_h() const;
  void set_global_h(::google::protobuf::int32 value);

  // optional int32 Global_W = 14;
  bool has_global_w() const;
  void clear_global_w();
  static const int kGlobalWFieldNumber = 14;
  ::google::protobuf::int32 global_w() const;
  void set_global_w(::google::protobuf::int32 value);

  // optional bool DoTranspose = 15;
  bool has_dotranspose() const;
  void clear_dotranspose();
  static const int kDoTransposeFieldNumber = 15;
  bool dotranspose() const;
  void set_dotranspose(bool value);

  // optional bool DoAligned = 16;
  bool has_doaligned() const;
  void clear_doaligned();
  static const int kDoAlignedFieldNumber = 16;
  bool doaligned() const;
  void set_doaligned(bool value);

  // optional bool isNeuron = 17;
  bool has_isneuron() const;
  void clear_isneuron();
  static const int kIsNeuronFieldNumber = 17;
  bool isneuron() const;
  void set_isneuron(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_ga_dst();
  void clear_has_ga_dst();
  void set_has_la_src();
  void clear_has_la_src();
  void set_has_local_n();
  void clear_has_local_n();
  void set_has_local_c();
  void clear_has_local_c();
  void set_has_local_h();
  void clear_has_local_h();
  void set_has_local_w();
  void clear_has_local_w();
  void set_has_global_c();
  void clear_has_global_c();
  void set_has_global_h();
  void clear_has_global_h();
  void set_has_global_w();
  void clear_has_global_w();
  void set_has_dotranspose();
  void clear_has_dotranspose();
  void set_has_doaligned();
  void clear_has_doaligned();
  void set_has_isneuron();
  void clear_has_isneuron();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 ga_dst_;
  ::google::protobuf::uint64 la_src_;
  ::google::protobuf::int32 local_n_;
  ::google::protobuf::int32 local_c_;
  ::google::protobuf::int32 local_h_;
  ::google::protobuf::int32 local_w_;
  ::google::protobuf::int32 global_c_;
  ::google::protobuf::int32 global_h_;
  ::google::protobuf::int32 global_w_;
  bool dotranspose_;
  bool doaligned_;
  bool isneuron_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_relu_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel) */ {
 public:
  Inst_bmnet_tl_relu_forward_bmkernel();
  virtual ~Inst_bmnet_tl_relu_forward_bmkernel();

  Inst_bmnet_tl_relu_forward_bmkernel(const Inst_bmnet_tl_relu_forward_bmkernel& from);

  inline Inst_bmnet_tl_relu_forward_bmkernel& operator=(const Inst_bmnet_tl_relu_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_relu_forward_bmkernel(Inst_bmnet_tl_relu_forward_bmkernel&& from) noexcept
    : Inst_bmnet_tl_relu_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_relu_forward_bmkernel& operator=(Inst_bmnet_tl_relu_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_relu_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_relu_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_relu_forward_bmkernel*>(
               &_Inst_bmnet_tl_relu_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(Inst_bmnet_tl_relu_forward_bmkernel* other);
  friend void swap(Inst_bmnet_tl_relu_forward_bmkernel& a, Inst_bmnet_tl_relu_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_relu_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_relu_forward_bmkernel>(NULL);
  }

  Inst_bmnet_tl_relu_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_relu_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_relu_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_relu_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_relu_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_laddr = 6;
  bool has_input_laddr() const;
  void clear_input_laddr();
  static const int kInputLaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_laddr() const;
  void set_input_laddr(::google::protobuf::uint64 value);

  // optional uint64 output_laddr = 7;
  bool has_output_laddr() const;
  void clear_output_laddr();
  static const int kOutputLaddrFieldNumber = 7;
  ::google::protobuf::uint64 output_laddr() const;
  void set_output_laddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 8;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 8;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 9;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 9;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 10;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 10;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 11;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 11;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_laddr();
  void clear_has_input_laddr();
  void set_has_output_laddr();
  void clear_has_output_laddr();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_laddr_;
  ::google::protobuf::uint64 output_laddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_fc_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel) */ {
 public:
  Inst_bmnet_tl_fc_forward_bmkernel();
  virtual ~Inst_bmnet_tl_fc_forward_bmkernel();

  Inst_bmnet_tl_fc_forward_bmkernel(const Inst_bmnet_tl_fc_forward_bmkernel& from);

  inline Inst_bmnet_tl_fc_forward_bmkernel& operator=(const Inst_bmnet_tl_fc_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_fc_forward_bmkernel(Inst_bmnet_tl_fc_forward_bmkernel&& from) noexcept
    : Inst_bmnet_tl_fc_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_fc_forward_bmkernel& operator=(Inst_bmnet_tl_fc_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_fc_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_fc_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_fc_forward_bmkernel*>(
               &_Inst_bmnet_tl_fc_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(Inst_bmnet_tl_fc_forward_bmkernel* other);
  friend void swap(Inst_bmnet_tl_fc_forward_bmkernel& a, Inst_bmnet_tl_fc_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_fc_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_fc_forward_bmkernel>(NULL);
  }

  Inst_bmnet_tl_fc_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_fc_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_fc_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_fc_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_fc_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 input_data_laddr = 6;
  bool has_input_data_laddr() const;
  void clear_input_data_laddr();
  static const int kInputDataLaddrFieldNumber = 6;
  ::google::protobuf::uint64 input_data_laddr() const;
  void set_input_data_laddr(::google::protobuf::uint64 value);

  // optional uint64 output_data_laddr = 7;
  bool has_output_data_laddr() const;
  void clear_output_data_laddr();
  static const int kOutputDataLaddrFieldNumber = 7;
  ::google::protobuf::uint64 output_data_laddr() const;
  void set_output_data_laddr(::google::protobuf::uint64 value);

  // optional uint64 weight_data_laddr = 8;
  bool has_weight_data_laddr() const;
  void clear_weight_data_laddr();
  static const int kWeightDataLaddrFieldNumber = 8;
  ::google::protobuf::uint64 weight_data_laddr() const;
  void set_weight_data_laddr(::google::protobuf::uint64 value);

  // optional uint64 bias_data_laddr = 9;
  bool has_bias_data_laddr() const;
  void clear_bias_data_laddr();
  static const int kBiasDataLaddrFieldNumber = 9;
  ::google::protobuf::uint64 bias_data_laddr() const;
  void set_bias_data_laddr(::google::protobuf::uint64 value);

  // optional int32 in_row = 10;
  bool has_in_row() const;
  void clear_in_row();
  static const int kInRowFieldNumber = 10;
  ::google::protobuf::int32 in_row() const;
  void set_in_row(::google::protobuf::int32 value);

  // optional int32 in_col = 11;
  bool has_in_col() const;
  void clear_in_col();
  static const int kInColFieldNumber = 11;
  ::google::protobuf::int32 in_col() const;
  void set_in_col(::google::protobuf::int32 value);

  // optional int32 out_col = 12;
  bool has_out_col() const;
  void clear_out_col();
  static const int kOutColFieldNumber = 12;
  ::google::protobuf::int32 out_col() const;
  void set_out_col(::google::protobuf::int32 value);

  // optional bool do_bias = 13;
  bool has_do_bias() const;
  void clear_do_bias();
  static const int kDoBiasFieldNumber = 13;
  bool do_bias() const;
  void set_do_bias(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_input_data_laddr();
  void clear_has_input_data_laddr();
  void set_has_output_data_laddr();
  void clear_has_output_data_laddr();
  void set_has_weight_data_laddr();
  void clear_has_weight_data_laddr();
  void set_has_bias_data_laddr();
  void clear_has_bias_data_laddr();
  void set_has_in_row();
  void clear_has_in_row();
  void set_has_in_col();
  void clear_has_in_col();
  void set_has_out_col();
  void clear_has_out_col();
  void set_has_do_bias();
  void clear_has_do_bias();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 input_data_laddr_;
  ::google::protobuf::uint64 output_data_laddr_;
  ::google::protobuf::uint64 weight_data_laddr_;
  ::google::protobuf::uint64 bias_data_laddr_;
  ::google::protobuf::int32 in_row_;
  ::google::protobuf::int32 in_col_;
  ::google::protobuf::int32 out_col_;
  bool do_bias_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_deconv_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel) */ {
 public:
  Inst_bmnet_tl_deconv_forward_bmkernel();
  virtual ~Inst_bmnet_tl_deconv_forward_bmkernel();

  Inst_bmnet_tl_deconv_forward_bmkernel(const Inst_bmnet_tl_deconv_forward_bmkernel& from);

  inline Inst_bmnet_tl_deconv_forward_bmkernel& operator=(const Inst_bmnet_tl_deconv_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_deconv_forward_bmkernel(Inst_bmnet_tl_deconv_forward_bmkernel&& from) noexcept
    : Inst_bmnet_tl_deconv_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_deconv_forward_bmkernel& operator=(Inst_bmnet_tl_deconv_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_deconv_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_deconv_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_deconv_forward_bmkernel*>(
               &_Inst_bmnet_tl_deconv_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(Inst_bmnet_tl_deconv_forward_bmkernel* other);
  friend void swap(Inst_bmnet_tl_deconv_forward_bmkernel& a, Inst_bmnet_tl_deconv_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_deconv_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_deconv_forward_bmkernel>(NULL);
  }

  Inst_bmnet_tl_deconv_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_deconv_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_deconv_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_deconv_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_deconv_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated uint32 group_weight = 10;
  int group_weight_size() const;
  void clear_group_weight();
  static const int kGroupWeightFieldNumber = 10;
  ::google::protobuf::uint32 group_weight(int index) const;
  void set_group_weight(int index, ::google::protobuf::uint32 value);
  void add_group_weight(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      group_weight() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_group_weight();

  // repeated uint32 group_bias = 11;
  int group_bias_size() const;
  void clear_group_bias();
  static const int kGroupBiasFieldNumber = 11;
  ::google::protobuf::uint32 group_bias(int index) const;
  void set_group_bias(int index, ::google::protobuf::uint32 value);
  void add_group_bias(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      group_bias() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_group_bias();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 la_ifmap = 6;
  bool has_la_ifmap() const;
  void clear_la_ifmap();
  static const int kLaIfmapFieldNumber = 6;
  ::google::protobuf::uint64 la_ifmap() const;
  void set_la_ifmap(::google::protobuf::uint64 value);

  // optional uint64 la_ofmap = 7;
  bool has_la_ofmap() const;
  void clear_la_ofmap();
  static const int kLaOfmapFieldNumber = 7;
  ::google::protobuf::uint64 la_ofmap() const;
  void set_la_ofmap(::google::protobuf::uint64 value);

  // optional uint64 la_weight = 8;
  bool has_la_weight() const;
  void clear_la_weight();
  static const int kLaWeightFieldNumber = 8;
  ::google::protobuf::uint64 la_weight() const;
  void set_la_weight(::google::protobuf::uint64 value);

  // optional uint64 la_bias = 9;
  bool has_la_bias() const;
  void clear_la_bias();
  static const int kLaBiasFieldNumber = 9;
  ::google::protobuf::uint64 la_bias() const;
  void set_la_bias(::google::protobuf::uint64 value);

  // optional int32 input_n = 12;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 12;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 13;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 13;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 14;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 14;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 15;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 15;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 group = 16;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 16;
  ::google::protobuf::int32 group() const;
  void set_group(::google::protobuf::int32 value);

  // optional int32 output_c = 17;
  bool has_output_c() const;
  void clear_output_c();
  static const int kOutputCFieldNumber = 17;
  ::google::protobuf::int32 output_c() const;
  void set_output_c(::google::protobuf::int32 value);

  // optional int32 output_h = 18;
  bool has_output_h() const;
  void clear_output_h();
  static const int kOutputHFieldNumber = 18;
  ::google::protobuf::int32 output_h() const;
  void set_output_h(::google::protobuf::int32 value);

  // optional int32 output_w = 19;
  bool has_output_w() const;
  void clear_output_w();
  static const int kOutputWFieldNumber = 19;
  ::google::protobuf::int32 output_w() const;
  void set_output_w(::google::protobuf::int32 value);

  // optional uint32 kh = 20;
  bool has_kh() const;
  void clear_kh();
  static const int kKhFieldNumber = 20;
  ::google::protobuf::uint32 kh() const;
  void set_kh(::google::protobuf::uint32 value);

  // optional uint32 kw = 21;
  bool has_kw() const;
  void clear_kw();
  static const int kKwFieldNumber = 21;
  ::google::protobuf::uint32 kw() const;
  void set_kw(::google::protobuf::uint32 value);

  // optional uint32 dh = 22;
  bool has_dh() const;
  void clear_dh();
  static const int kDhFieldNumber = 22;
  ::google::protobuf::uint32 dh() const;
  void set_dh(::google::protobuf::uint32 value);

  // optional uint32 dw = 23;
  bool has_dw() const;
  void clear_dw();
  static const int kDwFieldNumber = 23;
  ::google::protobuf::uint32 dw() const;
  void set_dw(::google::protobuf::uint32 value);

  // optional uint32 pad_h_top = 24;
  bool has_pad_h_top() const;
  void clear_pad_h_top();
  static const int kPadHTopFieldNumber = 24;
  ::google::protobuf::uint32 pad_h_top() const;
  void set_pad_h_top(::google::protobuf::uint32 value);

  // optional uint32 pad_h_bottom = 25;
  bool has_pad_h_bottom() const;
  void clear_pad_h_bottom();
  static const int kPadHBottomFieldNumber = 25;
  ::google::protobuf::uint32 pad_h_bottom() const;
  void set_pad_h_bottom(::google::protobuf::uint32 value);

  // optional uint32 pad_w_left = 26;
  bool has_pad_w_left() const;
  void clear_pad_w_left();
  static const int kPadWLeftFieldNumber = 26;
  ::google::protobuf::uint32 pad_w_left() const;
  void set_pad_w_left(::google::protobuf::uint32 value);

  // optional uint32 pad_w_right = 27;
  bool has_pad_w_right() const;
  void clear_pad_w_right();
  static const int kPadWRightFieldNumber = 27;
  ::google::protobuf::uint32 pad_w_right() const;
  void set_pad_w_right(::google::protobuf::uint32 value);

  // optional uint32 ins_h = 28;
  bool has_ins_h() const;
  void clear_ins_h();
  static const int kInsHFieldNumber = 28;
  ::google::protobuf::uint32 ins_h() const;
  void set_ins_h(::google::protobuf::uint32 value);

  // optional uint32 ins_last_h = 29;
  bool has_ins_last_h() const;
  void clear_ins_last_h();
  static const int kInsLastHFieldNumber = 29;
  ::google::protobuf::uint32 ins_last_h() const;
  void set_ins_last_h(::google::protobuf::uint32 value);

  // optional uint32 ins_w = 30;
  bool has_ins_w() const;
  void clear_ins_w();
  static const int kInsWFieldNumber = 30;
  ::google::protobuf::uint32 ins_w() const;
  void set_ins_w(::google::protobuf::uint32 value);

  // optional uint32 ins_w_last = 31;
  bool has_ins_w_last() const;
  void clear_ins_w_last();
  static const int kInsWLastFieldNumber = 31;
  ::google::protobuf::uint32 ins_w_last() const;
  void set_ins_w_last(::google::protobuf::uint32 value);

  // optional uint32 result_add = 32;
  bool has_result_add() const;
  void clear_result_add();
  static const int kResultAddFieldNumber = 32;
  ::google::protobuf::uint32 result_add() const;
  void set_result_add(::google::protobuf::uint32 value);

  // optional int32 rshift = 33;
  bool has_rshift() const;
  void clear_rshift();
  static const int kRshiftFieldNumber = 33;
  ::google::protobuf::int32 rshift() const;
  void set_rshift(::google::protobuf::int32 value);

  // optional bool do_bias = 34;
  bool has_do_bias() const;
  void clear_do_bias();
  static const int kDoBiasFieldNumber = 34;
  bool do_bias() const;
  void set_do_bias(bool value);

  // optional bool use_winograd = 35;
  bool has_use_winograd() const;
  void clear_use_winograd();
  static const int kUseWinogradFieldNumber = 35;
  bool use_winograd() const;
  void set_use_winograd(bool value);

  // optional bool do_relu = 36;
  bool has_do_relu() const;
  void clear_do_relu();
  static const int kDoReluFieldNumber = 36;
  bool do_relu() const;
  void set_do_relu(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_la_ifmap();
  void clear_has_la_ifmap();
  void set_has_la_ofmap();
  void clear_has_la_ofmap();
  void set_has_la_weight();
  void clear_has_la_weight();
  void set_has_la_bias();
  void clear_has_la_bias();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_group();
  void clear_has_group();
  void set_has_output_c();
  void clear_has_output_c();
  void set_has_output_h();
  void clear_has_output_h();
  void set_has_output_w();
  void clear_has_output_w();
  void set_has_kh();
  void clear_has_kh();
  void set_has_kw();
  void clear_has_kw();
  void set_has_dh();
  void clear_has_dh();
  void set_has_dw();
  void clear_has_dw();
  void set_has_pad_h_top();
  void clear_has_pad_h_top();
  void set_has_pad_h_bottom();
  void clear_has_pad_h_bottom();
  void set_has_pad_w_left();
  void clear_has_pad_w_left();
  void set_has_pad_w_right();
  void clear_has_pad_w_right();
  void set_has_ins_h();
  void clear_has_ins_h();
  void set_has_ins_last_h();
  void clear_has_ins_last_h();
  void set_has_ins_w();
  void clear_has_ins_w();
  void set_has_ins_w_last();
  void clear_has_ins_w_last();
  void set_has_result_add();
  void clear_has_result_add();
  void set_has_rshift();
  void clear_has_rshift();
  void set_has_do_bias();
  void clear_has_do_bias();
  void set_has_use_winograd();
  void clear_has_use_winograd();
  void set_has_do_relu();
  void clear_has_do_relu();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > group_weight_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > group_bias_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 la_ifmap_;
  ::google::protobuf::uint64 la_ofmap_;
  ::google::protobuf::uint64 la_weight_;
  ::google::protobuf::uint64 la_bias_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 output_c_;
  ::google::protobuf::int32 output_h_;
  ::google::protobuf::int32 output_w_;
  ::google::protobuf::uint32 kh_;
  ::google::protobuf::uint32 kw_;
  ::google::protobuf::uint32 dh_;
  ::google::protobuf::uint32 dw_;
  ::google::protobuf::uint32 pad_h_top_;
  ::google::protobuf::uint32 pad_h_bottom_;
  ::google::protobuf::uint32 pad_w_left_;
  ::google::protobuf::uint32 pad_w_right_;
  ::google::protobuf::uint32 ins_h_;
  ::google::protobuf::uint32 ins_last_h_;
  ::google::protobuf::uint32 ins_w_;
  ::google::protobuf::uint32 ins_w_last_;
  ::google::protobuf::uint32 result_add_;
  ::google::protobuf::int32 rshift_;
  bool do_bias_;
  bool use_winograd_;
  bool do_relu_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst_bmnet_tl_quantization_forward_bmkernel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel) */ {
 public:
  Inst_bmnet_tl_quantization_forward_bmkernel();
  virtual ~Inst_bmnet_tl_quantization_forward_bmkernel();

  Inst_bmnet_tl_quantization_forward_bmkernel(const Inst_bmnet_tl_quantization_forward_bmkernel& from);

  inline Inst_bmnet_tl_quantization_forward_bmkernel& operator=(const Inst_bmnet_tl_quantization_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst_bmnet_tl_quantization_forward_bmkernel(Inst_bmnet_tl_quantization_forward_bmkernel&& from) noexcept
    : Inst_bmnet_tl_quantization_forward_bmkernel() {
    *this = ::std::move(from);
  }

  inline Inst_bmnet_tl_quantization_forward_bmkernel& operator=(Inst_bmnet_tl_quantization_forward_bmkernel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tl_quantization_forward_bmkernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst_bmnet_tl_quantization_forward_bmkernel* internal_default_instance() {
    return reinterpret_cast<const Inst_bmnet_tl_quantization_forward_bmkernel*>(
               &_Inst_bmnet_tl_quantization_forward_bmkernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(Inst_bmnet_tl_quantization_forward_bmkernel* other);
  friend void swap(Inst_bmnet_tl_quantization_forward_bmkernel& a, Inst_bmnet_tl_quantization_forward_bmkernel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst_bmnet_tl_quantization_forward_bmkernel* New() const final {
    return CreateMaybeMessage<Inst_bmnet_tl_quantization_forward_bmkernel>(NULL);
  }

  Inst_bmnet_tl_quantization_forward_bmkernel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst_bmnet_tl_quantization_forward_bmkernel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst_bmnet_tl_quantization_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tl_quantization_forward_bmkernel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_bmnet_tl_quantization_forward_bmkernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 depends = 4;
  int depends_size() const;
  void clear_depends();
  static const int kDependsFieldNumber = 4;
  ::google::protobuf::uint32 depends(int index) const;
  void set_depends(int index, ::google::protobuf::uint32 value);
  void add_depends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // repeated int32 right_shift_width = 12;
  int right_shift_width_size() const;
  void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 12;
  ::google::protobuf::int32 right_shift_width(int index) const;
  void set_right_shift_width(int index, ::google::protobuf::int32 value);
  void add_right_shift_width(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      right_shift_width() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_right_shift_width();

  // repeated int32 threshold_x_quantized = 14;
  int threshold_x_quantized_size() const;
  void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 14;
  ::google::protobuf::int32 threshold_x_quantized(int index) const;
  void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  void add_threshold_x_quantized(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2;
  bool has_inst_id() const;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  ::google::protobuf::uint32 inst_id() const;
  void set_inst_id(::google::protobuf::uint32 value);

  // optional uint32 layer_id = 3;
  bool has_layer_id() const;
  void clear_layer_id();
  static const int kLayerIdFieldNumber = 3;
  ::google::protobuf::uint32 layer_id() const;
  void set_layer_id(::google::protobuf::uint32 value);

  // optional uint32 depends_len = 5;
  bool has_depends_len() const;
  void clear_depends_len();
  static const int kDependsLenFieldNumber = 5;
  ::google::protobuf::uint32 depends_len() const;
  void set_depends_len(::google::protobuf::uint32 value);

  // optional uint64 la_input = 6;
  bool has_la_input() const;
  void clear_la_input();
  static const int kLaInputFieldNumber = 6;
  ::google::protobuf::uint64 la_input() const;
  void set_la_input(::google::protobuf::uint64 value);

  // optional uint64 la_output = 7;
  bool has_la_output() const;
  void clear_la_output();
  static const int kLaOutputFieldNumber = 7;
  ::google::protobuf::uint64 la_output() const;
  void set_la_output(::google::protobuf::uint64 value);

  // optional int32 input_n = 8;
  bool has_input_n() const;
  void clear_input_n();
  static const int kInputNFieldNumber = 8;
  ::google::protobuf::int32 input_n() const;
  void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 9;
  bool has_input_c() const;
  void clear_input_c();
  static const int kInputCFieldNumber = 9;
  ::google::protobuf::int32 input_c() const;
  void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 10;
  bool has_input_h() const;
  void clear_input_h();
  static const int kInputHFieldNumber = 10;
  ::google::protobuf::int32 input_h() const;
  void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 11;
  bool has_input_w() const;
  void clear_input_w();
  static const int kInputWFieldNumber = 11;
  ::google::protobuf::int32 input_w() const;
  void set_input_w(::google::protobuf::int32 value);

  // optional int32 op = 13;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 13;
  ::google::protobuf::int32 op() const;
  void set_op(::google::protobuf::int32 value);

  // optional bool do_relu = 15;
  bool has_do_relu() const;
  void clear_do_relu();
  static const int kDoReluFieldNumber = 15;
  bool do_relu() const;
  void set_do_relu(bool value);

  // optional float relu_slope = 16;
  bool has_relu_slope() const;
  void clear_relu_slope();
  static const int kReluSlopeFieldNumber = 16;
  float relu_slope() const;
  void set_relu_slope(float value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_inst_id();
  void clear_has_inst_id();
  void set_has_layer_id();
  void clear_has_layer_id();
  void set_has_depends_len();
  void clear_has_depends_len();
  void set_has_la_input();
  void clear_has_la_input();
  void set_has_la_output();
  void clear_has_la_output();
  void set_has_input_n();
  void clear_has_input_n();
  void set_has_input_c();
  void clear_has_input_c();
  void set_has_input_h();
  void clear_has_input_h();
  void set_has_input_w();
  void clear_has_input_w();
  void set_has_op();
  void clear_has_op();
  void set_has_do_relu();
  void clear_has_do_relu();
  void set_has_relu_slope();
  void clear_has_relu_slope();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > right_shift_width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::uint32 layer_id_;
  ::google::protobuf::uint32 depends_len_;
  ::google::protobuf::uint64 la_input_;
  ::google::protobuf::uint64 la_output_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 op_;
  bool do_relu_;
  float relu_slope_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bmnet.bm1880.Inst) */ {
 public:
  Inst();
  virtual ~Inst();

  Inst(const Inst& from);

  inline Inst& operator=(const Inst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inst(Inst&& from) noexcept
    : Inst() {
    *this = ::std::move(from);
  }

  inline Inst& operator=(Inst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inst* internal_default_instance() {
    return reinterpret_cast<const Inst*>(
               &_Inst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(Inst* other);
  friend void swap(Inst& a, Inst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inst* New() const final {
    return CreateMaybeMessage<Inst>(NULL);
  }

  Inst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inst& from);
  void MergeFrom(const Inst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Inst_bmnet_pooling_fixed_forward_bmkernel bmnet_pooling_fixed_forward_bmkernel;
  typedef Inst_bmnet_conv_fixed_forward_bmkernel bmnet_conv_fixed_forward_bmkernel;
  typedef Inst_bmnet_conv_parallel_fixed_forward_bmkernel bmnet_conv_parallel_fixed_forward_bmkernel;
  typedef Inst_bmnet_fc_fixed_forward_bmkernel bmnet_fc_fixed_forward_bmkernel;
  typedef Inst_bmnet_relu_fixed_forward_bmkernel bmnet_relu_fixed_forward_bmkernel;
  typedef Inst_bmnet_clip_fixed_forward_bmkernel bmnet_clip_fixed_forward_bmkernel;
  typedef Inst_bmnet_leakyrelu_fixed_forward_bmkernel bmnet_leakyrelu_fixed_forward_bmkernel;
  typedef Inst_bmnet_prelu_fixed_forward_bmkernel bmnet_prelu_fixed_forward_bmkernel;
  typedef Inst_bmnet_sigmoid_fixed_forward_bmkernel bmnet_sigmoid_fixed_forward_bmkernel;
  typedef Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel bmnet_batchnorm_fixed_forward_inference_bmkernel;
  typedef Inst_bmnet_scale_fixed_forward_bmkernel bmnet_scale_fixed_forward_bmkernel;
  typedef Inst_bmnet_reshape_fixed_forward_bmkernel bmnet_reshape_fixed_forward_bmkernel;
  typedef Inst_bmnet_split_fixed_forward_bmkernel bmnet_split_fixed_forward_bmkernel;
  typedef Inst_bmnet_concat_fixed_forward_bmkernel bmnet_concat_fixed_forward_bmkernel;
  typedef Inst_bmnet_eltwise_fixed_forward_bmkernel bmnet_eltwise_fixed_forward_bmkernel;
  typedef Inst_bmnet_permute_fixed_forward_bmkernel bmnet_permute_fixed_forward_bmkernel;
  typedef Inst_bmnet_priorbox_fixed_forward_bmkernel bmnet_priorbox_fixed_forward_bmkernel;
  typedef Inst_bmnet_lrn_fixed_forward_bmkernel bmnet_lrn_fixed_forward_bmkernel;
  typedef Inst_bmnet_upsample_fixed_bmkernel bmnet_upsample_fixed_bmkernel;
  typedef Inst_bmnet_normalize_fixed_forward_bmkernel bmnet_normalize_fixed_forward_bmkernel;
  typedef Inst_bmnet_deconv_fixed_forward_bmkernel bmnet_deconv_fixed_forward_bmkernel;
  typedef Inst_bmnet_crop_fixed_forward_bmkernel bmnet_crop_fixed_forward_bmkernel;
  typedef Inst_bmnet_arithmetic_fixed_forward_bmkernel bmnet_arithmetic_fixed_forward_bmkernel;
  typedef Inst_bmnet_joinone_fixed_forward_bmkernel bmnet_joinone_fixed_forward_bmkernel;
  typedef Inst_bmnet_quantization_fixed_forward_bmkernel bmnet_quantization_fixed_forward_bmkernel;
  typedef Inst_bmnet_slice_fixed_forward_bmkernel bmnet_slice_fixed_forward_bmkernel;
  typedef Inst_bmnet_tl_conv_forward_bmkernel bmnet_tl_conv_forward_bmkernel;
  typedef Inst_bmnet_tl_activation_forward_bmkernel bmnet_tl_activation_forward_bmkernel;
  typedef Inst_bmnet_tl_scale_forward_bmkernel bmnet_tl_scale_forward_bmkernel;
  typedef Inst_bmnet_tl_batchnorm_forward_bmkernel bmnet_tl_batchnorm_forward_bmkernel;
  typedef Inst_bmnet_tl_eltwise_forward_bmkernel bmnet_tl_eltwise_forward_bmkernel;
  typedef Inst_bmnet_tl_lrn_forward_bmkernel bmnet_tl_lrn_forward_bmkernel;
  typedef Inst_bmnet_tl_pooling_forward_bmkernel bmnet_tl_pooling_forward_bmkernel;
  typedef Inst_bmnet_tl_upsample_forward_bmkernel bmnet_tl_upsample_forward_bmkernel;
  typedef Inst_bmnet_tl_load_stride_bmkernel bmnet_tl_load_stride_bmkernel;
  typedef Inst_bmnet_tl_load_bmkernel bmnet_tl_load_bmkernel;
  typedef Inst_bmnet_tl_store_stride_bmkernel bmnet_tl_store_stride_bmkernel;
  typedef Inst_bmnet_tl_store_bmkernel bmnet_tl_store_bmkernel;
  typedef Inst_bmnet_tl_relu_forward_bmkernel bmnet_tl_relu_forward_bmkernel;
  typedef Inst_bmnet_tl_fc_forward_bmkernel bmnet_tl_fc_forward_bmkernel;
  typedef Inst_bmnet_tl_deconv_forward_bmkernel bmnet_tl_deconv_forward_bmkernel;
  typedef Inst_bmnet_tl_quantization_forward_bmkernel bmnet_tl_quantization_forward_bmkernel;

  typedef Inst_ActivationMethod ActivationMethod;
  static const ActivationMethod RELU =
    Inst_ActivationMethod_RELU;
  static const ActivationMethod SIGMOID =
    Inst_ActivationMethod_SIGMOID;
  static const ActivationMethod TANH =
    Inst_ActivationMethod_TANH;
  static const ActivationMethod ELU =
    Inst_ActivationMethod_ELU;
  static const ActivationMethod PRELU =
    Inst_ActivationMethod_PRELU;
  static inline bool ActivationMethod_IsValid(int value) {
    return Inst_ActivationMethod_IsValid(value);
  }
  static const ActivationMethod ActivationMethod_MIN =
    Inst_ActivationMethod_ActivationMethod_MIN;
  static const ActivationMethod ActivationMethod_MAX =
    Inst_ActivationMethod_ActivationMethod_MAX;
  static const int ActivationMethod_ARRAYSIZE =
    Inst_ActivationMethod_ActivationMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActivationMethod_descriptor() {
    return Inst_ActivationMethod_descriptor();
  }
  static inline const ::std::string& ActivationMethod_Name(ActivationMethod value) {
    return Inst_ActivationMethod_Name(value);
  }
  static inline bool ActivationMethod_Parse(const ::std::string& name,
      ActivationMethod* value) {
    return Inst_ActivationMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel pooling = 4;
  bool has_pooling() const;
  void clear_pooling();
  static const int kPoolingFieldNumber = 4;
  private:
  const ::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel& _internal_pooling() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel& pooling() const;
  ::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel* release_pooling();
  ::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel* mutable_pooling();
  void set_allocated_pooling(::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel* pooling);

  // optional .bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel conv = 5;
  bool has_conv() const;
  void clear_conv();
  static const int kConvFieldNumber = 5;
  private:
  const ::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel& _internal_conv() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel& conv() const;
  ::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel* release_conv();
  ::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel* mutable_conv();
  void set_allocated_conv(::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel* conv);

  // optional .bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel conv_p = 6;
  bool has_conv_p() const;
  void clear_conv_p();
  static const int kConvPFieldNumber = 6;
  private:
  const ::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel& _internal_conv_p() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel& conv_p() const;
  ::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel* release_conv_p();
  ::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel* mutable_conv_p();
  void set_allocated_conv_p(::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel* conv_p);

  // optional .bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel fc = 7;
  bool has_fc() const;
  void clear_fc();
  static const int kFcFieldNumber = 7;
  private:
  const ::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel& _internal_fc() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel& fc() const;
  ::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel* release_fc();
  ::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel* mutable_fc();
  void set_allocated_fc(::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel* fc);

  // optional .bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel relu = 8;
  bool has_relu() const;
  void clear_relu();
  static const int kReluFieldNumber = 8;
  private:
  const ::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel& _internal_relu() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel& relu() const;
  ::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel* release_relu();
  ::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel* mutable_relu();
  void set_allocated_relu(::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel* relu);

  // optional .bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel clip = 9;
  bool has_clip() const;
  void clear_clip();
  static const int kClipFieldNumber = 9;
  private:
  const ::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel& _internal_clip() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel& clip() const;
  ::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel* release_clip();
  ::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel* mutable_clip();
  void set_allocated_clip(::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel* clip);

  // optional .bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel leakyrelu = 10;
  bool has_leakyrelu() const;
  void clear_leakyrelu();
  static const int kLeakyreluFieldNumber = 10;
  private:
  const ::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel& _internal_leakyrelu() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel& leakyrelu() const;
  ::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel* release_leakyrelu();
  ::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel* mutable_leakyrelu();
  void set_allocated_leakyrelu(::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel* leakyrelu);

  // optional .bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel prelu = 11;
  bool has_prelu() const;
  void clear_prelu();
  static const int kPreluFieldNumber = 11;
  private:
  const ::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel& _internal_prelu() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel& prelu() const;
  ::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel* release_prelu();
  ::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel* mutable_prelu();
  void set_allocated_prelu(::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel* prelu);

  // optional .bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel sigmoid = 12;
  bool has_sigmoid() const;
  void clear_sigmoid();
  static const int kSigmoidFieldNumber = 12;
  private:
  const ::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel& _internal_sigmoid() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel& sigmoid() const;
  ::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel* release_sigmoid();
  ::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel* mutable_sigmoid();
  void set_allocated_sigmoid(::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel* sigmoid);

  // optional .bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel batchnorm = 13;
  bool has_batchnorm() const;
  void clear_batchnorm();
  static const int kBatchnormFieldNumber = 13;
  private:
  const ::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel& _internal_batchnorm() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel& batchnorm() const;
  ::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* release_batchnorm();
  ::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* mutable_batchnorm();
  void set_allocated_batchnorm(::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* batchnorm);

  // optional .bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel scale = 14;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 14;
  private:
  const ::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel& _internal_scale() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel& scale() const;
  ::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel* release_scale();
  ::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel* mutable_scale();
  void set_allocated_scale(::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel* scale);

  // optional .bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel reshape = 15;
  bool has_reshape() const;
  void clear_reshape();
  static const int kReshapeFieldNumber = 15;
  private:
  const ::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel& _internal_reshape() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel& reshape() const;
  ::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel* release_reshape();
  ::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel* mutable_reshape();
  void set_allocated_reshape(::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel* reshape);

  // optional .bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel split = 16;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 16;
  private:
  const ::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel& _internal_split() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel& split() const;
  ::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel* release_split();
  ::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel* mutable_split();
  void set_allocated_split(::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel* split);

  // optional .bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel concat = 17;
  bool has_concat() const;
  void clear_concat();
  static const int kConcatFieldNumber = 17;
  private:
  const ::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel& _internal_concat() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel& concat() const;
  ::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel* release_concat();
  ::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel* mutable_concat();
  void set_allocated_concat(::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel* concat);

  // optional .bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel eltwise = 18;
  bool has_eltwise() const;
  void clear_eltwise();
  static const int kEltwiseFieldNumber = 18;
  private:
  const ::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel& _internal_eltwise() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel& eltwise() const;
  ::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel* release_eltwise();
  ::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel* mutable_eltwise();
  void set_allocated_eltwise(::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel* eltwise);

  // optional .bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel permute = 19;
  bool has_permute() const;
  void clear_permute();
  static const int kPermuteFieldNumber = 19;
  private:
  const ::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel& _internal_permute() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel& permute() const;
  ::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel* release_permute();
  ::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel* mutable_permute();
  void set_allocated_permute(::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel* permute);

  // optional .bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel priorbox = 20;
  bool has_priorbox() const;
  void clear_priorbox();
  static const int kPriorboxFieldNumber = 20;
  private:
  const ::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel& _internal_priorbox() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel& priorbox() const;
  ::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel* release_priorbox();
  ::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel* mutable_priorbox();
  void set_allocated_priorbox(::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel* priorbox);

  // optional .bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel lrn = 21;
  bool has_lrn() const;
  void clear_lrn();
  static const int kLrnFieldNumber = 21;
  private:
  const ::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel& _internal_lrn() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel& lrn() const;
  ::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel* release_lrn();
  ::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel* mutable_lrn();
  void set_allocated_lrn(::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel* lrn);

  // optional .bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel upsample = 22;
  bool has_upsample() const;
  void clear_upsample();
  static const int kUpsampleFieldNumber = 22;
  private:
  const ::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel& _internal_upsample() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel& upsample() const;
  ::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel* release_upsample();
  ::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel* mutable_upsample();
  void set_allocated_upsample(::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel* upsample);

  // optional .bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel normalize = 23;
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 23;
  private:
  const ::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel& _internal_normalize() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel& normalize() const;
  ::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel* release_normalize();
  ::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel* mutable_normalize();
  void set_allocated_normalize(::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel* normalize);

  // optional .bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel deconv = 24;
  bool has_deconv() const;
  void clear_deconv();
  static const int kDeconvFieldNumber = 24;
  private:
  const ::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel& _internal_deconv() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel& deconv() const;
  ::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel* release_deconv();
  ::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel* mutable_deconv();
  void set_allocated_deconv(::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel* deconv);

  // optional .bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel crop = 25;
  bool has_crop() const;
  void clear_crop();
  static const int kCropFieldNumber = 25;
  private:
  const ::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel& _internal_crop() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel& crop() const;
  ::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel* release_crop();
  ::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel* mutable_crop();
  void set_allocated_crop(::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel* crop);

  // optional .bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel arithmetic = 26;
  bool has_arithmetic() const;
  void clear_arithmetic();
  static const int kArithmeticFieldNumber = 26;
  private:
  const ::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel& _internal_arithmetic() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel& arithmetic() const;
  ::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel* release_arithmetic();
  ::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel* mutable_arithmetic();
  void set_allocated_arithmetic(::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel* arithmetic);

  // optional .bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel join = 27;
  bool has_join() const;
  void clear_join();
  static const int kJoinFieldNumber = 27;
  private:
  const ::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel& _internal_join() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel& join() const;
  ::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel* release_join();
  ::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel* mutable_join();
  void set_allocated_join(::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel* join);

  // optional .bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel quantization = 28;
  bool has_quantization() const;
  void clear_quantization();
  static const int kQuantizationFieldNumber = 28;
  private:
  const ::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel& _internal_quantization() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel& quantization() const;
  ::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel* release_quantization();
  ::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel* mutable_quantization();
  void set_allocated_quantization(::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel* quantization);

  // optional .bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel slice = 29;
  bool has_slice() const;
  void clear_slice();
  static const int kSliceFieldNumber = 29;
  private:
  const ::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel& _internal_slice() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel& slice() const;
  ::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel* release_slice();
  ::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel* mutable_slice();
  void set_allocated_slice(::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel* slice);

  // optional .bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel bm_tl_conv = 30;
  bool has_bm_tl_conv() const;
  void clear_bm_tl_conv();
  static const int kBmTlConvFieldNumber = 30;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel& _internal_bm_tl_conv() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel& bm_tl_conv() const;
  ::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel* release_bm_tl_conv();
  ::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel* mutable_bm_tl_conv();
  void set_allocated_bm_tl_conv(::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel* bm_tl_conv);

  // optional .bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel tl_activation = 31;
  bool has_tl_activation() const;
  void clear_tl_activation();
  static const int kTlActivationFieldNumber = 31;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel& _internal_tl_activation() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel& tl_activation() const;
  ::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel* release_tl_activation();
  ::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel* mutable_tl_activation();
  void set_allocated_tl_activation(::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel* tl_activation);

  // optional .bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel tl_csale = 32;
  bool has_tl_csale() const;
  void clear_tl_csale();
  static const int kTlCsaleFieldNumber = 32;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel& _internal_tl_csale() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel& tl_csale() const;
  ::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel* release_tl_csale();
  ::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel* mutable_tl_csale();
  void set_allocated_tl_csale(::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel* tl_csale);

  // optional .bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel tl_bn = 33;
  bool has_tl_bn() const;
  void clear_tl_bn();
  static const int kTlBnFieldNumber = 33;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel& _internal_tl_bn() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel& tl_bn() const;
  ::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel* release_tl_bn();
  ::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel* mutable_tl_bn();
  void set_allocated_tl_bn(::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel* tl_bn);

  // optional .bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel tl_eltwise = 34;
  bool has_tl_eltwise() const;
  void clear_tl_eltwise();
  static const int kTlEltwiseFieldNumber = 34;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel& _internal_tl_eltwise() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel& tl_eltwise() const;
  ::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel* release_tl_eltwise();
  ::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel* mutable_tl_eltwise();
  void set_allocated_tl_eltwise(::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel* tl_eltwise);

  // optional .bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel tl_lrn = 35;
  bool has_tl_lrn() const;
  void clear_tl_lrn();
  static const int kTlLrnFieldNumber = 35;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel& _internal_tl_lrn() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel& tl_lrn() const;
  ::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel* release_tl_lrn();
  ::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel* mutable_tl_lrn();
  void set_allocated_tl_lrn(::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel* tl_lrn);

  // optional .bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel tl_pool = 36;
  bool has_tl_pool() const;
  void clear_tl_pool();
  static const int kTlPoolFieldNumber = 36;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel& _internal_tl_pool() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel& tl_pool() const;
  ::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel* release_tl_pool();
  ::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel* mutable_tl_pool();
  void set_allocated_tl_pool(::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel* tl_pool);

  // optional .bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel tl_upsample = 37;
  bool has_tl_upsample() const;
  void clear_tl_upsample();
  static const int kTlUpsampleFieldNumber = 37;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel& _internal_tl_upsample() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel& tl_upsample() const;
  ::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel* release_tl_upsample();
  ::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel* mutable_tl_upsample();
  void set_allocated_tl_upsample(::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel* tl_upsample);

  // optional .bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel tl_layer_load_stride = 38;
  bool has_tl_layer_load_stride() const;
  void clear_tl_layer_load_stride();
  static const int kTlLayerLoadStrideFieldNumber = 38;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel& _internal_tl_layer_load_stride() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel& tl_layer_load_stride() const;
  ::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel* release_tl_layer_load_stride();
  ::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel* mutable_tl_layer_load_stride();
  void set_allocated_tl_layer_load_stride(::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel* tl_layer_load_stride);

  // optional .bmnet.bm1880.Inst.bmnet_tl_load_bmkernel tl_layer_load = 39;
  bool has_tl_layer_load() const;
  void clear_tl_layer_load();
  static const int kTlLayerLoadFieldNumber = 39;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel& _internal_tl_layer_load() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel& tl_layer_load() const;
  ::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel* release_tl_layer_load();
  ::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel* mutable_tl_layer_load();
  void set_allocated_tl_layer_load(::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel* tl_layer_load);

  // optional .bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel tl_layer_store_stride = 40;
  bool has_tl_layer_store_stride() const;
  void clear_tl_layer_store_stride();
  static const int kTlLayerStoreStrideFieldNumber = 40;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel& _internal_tl_layer_store_stride() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel& tl_layer_store_stride() const;
  ::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel* release_tl_layer_store_stride();
  ::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel* mutable_tl_layer_store_stride();
  void set_allocated_tl_layer_store_stride(::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel* tl_layer_store_stride);

  // optional .bmnet.bm1880.Inst.bmnet_tl_store_bmkernel tl_layer_store = 41;
  bool has_tl_layer_store() const;
  void clear_tl_layer_store();
  static const int kTlLayerStoreFieldNumber = 41;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel& _internal_tl_layer_store() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel& tl_layer_store() const;
  ::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel* release_tl_layer_store();
  ::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel* mutable_tl_layer_store();
  void set_allocated_tl_layer_store(::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel* tl_layer_store);

  // optional .bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel tl_relu = 42;
  bool has_tl_relu() const;
  void clear_tl_relu();
  static const int kTlReluFieldNumber = 42;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel& _internal_tl_relu() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel& tl_relu() const;
  ::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel* release_tl_relu();
  ::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel* mutable_tl_relu();
  void set_allocated_tl_relu(::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel* tl_relu);

  // optional .bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel tl_fc = 43;
  bool has_tl_fc() const;
  void clear_tl_fc();
  static const int kTlFcFieldNumber = 43;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel& _internal_tl_fc() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel& tl_fc() const;
  ::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel* release_tl_fc();
  ::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel* mutable_tl_fc();
  void set_allocated_tl_fc(::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel* tl_fc);

  // optional .bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel bm_tl_deconv = 44;
  bool has_bm_tl_deconv() const;
  void clear_bm_tl_deconv();
  static const int kBmTlDeconvFieldNumber = 44;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel& _internal_bm_tl_deconv() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel& bm_tl_deconv() const;
  ::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel* release_bm_tl_deconv();
  ::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel* mutable_bm_tl_deconv();
  void set_allocated_bm_tl_deconv(::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel* bm_tl_deconv);

  // optional .bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel tl_quantization = 45;
  bool has_tl_quantization() const;
  void clear_tl_quantization();
  static const int kTlQuantizationFieldNumber = 45;
  private:
  const ::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel& _internal_tl_quantization() const;
  public:
  const ::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel& tl_quantization() const;
  ::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel* release_tl_quantization();
  ::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel* mutable_tl_quantization();
  void set_allocated_tl_quantization(::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel* tl_quantization);

  // @@protoc_insertion_point(class_scope:bmnet.bm1880.Inst)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_pooling();
  void clear_has_pooling();
  void set_has_conv();
  void clear_has_conv();
  void set_has_conv_p();
  void clear_has_conv_p();
  void set_has_fc();
  void clear_has_fc();
  void set_has_relu();
  void clear_has_relu();
  void set_has_clip();
  void clear_has_clip();
  void set_has_leakyrelu();
  void clear_has_leakyrelu();
  void set_has_prelu();
  void clear_has_prelu();
  void set_has_sigmoid();
  void clear_has_sigmoid();
  void set_has_batchnorm();
  void clear_has_batchnorm();
  void set_has_scale();
  void clear_has_scale();
  void set_has_reshape();
  void clear_has_reshape();
  void set_has_split();
  void clear_has_split();
  void set_has_concat();
  void clear_has_concat();
  void set_has_eltwise();
  void clear_has_eltwise();
  void set_has_permute();
  void clear_has_permute();
  void set_has_priorbox();
  void clear_has_priorbox();
  void set_has_lrn();
  void clear_has_lrn();
  void set_has_upsample();
  void clear_has_upsample();
  void set_has_normalize();
  void clear_has_normalize();
  void set_has_deconv();
  void clear_has_deconv();
  void set_has_crop();
  void clear_has_crop();
  void set_has_arithmetic();
  void clear_has_arithmetic();
  void set_has_join();
  void clear_has_join();
  void set_has_quantization();
  void clear_has_quantization();
  void set_has_slice();
  void clear_has_slice();
  void set_has_bm_tl_conv();
  void clear_has_bm_tl_conv();
  void set_has_tl_activation();
  void clear_has_tl_activation();
  void set_has_tl_csale();
  void clear_has_tl_csale();
  void set_has_tl_bn();
  void clear_has_tl_bn();
  void set_has_tl_eltwise();
  void clear_has_tl_eltwise();
  void set_has_tl_lrn();
  void clear_has_tl_lrn();
  void set_has_tl_pool();
  void clear_has_tl_pool();
  void set_has_tl_upsample();
  void clear_has_tl_upsample();
  void set_has_tl_layer_load_stride();
  void clear_has_tl_layer_load_stride();
  void set_has_tl_layer_load();
  void clear_has_tl_layer_load();
  void set_has_tl_layer_store_stride();
  void clear_has_tl_layer_store_stride();
  void set_has_tl_layer_store();
  void clear_has_tl_layer_store();
  void set_has_tl_relu();
  void clear_has_tl_relu();
  void set_has_tl_fc();
  void clear_has_tl_fc();
  void set_has_bm_tl_deconv();
  void clear_has_bm_tl_deconv();
  void set_has_tl_quantization();
  void clear_has_tl_quantization();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel* pooling_;
  ::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel* conv_;
  ::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel* conv_p_;
  ::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel* fc_;
  ::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel* relu_;
  ::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel* clip_;
  ::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel* leakyrelu_;
  ::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel* prelu_;
  ::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel* sigmoid_;
  ::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* batchnorm_;
  ::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel* scale_;
  ::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel* reshape_;
  ::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel* split_;
  ::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel* concat_;
  ::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel* eltwise_;
  ::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel* permute_;
  ::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel* priorbox_;
  ::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel* lrn_;
  ::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel* upsample_;
  ::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel* normalize_;
  ::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel* deconv_;
  ::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel* crop_;
  ::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel* arithmetic_;
  ::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel* join_;
  ::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel* quantization_;
  ::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel* slice_;
  ::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel* bm_tl_conv_;
  ::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel* tl_activation_;
  ::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel* tl_csale_;
  ::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel* tl_bn_;
  ::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel* tl_eltwise_;
  ::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel* tl_lrn_;
  ::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel* tl_pool_;
  ::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel* tl_upsample_;
  ::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel* tl_layer_load_stride_;
  ::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel* tl_layer_load_;
  ::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel* tl_layer_store_stride_;
  ::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel* tl_layer_store_;
  ::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel* tl_relu_;
  ::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel* tl_fc_;
  ::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel* bm_tl_deconv_;
  ::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel* tl_quantization_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bm188x_5fasm_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommandBuffer

// repeated .bmnet.bm1880.Inst inst = 1;
inline int CommandBuffer::inst_size() const {
  return inst_.size();
}
inline void CommandBuffer::clear_inst() {
  inst_.Clear();
}
inline ::bmnet::bm1880::Inst* CommandBuffer::mutable_inst(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.CommandBuffer.inst)
  return inst_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bmnet::bm1880::Inst >*
CommandBuffer::mutable_inst() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.CommandBuffer.inst)
  return &inst_;
}
inline const ::bmnet::bm1880::Inst& CommandBuffer::inst(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.CommandBuffer.inst)
  return inst_.Get(index);
}
inline ::bmnet::bm1880::Inst* CommandBuffer::add_inst() {
  // @@protoc_insertion_point(field_add:bmnet.bm1880.CommandBuffer.inst)
  return inst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bmnet::bm1880::Inst >&
CommandBuffer::inst() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.CommandBuffer.inst)
  return inst_;
}

// -------------------------------------------------------------------

// Inst_bmnet_pooling_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_pooling_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_pooling_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_pooling_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_pooling_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_pooling_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_pooling_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_pooling_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_pooling_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.depends_len)
}

// optional uint64 ifmap_gaddr = 6;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_ifmap_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_ifmap_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_ifmap_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_ifmap_gaddr() {
  ifmap_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_ifmap_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_pooling_fixed_forward_bmkernel::ifmap_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.ifmap_gaddr)
  return ifmap_gaddr_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_ifmap_gaddr(::google::protobuf::uint64 value) {
  set_has_ifmap_gaddr();
  ifmap_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.ifmap_gaddr)
}

// optional uint64 ofmap_gaddr = 7;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_ofmap_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_ofmap_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_ofmap_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_ofmap_gaddr() {
  ofmap_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_ofmap_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_pooling_fixed_forward_bmkernel::ofmap_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.ofmap_gaddr)
  return ofmap_gaddr_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_ofmap_gaddr(::google::protobuf::uint64 value) {
  set_has_ofmap_gaddr();
  ofmap_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.ofmap_gaddr)
}

// optional uint64 index_gaddr = 8;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_index_gaddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_index_gaddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_index_gaddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_index_gaddr() {
  index_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_index_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_pooling_fixed_forward_bmkernel::index_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.index_gaddr)
  return index_gaddr_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_index_gaddr(::google::protobuf::uint64 value) {
  set_has_index_gaddr();
  index_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.index_gaddr)
}

// optional uint64 o_findex_gaddr = 9;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_o_findex_gaddr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_o_findex_gaddr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_o_findex_gaddr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_o_findex_gaddr() {
  o_findex_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_o_findex_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_pooling_fixed_forward_bmkernel::o_findex_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.o_findex_gaddr)
  return o_findex_gaddr_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_o_findex_gaddr(::google::protobuf::uint64 value) {
  set_has_o_findex_gaddr();
  o_findex_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.o_findex_gaddr)
}

// optional int32 n = 10;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_n() {
  n_ = 0;
  clear_has_n();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.n)
  return n_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_n(::google::protobuf::int32 value) {
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.n)
}

// optional int32 c = 11;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_c() {
  c_ = 0;
  clear_has_c();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.c)
  return c_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_c(::google::protobuf::int32 value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.c)
}

// optional int32 h = 12;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.h)
  return h_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.h)
}

// optional int32 w = 13;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.w)
  return w_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.w)
}

// optional int32 kh = 14;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_kh() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_kh() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_kh() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_kh() {
  kh_ = 0;
  clear_has_kh();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::kh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.kh)
  return kh_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_kh(::google::protobuf::int32 value) {
  set_has_kh();
  kh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.kh)
}

// optional int32 kw = 15;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_kw() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_kw() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_kw() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_kw() {
  kw_ = 0;
  clear_has_kw();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::kw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.kw)
  return kw_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_kw(::google::protobuf::int32 value) {
  set_has_kw();
  kw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.kw)
}

// optional int32 pad_top = 16;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_pad_top() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_pad_top() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_pad_top() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_pad_top() {
  pad_top_ = 0;
  clear_has_pad_top();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::pad_top() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.pad_top)
  return pad_top_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_pad_top(::google::protobuf::int32 value) {
  set_has_pad_top();
  pad_top_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.pad_top)
}

// optional int32 pad_bot = 17;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_pad_bot() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_pad_bot() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_pad_bot() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_pad_bot() {
  pad_bot_ = 0;
  clear_has_pad_bot();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::pad_bot() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.pad_bot)
  return pad_bot_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_pad_bot(::google::protobuf::int32 value) {
  set_has_pad_bot();
  pad_bot_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.pad_bot)
}

// optional int32 pad_left = 18;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_pad_left() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_pad_left() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_pad_left() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_pad_left() {
  pad_left_ = 0;
  clear_has_pad_left();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::pad_left() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.pad_left)
  return pad_left_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_pad_left(::google::protobuf::int32 value) {
  set_has_pad_left();
  pad_left_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.pad_left)
}

// optional int32 pad_right = 19;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_pad_right() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_pad_right() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_pad_right() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_pad_right() {
  pad_right_ = 0;
  clear_has_pad_right();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::pad_right() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.pad_right)
  return pad_right_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_pad_right(::google::protobuf::int32 value) {
  set_has_pad_right();
  pad_right_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.pad_right)
}

// optional int32 stride_h = 20;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_stride_h() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_stride_h() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_stride_h() {
  stride_h_ = 0;
  clear_has_stride_h();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::stride_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.stride_h)
  return stride_h_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_stride_h(::google::protobuf::int32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.stride_h)
}

// optional int32 stride_w = 21;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_stride_w() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_stride_w() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_stride_w() {
  stride_w_ = 0;
  clear_has_stride_w();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::stride_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.stride_w)
  return stride_w_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_stride_w(::google::protobuf::int32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.stride_w)
}

// optional int32 is_avg_pooling = 22;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_is_avg_pooling() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_is_avg_pooling() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_is_avg_pooling() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_is_avg_pooling() {
  is_avg_pooling_ = 0;
  clear_has_is_avg_pooling();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::is_avg_pooling() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.is_avg_pooling)
  return is_avg_pooling_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_is_avg_pooling(::google::protobuf::int32 value) {
  set_has_is_avg_pooling();
  is_avg_pooling_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.is_avg_pooling)
}

// optional float avg_const = 23;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_avg_const() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_avg_const() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_avg_const() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_avg_const() {
  avg_const_ = 0;
  clear_has_avg_const();
}
inline float Inst_bmnet_pooling_fixed_forward_bmkernel::avg_const() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.avg_const)
  return avg_const_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_avg_const(float value) {
  set_has_avg_const();
  avg_const_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.avg_const)
}

// optional int32 do_relu = 24;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_do_relu() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_do_relu() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_do_relu() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_do_relu() {
  do_relu_ = 0;
  clear_has_do_relu();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::do_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.do_relu)
  return do_relu_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_do_relu(::google::protobuf::int32 value) {
  set_has_do_relu();
  do_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.do_relu)
}

// optional int32 right_shift_width = 25;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.right_shift_width)
}

// repeated int32 threshold_x_quantized = 26;
inline int Inst_bmnet_pooling_fixed_forward_bmkernel::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_fixed_forward_bmkernel::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.threshold_x_quantized)
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_pooling_fixed_forward_bmkernel::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_pooling_fixed_forward_bmkernel::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// optional bool ceil_mode = 27;
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::has_ceil_mode() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_has_ceil_mode() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_has_ceil_mode() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::clear_ceil_mode() {
  ceil_mode_ = false;
  clear_has_ceil_mode();
}
inline bool Inst_bmnet_pooling_fixed_forward_bmkernel::ceil_mode() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.ceil_mode)
  return ceil_mode_;
}
inline void Inst_bmnet_pooling_fixed_forward_bmkernel::set_ceil_mode(bool value) {
  set_has_ceil_mode();
  ceil_mode_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel.ceil_mode)
}

// -------------------------------------------------------------------

// Inst_bmnet_conv_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_conv_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_conv_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_conv_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.depends_len)
}

// optional uint64 ga_ifmap = 6;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_ga_ifmap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_ga_ifmap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_ga_ifmap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_ga_ifmap() {
  ga_ifmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ifmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_fixed_forward_bmkernel::ga_ifmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_ifmap)
  return ga_ifmap_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_ga_ifmap(::google::protobuf::uint64 value) {
  set_has_ga_ifmap();
  ga_ifmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_ifmap)
}

// optional uint64 ga_ofmap = 7;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_ga_ofmap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_ga_ofmap() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_ga_ofmap() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_ga_ofmap() {
  ga_ofmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ofmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_fixed_forward_bmkernel::ga_ofmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_ofmap)
  return ga_ofmap_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_ga_ofmap(::google::protobuf::uint64 value) {
  set_has_ga_ofmap();
  ga_ofmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_ofmap)
}

// optional uint64 ga_weight = 8;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_ga_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_ga_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_ga_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_ga_weight() {
  ga_weight_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_weight();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_fixed_forward_bmkernel::ga_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_weight)
  return ga_weight_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_ga_weight(::google::protobuf::uint64 value) {
  set_has_ga_weight();
  ga_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_weight)
}

// optional uint64 ga_bias = 9;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_ga_bias() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_ga_bias() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_ga_bias() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_ga_bias() {
  ga_bias_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_bias();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_fixed_forward_bmkernel::ga_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_bias)
  return ga_bias_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_ga_bias(::google::protobuf::uint64 value) {
  set_has_ga_bias();
  ga_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_bias)
}

// optional uint64 ga_bn_mean = 10;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_ga_bn_mean() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_ga_bn_mean() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_ga_bn_mean() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_ga_bn_mean() {
  ga_bn_mean_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_bn_mean();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_fixed_forward_bmkernel::ga_bn_mean() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_bn_mean)
  return ga_bn_mean_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_ga_bn_mean(::google::protobuf::uint64 value) {
  set_has_ga_bn_mean();
  ga_bn_mean_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_bn_mean)
}

// optional uint64 ga_bn_variance = 11;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_ga_bn_variance() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_ga_bn_variance() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_ga_bn_variance() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_ga_bn_variance() {
  ga_bn_variance_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_bn_variance();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_fixed_forward_bmkernel::ga_bn_variance() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_bn_variance)
  return ga_bn_variance_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_ga_bn_variance(::google::protobuf::uint64 value) {
  set_has_ga_bn_variance();
  ga_bn_variance_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_bn_variance)
}

// optional uint64 ga_scale = 12;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_ga_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_ga_scale() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_ga_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_ga_scale() {
  ga_scale_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_scale();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_fixed_forward_bmkernel::ga_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_scale)
  return ga_scale_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_ga_scale(::google::protobuf::uint64 value) {
  set_has_ga_scale();
  ga_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_scale)
}

// optional uint64 ga_scale_bias = 13;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_ga_scale_bias() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_ga_scale_bias() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_ga_scale_bias() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_ga_scale_bias() {
  ga_scale_bias_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_scale_bias();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_fixed_forward_bmkernel::ga_scale_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_scale_bias)
  return ga_scale_bias_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_ga_scale_bias(::google::protobuf::uint64 value) {
  set_has_ga_scale_bias();
  ga_scale_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.ga_scale_bias)
}

// optional int32 input_n = 14;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 15;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 16;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 17;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.input_w)
}

// optional int32 groups = 18;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_groups() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_groups() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_groups() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_groups() {
  groups_ = 0;
  clear_has_groups();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::groups() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.groups)
  return groups_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_groups(::google::protobuf::int32 value) {
  set_has_groups();
  groups_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.groups)
}

// optional int32 output_c = 19;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_output_c() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_output_c() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_output_c() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_output_c() {
  output_c_ = 0;
  clear_has_output_c();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::output_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.output_c)
  return output_c_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_output_c(::google::protobuf::int32 value) {
  set_has_output_c();
  output_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.output_c)
}

// optional uint32 kh = 20;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_kh() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_kh() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_kh() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_kh() {
  kh_ = 0u;
  clear_has_kh();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::kh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.kh)
  return kh_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_kh(::google::protobuf::uint32 value) {
  set_has_kh();
  kh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.kh)
}

// optional uint32 kw = 21;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_kw() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_kw() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_kw() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_kw() {
  kw_ = 0u;
  clear_has_kw();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::kw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.kw)
  return kw_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_kw(::google::protobuf::uint32 value) {
  set_has_kw();
  kw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.kw)
}

// optional uint32 dilation_h = 22;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_dilation_h() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_dilation_h() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_dilation_h() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_dilation_h() {
  dilation_h_ = 0u;
  clear_has_dilation_h();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::dilation_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.dilation_h)
  return dilation_h_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_dilation_h(::google::protobuf::uint32 value) {
  set_has_dilation_h();
  dilation_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.dilation_h)
}

// optional uint32 dilation_w = 23;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_dilation_w() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_dilation_w() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_dilation_w() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_dilation_w() {
  dilation_w_ = 0u;
  clear_has_dilation_w();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::dilation_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.dilation_w)
  return dilation_w_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_dilation_w(::google::protobuf::uint32 value) {
  set_has_dilation_w();
  dilation_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.dilation_w)
}

// optional uint32 pad_top = 24;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_pad_top() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_pad_top() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_pad_top() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_pad_top() {
  pad_top_ = 0u;
  clear_has_pad_top();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::pad_top() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.pad_top)
  return pad_top_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_pad_top(::google::protobuf::uint32 value) {
  set_has_pad_top();
  pad_top_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.pad_top)
}

// optional uint32 pad_bottom = 25;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_pad_bottom() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_pad_bottom() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_pad_bottom() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_pad_bottom() {
  pad_bottom_ = 0u;
  clear_has_pad_bottom();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::pad_bottom() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.pad_bottom)
  return pad_bottom_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_pad_bottom(::google::protobuf::uint32 value) {
  set_has_pad_bottom();
  pad_bottom_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.pad_bottom)
}

// optional uint32 pad_left = 26;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_pad_left() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_pad_left() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_pad_left() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_pad_left() {
  pad_left_ = 0u;
  clear_has_pad_left();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::pad_left() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.pad_left)
  return pad_left_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_pad_left(::google::protobuf::uint32 value) {
  set_has_pad_left();
  pad_left_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.pad_left)
}

// optional uint32 pad_right = 27;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_pad_right() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_pad_right() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_pad_right() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_pad_right() {
  pad_right_ = 0u;
  clear_has_pad_right();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::pad_right() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.pad_right)
  return pad_right_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_pad_right(::google::protobuf::uint32 value) {
  set_has_pad_right();
  pad_right_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.pad_right)
}

// optional uint32 stride_h = 28;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_stride_h() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_stride_h() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_stride_h() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::stride_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.stride_h)
  return stride_h_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.stride_h)
}

// optional uint32 stride_w = 29;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_stride_w() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_stride_w() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_stride_w() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_fixed_forward_bmkernel::stride_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.stride_w)
  return stride_w_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.stride_w)
}

// optional int32 result_add = 30;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_result_add() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_result_add() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_result_add() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_result_add() {
  result_add_ = 0;
  clear_has_result_add();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.result_add)
  return result_add_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_result_add(::google::protobuf::int32 value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.result_add)
}

// optional int32 do_bias = 31;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_do_bias() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_do_bias() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_do_bias() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_do_bias() {
  do_bias_ = 0;
  clear_has_do_bias();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::do_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.do_bias)
  return do_bias_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_do_bias(::google::protobuf::int32 value) {
  set_has_do_bias();
  do_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.do_bias)
}

// optional int32 do_bn = 32;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_do_bn() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_do_bn() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_do_bn() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_do_bn() {
  do_bn_ = 0;
  clear_has_do_bn();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::do_bn() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.do_bn)
  return do_bn_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_do_bn(::google::protobuf::int32 value) {
  set_has_do_bn();
  do_bn_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.do_bn)
}

// optional int32 do_scale = 33;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_do_scale() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_do_scale() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_do_scale() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_do_scale() {
  do_scale_ = 0;
  clear_has_do_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::do_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.do_scale)
  return do_scale_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_do_scale(::google::protobuf::int32 value) {
  set_has_do_scale();
  do_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.do_scale)
}

// optional int32 do_scale_bias = 34;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_do_scale_bias() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_do_scale_bias() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_do_scale_bias() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_do_scale_bias() {
  do_scale_bias_ = 0;
  clear_has_do_scale_bias();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::do_scale_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.do_scale_bias)
  return do_scale_bias_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_do_scale_bias(::google::protobuf::int32 value) {
  set_has_do_scale_bias();
  do_scale_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.do_scale_bias)
}

// optional int32 do_activation = 35;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_do_activation() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_do_activation() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_do_activation() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_do_activation() {
  do_activation_ = 0;
  clear_has_do_activation();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::do_activation() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.do_activation)
  return do_activation_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_do_activation(::google::protobuf::int32 value) {
  set_has_do_activation();
  do_activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.do_activation)
}

// optional float bn_scale = 36;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_bn_scale() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_bn_scale() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_bn_scale() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_bn_scale() {
  bn_scale_ = 0;
  clear_has_bn_scale();
}
inline float Inst_bmnet_conv_fixed_forward_bmkernel::bn_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.bn_scale)
  return bn_scale_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_bn_scale(float value) {
  set_has_bn_scale();
  bn_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.bn_scale)
}

// optional float bn_eps = 37;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_bn_eps() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_bn_eps() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_bn_eps() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_bn_eps() {
  bn_eps_ = 0;
  clear_has_bn_eps();
}
inline float Inst_bmnet_conv_fixed_forward_bmkernel::bn_eps() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.bn_eps)
  return bn_eps_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_bn_eps(float value) {
  set_has_bn_eps();
  bn_eps_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.bn_eps)
}

// optional int32 activation_method = 38;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_activation_method() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_activation_method() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_activation_method() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_activation_method() {
  activation_method_ = 0;
  clear_has_activation_method();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::activation_method() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_method)
  return activation_method_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_activation_method(::google::protobuf::int32 value) {
  set_has_activation_method();
  activation_method_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_method)
}

// repeated float activation_arg = 39;
inline int Inst_bmnet_conv_fixed_forward_bmkernel::activation_arg_size() const {
  return activation_arg_.size();
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_activation_arg() {
  activation_arg_.Clear();
}
inline float Inst_bmnet_conv_fixed_forward_bmkernel::activation_arg(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_arg)
  return activation_arg_.Get(index);
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_activation_arg(int index, float value) {
  activation_arg_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_arg)
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::add_activation_arg(float value) {
  activation_arg_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_arg)
}
inline const ::google::protobuf::RepeatedField< float >&
Inst_bmnet_conv_fixed_forward_bmkernel::activation_arg() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_arg)
  return activation_arg_;
}
inline ::google::protobuf::RepeatedField< float >*
Inst_bmnet_conv_fixed_forward_bmkernel::mutable_activation_arg() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_arg)
  return &activation_arg_;
}

// optional uint64 activation_ga_slope = 40;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_activation_ga_slope() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_activation_ga_slope() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_activation_ga_slope() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_activation_ga_slope() {
  activation_ga_slope_ = GOOGLE_ULONGLONG(0);
  clear_has_activation_ga_slope();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_fixed_forward_bmkernel::activation_ga_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_ga_slope)
  return activation_ga_slope_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_activation_ga_slope(::google::protobuf::uint64 value) {
  set_has_activation_ga_slope();
  activation_ga_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_ga_slope)
}

// optional bool activation_channel_shared = 41;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_activation_channel_shared() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_activation_channel_shared() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_activation_channel_shared() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_activation_channel_shared() {
  activation_channel_shared_ = false;
  clear_has_activation_channel_shared();
}
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::activation_channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_channel_shared)
  return activation_channel_shared_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_activation_channel_shared(bool value) {
  set_has_activation_channel_shared();
  activation_channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_channel_shared)
}

// optional int32 activation_gt_scale = 42;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_activation_gt_scale() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_activation_gt_scale() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_activation_gt_scale() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_activation_gt_scale() {
  activation_gt_scale_ = 0;
  clear_has_activation_gt_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::activation_gt_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_gt_scale)
  return activation_gt_scale_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_activation_gt_scale(::google::protobuf::int32 value) {
  set_has_activation_gt_scale();
  activation_gt_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_gt_scale)
}

// optional int32 activation_gt_rshift = 43;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_activation_gt_rshift() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_activation_gt_rshift() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_activation_gt_rshift() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_activation_gt_rshift() {
  activation_gt_rshift_ = 0;
  clear_has_activation_gt_rshift();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::activation_gt_rshift() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_gt_rshift)
  return activation_gt_rshift_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_activation_gt_rshift(::google::protobuf::int32 value) {
  set_has_activation_gt_rshift();
  activation_gt_rshift_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_gt_rshift)
}

// optional int32 activation_le_scale = 44;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_activation_le_scale() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_activation_le_scale() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_activation_le_scale() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_activation_le_scale() {
  activation_le_scale_ = 0;
  clear_has_activation_le_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::activation_le_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_le_scale)
  return activation_le_scale_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_activation_le_scale(::google::protobuf::int32 value) {
  set_has_activation_le_scale();
  activation_le_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_le_scale)
}

// optional int32 activation_le_rshift = 45;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_activation_le_rshift() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_activation_le_rshift() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_activation_le_rshift() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_activation_le_rshift() {
  activation_le_rshift_ = 0;
  clear_has_activation_le_rshift();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::activation_le_rshift() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_le_rshift)
  return activation_le_rshift_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_activation_le_rshift(::google::protobuf::int32 value) {
  set_has_activation_le_rshift();
  activation_le_rshift_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.activation_le_rshift)
}

// optional int32 right_shift_width = 46;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_right_shift_width() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_right_shift_width() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_right_shift_width() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.right_shift_width)
}

// optional int32 bn_right_shift_width = 47;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_bn_right_shift_width() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_bn_right_shift_width() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_bn_right_shift_width() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_bn_right_shift_width() {
  bn_right_shift_width_ = 0;
  clear_has_bn_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::bn_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.bn_right_shift_width)
  return bn_right_shift_width_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_bn_right_shift_width(::google::protobuf::int32 value) {
  set_has_bn_right_shift_width();
  bn_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.bn_right_shift_width)
}

// optional int32 scalar_right_shift_width = 48;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_scalar_right_shift_width() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_scalar_right_shift_width() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_scalar_right_shift_width() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_scalar_right_shift_width() {
  scalar_right_shift_width_ = 0;
  clear_has_scalar_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_fixed_forward_bmkernel::scalar_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.scalar_right_shift_width)
  return scalar_right_shift_width_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_scalar_right_shift_width(::google::protobuf::int32 value) {
  set_has_scalar_right_shift_width();
  scalar_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.scalar_right_shift_width)
}

// optional bool use_winograd = 49;
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::has_use_winograd() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_has_use_winograd() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_has_use_winograd() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::clear_use_winograd() {
  use_winograd_ = false;
  clear_has_use_winograd();
}
inline bool Inst_bmnet_conv_fixed_forward_bmkernel::use_winograd() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.use_winograd)
  return use_winograd_;
}
inline void Inst_bmnet_conv_fixed_forward_bmkernel::set_use_winograd(bool value) {
  set_has_use_winograd();
  use_winograd_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel.use_winograd)
}

// -------------------------------------------------------------------

// Inst_bmnet_conv_parallel_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_conv_parallel_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_conv_parallel_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_conv_parallel_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.depends_len)
}

// optional uint64 ga_ifmap = 6;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_ga_ifmap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_ga_ifmap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_ga_ifmap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_ga_ifmap() {
  ga_ifmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ifmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::ga_ifmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_ifmap)
  return ga_ifmap_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_ga_ifmap(::google::protobuf::uint64 value) {
  set_has_ga_ifmap();
  ga_ifmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_ifmap)
}

// optional uint64 ga_ofmap = 7;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_ga_ofmap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_ga_ofmap() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_ga_ofmap() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_ga_ofmap() {
  ga_ofmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ofmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::ga_ofmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_ofmap)
  return ga_ofmap_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_ga_ofmap(::google::protobuf::uint64 value) {
  set_has_ga_ofmap();
  ga_ofmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_ofmap)
}

// optional uint64 ga_weight = 8;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_ga_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_ga_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_ga_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_ga_weight() {
  ga_weight_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_weight();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::ga_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_weight)
  return ga_weight_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_ga_weight(::google::protobuf::uint64 value) {
  set_has_ga_weight();
  ga_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_weight)
}

// optional uint64 ga_bias = 9;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_ga_bias() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_ga_bias() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_ga_bias() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_ga_bias() {
  ga_bias_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_bias();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::ga_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_bias)
  return ga_bias_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_ga_bias(::google::protobuf::uint64 value) {
  set_has_ga_bias();
  ga_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_bias)
}

// optional uint64 ga_bn_mean = 10;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_ga_bn_mean() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_ga_bn_mean() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_ga_bn_mean() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_ga_bn_mean() {
  ga_bn_mean_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_bn_mean();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::ga_bn_mean() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_bn_mean)
  return ga_bn_mean_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_ga_bn_mean(::google::protobuf::uint64 value) {
  set_has_ga_bn_mean();
  ga_bn_mean_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_bn_mean)
}

// optional uint64 ga_bn_variance = 11;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_ga_bn_variance() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_ga_bn_variance() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_ga_bn_variance() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_ga_bn_variance() {
  ga_bn_variance_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_bn_variance();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::ga_bn_variance() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_bn_variance)
  return ga_bn_variance_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_ga_bn_variance(::google::protobuf::uint64 value) {
  set_has_ga_bn_variance();
  ga_bn_variance_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_bn_variance)
}

// optional uint64 ga_scale = 12;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_ga_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_ga_scale() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_ga_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_ga_scale() {
  ga_scale_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_scale();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::ga_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_scale)
  return ga_scale_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_ga_scale(::google::protobuf::uint64 value) {
  set_has_ga_scale();
  ga_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_scale)
}

// optional uint64 ga_scale_bias = 13;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_ga_scale_bias() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_ga_scale_bias() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_ga_scale_bias() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_ga_scale_bias() {
  ga_scale_bias_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_scale_bias();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::ga_scale_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_scale_bias)
  return ga_scale_bias_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_ga_scale_bias(::google::protobuf::uint64 value) {
  set_has_ga_scale_bias();
  ga_scale_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.ga_scale_bias)
}

// optional int32 input_n = 14;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 15;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 16;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 17;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.input_w)
}

// optional int32 groups = 18;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_groups() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_groups() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_groups() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_groups() {
  groups_ = 0;
  clear_has_groups();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::groups() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.groups)
  return groups_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_groups(::google::protobuf::int32 value) {
  set_has_groups();
  groups_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.groups)
}

// optional int32 output_c = 19;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_output_c() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_output_c() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_output_c() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_output_c() {
  output_c_ = 0;
  clear_has_output_c();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::output_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.output_c)
  return output_c_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_output_c(::google::protobuf::int32 value) {
  set_has_output_c();
  output_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.output_c)
}

// optional uint32 kh = 20;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_kh() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_kh() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_kh() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_kh() {
  kh_ = 0u;
  clear_has_kh();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::kh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.kh)
  return kh_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_kh(::google::protobuf::uint32 value) {
  set_has_kh();
  kh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.kh)
}

// optional uint32 kw = 21;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_kw() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_kw() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_kw() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_kw() {
  kw_ = 0u;
  clear_has_kw();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::kw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.kw)
  return kw_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_kw(::google::protobuf::uint32 value) {
  set_has_kw();
  kw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.kw)
}

// optional uint32 dilation_h = 22;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_dilation_h() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_dilation_h() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_dilation_h() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_dilation_h() {
  dilation_h_ = 0u;
  clear_has_dilation_h();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::dilation_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.dilation_h)
  return dilation_h_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_dilation_h(::google::protobuf::uint32 value) {
  set_has_dilation_h();
  dilation_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.dilation_h)
}

// optional uint32 dilation_w = 23;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_dilation_w() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_dilation_w() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_dilation_w() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_dilation_w() {
  dilation_w_ = 0u;
  clear_has_dilation_w();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::dilation_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.dilation_w)
  return dilation_w_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_dilation_w(::google::protobuf::uint32 value) {
  set_has_dilation_w();
  dilation_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.dilation_w)
}

// optional uint32 pad_top = 24;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_pad_top() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_pad_top() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_pad_top() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_pad_top() {
  pad_top_ = 0u;
  clear_has_pad_top();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::pad_top() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.pad_top)
  return pad_top_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_pad_top(::google::protobuf::uint32 value) {
  set_has_pad_top();
  pad_top_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.pad_top)
}

// optional uint32 pad_bottom = 25;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_pad_bottom() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_pad_bottom() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_pad_bottom() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_pad_bottom() {
  pad_bottom_ = 0u;
  clear_has_pad_bottom();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::pad_bottom() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.pad_bottom)
  return pad_bottom_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_pad_bottom(::google::protobuf::uint32 value) {
  set_has_pad_bottom();
  pad_bottom_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.pad_bottom)
}

// optional uint32 pad_left = 26;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_pad_left() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_pad_left() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_pad_left() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_pad_left() {
  pad_left_ = 0u;
  clear_has_pad_left();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::pad_left() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.pad_left)
  return pad_left_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_pad_left(::google::protobuf::uint32 value) {
  set_has_pad_left();
  pad_left_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.pad_left)
}

// optional uint32 pad_right = 27;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_pad_right() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_pad_right() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_pad_right() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_pad_right() {
  pad_right_ = 0u;
  clear_has_pad_right();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::pad_right() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.pad_right)
  return pad_right_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_pad_right(::google::protobuf::uint32 value) {
  set_has_pad_right();
  pad_right_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.pad_right)
}

// optional uint32 stride_h = 28;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_stride_h() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_stride_h() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_stride_h() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::stride_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.stride_h)
  return stride_h_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.stride_h)
}

// optional uint32 stride_w = 29;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_stride_w() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_stride_w() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_stride_w() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::stride_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.stride_w)
  return stride_w_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.stride_w)
}

// optional int32 result_add = 30;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_result_add() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_result_add() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_result_add() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_result_add() {
  result_add_ = 0;
  clear_has_result_add();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.result_add)
  return result_add_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_result_add(::google::protobuf::int32 value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.result_add)
}

// optional int32 do_bias = 31;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_do_bias() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_do_bias() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_do_bias() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_do_bias() {
  do_bias_ = 0;
  clear_has_do_bias();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::do_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.do_bias)
  return do_bias_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_do_bias(::google::protobuf::int32 value) {
  set_has_do_bias();
  do_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.do_bias)
}

// optional int32 do_bn = 32;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_do_bn() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_do_bn() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_do_bn() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_do_bn() {
  do_bn_ = 0;
  clear_has_do_bn();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::do_bn() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.do_bn)
  return do_bn_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_do_bn(::google::protobuf::int32 value) {
  set_has_do_bn();
  do_bn_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.do_bn)
}

// optional int32 do_scale = 33;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_do_scale() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_do_scale() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_do_scale() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_do_scale() {
  do_scale_ = 0;
  clear_has_do_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::do_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.do_scale)
  return do_scale_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_do_scale(::google::protobuf::int32 value) {
  set_has_do_scale();
  do_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.do_scale)
}

// optional int32 do_scale_bias = 34;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_do_scale_bias() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_do_scale_bias() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_do_scale_bias() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_do_scale_bias() {
  do_scale_bias_ = 0;
  clear_has_do_scale_bias();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::do_scale_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.do_scale_bias)
  return do_scale_bias_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_do_scale_bias(::google::protobuf::int32 value) {
  set_has_do_scale_bias();
  do_scale_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.do_scale_bias)
}

// optional int32 do_activation = 35;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_do_activation() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_do_activation() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_do_activation() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_do_activation() {
  do_activation_ = 0;
  clear_has_do_activation();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::do_activation() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.do_activation)
  return do_activation_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_do_activation(::google::protobuf::int32 value) {
  set_has_do_activation();
  do_activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.do_activation)
}

// optional float bn_scale = 36;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_bn_scale() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_bn_scale() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_bn_scale() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_bn_scale() {
  bn_scale_ = 0;
  clear_has_bn_scale();
}
inline float Inst_bmnet_conv_parallel_fixed_forward_bmkernel::bn_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.bn_scale)
  return bn_scale_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_bn_scale(float value) {
  set_has_bn_scale();
  bn_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.bn_scale)
}

// optional float bn_eps = 37;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_bn_eps() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_bn_eps() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_bn_eps() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_bn_eps() {
  bn_eps_ = 0;
  clear_has_bn_eps();
}
inline float Inst_bmnet_conv_parallel_fixed_forward_bmkernel::bn_eps() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.bn_eps)
  return bn_eps_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_bn_eps(float value) {
  set_has_bn_eps();
  bn_eps_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.bn_eps)
}

// optional int32 activation_method = 38;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_activation_method() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_activation_method() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_activation_method() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_activation_method() {
  activation_method_ = 0;
  clear_has_activation_method();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::activation_method() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_method)
  return activation_method_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_activation_method(::google::protobuf::int32 value) {
  set_has_activation_method();
  activation_method_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_method)
}

// repeated float activation_arg = 39;
inline int Inst_bmnet_conv_parallel_fixed_forward_bmkernel::activation_arg_size() const {
  return activation_arg_.size();
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_activation_arg() {
  activation_arg_.Clear();
}
inline float Inst_bmnet_conv_parallel_fixed_forward_bmkernel::activation_arg(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_arg)
  return activation_arg_.Get(index);
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_activation_arg(int index, float value) {
  activation_arg_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_arg)
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::add_activation_arg(float value) {
  activation_arg_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_arg)
}
inline const ::google::protobuf::RepeatedField< float >&
Inst_bmnet_conv_parallel_fixed_forward_bmkernel::activation_arg() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_arg)
  return activation_arg_;
}
inline ::google::protobuf::RepeatedField< float >*
Inst_bmnet_conv_parallel_fixed_forward_bmkernel::mutable_activation_arg() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_arg)
  return &activation_arg_;
}

// optional uint64 activation_ga_slope = 40;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_activation_ga_slope() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_activation_ga_slope() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_activation_ga_slope() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_activation_ga_slope() {
  activation_ga_slope_ = GOOGLE_ULONGLONG(0);
  clear_has_activation_ga_slope();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::activation_ga_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_ga_slope)
  return activation_ga_slope_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_activation_ga_slope(::google::protobuf::uint64 value) {
  set_has_activation_ga_slope();
  activation_ga_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_ga_slope)
}

// optional bool activation_channel_shared = 41;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_activation_channel_shared() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_activation_channel_shared() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_activation_channel_shared() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_activation_channel_shared() {
  activation_channel_shared_ = false;
  clear_has_activation_channel_shared();
}
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::activation_channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_channel_shared)
  return activation_channel_shared_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_activation_channel_shared(bool value) {
  set_has_activation_channel_shared();
  activation_channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_channel_shared)
}

// optional int32 activation_gt_scale = 42;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_activation_gt_scale() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_activation_gt_scale() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_activation_gt_scale() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_activation_gt_scale() {
  activation_gt_scale_ = 0;
  clear_has_activation_gt_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::activation_gt_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_gt_scale)
  return activation_gt_scale_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_activation_gt_scale(::google::protobuf::int32 value) {
  set_has_activation_gt_scale();
  activation_gt_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_gt_scale)
}

// optional int32 activation_gt_rshift = 43;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_activation_gt_rshift() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_activation_gt_rshift() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_activation_gt_rshift() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_activation_gt_rshift() {
  activation_gt_rshift_ = 0;
  clear_has_activation_gt_rshift();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::activation_gt_rshift() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_gt_rshift)
  return activation_gt_rshift_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_activation_gt_rshift(::google::protobuf::int32 value) {
  set_has_activation_gt_rshift();
  activation_gt_rshift_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_gt_rshift)
}

// optional int32 activation_le_scale = 44;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_activation_le_scale() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_activation_le_scale() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_activation_le_scale() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_activation_le_scale() {
  activation_le_scale_ = 0;
  clear_has_activation_le_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::activation_le_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_le_scale)
  return activation_le_scale_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_activation_le_scale(::google::protobuf::int32 value) {
  set_has_activation_le_scale();
  activation_le_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_le_scale)
}

// optional int32 activation_le_rshift = 45;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_activation_le_rshift() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_activation_le_rshift() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_activation_le_rshift() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_activation_le_rshift() {
  activation_le_rshift_ = 0;
  clear_has_activation_le_rshift();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::activation_le_rshift() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_le_rshift)
  return activation_le_rshift_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_activation_le_rshift(::google::protobuf::int32 value) {
  set_has_activation_le_rshift();
  activation_le_rshift_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.activation_le_rshift)
}

// optional int32 right_shift_width = 46;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_right_shift_width() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_right_shift_width() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_right_shift_width() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.right_shift_width)
}

// optional int32 bn_right_shift_width = 47;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_bn_right_shift_width() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_bn_right_shift_width() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_bn_right_shift_width() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_bn_right_shift_width() {
  bn_right_shift_width_ = 0;
  clear_has_bn_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::bn_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.bn_right_shift_width)
  return bn_right_shift_width_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_bn_right_shift_width(::google::protobuf::int32 value) {
  set_has_bn_right_shift_width();
  bn_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.bn_right_shift_width)
}

// optional int32 scale_right_shift_width = 48;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_scale_right_shift_width() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_scale_right_shift_width() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_scale_right_shift_width() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_scale_right_shift_width() {
  scale_right_shift_width_ = 0;
  clear_has_scale_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_parallel_fixed_forward_bmkernel::scale_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.scale_right_shift_width)
  return scale_right_shift_width_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_scale_right_shift_width(::google::protobuf::int32 value) {
  set_has_scale_right_shift_width();
  scale_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.scale_right_shift_width)
}

// optional bool use_winograd = 49;
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::has_use_winograd() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_has_use_winograd() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_has_use_winograd() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::clear_use_winograd() {
  use_winograd_ = false;
  clear_has_use_winograd();
}
inline bool Inst_bmnet_conv_parallel_fixed_forward_bmkernel::use_winograd() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.use_winograd)
  return use_winograd_;
}
inline void Inst_bmnet_conv_parallel_fixed_forward_bmkernel::set_use_winograd(bool value) {
  set_has_use_winograd();
  use_winograd_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel.use_winograd)
}

// -------------------------------------------------------------------

// Inst_bmnet_fc_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_fc_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_fc_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_fc_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_fc_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_fc_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_fc_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_fc_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_fc_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.depends_len)
}

// optional uint64 bottom_data_gaddr = 6;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_bottom_data_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_bottom_data_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_bottom_data_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_bottom_data_gaddr() {
  bottom_data_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_data_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_fc_fixed_forward_bmkernel::bottom_data_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.bottom_data_gaddr)
  return bottom_data_gaddr_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_bottom_data_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_data_gaddr();
  bottom_data_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.bottom_data_gaddr)
}

// optional uint64 weight_data_gaddr = 7;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_weight_data_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_weight_data_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_weight_data_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_weight_data_gaddr() {
  weight_data_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_weight_data_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_fc_fixed_forward_bmkernel::weight_data_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.weight_data_gaddr)
  return weight_data_gaddr_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_weight_data_gaddr(::google::protobuf::uint64 value) {
  set_has_weight_data_gaddr();
  weight_data_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.weight_data_gaddr)
}

// optional uint64 bias_data_gaddr = 8;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_bias_data_gaddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_bias_data_gaddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_bias_data_gaddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_bias_data_gaddr() {
  bias_data_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bias_data_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_fc_fixed_forward_bmkernel::bias_data_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.bias_data_gaddr)
  return bias_data_gaddr_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_bias_data_gaddr(::google::protobuf::uint64 value) {
  set_has_bias_data_gaddr();
  bias_data_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.bias_data_gaddr)
}

// optional uint64 top_data_gaddr = 9;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_top_data_gaddr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_top_data_gaddr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_top_data_gaddr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_top_data_gaddr() {
  top_data_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_data_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_fc_fixed_forward_bmkernel::top_data_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.top_data_gaddr)
  return top_data_gaddr_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_top_data_gaddr(::google::protobuf::uint64 value) {
  set_has_top_data_gaddr();
  top_data_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.top_data_gaddr)
}

// optional int32 input_row_num = 10;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_input_row_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_input_row_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_input_row_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_input_row_num() {
  input_row_num_ = 0;
  clear_has_input_row_num();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_fixed_forward_bmkernel::input_row_num() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.input_row_num)
  return input_row_num_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_input_row_num(::google::protobuf::int32 value) {
  set_has_input_row_num();
  input_row_num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.input_row_num)
}

// optional int32 input_col_num = 11;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_input_col_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_input_col_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_input_col_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_input_col_num() {
  input_col_num_ = 0;
  clear_has_input_col_num();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_fixed_forward_bmkernel::input_col_num() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.input_col_num)
  return input_col_num_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_input_col_num(::google::protobuf::int32 value) {
  set_has_input_col_num();
  input_col_num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.input_col_num)
}

// optional int32 weight_col_num = 12;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_weight_col_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_weight_col_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_weight_col_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_weight_col_num() {
  weight_col_num_ = 0;
  clear_has_weight_col_num();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_fixed_forward_bmkernel::weight_col_num() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.weight_col_num)
  return weight_col_num_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_weight_col_num(::google::protobuf::int32 value) {
  set_has_weight_col_num();
  weight_col_num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.weight_col_num)
}

// optional int32 have_bias = 13;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_have_bias() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_have_bias() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_have_bias() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_have_bias() {
  have_bias_ = 0;
  clear_has_have_bias();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_fixed_forward_bmkernel::have_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.have_bias)
  return have_bias_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_have_bias(::google::protobuf::int32 value) {
  set_has_have_bias();
  have_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.have_bias)
}

// optional int32 do_activation = 14;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_do_activation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_do_activation() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_do_activation() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_do_activation() {
  do_activation_ = 0;
  clear_has_do_activation();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_fixed_forward_bmkernel::do_activation() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.do_activation)
  return do_activation_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_do_activation(::google::protobuf::int32 value) {
  set_has_do_activation();
  do_activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.do_activation)
}

// optional int32 activation_method = 15;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_activation_method() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_activation_method() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_activation_method() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_activation_method() {
  activation_method_ = 0;
  clear_has_activation_method();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_fixed_forward_bmkernel::activation_method() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_method)
  return activation_method_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_activation_method(::google::protobuf::int32 value) {
  set_has_activation_method();
  activation_method_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_method)
}

// optional uint64 activation_ga_slope = 16;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_activation_ga_slope() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_activation_ga_slope() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_activation_ga_slope() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_activation_ga_slope() {
  activation_ga_slope_ = GOOGLE_ULONGLONG(0);
  clear_has_activation_ga_slope();
}
inline ::google::protobuf::uint64 Inst_bmnet_fc_fixed_forward_bmkernel::activation_ga_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_ga_slope)
  return activation_ga_slope_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_activation_ga_slope(::google::protobuf::uint64 value) {
  set_has_activation_ga_slope();
  activation_ga_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_ga_slope)
}

// optional int32 activation_channel_shared = 17;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_activation_channel_shared() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_activation_channel_shared() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_activation_channel_shared() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_activation_channel_shared() {
  activation_channel_shared_ = 0;
  clear_has_activation_channel_shared();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_fixed_forward_bmkernel::activation_channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_channel_shared)
  return activation_channel_shared_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_activation_channel_shared(::google::protobuf::int32 value) {
  set_has_activation_channel_shared();
  activation_channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_channel_shared)
}

// optional int32 activation_gt_scale = 18;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_activation_gt_scale() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_activation_gt_scale() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_activation_gt_scale() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_activation_gt_scale() {
  activation_gt_scale_ = 0;
  clear_has_activation_gt_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_fixed_forward_bmkernel::activation_gt_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_gt_scale)
  return activation_gt_scale_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_activation_gt_scale(::google::protobuf::int32 value) {
  set_has_activation_gt_scale();
  activation_gt_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_gt_scale)
}

// optional int32 activation_gt_rshift = 19;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_activation_gt_rshift() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_activation_gt_rshift() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_activation_gt_rshift() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_activation_gt_rshift() {
  activation_gt_rshift_ = 0;
  clear_has_activation_gt_rshift();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_fixed_forward_bmkernel::activation_gt_rshift() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_gt_rshift)
  return activation_gt_rshift_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_activation_gt_rshift(::google::protobuf::int32 value) {
  set_has_activation_gt_rshift();
  activation_gt_rshift_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_gt_rshift)
}

// optional int32 activation_le_scale = 20;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_activation_le_scale() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_activation_le_scale() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_activation_le_scale() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_activation_le_scale() {
  activation_le_scale_ = 0;
  clear_has_activation_le_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_fixed_forward_bmkernel::activation_le_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_le_scale)
  return activation_le_scale_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_activation_le_scale(::google::protobuf::int32 value) {
  set_has_activation_le_scale();
  activation_le_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_le_scale)
}

// optional int32 activation_le_rshift = 21;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_activation_le_rshift() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_activation_le_rshift() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_activation_le_rshift() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_activation_le_rshift() {
  activation_le_rshift_ = 0;
  clear_has_activation_le_rshift();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_fixed_forward_bmkernel::activation_le_rshift() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_le_rshift)
  return activation_le_rshift_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_activation_le_rshift(::google::protobuf::int32 value) {
  set_has_activation_le_rshift();
  activation_le_rshift_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.activation_le_rshift)
}

// optional bool weight_transpose = 22;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_weight_transpose() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_weight_transpose() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_weight_transpose() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_weight_transpose() {
  weight_transpose_ = false;
  clear_has_weight_transpose();
}
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::weight_transpose() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.weight_transpose)
  return weight_transpose_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_weight_transpose(bool value) {
  set_has_weight_transpose();
  weight_transpose_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.weight_transpose)
}

// optional int32 left_shift_width = 23;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_left_shift_width() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_left_shift_width() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_left_shift_width() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_left_shift_width() {
  left_shift_width_ = 0;
  clear_has_left_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_fixed_forward_bmkernel::left_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.left_shift_width)
  return left_shift_width_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_left_shift_width(::google::protobuf::int32 value) {
  set_has_left_shift_width();
  left_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.left_shift_width)
}

// optional int32 right_shift_width = 24;
inline bool Inst_bmnet_fc_fixed_forward_bmkernel::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_fixed_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_fc_fixed_forward_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel.right_shift_width)
}

// -------------------------------------------------------------------

// Inst_bmnet_relu_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_relu_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_relu_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_relu_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_relu_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_relu_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_relu_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_relu_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_relu_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_relu_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_relu_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_relu_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_relu_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.depends_len)
}

// optional uint64 bottom_gaddr = 6;
inline bool Inst_bmnet_relu_fixed_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_relu_fixed_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 7;
inline bool Inst_bmnet_relu_fixed_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_relu_fixed_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.top_gaddr)
}

// optional float negative_slope = 8;
inline bool Inst_bmnet_relu_fixed_forward_bmkernel::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float Inst_bmnet_relu_fixed_forward_bmkernel::negative_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.negative_slope)
  return negative_slope_;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.negative_slope)
}

// optional int32 input_n = 9;
inline bool Inst_bmnet_relu_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_relu_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 10;
inline bool Inst_bmnet_relu_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_relu_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 11;
inline bool Inst_bmnet_relu_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_relu_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 12;
inline bool Inst_bmnet_relu_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_relu_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_relu_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_clip_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_clip_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_clip_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_clip_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_clip_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_clip_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_clip_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_clip_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_clip_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_clip_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_clip_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_clip_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_clip_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.depends_len)
}

// optional uint64 bottom_gaddr = 6;
inline bool Inst_bmnet_clip_fixed_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_clip_fixed_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 7;
inline bool Inst_bmnet_clip_fixed_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_clip_fixed_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.top_gaddr)
}

// optional int32 max = 8;
inline bool Inst_bmnet_clip_fixed_forward_bmkernel::has_max() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_has_max() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_has_max() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline ::google::protobuf::int32 Inst_bmnet_clip_fixed_forward_bmkernel::max() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.max)
  return max_;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_max(::google::protobuf::int32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.max)
}

// optional int32 min = 9;
inline bool Inst_bmnet_clip_fixed_forward_bmkernel::has_min() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_has_min() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_has_min() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline ::google::protobuf::int32 Inst_bmnet_clip_fixed_forward_bmkernel::min() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.min)
  return min_;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_min(::google::protobuf::int32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.min)
}

// optional int32 input_n = 10;
inline bool Inst_bmnet_clip_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_clip_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 11;
inline bool Inst_bmnet_clip_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_clip_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 12;
inline bool Inst_bmnet_clip_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_clip_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 13;
inline bool Inst_bmnet_clip_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_clip_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_clip_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_leakyrelu_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_leakyrelu_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_leakyrelu_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_leakyrelu_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.depends_len)
}

// optional uint64 input_gaddr = 6;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 7;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.output_gaddr)
}

// optional int32 input_n = 8;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 9;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 10;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 11;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.input_w)
}

// optional int32 GT_right_shift_width = 12;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_gt_right_shift_width() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_gt_right_shift_width() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_gt_right_shift_width() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_gt_right_shift_width() {
  gt_right_shift_width_ = 0;
  clear_has_gt_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::gt_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.GT_right_shift_width)
  return gt_right_shift_width_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_gt_right_shift_width(::google::protobuf::int32 value) {
  set_has_gt_right_shift_width();
  gt_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.GT_right_shift_width)
}

// optional int32 LE_right_shift_width = 13;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_le_right_shift_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_le_right_shift_width() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_le_right_shift_width() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_le_right_shift_width() {
  le_right_shift_width_ = 0;
  clear_has_le_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::le_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.LE_right_shift_width)
  return le_right_shift_width_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_le_right_shift_width(::google::protobuf::int32 value) {
  set_has_le_right_shift_width();
  le_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.LE_right_shift_width)
}

// optional int32 GT_scale = 14;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_gt_scale() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_gt_scale() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_gt_scale() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_gt_scale() {
  gt_scale_ = 0;
  clear_has_gt_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::gt_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.GT_scale)
  return gt_scale_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_gt_scale(::google::protobuf::int32 value) {
  set_has_gt_scale();
  gt_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.GT_scale)
}

// optional int32 LE_scale = 15;
inline bool Inst_bmnet_leakyrelu_fixed_forward_bmkernel::has_le_scale() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_has_le_scale() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_has_le_scale() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::clear_le_scale() {
  le_scale_ = 0;
  clear_has_le_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_leakyrelu_fixed_forward_bmkernel::le_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.LE_scale)
  return le_scale_;
}
inline void Inst_bmnet_leakyrelu_fixed_forward_bmkernel::set_le_scale(::google::protobuf::int32 value) {
  set_has_le_scale();
  le_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel.LE_scale)
}

// -------------------------------------------------------------------

// Inst_bmnet_prelu_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_prelu_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_prelu_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_prelu_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_prelu_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_prelu_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_prelu_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_prelu_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_prelu_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.depends_len)
}

// optional uint64 input_gaddr = 6;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_prelu_fixed_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.input_gaddr)
}

// optional uint64 slope_gaddr = 7;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_slope_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_slope_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_slope_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_slope_gaddr() {
  slope_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_slope_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_prelu_fixed_forward_bmkernel::slope_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.slope_gaddr)
  return slope_gaddr_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_slope_gaddr(::google::protobuf::uint64 value) {
  set_has_slope_gaddr();
  slope_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.slope_gaddr)
}

// optional uint64 output_gaddr = 8;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_prelu_fixed_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.output_gaddr)
}

// optional int32 channel_shared = 9;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_channel_shared() {
  channel_shared_ = 0;
  clear_has_channel_shared();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_fixed_forward_bmkernel::channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.channel_shared)
  return channel_shared_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_channel_shared(::google::protobuf::int32 value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.channel_shared)
}

// optional int32 slope = 10;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_slope() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_slope() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_slope() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_slope() {
  slope_ = 0;
  clear_has_slope();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_fixed_forward_bmkernel::slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.slope)
  return slope_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_slope(::google::protobuf::int32 value) {
  set_has_slope();
  slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.slope)
}

// optional int32 input_n = 11;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 12;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 13;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 14;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.input_w)
}

// optional int32 GT_scale = 15;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_gt_scale() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_gt_scale() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_gt_scale() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_gt_scale() {
  gt_scale_ = 0;
  clear_has_gt_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_fixed_forward_bmkernel::gt_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.GT_scale)
  return gt_scale_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_gt_scale(::google::protobuf::int32 value) {
  set_has_gt_scale();
  gt_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.GT_scale)
}

// optional int32 GT_right_shift_width = 16;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_gt_right_shift_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_gt_right_shift_width() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_gt_right_shift_width() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_gt_right_shift_width() {
  gt_right_shift_width_ = 0;
  clear_has_gt_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_fixed_forward_bmkernel::gt_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.GT_right_shift_width)
  return gt_right_shift_width_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_gt_right_shift_width(::google::protobuf::int32 value) {
  set_has_gt_right_shift_width();
  gt_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.GT_right_shift_width)
}

// optional int32 LE_right_shift_width = 17;
inline bool Inst_bmnet_prelu_fixed_forward_bmkernel::has_le_right_shift_width() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_has_le_right_shift_width() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_has_le_right_shift_width() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::clear_le_right_shift_width() {
  le_right_shift_width_ = 0;
  clear_has_le_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_fixed_forward_bmkernel::le_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.LE_right_shift_width)
  return le_right_shift_width_;
}
inline void Inst_bmnet_prelu_fixed_forward_bmkernel::set_le_right_shift_width(::google::protobuf::int32 value) {
  set_has_le_right_shift_width();
  le_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel.LE_right_shift_width)
}

// -------------------------------------------------------------------

// Inst_bmnet_sigmoid_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_sigmoid_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_sigmoid_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_sigmoid_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_sigmoid_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_sigmoid_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_sigmoid_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_sigmoid_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_sigmoid_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_sigmoid_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_sigmoid_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_sigmoid_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_sigmoid_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.depends_len)
}

// optional uint64 bottom_gaddr = 6;
inline bool Inst_bmnet_sigmoid_fixed_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_sigmoid_fixed_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 7;
inline bool Inst_bmnet_sigmoid_fixed_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_sigmoid_fixed_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.top_gaddr)
}

// optional uint64 sg_lut_gaddr = 8;
inline bool Inst_bmnet_sigmoid_fixed_forward_bmkernel::has_sg_lut_gaddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_has_sg_lut_gaddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_has_sg_lut_gaddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_sg_lut_gaddr() {
  sg_lut_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_sg_lut_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_sigmoid_fixed_forward_bmkernel::sg_lut_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.sg_lut_gaddr)
  return sg_lut_gaddr_;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_sg_lut_gaddr(::google::protobuf::uint64 value) {
  set_has_sg_lut_gaddr();
  sg_lut_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.sg_lut_gaddr)
}

// optional int32 input_n = 9;
inline bool Inst_bmnet_sigmoid_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_sigmoid_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 10;
inline bool Inst_bmnet_sigmoid_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_sigmoid_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 11;
inline bool Inst_bmnet_sigmoid_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_sigmoid_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 12;
inline bool Inst_bmnet_sigmoid_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_sigmoid_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_sigmoid_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.depends)
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.depends_len)
}

// optional uint64 bottom_gaddr = 6;
inline bool Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.bottom_gaddr)
}

// optional uint64 mean_ma_gaddr = 7;
inline bool Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::has_mean_ma_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_has_mean_ma_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_has_mean_ma_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_mean_ma_gaddr() {
  mean_ma_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_mean_ma_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::mean_ma_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.mean_ma_gaddr)
  return mean_ma_gaddr_;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_mean_ma_gaddr(::google::protobuf::uint64 value) {
  set_has_mean_ma_gaddr();
  mean_ma_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.mean_ma_gaddr)
}

// optional uint64 variance_ma_gaddr = 8;
inline bool Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::has_variance_ma_gaddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_has_variance_ma_gaddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_has_variance_ma_gaddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_variance_ma_gaddr() {
  variance_ma_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_variance_ma_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::variance_ma_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.variance_ma_gaddr)
  return variance_ma_gaddr_;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_variance_ma_gaddr(::google::protobuf::uint64 value) {
  set_has_variance_ma_gaddr();
  variance_ma_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.variance_ma_gaddr)
}

// optional uint64 top_gaddr = 9;
inline bool Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.top_gaddr)
}

// optional int32 input_n = 10;
inline bool Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.input_n)
}

// optional int32 input_c = 11;
inline bool Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.input_c)
}

// optional int32 input_h = 12;
inline bool Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.input_h)
}

// optional int32 input_w = 13;
inline bool Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.input_w)
}

// optional int32 right_shift_width = 14;
inline bool Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel.right_shift_width)
}

// -------------------------------------------------------------------

// Inst_bmnet_scale_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_scale_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_scale_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_scale_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_scale_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_scale_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_scale_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_scale_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_scale_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.depends_len)
}

// optional uint64 input_gaddr = 6;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_scale_fixed_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.input_gaddr)
}

// optional uint64 scale_gaddr = 7;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_scale_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_scale_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_scale_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_scale_gaddr() {
  scale_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_scale_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_scale_fixed_forward_bmkernel::scale_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.scale_gaddr)
  return scale_gaddr_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_scale_gaddr(::google::protobuf::uint64 value) {
  set_has_scale_gaddr();
  scale_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.scale_gaddr)
}

// optional uint64 bias_gaddr = 8;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_bias_gaddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_bias_gaddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_bias_gaddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_bias_gaddr() {
  bias_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bias_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_scale_fixed_forward_bmkernel::bias_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.bias_gaddr)
  return bias_gaddr_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_bias_gaddr(::google::protobuf::uint64 value) {
  set_has_bias_gaddr();
  bias_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.bias_gaddr)
}

// optional uint64 output_gaddr = 9;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_scale_fixed_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.output_gaddr)
}

// optional int32 input_n = 10;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_scale_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 11;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_scale_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 12;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_scale_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 13;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_scale_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.input_w)
}

// optional int32 scale_dim = 14;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_scale_dim() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_scale_dim() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_scale_dim() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_scale_dim() {
  scale_dim_ = 0;
  clear_has_scale_dim();
}
inline ::google::protobuf::int32 Inst_bmnet_scale_fixed_forward_bmkernel::scale_dim() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.scale_dim)
  return scale_dim_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_scale_dim(::google::protobuf::int32 value) {
  set_has_scale_dim();
  scale_dim_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.scale_dim)
}

// optional int32 inner_dim = 15;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_inner_dim() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_inner_dim() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_inner_dim() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_inner_dim() {
  inner_dim_ = 0;
  clear_has_inner_dim();
}
inline ::google::protobuf::int32 Inst_bmnet_scale_fixed_forward_bmkernel::inner_dim() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.inner_dim)
  return inner_dim_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_inner_dim(::google::protobuf::int32 value) {
  set_has_inner_dim();
  inner_dim_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.inner_dim)
}

// optional int32 right_shift_width = 16;
inline bool Inst_bmnet_scale_fixed_forward_bmkernel::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_scale_fixed_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_scale_fixed_forward_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel.right_shift_width)
}

// -------------------------------------------------------------------

// Inst_bmnet_reshape_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_reshape_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_reshape_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_reshape_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_reshape_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_reshape_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_reshape_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_reshape_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_reshape_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_reshape_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_reshape_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_reshape_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_reshape_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.depends_len)
}

// optional uint64 input_gaddr = 6;
inline bool Inst_bmnet_reshape_fixed_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_reshape_fixed_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 7;
inline bool Inst_bmnet_reshape_fixed_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_reshape_fixed_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.output_gaddr)
}

// optional int32 output_dim_len = 8;
inline bool Inst_bmnet_reshape_fixed_forward_bmkernel::has_output_dim_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_has_output_dim_len() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_has_output_dim_len() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_output_dim_len() {
  output_dim_len_ = 0;
  clear_has_output_dim_len();
}
inline ::google::protobuf::int32 Inst_bmnet_reshape_fixed_forward_bmkernel::output_dim_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.output_dim_len)
  return output_dim_len_;
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_output_dim_len(::google::protobuf::int32 value) {
  set_has_output_dim_len();
  output_dim_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.output_dim_len)
}

// repeated int32 output_dim = 9;
inline int Inst_bmnet_reshape_fixed_forward_bmkernel::output_dim_size() const {
  return output_dim_.size();
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::clear_output_dim() {
  output_dim_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_reshape_fixed_forward_bmkernel::output_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.output_dim)
  return output_dim_.Get(index);
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::set_output_dim(int index, ::google::protobuf::int32 value) {
  output_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.output_dim)
}
inline void Inst_bmnet_reshape_fixed_forward_bmkernel::add_output_dim(::google::protobuf::int32 value) {
  output_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.output_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_reshape_fixed_forward_bmkernel::output_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.output_dim)
  return output_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_reshape_fixed_forward_bmkernel::mutable_output_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel.output_dim)
  return &output_dim_;
}

// -------------------------------------------------------------------

// Inst_bmnet_split_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_split_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_split_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_split_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_split_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_split_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_split_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_split_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_split_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_split_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_split_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_split_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_split_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.depends_len)
}

// optional uint64 bottom_gaddr = 6;
inline bool Inst_bmnet_split_fixed_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_split_fixed_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.bottom_gaddr)
}

// repeated uint64 top_gaddr = 7;
inline int Inst_bmnet_split_fixed_forward_bmkernel::top_gaddr_size() const {
  return top_gaddr_.size();
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_.Clear();
}
inline ::google::protobuf::uint64 Inst_bmnet_split_fixed_forward_bmkernel::top_gaddr(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.top_gaddr)
  return top_gaddr_.Get(index);
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_top_gaddr(int index, ::google::protobuf::uint64 value) {
  top_gaddr_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.top_gaddr)
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::add_top_gaddr(::google::protobuf::uint64 value) {
  top_gaddr_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.top_gaddr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Inst_bmnet_split_fixed_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Inst_bmnet_split_fixed_forward_bmkernel::mutable_top_gaddr() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.top_gaddr)
  return &top_gaddr_;
}

// optional int32 top_size = 8;
inline bool Inst_bmnet_split_fixed_forward_bmkernel::has_top_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_has_top_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_has_top_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_top_size() {
  top_size_ = 0;
  clear_has_top_size();
}
inline ::google::protobuf::int32 Inst_bmnet_split_fixed_forward_bmkernel::top_size() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.top_size)
  return top_size_;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_top_size(::google::protobuf::int32 value) {
  set_has_top_size();
  top_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.top_size)
}

// optional int32 input_n = 9;
inline bool Inst_bmnet_split_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_split_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 10;
inline bool Inst_bmnet_split_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_split_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 11;
inline bool Inst_bmnet_split_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_split_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 12;
inline bool Inst_bmnet_split_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_split_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_split_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_concat_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_concat_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_concat_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_concat_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_concat_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_concat_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_concat_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_concat_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_concat_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_concat_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_concat_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_concat_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_concat_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.depends_len)
}

// repeated uint64 input_gaddrs = 6;
inline int Inst_bmnet_concat_fixed_forward_bmkernel::input_gaddrs_size() const {
  return input_gaddrs_.size();
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_input_gaddrs() {
  input_gaddrs_.Clear();
}
inline ::google::protobuf::uint64 Inst_bmnet_concat_fixed_forward_bmkernel::input_gaddrs(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.input_gaddrs)
  return input_gaddrs_.Get(index);
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_input_gaddrs(int index, ::google::protobuf::uint64 value) {
  input_gaddrs_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.input_gaddrs)
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::add_input_gaddrs(::google::protobuf::uint64 value) {
  input_gaddrs_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.input_gaddrs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Inst_bmnet_concat_fixed_forward_bmkernel::input_gaddrs() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.input_gaddrs)
  return input_gaddrs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Inst_bmnet_concat_fixed_forward_bmkernel::mutable_input_gaddrs() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.input_gaddrs)
  return &input_gaddrs_;
}

// optional uint64 output_gaddr = 7;
inline bool Inst_bmnet_concat_fixed_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_concat_fixed_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.output_gaddr)
}

// repeated int32 input_dims = 8;
inline int Inst_bmnet_concat_fixed_forward_bmkernel::input_dims_size() const {
  return input_dims_.size();
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_input_dims() {
  input_dims_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_concat_fixed_forward_bmkernel::input_dims(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.input_dims)
  return input_dims_.Get(index);
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_input_dims(int index, ::google::protobuf::int32 value) {
  input_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.input_dims)
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::add_input_dims(::google::protobuf::int32 value) {
  input_dims_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.input_dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_concat_fixed_forward_bmkernel::input_dims() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.input_dims)
  return input_dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_concat_fixed_forward_bmkernel::mutable_input_dims() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.input_dims)
  return &input_dims_;
}

// optional int32 input_num = 9;
inline bool Inst_bmnet_concat_fixed_forward_bmkernel::has_input_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_has_input_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_has_input_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_input_num() {
  input_num_ = 0;
  clear_has_input_num();
}
inline ::google::protobuf::int32 Inst_bmnet_concat_fixed_forward_bmkernel::input_num() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.input_num)
  return input_num_;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_input_num(::google::protobuf::int32 value) {
  set_has_input_num();
  input_num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.input_num)
}

// optional int32 concat_axis = 10;
inline bool Inst_bmnet_concat_fixed_forward_bmkernel::has_concat_axis() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_has_concat_axis() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_has_concat_axis() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_concat_axis() {
  concat_axis_ = 0;
  clear_has_concat_axis();
}
inline ::google::protobuf::int32 Inst_bmnet_concat_fixed_forward_bmkernel::concat_axis() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.concat_axis)
  return concat_axis_;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_concat_axis(::google::protobuf::int32 value) {
  set_has_concat_axis();
  concat_axis_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.concat_axis)
}

// optional int32 output_dim_len = 11;
inline bool Inst_bmnet_concat_fixed_forward_bmkernel::has_output_dim_len() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_has_output_dim_len() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_has_output_dim_len() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_output_dim_len() {
  output_dim_len_ = 0;
  clear_has_output_dim_len();
}
inline ::google::protobuf::int32 Inst_bmnet_concat_fixed_forward_bmkernel::output_dim_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.output_dim_len)
  return output_dim_len_;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_output_dim_len(::google::protobuf::int32 value) {
  set_has_output_dim_len();
  output_dim_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.output_dim_len)
}

// repeated int32 output_dim = 12;
inline int Inst_bmnet_concat_fixed_forward_bmkernel::output_dim_size() const {
  return output_dim_.size();
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_output_dim() {
  output_dim_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_concat_fixed_forward_bmkernel::output_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.output_dim)
  return output_dim_.Get(index);
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_output_dim(int index, ::google::protobuf::int32 value) {
  output_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.output_dim)
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::add_output_dim(::google::protobuf::int32 value) {
  output_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.output_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_concat_fixed_forward_bmkernel::output_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.output_dim)
  return output_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_concat_fixed_forward_bmkernel::mutable_output_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.output_dim)
  return &output_dim_;
}

// optional int32 need_quantize_num = 13;
inline bool Inst_bmnet_concat_fixed_forward_bmkernel::has_need_quantize_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_has_need_quantize_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_has_need_quantize_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_need_quantize_num() {
  need_quantize_num_ = 0;
  clear_has_need_quantize_num();
}
inline ::google::protobuf::int32 Inst_bmnet_concat_fixed_forward_bmkernel::need_quantize_num() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.need_quantize_num)
  return need_quantize_num_;
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_need_quantize_num(::google::protobuf::int32 value) {
  set_has_need_quantize_num();
  need_quantize_num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.need_quantize_num)
}

// repeated int32 right_shift_width = 14;
inline int Inst_bmnet_concat_fixed_forward_bmkernel::right_shift_width_size() const {
  return right_shift_width_.size();
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_concat_fixed_forward_bmkernel::right_shift_width(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_.Get(index);
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_right_shift_width(int index, ::google::protobuf::int32 value) {
  right_shift_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.right_shift_width)
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::add_right_shift_width(::google::protobuf::int32 value) {
  right_shift_width_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.right_shift_width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_concat_fixed_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_concat_fixed_forward_bmkernel::mutable_right_shift_width() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.right_shift_width)
  return &right_shift_width_;
}

// repeated int32 threshold_x_quantized = 15;
inline int Inst_bmnet_concat_fixed_forward_bmkernel::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_concat_fixed_forward_bmkernel::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.threshold_x_quantized)
}
inline void Inst_bmnet_concat_fixed_forward_bmkernel::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_concat_fixed_forward_bmkernel::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_concat_fixed_forward_bmkernel::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// -------------------------------------------------------------------

// Inst_bmnet_eltwise_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_eltwise_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_eltwise_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_eltwise_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_eltwise_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_eltwise_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_eltwise_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_eltwise_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_eltwise_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.depends_len)
}

// repeated uint64 ga_input = 6;
inline int Inst_bmnet_eltwise_fixed_forward_bmkernel::ga_input_size() const {
  return ga_input_.size();
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_ga_input() {
  ga_input_.Clear();
}
inline ::google::protobuf::uint64 Inst_bmnet_eltwise_fixed_forward_bmkernel::ga_input(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.ga_input)
  return ga_input_.Get(index);
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_ga_input(int index, ::google::protobuf::uint64 value) {
  ga_input_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.ga_input)
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::add_ga_input(::google::protobuf::uint64 value) {
  ga_input_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.ga_input)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Inst_bmnet_eltwise_fixed_forward_bmkernel::ga_input() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.ga_input)
  return ga_input_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Inst_bmnet_eltwise_fixed_forward_bmkernel::mutable_ga_input() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.ga_input)
  return &ga_input_;
}

// optional uint64 ga_output = 7;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_ga_output() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_ga_output() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_ga_output() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_ga_output() {
  ga_output_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_output();
}
inline ::google::protobuf::uint64 Inst_bmnet_eltwise_fixed_forward_bmkernel::ga_output() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.ga_output)
  return ga_output_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_ga_output(::google::protobuf::uint64 value) {
  set_has_ga_output();
  ga_output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.ga_output)
}

// optional int32 input_size = 8;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_input_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_input_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_input_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_input_size() {
  input_size_ = 0;
  clear_has_input_size();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_fixed_forward_bmkernel::input_size() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.input_size)
  return input_size_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_input_size(::google::protobuf::int32 value) {
  set_has_input_size();
  input_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.input_size)
}

// optional int32 op = 9;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_op() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_op() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_op() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_fixed_forward_bmkernel::op() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.op)
  return op_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.op)
}

// optional int32 input_n = 10;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 11;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 12;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 13;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.input_w)
}

// optional bool do_relu = 14;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_do_relu() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_do_relu() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_do_relu() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_do_relu() {
  do_relu_ = false;
  clear_has_do_relu();
}
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::do_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.do_relu)
  return do_relu_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_do_relu(bool value) {
  set_has_do_relu();
  do_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.do_relu)
}

// optional float relu_slope = 15;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_relu_slope() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_relu_slope() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_relu_slope() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_relu_slope() {
  relu_slope_ = 0;
  clear_has_relu_slope();
}
inline float Inst_bmnet_eltwise_fixed_forward_bmkernel::relu_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.relu_slope)
  return relu_slope_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_relu_slope(float value) {
  set_has_relu_slope();
  relu_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.relu_slope)
}

// optional int32 right_shift_width = 16;
inline bool Inst_bmnet_eltwise_fixed_forward_bmkernel::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_fixed_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.right_shift_width)
}

// repeated int32 threshold_x_quantized = 17;
inline int Inst_bmnet_eltwise_fixed_forward_bmkernel::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_fixed_forward_bmkernel::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.threshold_x_quantized)
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_eltwise_fixed_forward_bmkernel::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_eltwise_fixed_forward_bmkernel::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// repeated int32 coeffs = 18;
inline int Inst_bmnet_eltwise_fixed_forward_bmkernel::coeffs_size() const {
  return coeffs_.size();
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::clear_coeffs() {
  coeffs_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_fixed_forward_bmkernel::coeffs(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.coeffs)
  return coeffs_.Get(index);
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::set_coeffs(int index, ::google::protobuf::int32 value) {
  coeffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.coeffs)
}
inline void Inst_bmnet_eltwise_fixed_forward_bmkernel::add_coeffs(::google::protobuf::int32 value) {
  coeffs_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.coeffs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_eltwise_fixed_forward_bmkernel::coeffs() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.coeffs)
  return coeffs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_eltwise_fixed_forward_bmkernel::mutable_coeffs() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel.coeffs)
  return &coeffs_;
}

// -------------------------------------------------------------------

// Inst_bmnet_permute_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_permute_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_permute_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_permute_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_permute_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_permute_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_permute_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_permute_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_permute_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.depends_len)
}

// optional uint64 input_gaddr = 6;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_permute_fixed_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 7;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_permute_fixed_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.output_gaddr)
}

// optional int32 input_n = 8;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 9;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 10;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 11;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.input_w)
}

// optional int32 output_n = 12;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_output_n() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_output_n() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_output_n() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_output_n() {
  output_n_ = 0;
  clear_has_output_n();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_fixed_forward_bmkernel::output_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.output_n)
  return output_n_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_output_n(::google::protobuf::int32 value) {
  set_has_output_n();
  output_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.output_n)
}

// optional int32 output_c = 13;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_output_c() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_output_c() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_output_c() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_output_c() {
  output_c_ = 0;
  clear_has_output_c();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_fixed_forward_bmkernel::output_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.output_c)
  return output_c_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_output_c(::google::protobuf::int32 value) {
  set_has_output_c();
  output_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.output_c)
}

// optional int32 output_h = 14;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_output_h() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_output_h() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_output_h() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_output_h() {
  output_h_ = 0;
  clear_has_output_h();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_fixed_forward_bmkernel::output_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.output_h)
  return output_h_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_output_h(::google::protobuf::int32 value) {
  set_has_output_h();
  output_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.output_h)
}

// optional int32 output_w = 15;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_output_w() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_output_w() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_output_w() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_output_w() {
  output_w_ = 0;
  clear_has_output_w();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_fixed_forward_bmkernel::output_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.output_w)
  return output_w_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_output_w(::google::protobuf::int32 value) {
  set_has_output_w();
  output_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.output_w)
}

// optional int32 order_n = 16;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_order_n() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_order_n() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_order_n() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_order_n() {
  order_n_ = 0;
  clear_has_order_n();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_fixed_forward_bmkernel::order_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.order_n)
  return order_n_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_order_n(::google::protobuf::int32 value) {
  set_has_order_n();
  order_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.order_n)
}

// optional int32 order_c = 17;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_order_c() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_order_c() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_order_c() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_order_c() {
  order_c_ = 0;
  clear_has_order_c();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_fixed_forward_bmkernel::order_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.order_c)
  return order_c_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_order_c(::google::protobuf::int32 value) {
  set_has_order_c();
  order_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.order_c)
}

// optional int32 order_h = 18;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_order_h() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_order_h() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_order_h() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_order_h() {
  order_h_ = 0;
  clear_has_order_h();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_fixed_forward_bmkernel::order_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.order_h)
  return order_h_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_order_h(::google::protobuf::int32 value) {
  set_has_order_h();
  order_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.order_h)
}

// optional int32 order_w = 19;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_order_w() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_order_w() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_order_w() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_order_w() {
  order_w_ = 0;
  clear_has_order_w();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_fixed_forward_bmkernel::order_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.order_w)
  return order_w_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_order_w(::google::protobuf::int32 value) {
  set_has_order_w();
  order_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.order_w)
}

// optional bool need_permute = 20;
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::has_need_permute() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_has_need_permute() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_has_need_permute() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::clear_need_permute() {
  need_permute_ = false;
  clear_has_need_permute();
}
inline bool Inst_bmnet_permute_fixed_forward_bmkernel::need_permute() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.need_permute)
  return need_permute_;
}
inline void Inst_bmnet_permute_fixed_forward_bmkernel::set_need_permute(bool value) {
  set_has_need_permute();
  need_permute_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel.need_permute)
}

// -------------------------------------------------------------------

// Inst_bmnet_priorbox_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_priorbox_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_priorbox_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_priorbox_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_priorbox_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_priorbox_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_priorbox_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_priorbox_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_priorbox_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_priorbox_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_priorbox_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_priorbox_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_priorbox_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.depends_len)
}

// optional uint64 weight_data_gaddr = 6;
inline bool Inst_bmnet_priorbox_fixed_forward_bmkernel::has_weight_data_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_has_weight_data_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_has_weight_data_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_weight_data_gaddr() {
  weight_data_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_weight_data_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_priorbox_fixed_forward_bmkernel::weight_data_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.weight_data_gaddr)
  return weight_data_gaddr_;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_weight_data_gaddr(::google::protobuf::uint64 value) {
  set_has_weight_data_gaddr();
  weight_data_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.weight_data_gaddr)
}

// optional uint64 output_gaddr = 7;
inline bool Inst_bmnet_priorbox_fixed_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_priorbox_fixed_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.output_gaddr)
}

// optional int32 output_c = 8;
inline bool Inst_bmnet_priorbox_fixed_forward_bmkernel::has_output_c() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_has_output_c() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_has_output_c() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_output_c() {
  output_c_ = 0;
  clear_has_output_c();
}
inline ::google::protobuf::int32 Inst_bmnet_priorbox_fixed_forward_bmkernel::output_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.output_c)
  return output_c_;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_output_c(::google::protobuf::int32 value) {
  set_has_output_c();
  output_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.output_c)
}

// optional int32 output_h = 9;
inline bool Inst_bmnet_priorbox_fixed_forward_bmkernel::has_output_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_has_output_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_has_output_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_output_h() {
  output_h_ = 0;
  clear_has_output_h();
}
inline ::google::protobuf::int32 Inst_bmnet_priorbox_fixed_forward_bmkernel::output_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.output_h)
  return output_h_;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_output_h(::google::protobuf::int32 value) {
  set_has_output_h();
  output_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.output_h)
}

// optional int32 output_w = 10;
inline bool Inst_bmnet_priorbox_fixed_forward_bmkernel::has_output_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_has_output_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_has_output_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::clear_output_w() {
  output_w_ = 0;
  clear_has_output_w();
}
inline ::google::protobuf::int32 Inst_bmnet_priorbox_fixed_forward_bmkernel::output_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.output_w)
  return output_w_;
}
inline void Inst_bmnet_priorbox_fixed_forward_bmkernel::set_output_w(::google::protobuf::int32 value) {
  set_has_output_w();
  output_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel.output_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_lrn_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_lrn_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_lrn_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_lrn_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_lrn_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_lrn_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_lrn_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_lrn_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_lrn_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.depends_len)
}

// optional uint64 bottom_gaddr = 6;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_lrn_fixed_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 7;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_lrn_fixed_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.top_gaddr)
}

// optional uint64 sqr_lut_gaddr = 8;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_sqr_lut_gaddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_sqr_lut_gaddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_sqr_lut_gaddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_sqr_lut_gaddr() {
  sqr_lut_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_sqr_lut_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_lrn_fixed_forward_bmkernel::sqr_lut_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.sqr_lut_gaddr)
  return sqr_lut_gaddr_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_sqr_lut_gaddr(::google::protobuf::uint64 value) {
  set_has_sqr_lut_gaddr();
  sqr_lut_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.sqr_lut_gaddr)
}

// optional uint64 power_lut_gaddr = 9;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_power_lut_gaddr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_power_lut_gaddr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_power_lut_gaddr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_power_lut_gaddr() {
  power_lut_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_power_lut_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_lrn_fixed_forward_bmkernel::power_lut_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.power_lut_gaddr)
  return power_lut_gaddr_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_power_lut_gaddr(::google::protobuf::uint64 value) {
  set_has_power_lut_gaddr();
  power_lut_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.power_lut_gaddr)
}

// optional int32 input_n = 10;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_lrn_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 11;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_lrn_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 12;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_lrn_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 13;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_lrn_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.input_w)
}

// optional int32 size = 14;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 Inst_bmnet_lrn_fixed_forward_bmkernel::size() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.size)
  return size_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.size)
}

// optional int32 sum_right_shift_width = 15;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_sum_right_shift_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_sum_right_shift_width() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_sum_right_shift_width() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_sum_right_shift_width() {
  sum_right_shift_width_ = 0;
  clear_has_sum_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_lrn_fixed_forward_bmkernel::sum_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.sum_right_shift_width)
  return sum_right_shift_width_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_sum_right_shift_width(::google::protobuf::int32 value) {
  set_has_sum_right_shift_width();
  sum_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.sum_right_shift_width)
}

// optional int32 lrn_right_shift_width = 16;
inline bool Inst_bmnet_lrn_fixed_forward_bmkernel::has_lrn_right_shift_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_has_lrn_right_shift_width() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_has_lrn_right_shift_width() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_lrn_right_shift_width() {
  lrn_right_shift_width_ = 0;
  clear_has_lrn_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_lrn_fixed_forward_bmkernel::lrn_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.lrn_right_shift_width)
  return lrn_right_shift_width_;
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_lrn_right_shift_width(::google::protobuf::int32 value) {
  set_has_lrn_right_shift_width();
  lrn_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.lrn_right_shift_width)
}

// repeated int32 threshold_x_quantized = 17;
inline int Inst_bmnet_lrn_fixed_forward_bmkernel::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_lrn_fixed_forward_bmkernel::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.threshold_x_quantized)
}
inline void Inst_bmnet_lrn_fixed_forward_bmkernel::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_lrn_fixed_forward_bmkernel::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_lrn_fixed_forward_bmkernel::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// -------------------------------------------------------------------

// Inst_bmnet_upsample_fixed_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_upsample_fixed_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_upsample_fixed_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_upsample_fixed_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_upsample_fixed_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_upsample_fixed_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_upsample_fixed_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_upsample_fixed_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_upsample_fixed_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.depends)
}
inline void Inst_bmnet_upsample_fixed_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_upsample_fixed_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_upsample_fixed_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_upsample_fixed_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_upsample_fixed_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.depends_len)
}

// optional uint64 ga_ifmap = 6;
inline bool Inst_bmnet_upsample_fixed_bmkernel::has_ga_ifmap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_has_ga_ifmap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_has_ga_ifmap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_ga_ifmap() {
  ga_ifmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ifmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_upsample_fixed_bmkernel::ga_ifmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.ga_ifmap)
  return ga_ifmap_;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_ga_ifmap(::google::protobuf::uint64 value) {
  set_has_ga_ifmap();
  ga_ifmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.ga_ifmap)
}

// optional uint64 ga_ofmap = 7;
inline bool Inst_bmnet_upsample_fixed_bmkernel::has_ga_ofmap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_has_ga_ofmap() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_has_ga_ofmap() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_ga_ofmap() {
  ga_ofmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ofmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_upsample_fixed_bmkernel::ga_ofmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.ga_ofmap)
  return ga_ofmap_;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_ga_ofmap(::google::protobuf::uint64 value) {
  set_has_ga_ofmap();
  ga_ofmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.ga_ofmap)
}

// optional int32 input_n = 8;
inline bool Inst_bmnet_upsample_fixed_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_upsample_fixed_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.input_n)
}

// optional int32 input_c = 9;
inline bool Inst_bmnet_upsample_fixed_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_upsample_fixed_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.input_c)
}

// optional int32 input_h = 10;
inline bool Inst_bmnet_upsample_fixed_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_upsample_fixed_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.input_h)
}

// optional int32 input_w = 11;
inline bool Inst_bmnet_upsample_fixed_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_upsample_fixed_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.input_w)
}

// optional int32 h_factor = 12;
inline bool Inst_bmnet_upsample_fixed_bmkernel::has_h_factor() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_has_h_factor() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_has_h_factor() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_h_factor() {
  h_factor_ = 0;
  clear_has_h_factor();
}
inline ::google::protobuf::int32 Inst_bmnet_upsample_fixed_bmkernel::h_factor() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.h_factor)
  return h_factor_;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_h_factor(::google::protobuf::int32 value) {
  set_has_h_factor();
  h_factor_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.h_factor)
}

// optional int32 w_factor = 13;
inline bool Inst_bmnet_upsample_fixed_bmkernel::has_w_factor() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_has_w_factor() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_has_w_factor() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::clear_w_factor() {
  w_factor_ = 0;
  clear_has_w_factor();
}
inline ::google::protobuf::int32 Inst_bmnet_upsample_fixed_bmkernel::w_factor() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.w_factor)
  return w_factor_;
}
inline void Inst_bmnet_upsample_fixed_bmkernel::set_w_factor(::google::protobuf::int32 value) {
  set_has_w_factor();
  w_factor_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel.w_factor)
}

// -------------------------------------------------------------------

// Inst_bmnet_normalize_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_normalize_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_normalize_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_normalize_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_normalize_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_normalize_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_normalize_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_normalize_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_normalize_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.depends_len)
}

// optional uint64 input_gaddr = 6;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_normalize_fixed_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 7;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_normalize_fixed_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.output_gaddr)
}

// optional bool has_scale_blob = 8;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_has_scale_blob() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_has_scale_blob() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_has_scale_blob() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_scale_blob() {
  has_scale_blob_ = false;
  clear_has_has_scale_blob();
}
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_scale_blob() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.has_scale_blob)
  return has_scale_blob_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_scale_blob(bool value) {
  set_has_has_scale_blob();
  has_scale_blob_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.has_scale_blob)
}

// optional uint64 scale_gaddr = 9;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_scale_gaddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_scale_gaddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_scale_gaddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_scale_gaddr() {
  scale_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_scale_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_normalize_fixed_forward_bmkernel::scale_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.scale_gaddr)
  return scale_gaddr_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_scale_gaddr(::google::protobuf::uint64 value) {
  set_has_scale_gaddr();
  scale_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.scale_gaddr)
}

// optional uint64 sqr_lut_gaddr = 10;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_sqr_lut_gaddr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_sqr_lut_gaddr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_sqr_lut_gaddr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_sqr_lut_gaddr() {
  sqr_lut_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_sqr_lut_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_normalize_fixed_forward_bmkernel::sqr_lut_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.sqr_lut_gaddr)
  return sqr_lut_gaddr_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_sqr_lut_gaddr(::google::protobuf::uint64 value) {
  set_has_sqr_lut_gaddr();
  sqr_lut_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.sqr_lut_gaddr)
}

// optional uint64 sqrt_lut_gaddr = 11;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_sqrt_lut_gaddr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_sqrt_lut_gaddr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_sqrt_lut_gaddr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_sqrt_lut_gaddr() {
  sqrt_lut_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_sqrt_lut_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_normalize_fixed_forward_bmkernel::sqrt_lut_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.sqrt_lut_gaddr)
  return sqrt_lut_gaddr_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_sqrt_lut_gaddr(::google::protobuf::uint64 value) {
  set_has_sqrt_lut_gaddr();
  sqrt_lut_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.sqrt_lut_gaddr)
}

// optional bool across_spatial = 12;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_across_spatial() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_across_spatial() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_across_spatial() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_across_spatial() {
  across_spatial_ = false;
  clear_has_across_spatial();
}
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::across_spatial() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.across_spatial)
  return across_spatial_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_across_spatial(bool value) {
  set_has_across_spatial();
  across_spatial_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.across_spatial)
}

// optional bool channel_shared = 13;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.channel_shared)
  return channel_shared_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.channel_shared)
}

// repeated int32 scales = 14;
inline int Inst_bmnet_normalize_fixed_forward_bmkernel::scales_size() const {
  return scales_.size();
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_scales() {
  scales_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_normalize_fixed_forward_bmkernel::scales(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.scales)
  return scales_.Get(index);
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_scales(int index, ::google::protobuf::int32 value) {
  scales_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.scales)
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::add_scales(::google::protobuf::int32 value) {
  scales_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.scales)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_normalize_fixed_forward_bmkernel::scales() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.scales)
  return scales_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_normalize_fixed_forward_bmkernel::mutable_scales() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.scales)
  return &scales_;
}

// optional int32 input_n = 15;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_normalize_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 16;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_normalize_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 17;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_normalize_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 18;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_normalize_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.input_w)
}

// optional int32 sum_right_shift_width = 19;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_sum_right_shift_width() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_sum_right_shift_width() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_sum_right_shift_width() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_sum_right_shift_width() {
  sum_right_shift_width_ = 0;
  clear_has_sum_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_normalize_fixed_forward_bmkernel::sum_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.sum_right_shift_width)
  return sum_right_shift_width_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_sum_right_shift_width(::google::protobuf::int32 value) {
  set_has_sum_right_shift_width();
  sum_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.sum_right_shift_width)
}

// optional int32 norma_right_shift_width = 20;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_norma_right_shift_width() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_norma_right_shift_width() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_norma_right_shift_width() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_norma_right_shift_width() {
  norma_right_shift_width_ = 0;
  clear_has_norma_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_normalize_fixed_forward_bmkernel::norma_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.norma_right_shift_width)
  return norma_right_shift_width_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_norma_right_shift_width(::google::protobuf::int32 value) {
  set_has_norma_right_shift_width();
  norma_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.norma_right_shift_width)
}

// optional int32 scale_right_shift_width = 21;
inline bool Inst_bmnet_normalize_fixed_forward_bmkernel::has_scale_right_shift_width() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_has_scale_right_shift_width() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_has_scale_right_shift_width() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_scale_right_shift_width() {
  scale_right_shift_width_ = 0;
  clear_has_scale_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_normalize_fixed_forward_bmkernel::scale_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.scale_right_shift_width)
  return scale_right_shift_width_;
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_scale_right_shift_width(::google::protobuf::int32 value) {
  set_has_scale_right_shift_width();
  scale_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.scale_right_shift_width)
}

// repeated int32 threshold_x_quantized = 22;
inline int Inst_bmnet_normalize_fixed_forward_bmkernel::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_normalize_fixed_forward_bmkernel::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.threshold_x_quantized)
}
inline void Inst_bmnet_normalize_fixed_forward_bmkernel::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_normalize_fixed_forward_bmkernel::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_normalize_fixed_forward_bmkernel::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// -------------------------------------------------------------------

// Inst_bmnet_deconv_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_deconv_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_deconv_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_deconv_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_deconv_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_deconv_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_deconv_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_deconv_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_deconv_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.depends_len)
}

// optional uint64 ga_ifmap = 6;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_ga_ifmap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_ga_ifmap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_ga_ifmap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_ga_ifmap() {
  ga_ifmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ifmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_deconv_fixed_forward_bmkernel::ga_ifmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.ga_ifmap)
  return ga_ifmap_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_ga_ifmap(::google::protobuf::uint64 value) {
  set_has_ga_ifmap();
  ga_ifmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.ga_ifmap)
}

// optional uint64 ga_ofmap = 7;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_ga_ofmap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_ga_ofmap() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_ga_ofmap() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_ga_ofmap() {
  ga_ofmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ofmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_deconv_fixed_forward_bmkernel::ga_ofmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.ga_ofmap)
  return ga_ofmap_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_ga_ofmap(::google::protobuf::uint64 value) {
  set_has_ga_ofmap();
  ga_ofmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.ga_ofmap)
}

// optional uint64 ga_weight = 8;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_ga_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_ga_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_ga_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_ga_weight() {
  ga_weight_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_weight();
}
inline ::google::protobuf::uint64 Inst_bmnet_deconv_fixed_forward_bmkernel::ga_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.ga_weight)
  return ga_weight_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_ga_weight(::google::protobuf::uint64 value) {
  set_has_ga_weight();
  ga_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.ga_weight)
}

// optional uint64 ga_bias = 9;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_ga_bias() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_ga_bias() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_ga_bias() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_ga_bias() {
  ga_bias_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_bias();
}
inline ::google::protobuf::uint64 Inst_bmnet_deconv_fixed_forward_bmkernel::ga_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.ga_bias)
  return ga_bias_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_ga_bias(::google::protobuf::uint64 value) {
  set_has_ga_bias();
  ga_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.ga_bias)
}

// optional int32 input_n = 10;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.input_n)
}

// optional int32 input_c = 11;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.input_c)
}

// optional int32 input_h = 12;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.input_h)
}

// optional int32 input_w = 13;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.input_w)
}

// optional int32 groups = 14;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_groups() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_groups() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_groups() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_groups() {
  groups_ = 0;
  clear_has_groups();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::groups() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.groups)
  return groups_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_groups(::google::protobuf::int32 value) {
  set_has_groups();
  groups_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.groups)
}

// optional int32 output_c = 15;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_output_c() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_output_c() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_output_c() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_output_c() {
  output_c_ = 0;
  clear_has_output_c();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::output_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.output_c)
  return output_c_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_output_c(::google::protobuf::int32 value) {
  set_has_output_c();
  output_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.output_c)
}

// optional int32 output_h = 16;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_output_h() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_output_h() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_output_h() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_output_h() {
  output_h_ = 0;
  clear_has_output_h();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::output_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.output_h)
  return output_h_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_output_h(::google::protobuf::int32 value) {
  set_has_output_h();
  output_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.output_h)
}

// optional int32 output_w = 17;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_output_w() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_output_w() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_output_w() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_output_w() {
  output_w_ = 0;
  clear_has_output_w();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::output_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.output_w)
  return output_w_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_output_w(::google::protobuf::int32 value) {
  set_has_output_w();
  output_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.output_w)
}

// optional int32 kh = 18;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_kh() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_kh() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_kh() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_kh() {
  kh_ = 0;
  clear_has_kh();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::kh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.kh)
  return kh_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_kh(::google::protobuf::int32 value) {
  set_has_kh();
  kh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.kh)
}

// optional int32 kw = 19;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_kw() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_kw() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_kw() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_kw() {
  kw_ = 0;
  clear_has_kw();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::kw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.kw)
  return kw_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_kw(::google::protobuf::int32 value) {
  set_has_kw();
  kw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.kw)
}

// optional int32 dh = 20;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_dh() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_dh() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_dh() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_dh() {
  dh_ = 0;
  clear_has_dh();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::dh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.dh)
  return dh_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_dh(::google::protobuf::int32 value) {
  set_has_dh();
  dh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.dh)
}

// optional int32 dw = 21;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_dw() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_dw() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_dw() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_dw() {
  dw_ = 0;
  clear_has_dw();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::dw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.dw)
  return dw_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_dw(::google::protobuf::int32 value) {
  set_has_dw();
  dw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.dw)
}

// optional int32 pad_top = 22;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_pad_top() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_pad_top() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_pad_top() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_pad_top() {
  pad_top_ = 0;
  clear_has_pad_top();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::pad_top() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.pad_top)
  return pad_top_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_pad_top(::google::protobuf::int32 value) {
  set_has_pad_top();
  pad_top_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.pad_top)
}

// optional int32 pad_bottom = 23;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_pad_bottom() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_pad_bottom() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_pad_bottom() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_pad_bottom() {
  pad_bottom_ = 0;
  clear_has_pad_bottom();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::pad_bottom() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.pad_bottom)
  return pad_bottom_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_pad_bottom(::google::protobuf::int32 value) {
  set_has_pad_bottom();
  pad_bottom_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.pad_bottom)
}

// optional int32 pad_left = 24;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_pad_left() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_pad_left() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_pad_left() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_pad_left() {
  pad_left_ = 0;
  clear_has_pad_left();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::pad_left() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.pad_left)
  return pad_left_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_pad_left(::google::protobuf::int32 value) {
  set_has_pad_left();
  pad_left_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.pad_left)
}

// optional int32 pad_right = 25;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_pad_right() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_pad_right() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_pad_right() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_pad_right() {
  pad_right_ = 0;
  clear_has_pad_right();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::pad_right() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.pad_right)
  return pad_right_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_pad_right(::google::protobuf::int32 value) {
  set_has_pad_right();
  pad_right_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.pad_right)
}

// optional int32 stride_h = 26;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_stride_h() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_stride_h() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_stride_h() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_stride_h() {
  stride_h_ = 0;
  clear_has_stride_h();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::stride_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.stride_h)
  return stride_h_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_stride_h(::google::protobuf::int32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.stride_h)
}

// optional int32 stride_w = 27;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_stride_w() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_stride_w() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_stride_w() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_stride_w() {
  stride_w_ = 0;
  clear_has_stride_w();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::stride_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.stride_w)
  return stride_w_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_stride_w(::google::protobuf::int32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.stride_w)
}

// optional bool using_bias = 28;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_using_bias() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_using_bias() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_using_bias() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_using_bias() {
  using_bias_ = false;
  clear_has_using_bias();
}
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::using_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.using_bias)
  return using_bias_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_using_bias(bool value) {
  set_has_using_bias();
  using_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.using_bias)
}

// optional bool result_add = 29;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_result_add() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_result_add() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_result_add() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.result_add)
  return result_add_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.result_add)
}

// optional bool do_relu = 30;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_do_relu() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_do_relu() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_do_relu() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_do_relu() {
  do_relu_ = false;
  clear_has_do_relu();
}
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::do_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.do_relu)
  return do_relu_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_do_relu(bool value) {
  set_has_do_relu();
  do_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.do_relu)
}

// optional int32 right_shift_width = 31;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_right_shift_width() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_right_shift_width() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_fixed_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.right_shift_width)
}

// optional bool use_winograd = 32;
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::has_use_winograd() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_has_use_winograd() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_has_use_winograd() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::clear_use_winograd() {
  use_winograd_ = false;
  clear_has_use_winograd();
}
inline bool Inst_bmnet_deconv_fixed_forward_bmkernel::use_winograd() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.use_winograd)
  return use_winograd_;
}
inline void Inst_bmnet_deconv_fixed_forward_bmkernel::set_use_winograd(bool value) {
  set_has_use_winograd();
  use_winograd_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel.use_winograd)
}

// -------------------------------------------------------------------

// Inst_bmnet_crop_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_crop_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_crop_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_crop_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_crop_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_crop_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_crop_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_crop_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_crop_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_crop_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_crop_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_crop_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_crop_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.depends_len)
}

// optional uint64 input_gaddr = 6;
inline bool Inst_bmnet_crop_fixed_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_crop_fixed_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 7;
inline bool Inst_bmnet_crop_fixed_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_crop_fixed_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.output_gaddr)
}

// repeated int32 input_dim = 8;
inline int Inst_bmnet_crop_fixed_forward_bmkernel::input_dim_size() const {
  return input_dim_.size();
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_crop_fixed_forward_bmkernel::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.input_dim)
  return input_dim_.Get(index);
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.input_dim)
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_crop_fixed_forward_bmkernel::input_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_crop_fixed_forward_bmkernel::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.input_dim)
  return &input_dim_;
}

// repeated int32 output_dim = 9;
inline int Inst_bmnet_crop_fixed_forward_bmkernel::output_dim_size() const {
  return output_dim_.size();
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_output_dim() {
  output_dim_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_crop_fixed_forward_bmkernel::output_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.output_dim)
  return output_dim_.Get(index);
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_output_dim(int index, ::google::protobuf::int32 value) {
  output_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.output_dim)
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::add_output_dim(::google::protobuf::int32 value) {
  output_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.output_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_crop_fixed_forward_bmkernel::output_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.output_dim)
  return output_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_crop_fixed_forward_bmkernel::mutable_output_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.output_dim)
  return &output_dim_;
}

// repeated int32 offsets = 10;
inline int Inst_bmnet_crop_fixed_forward_bmkernel::offsets_size() const {
  return offsets_.size();
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_offsets() {
  offsets_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_crop_fixed_forward_bmkernel::offsets(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.offsets)
  return offsets_.Get(index);
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_offsets(int index, ::google::protobuf::int32 value) {
  offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.offsets)
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::add_offsets(::google::protobuf::int32 value) {
  offsets_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.offsets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_crop_fixed_forward_bmkernel::offsets() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.offsets)
  return offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_crop_fixed_forward_bmkernel::mutable_offsets() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.offsets)
  return &offsets_;
}

// optional int32 output_dim_len = 11;
inline bool Inst_bmnet_crop_fixed_forward_bmkernel::has_output_dim_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_has_output_dim_len() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_has_output_dim_len() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_output_dim_len() {
  output_dim_len_ = 0;
  clear_has_output_dim_len();
}
inline ::google::protobuf::int32 Inst_bmnet_crop_fixed_forward_bmkernel::output_dim_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.output_dim_len)
  return output_dim_len_;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_output_dim_len(::google::protobuf::int32 value) {
  set_has_output_dim_len();
  output_dim_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.output_dim_len)
}

// optional int32 right_shift_width = 12;
inline bool Inst_bmnet_crop_fixed_forward_bmkernel::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_crop_fixed_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.right_shift_width)
}

// repeated int32 threshold_x_quantized = 13;
inline int Inst_bmnet_crop_fixed_forward_bmkernel::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_crop_fixed_forward_bmkernel::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.threshold_x_quantized)
}
inline void Inst_bmnet_crop_fixed_forward_bmkernel::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_crop_fixed_forward_bmkernel::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_crop_fixed_forward_bmkernel::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// -------------------------------------------------------------------

// Inst_bmnet_arithmetic_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_arithmetic_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_arithmetic_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_arithmetic_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.depends_len)
}

// optional uint64 input_gaddr_0 = 6;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_input_gaddr_0() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_input_gaddr_0() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_input_gaddr_0() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_input_gaddr_0() {
  input_gaddr_0_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr_0();
}
inline ::google::protobuf::uint64 Inst_bmnet_arithmetic_fixed_forward_bmkernel::input_gaddr_0() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_gaddr_0)
  return input_gaddr_0_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_input_gaddr_0(::google::protobuf::uint64 value) {
  set_has_input_gaddr_0();
  input_gaddr_0_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_gaddr_0)
}

// optional uint64 inout_gaddr_1 = 7;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_inout_gaddr_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_inout_gaddr_1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_inout_gaddr_1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_inout_gaddr_1() {
  inout_gaddr_1_ = GOOGLE_ULONGLONG(0);
  clear_has_inout_gaddr_1();
}
inline ::google::protobuf::uint64 Inst_bmnet_arithmetic_fixed_forward_bmkernel::inout_gaddr_1() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.inout_gaddr_1)
  return inout_gaddr_1_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_inout_gaddr_1(::google::protobuf::uint64 value) {
  set_has_inout_gaddr_1();
  inout_gaddr_1_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.inout_gaddr_1)
}

// optional uint64 output_gaddr = 8;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_arithmetic_fixed_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.output_gaddr)
}

// optional int32 input_0_n = 9;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_input_0_n() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_input_0_n() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_input_0_n() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_input_0_n() {
  input_0_n_ = 0;
  clear_has_input_0_n();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::input_0_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_0_n)
  return input_0_n_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_input_0_n(::google::protobuf::int32 value) {
  set_has_input_0_n();
  input_0_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_0_n)
}

// optional int32 input_0_c = 10;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_input_0_c() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_input_0_c() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_input_0_c() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_input_0_c() {
  input_0_c_ = 0;
  clear_has_input_0_c();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::input_0_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_0_c)
  return input_0_c_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_input_0_c(::google::protobuf::int32 value) {
  set_has_input_0_c();
  input_0_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_0_c)
}

// optional int32 input_0_h = 11;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_input_0_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_input_0_h() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_input_0_h() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_input_0_h() {
  input_0_h_ = 0;
  clear_has_input_0_h();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::input_0_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_0_h)
  return input_0_h_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_input_0_h(::google::protobuf::int32 value) {
  set_has_input_0_h();
  input_0_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_0_h)
}

// optional int32 input_0_w = 12;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_input_0_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_input_0_w() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_input_0_w() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_input_0_w() {
  input_0_w_ = 0;
  clear_has_input_0_w();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::input_0_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_0_w)
  return input_0_w_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_input_0_w(::google::protobuf::int32 value) {
  set_has_input_0_w();
  input_0_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_0_w)
}

// optional int32 input_1_n = 13;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_input_1_n() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_input_1_n() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_input_1_n() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_input_1_n() {
  input_1_n_ = 0;
  clear_has_input_1_n();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::input_1_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_1_n)
  return input_1_n_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_input_1_n(::google::protobuf::int32 value) {
  set_has_input_1_n();
  input_1_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_1_n)
}

// optional int32 input_1_c = 14;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_input_1_c() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_input_1_c() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_input_1_c() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_input_1_c() {
  input_1_c_ = 0;
  clear_has_input_1_c();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::input_1_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_1_c)
  return input_1_c_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_input_1_c(::google::protobuf::int32 value) {
  set_has_input_1_c();
  input_1_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_1_c)
}

// optional int32 input_1_h = 15;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_input_1_h() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_input_1_h() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_input_1_h() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_input_1_h() {
  input_1_h_ = 0;
  clear_has_input_1_h();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::input_1_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_1_h)
  return input_1_h_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_input_1_h(::google::protobuf::int32 value) {
  set_has_input_1_h();
  input_1_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_1_h)
}

// optional int32 input_1_w = 16;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_input_1_w() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_input_1_w() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_input_1_w() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_input_1_w() {
  input_1_w_ = 0;
  clear_has_input_1_w();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::input_1_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_1_w)
  return input_1_w_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_input_1_w(::google::protobuf::int32 value) {
  set_has_input_1_w();
  input_1_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.input_1_w)
}

// optional int32 output_n = 17;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_output_n() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_output_n() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_output_n() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_output_n() {
  output_n_ = 0;
  clear_has_output_n();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::output_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.output_n)
  return output_n_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_output_n(::google::protobuf::int32 value) {
  set_has_output_n();
  output_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.output_n)
}

// optional int32 output_c = 18;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_output_c() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_output_c() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_output_c() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_output_c() {
  output_c_ = 0;
  clear_has_output_c();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::output_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.output_c)
  return output_c_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_output_c(::google::protobuf::int32 value) {
  set_has_output_c();
  output_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.output_c)
}

// optional int32 output_h = 19;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_output_h() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_output_h() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_output_h() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_output_h() {
  output_h_ = 0;
  clear_has_output_h();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::output_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.output_h)
  return output_h_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_output_h(::google::protobuf::int32 value) {
  set_has_output_h();
  output_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.output_h)
}

// optional int32 output_w = 20;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_output_w() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_output_w() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_output_w() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_output_w() {
  output_w_ = 0;
  clear_has_output_w();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::output_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.output_w)
  return output_w_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_output_w(::google::protobuf::int32 value) {
  set_has_output_w();
  output_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.output_w)
}

// optional int32 op = 21;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_op() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_op() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_op() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::op() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.op)
  return op_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.op)
}

// optional int32 right_shift_width = 22;
inline bool Inst_bmnet_arithmetic_fixed_forward_bmkernel::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.right_shift_width)
}

// repeated int32 threshold_x_quantized = 23;
inline int Inst_bmnet_arithmetic_fixed_forward_bmkernel::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_fixed_forward_bmkernel::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.threshold_x_quantized)
}
inline void Inst_bmnet_arithmetic_fixed_forward_bmkernel::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_arithmetic_fixed_forward_bmkernel::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_arithmetic_fixed_forward_bmkernel::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// -------------------------------------------------------------------

// Inst_bmnet_joinone_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_joinone_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_joinone_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_joinone_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_joinone_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_joinone_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_joinone_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_joinone_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_joinone_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_joinone_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_joinone_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_joinone_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_joinone_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.depends_len)
}

// optional uint64 input_gaddr = 6;
inline bool Inst_bmnet_joinone_fixed_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_joinone_fixed_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 7;
inline bool Inst_bmnet_joinone_fixed_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_joinone_fixed_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.output_gaddr)
}

// repeated int32 input_dim = 8;
inline int Inst_bmnet_joinone_fixed_forward_bmkernel::input_dim_size() const {
  return input_dim_.size();
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_joinone_fixed_forward_bmkernel::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.input_dim)
  return input_dim_.Get(index);
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.input_dim)
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_joinone_fixed_forward_bmkernel::input_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_joinone_fixed_forward_bmkernel::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.input_dim)
  return &input_dim_;
}

// optional int32 dim_size = 9;
inline bool Inst_bmnet_joinone_fixed_forward_bmkernel::has_dim_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_has_dim_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_has_dim_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::clear_dim_size() {
  dim_size_ = 0;
  clear_has_dim_size();
}
inline ::google::protobuf::int32 Inst_bmnet_joinone_fixed_forward_bmkernel::dim_size() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.dim_size)
  return dim_size_;
}
inline void Inst_bmnet_joinone_fixed_forward_bmkernel::set_dim_size(::google::protobuf::int32 value) {
  set_has_dim_size();
  dim_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel.dim_size)
}

// -------------------------------------------------------------------

// Inst_bmnet_quantization_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_quantization_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_quantization_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_quantization_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_quantization_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_quantization_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_quantization_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_quantization_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_quantization_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_quantization_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_quantization_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_quantization_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_quantization_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.depends_len)
}

// optional uint64 input_gaddr = 6;
inline bool Inst_bmnet_quantization_fixed_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_quantization_fixed_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 7;
inline bool Inst_bmnet_quantization_fixed_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_quantization_fixed_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.output_gaddr)
}

// optional int32 dim_size = 8;
inline bool Inst_bmnet_quantization_fixed_forward_bmkernel::has_dim_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_has_dim_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_has_dim_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_dim_size() {
  dim_size_ = 0;
  clear_has_dim_size();
}
inline ::google::protobuf::int32 Inst_bmnet_quantization_fixed_forward_bmkernel::dim_size() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.dim_size)
  return dim_size_;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_dim_size(::google::protobuf::int32 value) {
  set_has_dim_size();
  dim_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.dim_size)
}

// repeated int32 input_dim = 9;
inline int Inst_bmnet_quantization_fixed_forward_bmkernel::input_dim_size() const {
  return input_dim_.size();
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_quantization_fixed_forward_bmkernel::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.input_dim)
  return input_dim_.Get(index);
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.input_dim)
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_quantization_fixed_forward_bmkernel::input_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_quantization_fixed_forward_bmkernel::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.input_dim)
  return &input_dim_;
}

// repeated int32 output_dim = 10;
inline int Inst_bmnet_quantization_fixed_forward_bmkernel::output_dim_size() const {
  return output_dim_.size();
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_output_dim() {
  output_dim_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_quantization_fixed_forward_bmkernel::output_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.output_dim)
  return output_dim_.Get(index);
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_output_dim(int index, ::google::protobuf::int32 value) {
  output_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.output_dim)
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::add_output_dim(::google::protobuf::int32 value) {
  output_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.output_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_quantization_fixed_forward_bmkernel::output_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.output_dim)
  return output_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_quantization_fixed_forward_bmkernel::mutable_output_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.output_dim)
  return &output_dim_;
}

// optional int32 op = 11;
inline bool Inst_bmnet_quantization_fixed_forward_bmkernel::has_op() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_has_op() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_has_op() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Inst_bmnet_quantization_fixed_forward_bmkernel::op() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.op)
  return op_;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.op)
}

// optional int32 quantization_num = 12;
inline bool Inst_bmnet_quantization_fixed_forward_bmkernel::has_quantization_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_has_quantization_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_has_quantization_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_quantization_num() {
  quantization_num_ = 0;
  clear_has_quantization_num();
}
inline ::google::protobuf::int32 Inst_bmnet_quantization_fixed_forward_bmkernel::quantization_num() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.quantization_num)
  return quantization_num_;
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_quantization_num(::google::protobuf::int32 value) {
  set_has_quantization_num();
  quantization_num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.quantization_num)
}

// repeated int32 right_shift_width = 13;
inline int Inst_bmnet_quantization_fixed_forward_bmkernel::right_shift_width_size() const {
  return right_shift_width_.size();
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_quantization_fixed_forward_bmkernel::right_shift_width(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_.Get(index);
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_right_shift_width(int index, ::google::protobuf::int32 value) {
  right_shift_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.right_shift_width)
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::add_right_shift_width(::google::protobuf::int32 value) {
  right_shift_width_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.right_shift_width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_quantization_fixed_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_quantization_fixed_forward_bmkernel::mutable_right_shift_width() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.right_shift_width)
  return &right_shift_width_;
}

// repeated int32 threshold_x_quantized = 14;
inline int Inst_bmnet_quantization_fixed_forward_bmkernel::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_quantization_fixed_forward_bmkernel::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.threshold_x_quantized)
}
inline void Inst_bmnet_quantization_fixed_forward_bmkernel::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_quantization_fixed_forward_bmkernel::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_quantization_fixed_forward_bmkernel::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// -------------------------------------------------------------------

// Inst_bmnet_slice_fixed_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_slice_fixed_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_slice_fixed_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_slice_fixed_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_slice_fixed_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_slice_fixed_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_slice_fixed_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_slice_fixed_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_slice_fixed_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.depends)
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_slice_fixed_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_slice_fixed_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_slice_fixed_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_slice_fixed_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.depends_len)
}

// optional uint64 input_gaddr = 6;
inline bool Inst_bmnet_slice_fixed_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_slice_fixed_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.input_gaddr)
}

// repeated uint64 output_gaddrs = 7;
inline int Inst_bmnet_slice_fixed_forward_bmkernel::output_gaddrs_size() const {
  return output_gaddrs_.size();
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_output_gaddrs() {
  output_gaddrs_.Clear();
}
inline ::google::protobuf::uint64 Inst_bmnet_slice_fixed_forward_bmkernel::output_gaddrs(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.output_gaddrs)
  return output_gaddrs_.Get(index);
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_output_gaddrs(int index, ::google::protobuf::uint64 value) {
  output_gaddrs_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.output_gaddrs)
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::add_output_gaddrs(::google::protobuf::uint64 value) {
  output_gaddrs_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.output_gaddrs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Inst_bmnet_slice_fixed_forward_bmkernel::output_gaddrs() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.output_gaddrs)
  return output_gaddrs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Inst_bmnet_slice_fixed_forward_bmkernel::mutable_output_gaddrs() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.output_gaddrs)
  return &output_gaddrs_;
}

// optional int32 input_dim_len = 8;
inline bool Inst_bmnet_slice_fixed_forward_bmkernel::has_input_dim_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_has_input_dim_len() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_has_input_dim_len() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_input_dim_len() {
  input_dim_len_ = 0;
  clear_has_input_dim_len();
}
inline ::google::protobuf::int32 Inst_bmnet_slice_fixed_forward_bmkernel::input_dim_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.input_dim_len)
  return input_dim_len_;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_input_dim_len(::google::protobuf::int32 value) {
  set_has_input_dim_len();
  input_dim_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.input_dim_len)
}

// repeated int32 input_dim = 9;
inline int Inst_bmnet_slice_fixed_forward_bmkernel::input_dim_size() const {
  return input_dim_.size();
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_slice_fixed_forward_bmkernel::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.input_dim)
  return input_dim_.Get(index);
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.input_dim)
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_slice_fixed_forward_bmkernel::input_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_slice_fixed_forward_bmkernel::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.input_dim)
  return &input_dim_;
}

// optional int32 slice_axis = 10;
inline bool Inst_bmnet_slice_fixed_forward_bmkernel::has_slice_axis() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_has_slice_axis() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_has_slice_axis() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_slice_axis() {
  slice_axis_ = 0;
  clear_has_slice_axis();
}
inline ::google::protobuf::int32 Inst_bmnet_slice_fixed_forward_bmkernel::slice_axis() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.slice_axis)
  return slice_axis_;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_slice_axis(::google::protobuf::int32 value) {
  set_has_slice_axis();
  slice_axis_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.slice_axis)
}

// repeated int32 output_dims = 11;
inline int Inst_bmnet_slice_fixed_forward_bmkernel::output_dims_size() const {
  return output_dims_.size();
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_output_dims() {
  output_dims_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_slice_fixed_forward_bmkernel::output_dims(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.output_dims)
  return output_dims_.Get(index);
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_output_dims(int index, ::google::protobuf::int32 value) {
  output_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.output_dims)
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::add_output_dims(::google::protobuf::int32 value) {
  output_dims_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.output_dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_slice_fixed_forward_bmkernel::output_dims() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.output_dims)
  return output_dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_slice_fixed_forward_bmkernel::mutable_output_dims() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.output_dims)
  return &output_dims_;
}

// optional int32 output_num = 12;
inline bool Inst_bmnet_slice_fixed_forward_bmkernel::has_output_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_has_output_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_has_output_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_output_num() {
  output_num_ = 0;
  clear_has_output_num();
}
inline ::google::protobuf::int32 Inst_bmnet_slice_fixed_forward_bmkernel::output_num() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.output_num)
  return output_num_;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_output_num(::google::protobuf::int32 value) {
  set_has_output_num();
  output_num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.output_num)
}

// optional int32 need_quantize_num = 13;
inline bool Inst_bmnet_slice_fixed_forward_bmkernel::has_need_quantize_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_has_need_quantize_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_has_need_quantize_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_need_quantize_num() {
  need_quantize_num_ = 0;
  clear_has_need_quantize_num();
}
inline ::google::protobuf::int32 Inst_bmnet_slice_fixed_forward_bmkernel::need_quantize_num() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.need_quantize_num)
  return need_quantize_num_;
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_need_quantize_num(::google::protobuf::int32 value) {
  set_has_need_quantize_num();
  need_quantize_num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.need_quantize_num)
}

// repeated int32 right_shift_width = 14;
inline int Inst_bmnet_slice_fixed_forward_bmkernel::right_shift_width_size() const {
  return right_shift_width_.size();
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_slice_fixed_forward_bmkernel::right_shift_width(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_.Get(index);
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_right_shift_width(int index, ::google::protobuf::int32 value) {
  right_shift_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.right_shift_width)
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::add_right_shift_width(::google::protobuf::int32 value) {
  right_shift_width_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.right_shift_width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_slice_fixed_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_slice_fixed_forward_bmkernel::mutable_right_shift_width() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.right_shift_width)
  return &right_shift_width_;
}

// repeated int32 threshold_x_quantized = 15;
inline int Inst_bmnet_slice_fixed_forward_bmkernel::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_slice_fixed_forward_bmkernel::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.threshold_x_quantized)
}
inline void Inst_bmnet_slice_fixed_forward_bmkernel::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_slice_fixed_forward_bmkernel::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_slice_fixed_forward_bmkernel::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_conv_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_conv_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.depends)
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_conv_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_conv_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.depends_len)
}

// optional uint64 la_ifmap = 6;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_la_ifmap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_la_ifmap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_la_ifmap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_la_ifmap() {
  la_ifmap_ = GOOGLE_ULONGLONG(0);
  clear_has_la_ifmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_conv_forward_bmkernel::la_ifmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.la_ifmap)
  return la_ifmap_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_la_ifmap(::google::protobuf::uint64 value) {
  set_has_la_ifmap();
  la_ifmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.la_ifmap)
}

// optional uint64 la_ofmap = 7;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_la_ofmap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_la_ofmap() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_la_ofmap() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_la_ofmap() {
  la_ofmap_ = GOOGLE_ULONGLONG(0);
  clear_has_la_ofmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_conv_forward_bmkernel::la_ofmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.la_ofmap)
  return la_ofmap_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_la_ofmap(::google::protobuf::uint64 value) {
  set_has_la_ofmap();
  la_ofmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.la_ofmap)
}

// optional uint64 la_weight = 8;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_la_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_la_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_la_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_la_weight() {
  la_weight_ = GOOGLE_ULONGLONG(0);
  clear_has_la_weight();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_conv_forward_bmkernel::la_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.la_weight)
  return la_weight_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_la_weight(::google::protobuf::uint64 value) {
  set_has_la_weight();
  la_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.la_weight)
}

// optional uint64 la_bias = 9;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_la_bias() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_la_bias() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_la_bias() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_la_bias() {
  la_bias_ = GOOGLE_ULONGLONG(0);
  clear_has_la_bias();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_conv_forward_bmkernel::la_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.la_bias)
  return la_bias_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_la_bias(::google::protobuf::uint64 value) {
  set_has_la_bias();
  la_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.la_bias)
}

// repeated uint32 group_weight = 10;
inline int Inst_bmnet_tl_conv_forward_bmkernel::group_weight_size() const {
  return group_weight_.size();
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_group_weight() {
  group_weight_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::group_weight(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.group_weight)
  return group_weight_.Get(index);
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_group_weight(int index, ::google::protobuf::uint32 value) {
  group_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.group_weight)
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::add_group_weight(::google::protobuf::uint32 value) {
  group_weight_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.group_weight)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_conv_forward_bmkernel::group_weight() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.group_weight)
  return group_weight_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_conv_forward_bmkernel::mutable_group_weight() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.group_weight)
  return &group_weight_;
}

// repeated uint32 group_bias = 11;
inline int Inst_bmnet_tl_conv_forward_bmkernel::group_bias_size() const {
  return group_bias_.size();
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_group_bias() {
  group_bias_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::group_bias(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.group_bias)
  return group_bias_.Get(index);
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_group_bias(int index, ::google::protobuf::uint32 value) {
  group_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.group_bias)
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::add_group_bias(::google::protobuf::uint32 value) {
  group_bias_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.group_bias)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_conv_forward_bmkernel::group_bias() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.group_bias)
  return group_bias_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_conv_forward_bmkernel::mutable_group_bias() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.group_bias)
  return &group_bias_;
}

// optional int32 input_n = 12;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_conv_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.input_n)
}

// optional int32 input_c = 13;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_conv_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.input_c)
}

// optional int32 input_h = 14;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_conv_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.input_h)
}

// optional int32 input_w = 15;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_conv_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.input_w)
}

// optional int32 group = 16;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_group() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_group() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_conv_forward_bmkernel::group() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.group)
  return group_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.group)
}

// optional int32 output_c = 17;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_output_c() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_output_c() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_output_c() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_output_c() {
  output_c_ = 0;
  clear_has_output_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_conv_forward_bmkernel::output_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.output_c)
  return output_c_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_output_c(::google::protobuf::int32 value) {
  set_has_output_c();
  output_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.output_c)
}

// optional int32 output_h = 18;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_output_h() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_output_h() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_output_h() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_output_h() {
  output_h_ = 0;
  clear_has_output_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_conv_forward_bmkernel::output_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.output_h)
  return output_h_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_output_h(::google::protobuf::int32 value) {
  set_has_output_h();
  output_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.output_h)
}

// optional int32 output_w = 19;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_output_w() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_output_w() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_output_w() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_output_w() {
  output_w_ = 0;
  clear_has_output_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_conv_forward_bmkernel::output_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.output_w)
  return output_w_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_output_w(::google::protobuf::int32 value) {
  set_has_output_w();
  output_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.output_w)
}

// optional uint32 kh = 20;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_kh() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_kh() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_kh() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_kh() {
  kh_ = 0u;
  clear_has_kh();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::kh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.kh)
  return kh_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_kh(::google::protobuf::uint32 value) {
  set_has_kh();
  kh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.kh)
}

// optional uint32 kw = 21;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_kw() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_kw() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_kw() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_kw() {
  kw_ = 0u;
  clear_has_kw();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::kw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.kw)
  return kw_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_kw(::google::protobuf::uint32 value) {
  set_has_kw();
  kw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.kw)
}

// optional uint32 dh = 22;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_dh() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_dh() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_dh() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_dh() {
  dh_ = 0u;
  clear_has_dh();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::dh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.dh)
  return dh_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_dh(::google::protobuf::uint32 value) {
  set_has_dh();
  dh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.dh)
}

// optional uint32 dw = 23;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_dw() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_dw() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_dw() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_dw() {
  dw_ = 0u;
  clear_has_dw();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::dw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.dw)
  return dw_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_dw(::google::protobuf::uint32 value) {
  set_has_dw();
  dw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.dw)
}

// optional uint32 pad_h_top = 24;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_pad_h_top() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_pad_h_top() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_pad_h_top() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_pad_h_top() {
  pad_h_top_ = 0u;
  clear_has_pad_h_top();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::pad_h_top() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.pad_h_top)
  return pad_h_top_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_pad_h_top(::google::protobuf::uint32 value) {
  set_has_pad_h_top();
  pad_h_top_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.pad_h_top)
}

// optional uint32 pad_h_bottom = 25;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_pad_h_bottom() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_pad_h_bottom() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_pad_h_bottom() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_pad_h_bottom() {
  pad_h_bottom_ = 0u;
  clear_has_pad_h_bottom();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::pad_h_bottom() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.pad_h_bottom)
  return pad_h_bottom_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_pad_h_bottom(::google::protobuf::uint32 value) {
  set_has_pad_h_bottom();
  pad_h_bottom_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.pad_h_bottom)
}

// optional uint32 pad_w_left = 26;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_pad_w_left() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_pad_w_left() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_pad_w_left() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_pad_w_left() {
  pad_w_left_ = 0u;
  clear_has_pad_w_left();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::pad_w_left() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.pad_w_left)
  return pad_w_left_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_pad_w_left(::google::protobuf::uint32 value) {
  set_has_pad_w_left();
  pad_w_left_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.pad_w_left)
}

// optional uint32 pad_w_right = 27;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_pad_w_right() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_pad_w_right() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_pad_w_right() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_pad_w_right() {
  pad_w_right_ = 0u;
  clear_has_pad_w_right();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::pad_w_right() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.pad_w_right)
  return pad_w_right_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_pad_w_right(::google::protobuf::uint32 value) {
  set_has_pad_w_right();
  pad_w_right_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.pad_w_right)
}

// optional uint32 stride_h = 28;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_stride_h() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_stride_h() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_stride_h() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::stride_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.stride_h)
  return stride_h_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.stride_h)
}

// optional uint32 stride_w = 29;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_stride_w() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_stride_w() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_stride_w() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::stride_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.stride_w)
  return stride_w_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.stride_w)
}

// optional uint32 result_add = 30;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_result_add() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_result_add() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_result_add() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_result_add() {
  result_add_ = 0u;
  clear_has_result_add();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.result_add)
  return result_add_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_result_add(::google::protobuf::uint32 value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.result_add)
}

// optional uint32 ctrl = 31;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_ctrl() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_ctrl() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_ctrl() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_ctrl() {
  ctrl_ = 0u;
  clear_has_ctrl();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_conv_forward_bmkernel::ctrl() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.ctrl)
  return ctrl_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_ctrl(::google::protobuf::uint32 value) {
  set_has_ctrl();
  ctrl_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.ctrl)
}

// optional int32 rshift = 32;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_rshift() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_rshift() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_rshift() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_rshift() {
  rshift_ = 0;
  clear_has_rshift();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_conv_forward_bmkernel::rshift() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.rshift)
  return rshift_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_rshift(::google::protobuf::int32 value) {
  set_has_rshift();
  rshift_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.rshift)
}

// optional bool do_bias = 33;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_do_bias() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_do_bias() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_do_bias() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_do_bias() {
  do_bias_ = false;
  clear_has_do_bias();
}
inline bool Inst_bmnet_tl_conv_forward_bmkernel::do_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.do_bias)
  return do_bias_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_do_bias(bool value) {
  set_has_do_bias();
  do_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.do_bias)
}

// optional bool use_winograd = 34;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_use_winograd() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_use_winograd() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_use_winograd() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_use_winograd() {
  use_winograd_ = false;
  clear_has_use_winograd();
}
inline bool Inst_bmnet_tl_conv_forward_bmkernel::use_winograd() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.use_winograd)
  return use_winograd_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_use_winograd(bool value) {
  set_has_use_winograd();
  use_winograd_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.use_winograd)
}

// optional bool do_relu = 35;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_do_relu() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_do_relu() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_do_relu() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_do_relu() {
  do_relu_ = false;
  clear_has_do_relu();
}
inline bool Inst_bmnet_tl_conv_forward_bmkernel::do_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.do_relu)
  return do_relu_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_do_relu(bool value) {
  set_has_do_relu();
  do_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.do_relu)
}

// optional bool h_slice_skip_first = 36;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_h_slice_skip_first() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_h_slice_skip_first() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_h_slice_skip_first() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_h_slice_skip_first() {
  h_slice_skip_first_ = false;
  clear_has_h_slice_skip_first();
}
inline bool Inst_bmnet_tl_conv_forward_bmkernel::h_slice_skip_first() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.h_slice_skip_first)
  return h_slice_skip_first_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_h_slice_skip_first(bool value) {
  set_has_h_slice_skip_first();
  h_slice_skip_first_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.h_slice_skip_first)
}

// optional bool h_slice_skip_last = 37;
inline bool Inst_bmnet_tl_conv_forward_bmkernel::has_h_slice_skip_last() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_has_h_slice_skip_last() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_has_h_slice_skip_last() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::clear_h_slice_skip_last() {
  h_slice_skip_last_ = false;
  clear_has_h_slice_skip_last();
}
inline bool Inst_bmnet_tl_conv_forward_bmkernel::h_slice_skip_last() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.h_slice_skip_last)
  return h_slice_skip_last_;
}
inline void Inst_bmnet_tl_conv_forward_bmkernel::set_h_slice_skip_last(bool value) {
  set_has_h_slice_skip_last();
  h_slice_skip_last_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel.h_slice_skip_last)
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_activation_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_activation_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_activation_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_activation_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_activation_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_activation_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.depends)
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_activation_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_activation_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_activation_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.depends_len)
}

// optional uint64 input_laddr = 6;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_input_laddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_input_laddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_input_laddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_input_laddr() {
  input_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_activation_forward_bmkernel::input_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.input_laddr)
  return input_laddr_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_input_laddr(::google::protobuf::uint64 value) {
  set_has_input_laddr();
  input_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.input_laddr)
}

// optional uint64 output_laddr = 7;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_output_laddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_output_laddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_output_laddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_output_laddr() {
  output_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_activation_forward_bmkernel::output_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.output_laddr)
  return output_laddr_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_output_laddr(::google::protobuf::uint64 value) {
  set_has_output_laddr();
  output_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.output_laddr)
}

// optional uint64 weight_laddr = 8;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_weight_laddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_weight_laddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_weight_laddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_weight_laddr() {
  weight_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_weight_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_activation_forward_bmkernel::weight_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.weight_laddr)
  return weight_laddr_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_weight_laddr(::google::protobuf::uint64 value) {
  set_has_weight_laddr();
  weight_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.weight_laddr)
}

// optional int32 input_n = 9;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_activation_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.input_n)
}

// optional int32 input_c = 10;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_activation_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.input_c)
}

// optional int32 input_h = 11;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_activation_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.input_h)
}

// optional int32 input_w = 12;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_activation_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.input_w)
}

// optional int32 gt_rshift = 13;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_gt_rshift() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_gt_rshift() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_gt_rshift() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_gt_rshift() {
  gt_rshift_ = 0;
  clear_has_gt_rshift();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_activation_forward_bmkernel::gt_rshift() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.gt_rshift)
  return gt_rshift_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_gt_rshift(::google::protobuf::int32 value) {
  set_has_gt_rshift();
  gt_rshift_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.gt_rshift)
}

// optional int32 le_rshift = 14;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_le_rshift() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_le_rshift() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_le_rshift() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_le_rshift() {
  le_rshift_ = 0;
  clear_has_le_rshift();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_activation_forward_bmkernel::le_rshift() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.le_rshift)
  return le_rshift_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_le_rshift(::google::protobuf::int32 value) {
  set_has_le_rshift();
  le_rshift_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.le_rshift)
}

// optional int32 gt_scale = 15;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_gt_scale() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_gt_scale() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_gt_scale() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_gt_scale() {
  gt_scale_ = 0;
  clear_has_gt_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_activation_forward_bmkernel::gt_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.gt_scale)
  return gt_scale_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_gt_scale(::google::protobuf::int32 value) {
  set_has_gt_scale();
  gt_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.gt_scale)
}

// optional int32 le_scale = 16;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_le_scale() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_le_scale() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_le_scale() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_le_scale() {
  le_scale_ = 0;
  clear_has_le_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_activation_forward_bmkernel::le_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.le_scale)
  return le_scale_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_le_scale(::google::protobuf::int32 value) {
  set_has_le_scale();
  le_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.le_scale)
}

// optional int32 gt_right_shift_width = 17;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_gt_right_shift_width() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_gt_right_shift_width() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_gt_right_shift_width() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_gt_right_shift_width() {
  gt_right_shift_width_ = 0;
  clear_has_gt_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_activation_forward_bmkernel::gt_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.gt_right_shift_width)
  return gt_right_shift_width_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_gt_right_shift_width(::google::protobuf::int32 value) {
  set_has_gt_right_shift_width();
  gt_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.gt_right_shift_width)
}

// optional int32 le_right_shift_width = 18;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_le_right_shift_width() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_le_right_shift_width() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_le_right_shift_width() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_le_right_shift_width() {
  le_right_shift_width_ = 0;
  clear_has_le_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_activation_forward_bmkernel::le_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.le_right_shift_width)
  return le_right_shift_width_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_le_right_shift_width(::google::protobuf::int32 value) {
  set_has_le_right_shift_width();
  le_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.le_right_shift_width)
}

// optional int32 activation_arg_len = 19;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_activation_arg_len() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_activation_arg_len() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_activation_arg_len() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_activation_arg_len() {
  activation_arg_len_ = 0;
  clear_has_activation_arg_len();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_activation_forward_bmkernel::activation_arg_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.activation_arg_len)
  return activation_arg_len_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_activation_arg_len(::google::protobuf::int32 value) {
  set_has_activation_arg_len();
  activation_arg_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.activation_arg_len)
}

// repeated float activation_arg = 20;
inline int Inst_bmnet_tl_activation_forward_bmkernel::activation_arg_size() const {
  return activation_arg_.size();
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_activation_arg() {
  activation_arg_.Clear();
}
inline float Inst_bmnet_tl_activation_forward_bmkernel::activation_arg(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.activation_arg)
  return activation_arg_.Get(index);
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_activation_arg(int index, float value) {
  activation_arg_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.activation_arg)
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::add_activation_arg(float value) {
  activation_arg_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.activation_arg)
}
inline const ::google::protobuf::RepeatedField< float >&
Inst_bmnet_tl_activation_forward_bmkernel::activation_arg() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.activation_arg)
  return activation_arg_;
}
inline ::google::protobuf::RepeatedField< float >*
Inst_bmnet_tl_activation_forward_bmkernel::mutable_activation_arg() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.activation_arg)
  return &activation_arg_;
}

// optional bool channel_shared = 21;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_channel_shared() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_channel_shared() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool Inst_bmnet_tl_activation_forward_bmkernel::channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.channel_shared)
  return channel_shared_;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.channel_shared)
}

// optional .bmnet.bm1880.Inst.ActivationMethod activation_type = 22;
inline bool Inst_bmnet_tl_activation_forward_bmkernel::has_activation_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_has_activation_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_has_activation_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::clear_activation_type() {
  activation_type_ = 0;
  clear_has_activation_type();
}
inline ::bmnet::bm1880::Inst_ActivationMethod Inst_bmnet_tl_activation_forward_bmkernel::activation_type() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.activation_type)
  return static_cast< ::bmnet::bm1880::Inst_ActivationMethod >(activation_type_);
}
inline void Inst_bmnet_tl_activation_forward_bmkernel::set_activation_type(::bmnet::bm1880::Inst_ActivationMethod value) {
  assert(::bmnet::bm1880::Inst_ActivationMethod_IsValid(value));
  set_has_activation_type();
  activation_type_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel.activation_type)
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_scale_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_scale_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_scale_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_scale_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_scale_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_scale_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.depends)
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_scale_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_scale_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_scale_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.depends_len)
}

// optional uint64 input_laddr = 6;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_input_laddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_input_laddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_input_laddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_input_laddr() {
  input_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_scale_forward_bmkernel::input_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.input_laddr)
  return input_laddr_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_input_laddr(::google::protobuf::uint64 value) {
  set_has_input_laddr();
  input_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.input_laddr)
}

// optional uint64 output_laddr = 7;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_output_laddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_output_laddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_output_laddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_output_laddr() {
  output_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_scale_forward_bmkernel::output_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.output_laddr)
  return output_laddr_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_output_laddr(::google::protobuf::uint64 value) {
  set_has_output_laddr();
  output_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.output_laddr)
}

// optional uint64 scale_laddr = 8;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_scale_laddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_scale_laddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_scale_laddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_scale_laddr() {
  scale_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_scale_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_scale_forward_bmkernel::scale_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.scale_laddr)
  return scale_laddr_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_scale_laddr(::google::protobuf::uint64 value) {
  set_has_scale_laddr();
  scale_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.scale_laddr)
}

// optional uint64 bias_laddr = 9;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_bias_laddr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_bias_laddr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_bias_laddr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_bias_laddr() {
  bias_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bias_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_scale_forward_bmkernel::bias_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.bias_laddr)
  return bias_laddr_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_bias_laddr(::google::protobuf::uint64 value) {
  set_has_bias_laddr();
  bias_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.bias_laddr)
}

// optional int32 input_n = 10;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_scale_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.input_n)
}

// optional int32 input_c = 11;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_scale_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.input_c)
}

// optional int32 input_h = 12;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_scale_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.input_h)
}

// optional int32 input_w = 13;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_scale_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.input_w)
}

// optional int32 scale_dim = 14;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_scale_dim() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_scale_dim() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_scale_dim() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_scale_dim() {
  scale_dim_ = 0;
  clear_has_scale_dim();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_scale_forward_bmkernel::scale_dim() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.scale_dim)
  return scale_dim_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_scale_dim(::google::protobuf::int32 value) {
  set_has_scale_dim();
  scale_dim_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.scale_dim)
}

// optional int32 right_shift_width = 15;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_scale_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.right_shift_width)
}

// optional bool do_bias = 16;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_do_bias() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_do_bias() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_do_bias() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_do_bias() {
  do_bias_ = false;
  clear_has_do_bias();
}
inline bool Inst_bmnet_tl_scale_forward_bmkernel::do_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.do_bias)
  return do_bias_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_do_bias(bool value) {
  set_has_do_bias();
  do_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.do_bias)
}

// optional bool do_relu = 17;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_do_relu() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_do_relu() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_do_relu() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_do_relu() {
  do_relu_ = false;
  clear_has_do_relu();
}
inline bool Inst_bmnet_tl_scale_forward_bmkernel::do_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.do_relu)
  return do_relu_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_do_relu(bool value) {
  set_has_do_relu();
  do_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.do_relu)
}

// optional float relu_slope = 18;
inline bool Inst_bmnet_tl_scale_forward_bmkernel::has_relu_slope() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_has_relu_slope() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_has_relu_slope() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::clear_relu_slope() {
  relu_slope_ = 0;
  clear_has_relu_slope();
}
inline float Inst_bmnet_tl_scale_forward_bmkernel::relu_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.relu_slope)
  return relu_slope_;
}
inline void Inst_bmnet_tl_scale_forward_bmkernel::set_relu_slope(float value) {
  set_has_relu_slope();
  relu_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel.relu_slope)
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_batchnorm_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_batchnorm_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_batchnorm_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_batchnorm_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_batchnorm_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_batchnorm_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.depends)
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_batchnorm_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_batchnorm_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_batchnorm_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.depends_len)
}

// optional uint64 bottom_laddr = 6;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_bottom_laddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_bottom_laddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_bottom_laddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_bottom_laddr() {
  bottom_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_batchnorm_forward_bmkernel::bottom_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.bottom_laddr)
  return bottom_laddr_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_bottom_laddr(::google::protobuf::uint64 value) {
  set_has_bottom_laddr();
  bottom_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.bottom_laddr)
}

// optional uint64 top_laddr = 7;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_top_laddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_top_laddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_top_laddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_top_laddr() {
  top_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_batchnorm_forward_bmkernel::top_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.top_laddr)
  return top_laddr_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_top_laddr(::google::protobuf::uint64 value) {
  set_has_top_laddr();
  top_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.top_laddr)
}

// optional uint64 mean_laddr = 8;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_mean_laddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_mean_laddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_mean_laddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_mean_laddr() {
  mean_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_mean_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_batchnorm_forward_bmkernel::mean_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.mean_laddr)
  return mean_laddr_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_mean_laddr(::google::protobuf::uint64 value) {
  set_has_mean_laddr();
  mean_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.mean_laddr)
}

// optional uint64 variance_laddr = 9;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_variance_laddr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_variance_laddr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_variance_laddr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_variance_laddr() {
  variance_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_variance_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_batchnorm_forward_bmkernel::variance_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.variance_laddr)
  return variance_laddr_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_variance_laddr(::google::protobuf::uint64 value) {
  set_has_variance_laddr();
  variance_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.variance_laddr)
}

// optional int32 input_n = 10;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_batchnorm_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.input_n)
}

// optional int32 input_c = 11;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_batchnorm_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.input_c)
}

// optional int32 input_h = 12;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_batchnorm_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.input_h)
}

// optional int32 input_w = 13;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_batchnorm_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.input_w)
}

// optional int32 right_shift_width = 14;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_batchnorm_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.right_shift_width)
}

// optional bool do_relu = 15;
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::has_do_relu() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_has_do_relu() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_has_do_relu() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::clear_do_relu() {
  do_relu_ = false;
  clear_has_do_relu();
}
inline bool Inst_bmnet_tl_batchnorm_forward_bmkernel::do_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.do_relu)
  return do_relu_;
}
inline void Inst_bmnet_tl_batchnorm_forward_bmkernel::set_do_relu(bool value) {
  set_has_do_relu();
  do_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel.do_relu)
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_eltwise_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_eltwise_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_eltwise_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_eltwise_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_eltwise_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_eltwise_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.depends)
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_eltwise_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_eltwise_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_eltwise_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.depends_len)
}

// repeated uint64 la_input = 6;
inline int Inst_bmnet_tl_eltwise_forward_bmkernel::la_input_size() const {
  return la_input_.size();
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_la_input() {
  la_input_.Clear();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_eltwise_forward_bmkernel::la_input(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.la_input)
  return la_input_.Get(index);
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_la_input(int index, ::google::protobuf::uint64 value) {
  la_input_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.la_input)
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::add_la_input(::google::protobuf::uint64 value) {
  la_input_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.la_input)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Inst_bmnet_tl_eltwise_forward_bmkernel::la_input() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.la_input)
  return la_input_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Inst_bmnet_tl_eltwise_forward_bmkernel::mutable_la_input() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.la_input)
  return &la_input_;
}

// optional uint64 la_output = 7;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_la_output() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_la_output() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_la_output() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_la_output() {
  la_output_ = GOOGLE_ULONGLONG(0);
  clear_has_la_output();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_eltwise_forward_bmkernel::la_output() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.la_output)
  return la_output_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_la_output(::google::protobuf::uint64 value) {
  set_has_la_output();
  la_output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.la_output)
}

// optional uint64 la_working = 8;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_la_working() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_la_working() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_la_working() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_la_working() {
  la_working_ = GOOGLE_ULONGLONG(0);
  clear_has_la_working();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_eltwise_forward_bmkernel::la_working() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.la_working)
  return la_working_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_la_working(::google::protobuf::uint64 value) {
  set_has_la_working();
  la_working_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.la_working)
}

// optional int32 input_n = 9;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_eltwise_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.input_n)
}

// optional int32 input_c = 10;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_eltwise_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.input_c)
}

// optional int32 input_h = 11;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_eltwise_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.input_h)
}

// optional int32 input_w = 12;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_eltwise_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.input_w)
}

// optional int32 input_size = 13;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_input_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_input_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_input_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_input_size() {
  input_size_ = 0;
  clear_has_input_size();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_eltwise_forward_bmkernel::input_size() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.input_size)
  return input_size_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_input_size(::google::protobuf::int32 value) {
  set_has_input_size();
  input_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.input_size)
}

// optional int32 right_shift_width = 14;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_eltwise_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.right_shift_width)
}

// optional int32 op = 15;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_op() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_op() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_op() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_eltwise_forward_bmkernel::op() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.op)
  return op_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.op)
}

// repeated int32 threshold_x_quantized = 16;
inline int Inst_bmnet_tl_eltwise_forward_bmkernel::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_eltwise_forward_bmkernel::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.threshold_x_quantized)
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_tl_eltwise_forward_bmkernel::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_tl_eltwise_forward_bmkernel::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// optional bool use_default_coeff = 17;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_use_default_coeff() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_use_default_coeff() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_use_default_coeff() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_use_default_coeff() {
  use_default_coeff_ = false;
  clear_has_use_default_coeff();
}
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::use_default_coeff() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.use_default_coeff)
  return use_default_coeff_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_use_default_coeff(bool value) {
  set_has_use_default_coeff();
  use_default_coeff_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.use_default_coeff)
}

// optional bool do_relu = 18;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_do_relu() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_do_relu() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_do_relu() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_do_relu() {
  do_relu_ = false;
  clear_has_do_relu();
}
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::do_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.do_relu)
  return do_relu_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_do_relu(bool value) {
  set_has_do_relu();
  do_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.do_relu)
}

// optional float relu_slope = 19;
inline bool Inst_bmnet_tl_eltwise_forward_bmkernel::has_relu_slope() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_has_relu_slope() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_has_relu_slope() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_relu_slope() {
  relu_slope_ = 0;
  clear_has_relu_slope();
}
inline float Inst_bmnet_tl_eltwise_forward_bmkernel::relu_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.relu_slope)
  return relu_slope_;
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_relu_slope(float value) {
  set_has_relu_slope();
  relu_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.relu_slope)
}

// repeated int32 coeffs = 20;
inline int Inst_bmnet_tl_eltwise_forward_bmkernel::coeffs_size() const {
  return coeffs_.size();
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::clear_coeffs() {
  coeffs_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_eltwise_forward_bmkernel::coeffs(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.coeffs)
  return coeffs_.Get(index);
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::set_coeffs(int index, ::google::protobuf::int32 value) {
  coeffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.coeffs)
}
inline void Inst_bmnet_tl_eltwise_forward_bmkernel::add_coeffs(::google::protobuf::int32 value) {
  coeffs_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.coeffs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_tl_eltwise_forward_bmkernel::coeffs() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.coeffs)
  return coeffs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_tl_eltwise_forward_bmkernel::mutable_coeffs() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel.coeffs)
  return &coeffs_;
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_lrn_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_lrn_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_lrn_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_lrn_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_lrn_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_lrn_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.depends)
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_lrn_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_lrn_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_lrn_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.depends_len)
}

// optional uint64 bottom_laddr = 6;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_bottom_laddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_bottom_laddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_bottom_laddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_bottom_laddr() {
  bottom_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_lrn_forward_bmkernel::bottom_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.bottom_laddr)
  return bottom_laddr_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_bottom_laddr(::google::protobuf::uint64 value) {
  set_has_bottom_laddr();
  bottom_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.bottom_laddr)
}

// optional uint64 top_laddr = 7;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_top_laddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_top_laddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_top_laddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_top_laddr() {
  top_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_lrn_forward_bmkernel::top_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.top_laddr)
  return top_laddr_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_top_laddr(::google::protobuf::uint64 value) {
  set_has_top_laddr();
  top_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.top_laddr)
}

// optional uint64 sqr_lut_laddr = 8;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_sqr_lut_laddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_sqr_lut_laddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_sqr_lut_laddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_sqr_lut_laddr() {
  sqr_lut_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_sqr_lut_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_lrn_forward_bmkernel::sqr_lut_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.sqr_lut_laddr)
  return sqr_lut_laddr_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_sqr_lut_laddr(::google::protobuf::uint64 value) {
  set_has_sqr_lut_laddr();
  sqr_lut_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.sqr_lut_laddr)
}

// optional uint64 power_lut_laddr = 9;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_power_lut_laddr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_power_lut_laddr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_power_lut_laddr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_power_lut_laddr() {
  power_lut_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_power_lut_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_lrn_forward_bmkernel::power_lut_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.power_lut_laddr)
  return power_lut_laddr_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_power_lut_laddr(::google::protobuf::uint64 value) {
  set_has_power_lut_laddr();
  power_lut_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.power_lut_laddr)
}

// optional uint64 working_laddr = 10;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_working_laddr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_working_laddr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_working_laddr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_working_laddr() {
  working_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_working_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_lrn_forward_bmkernel::working_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.working_laddr)
  return working_laddr_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_working_laddr(::google::protobuf::uint64 value) {
  set_has_working_laddr();
  working_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.working_laddr)
}

// optional int32 input_n = 11;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_lrn_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.input_n)
}

// optional int32 input_c = 12;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_lrn_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.input_c)
}

// optional int32 input_h = 13;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_lrn_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.input_h)
}

// optional int32 input_w = 14;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_lrn_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.input_w)
}

// optional int32 size = 15;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_size() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_size() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_lrn_forward_bmkernel::size() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.size)
  return size_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.size)
}

// optional int32 sum_right_shift_width = 16;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_sum_right_shift_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_sum_right_shift_width() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_sum_right_shift_width() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_sum_right_shift_width() {
  sum_right_shift_width_ = 0;
  clear_has_sum_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_lrn_forward_bmkernel::sum_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.sum_right_shift_width)
  return sum_right_shift_width_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_sum_right_shift_width(::google::protobuf::int32 value) {
  set_has_sum_right_shift_width();
  sum_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.sum_right_shift_width)
}

// optional int32 lrn_right_shift_width = 17;
inline bool Inst_bmnet_tl_lrn_forward_bmkernel::has_lrn_right_shift_width() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_has_lrn_right_shift_width() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_has_lrn_right_shift_width() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_lrn_right_shift_width() {
  lrn_right_shift_width_ = 0;
  clear_has_lrn_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_lrn_forward_bmkernel::lrn_right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.lrn_right_shift_width)
  return lrn_right_shift_width_;
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_lrn_right_shift_width(::google::protobuf::int32 value) {
  set_has_lrn_right_shift_width();
  lrn_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.lrn_right_shift_width)
}

// repeated int32 threshold_x_quantized = 18;
inline int Inst_bmnet_tl_lrn_forward_bmkernel::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_lrn_forward_bmkernel::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.threshold_x_quantized)
}
inline void Inst_bmnet_tl_lrn_forward_bmkernel::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_tl_lrn_forward_bmkernel::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_tl_lrn_forward_bmkernel::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_pooling_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_pooling_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_pooling_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_pooling_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_pooling_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_pooling_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.depends)
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_pooling_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_pooling_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_pooling_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.depends_len)
}

// optional uint64 ifmap_laddr = 6;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_ifmap_laddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_ifmap_laddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_ifmap_laddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_ifmap_laddr() {
  ifmap_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_ifmap_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_pooling_forward_bmkernel::ifmap_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.ifmap_laddr)
  return ifmap_laddr_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_ifmap_laddr(::google::protobuf::uint64 value) {
  set_has_ifmap_laddr();
  ifmap_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.ifmap_laddr)
}

// optional uint64 ofmap_laddr = 7;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_ofmap_laddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_ofmap_laddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_ofmap_laddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_ofmap_laddr() {
  ofmap_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_ofmap_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_pooling_forward_bmkernel::ofmap_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.ofmap_laddr)
  return ofmap_laddr_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_ofmap_laddr(::google::protobuf::uint64 value) {
  set_has_ofmap_laddr();
  ofmap_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.ofmap_laddr)
}

// optional int32 input_n = 8;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_pooling_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.input_n)
}

// optional int32 input_c = 9;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_pooling_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.input_c)
}

// optional int32 input_h = 10;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_pooling_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.input_h)
}

// optional int32 input_w = 11;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_pooling_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.input_w)
}

// optional int32 output_n = 12;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_output_n() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_output_n() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_output_n() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_output_n() {
  output_n_ = 0;
  clear_has_output_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_pooling_forward_bmkernel::output_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.output_n)
  return output_n_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_output_n(::google::protobuf::int32 value) {
  set_has_output_n();
  output_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.output_n)
}

// optional int32 output_c = 13;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_output_c() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_output_c() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_output_c() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_output_c() {
  output_c_ = 0;
  clear_has_output_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_pooling_forward_bmkernel::output_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.output_c)
  return output_c_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_output_c(::google::protobuf::int32 value) {
  set_has_output_c();
  output_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.output_c)
}

// optional int32 output_h = 14;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_output_h() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_output_h() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_output_h() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_output_h() {
  output_h_ = 0;
  clear_has_output_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_pooling_forward_bmkernel::output_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.output_h)
  return output_h_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_output_h(::google::protobuf::int32 value) {
  set_has_output_h();
  output_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.output_h)
}

// optional int32 output_w = 15;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_output_w() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_output_w() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_output_w() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_output_w() {
  output_w_ = 0;
  clear_has_output_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_pooling_forward_bmkernel::output_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.output_w)
  return output_w_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_output_w(::google::protobuf::int32 value) {
  set_has_output_w();
  output_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.output_w)
}

// optional uint32 kh = 16;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_kh() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_kh() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_kh() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_kh() {
  kh_ = 0u;
  clear_has_kh();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_pooling_forward_bmkernel::kh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.kh)
  return kh_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_kh(::google::protobuf::uint32 value) {
  set_has_kh();
  kh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.kh)
}

// optional uint32 kw = 17;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_kw() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_kw() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_kw() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_kw() {
  kw_ = 0u;
  clear_has_kw();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_pooling_forward_bmkernel::kw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.kw)
  return kw_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_kw(::google::protobuf::uint32 value) {
  set_has_kw();
  kw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.kw)
}

// optional uint32 stride_h = 18;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_stride_h() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_stride_h() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_pooling_forward_bmkernel::stride_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.stride_h)
  return stride_h_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.stride_h)
}

// optional uint32 stride_w = 19;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_stride_w() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_stride_w() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_pooling_forward_bmkernel::stride_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.stride_w)
  return stride_w_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.stride_w)
}

// optional uint32 pad_h_top = 20;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_pad_h_top() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_pad_h_top() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_pad_h_top() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_pad_h_top() {
  pad_h_top_ = 0u;
  clear_has_pad_h_top();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_pooling_forward_bmkernel::pad_h_top() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.pad_h_top)
  return pad_h_top_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_pad_h_top(::google::protobuf::uint32 value) {
  set_has_pad_h_top();
  pad_h_top_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.pad_h_top)
}

// optional uint32 pad_h_bottom = 21;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_pad_h_bottom() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_pad_h_bottom() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_pad_h_bottom() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_pad_h_bottom() {
  pad_h_bottom_ = 0u;
  clear_has_pad_h_bottom();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_pooling_forward_bmkernel::pad_h_bottom() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.pad_h_bottom)
  return pad_h_bottom_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_pad_h_bottom(::google::protobuf::uint32 value) {
  set_has_pad_h_bottom();
  pad_h_bottom_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.pad_h_bottom)
}

// optional uint32 pad_w_left = 22;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_pad_w_left() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_pad_w_left() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_pad_w_left() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_pad_w_left() {
  pad_w_left_ = 0u;
  clear_has_pad_w_left();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_pooling_forward_bmkernel::pad_w_left() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.pad_w_left)
  return pad_w_left_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_pad_w_left(::google::protobuf::uint32 value) {
  set_has_pad_w_left();
  pad_w_left_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.pad_w_left)
}

// optional uint32 pad_w_right = 23;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_pad_w_right() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_pad_w_right() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_pad_w_right() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_pad_w_right() {
  pad_w_right_ = 0u;
  clear_has_pad_w_right();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_pooling_forward_bmkernel::pad_w_right() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.pad_w_right)
  return pad_w_right_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_pad_w_right(::google::protobuf::uint32 value) {
  set_has_pad_w_right();
  pad_w_right_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.pad_w_right)
}

// optional bool is_avg_pooling = 24;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_is_avg_pooling() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_is_avg_pooling() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_is_avg_pooling() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_is_avg_pooling() {
  is_avg_pooling_ = false;
  clear_has_is_avg_pooling();
}
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::is_avg_pooling() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.is_avg_pooling)
  return is_avg_pooling_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_is_avg_pooling(bool value) {
  set_has_is_avg_pooling();
  is_avg_pooling_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.is_avg_pooling)
}

// optional int32 right_shift_width = 25;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_pooling_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.right_shift_width)
}

// optional int32 threshold_x_quantized = 26;
inline bool Inst_bmnet_tl_pooling_forward_bmkernel::has_threshold_x_quantized() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_has_threshold_x_quantized() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_has_threshold_x_quantized() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::clear_threshold_x_quantized() {
  threshold_x_quantized_ = 0;
  clear_has_threshold_x_quantized();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_pooling_forward_bmkernel::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline void Inst_bmnet_tl_pooling_forward_bmkernel::set_threshold_x_quantized(::google::protobuf::int32 value) {
  set_has_threshold_x_quantized();
  threshold_x_quantized_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel.threshold_x_quantized)
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_upsample_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_upsample_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_upsample_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_upsample_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_upsample_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_upsample_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_upsample_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_upsample_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_upsample_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.depends)
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_upsample_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_upsample_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_upsample_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_upsample_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.depends_len)
}

// optional uint64 la_ifmap = 6;
inline bool Inst_bmnet_tl_upsample_forward_bmkernel::has_la_ifmap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_has_la_ifmap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_has_la_ifmap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_la_ifmap() {
  la_ifmap_ = GOOGLE_ULONGLONG(0);
  clear_has_la_ifmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_upsample_forward_bmkernel::la_ifmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.la_ifmap)
  return la_ifmap_;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_la_ifmap(::google::protobuf::uint64 value) {
  set_has_la_ifmap();
  la_ifmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.la_ifmap)
}

// optional uint64 la_ofmap = 7;
inline bool Inst_bmnet_tl_upsample_forward_bmkernel::has_la_ofmap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_has_la_ofmap() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_has_la_ofmap() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_la_ofmap() {
  la_ofmap_ = GOOGLE_ULONGLONG(0);
  clear_has_la_ofmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_upsample_forward_bmkernel::la_ofmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.la_ofmap)
  return la_ofmap_;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_la_ofmap(::google::protobuf::uint64 value) {
  set_has_la_ofmap();
  la_ofmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.la_ofmap)
}

// optional int32 input_n = 8;
inline bool Inst_bmnet_tl_upsample_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_upsample_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.input_n)
}

// optional int32 input_c = 9;
inline bool Inst_bmnet_tl_upsample_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_upsample_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.input_c)
}

// optional int32 input_h = 10;
inline bool Inst_bmnet_tl_upsample_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_upsample_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.input_h)
}

// optional int32 input_w = 11;
inline bool Inst_bmnet_tl_upsample_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_upsample_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.input_w)
}

// optional int32 output_h = 12;
inline bool Inst_bmnet_tl_upsample_forward_bmkernel::has_output_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_has_output_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_has_output_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_output_h() {
  output_h_ = 0;
  clear_has_output_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_upsample_forward_bmkernel::output_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.output_h)
  return output_h_;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_output_h(::google::protobuf::int32 value) {
  set_has_output_h();
  output_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.output_h)
}

// optional int32 output_w = 13;
inline bool Inst_bmnet_tl_upsample_forward_bmkernel::has_output_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_has_output_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_has_output_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_output_w() {
  output_w_ = 0;
  clear_has_output_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_upsample_forward_bmkernel::output_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.output_w)
  return output_w_;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_output_w(::google::protobuf::int32 value) {
  set_has_output_w();
  output_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.output_w)
}

// optional int32 size = 14;
inline bool Inst_bmnet_tl_upsample_forward_bmkernel::has_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_has_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_has_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_upsample_forward_bmkernel::size() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.size)
  return size_;
}
inline void Inst_bmnet_tl_upsample_forward_bmkernel::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel.size)
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_load_stride_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_load_stride_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_load_stride_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_load_stride_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_load_stride_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_load_stride_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.depends)
}
inline void Inst_bmnet_tl_load_stride_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_load_stride_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_load_stride_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_load_stride_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.depends_len)
}

// optional uint64 ga_src = 6;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_ga_src() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_ga_src() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_ga_src() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_ga_src() {
  ga_src_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_src();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_load_stride_bmkernel::ga_src() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.ga_src)
  return ga_src_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_ga_src(::google::protobuf::uint64 value) {
  set_has_ga_src();
  ga_src_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.ga_src)
}

// optional uint64 la_dst = 7;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_la_dst() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_la_dst() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_la_dst() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_la_dst() {
  la_dst_ = GOOGLE_ULONGLONG(0);
  clear_has_la_dst();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_load_stride_bmkernel::la_dst() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.la_dst)
  return la_dst_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_la_dst(::google::protobuf::uint64 value) {
  set_has_la_dst();
  la_dst_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.la_dst)
}

// optional int32 Local_N = 8;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_local_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_local_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_local_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_local_n() {
  local_n_ = 0;
  clear_has_local_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_stride_bmkernel::local_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Local_N)
  return local_n_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_local_n(::google::protobuf::int32 value) {
  set_has_local_n();
  local_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Local_N)
}

// optional int32 Local_C = 9;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_local_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_local_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_local_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_local_c() {
  local_c_ = 0;
  clear_has_local_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_stride_bmkernel::local_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Local_C)
  return local_c_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_local_c(::google::protobuf::int32 value) {
  set_has_local_c();
  local_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Local_C)
}

// optional int32 Local_H = 10;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_local_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_local_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_local_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_local_h() {
  local_h_ = 0;
  clear_has_local_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_stride_bmkernel::local_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Local_H)
  return local_h_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_local_h(::google::protobuf::int32 value) {
  set_has_local_h();
  local_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Local_H)
}

// optional int32 Local_W = 11;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_local_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_local_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_local_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_local_w() {
  local_w_ = 0;
  clear_has_local_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_stride_bmkernel::local_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Local_W)
  return local_w_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_local_w(::google::protobuf::int32 value) {
  set_has_local_w();
  local_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Local_W)
}

// optional int32 Global_C = 12;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_global_c() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_global_c() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_global_c() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_global_c() {
  global_c_ = 0;
  clear_has_global_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_stride_bmkernel::global_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Global_C)
  return global_c_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_global_c(::google::protobuf::int32 value) {
  set_has_global_c();
  global_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Global_C)
}

// optional int32 Global_H = 13;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_global_h() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_global_h() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_global_h() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_global_h() {
  global_h_ = 0;
  clear_has_global_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_stride_bmkernel::global_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Global_H)
  return global_h_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_global_h(::google::protobuf::int32 value) {
  set_has_global_h();
  global_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Global_H)
}

// optional int32 Global_W = 14;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_global_w() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_global_w() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_global_w() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_global_w() {
  global_w_ = 0;
  clear_has_global_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_stride_bmkernel::global_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Global_W)
  return global_w_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_global_w(::google::protobuf::int32 value) {
  set_has_global_w();
  global_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.Global_W)
}

// optional bool DoTranspose = 15;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_dotranspose() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_dotranspose() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_dotranspose() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_dotranspose() {
  dotranspose_ = false;
  clear_has_dotranspose();
}
inline bool Inst_bmnet_tl_load_stride_bmkernel::dotranspose() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.DoTranspose)
  return dotranspose_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_dotranspose(bool value) {
  set_has_dotranspose();
  dotranspose_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.DoTranspose)
}

// optional bool DoAligned = 16;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_doaligned() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_doaligned() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_doaligned() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_doaligned() {
  doaligned_ = false;
  clear_has_doaligned();
}
inline bool Inst_bmnet_tl_load_stride_bmkernel::doaligned() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.DoAligned)
  return doaligned_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_doaligned(bool value) {
  set_has_doaligned();
  doaligned_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.DoAligned)
}

// optional bool isNeuron = 17;
inline bool Inst_bmnet_tl_load_stride_bmkernel::has_isneuron() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_has_isneuron() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_has_isneuron() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::clear_isneuron() {
  isneuron_ = false;
  clear_has_isneuron();
}
inline bool Inst_bmnet_tl_load_stride_bmkernel::isneuron() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.isNeuron)
  return isneuron_;
}
inline void Inst_bmnet_tl_load_stride_bmkernel::set_isneuron(bool value) {
  set_has_isneuron();
  isneuron_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel.isNeuron)
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_load_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_load_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_load_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_load_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_load_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_load_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_load_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_load_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_load_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_load_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_load_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.depends)
}
inline void Inst_bmnet_tl_load_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_load_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_load_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_load_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_load_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.depends_len)
}

// optional uint64 ga_src = 6;
inline bool Inst_bmnet_tl_load_bmkernel::has_ga_src() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_ga_src() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_ga_src() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_ga_src() {
  ga_src_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_src();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_load_bmkernel::ga_src() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.ga_src)
  return ga_src_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_ga_src(::google::protobuf::uint64 value) {
  set_has_ga_src();
  ga_src_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.ga_src)
}

// optional uint64 la_dst = 7;
inline bool Inst_bmnet_tl_load_bmkernel::has_la_dst() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_la_dst() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_la_dst() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_la_dst() {
  la_dst_ = GOOGLE_ULONGLONG(0);
  clear_has_la_dst();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_load_bmkernel::la_dst() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.la_dst)
  return la_dst_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_la_dst(::google::protobuf::uint64 value) {
  set_has_la_dst();
  la_dst_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.la_dst)
}

// optional int32 Local_N = 8;
inline bool Inst_bmnet_tl_load_bmkernel::has_local_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_local_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_local_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_local_n() {
  local_n_ = 0;
  clear_has_local_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_bmkernel::local_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Local_N)
  return local_n_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_local_n(::google::protobuf::int32 value) {
  set_has_local_n();
  local_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Local_N)
}

// optional int32 Local_C = 9;
inline bool Inst_bmnet_tl_load_bmkernel::has_local_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_local_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_local_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_local_c() {
  local_c_ = 0;
  clear_has_local_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_bmkernel::local_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Local_C)
  return local_c_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_local_c(::google::protobuf::int32 value) {
  set_has_local_c();
  local_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Local_C)
}

// optional int32 Local_H = 10;
inline bool Inst_bmnet_tl_load_bmkernel::has_local_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_local_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_local_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_local_h() {
  local_h_ = 0;
  clear_has_local_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_bmkernel::local_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Local_H)
  return local_h_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_local_h(::google::protobuf::int32 value) {
  set_has_local_h();
  local_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Local_H)
}

// optional int32 Local_W = 11;
inline bool Inst_bmnet_tl_load_bmkernel::has_local_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_local_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_local_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_local_w() {
  local_w_ = 0;
  clear_has_local_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_bmkernel::local_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Local_W)
  return local_w_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_local_w(::google::protobuf::int32 value) {
  set_has_local_w();
  local_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Local_W)
}

// optional int32 Global_C = 12;
inline bool Inst_bmnet_tl_load_bmkernel::has_global_c() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_global_c() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_global_c() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_global_c() {
  global_c_ = 0;
  clear_has_global_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_bmkernel::global_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Global_C)
  return global_c_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_global_c(::google::protobuf::int32 value) {
  set_has_global_c();
  global_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Global_C)
}

// optional int32 Global_H = 13;
inline bool Inst_bmnet_tl_load_bmkernel::has_global_h() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_global_h() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_global_h() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_global_h() {
  global_h_ = 0;
  clear_has_global_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_bmkernel::global_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Global_H)
  return global_h_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_global_h(::google::protobuf::int32 value) {
  set_has_global_h();
  global_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Global_H)
}

// optional int32 Global_W = 14;
inline bool Inst_bmnet_tl_load_bmkernel::has_global_w() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_global_w() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_global_w() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_global_w() {
  global_w_ = 0;
  clear_has_global_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_load_bmkernel::global_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Global_W)
  return global_w_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_global_w(::google::protobuf::int32 value) {
  set_has_global_w();
  global_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.Global_W)
}

// optional bool DoTranspose = 15;
inline bool Inst_bmnet_tl_load_bmkernel::has_dotranspose() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_dotranspose() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_dotranspose() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_dotranspose() {
  dotranspose_ = false;
  clear_has_dotranspose();
}
inline bool Inst_bmnet_tl_load_bmkernel::dotranspose() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.DoTranspose)
  return dotranspose_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_dotranspose(bool value) {
  set_has_dotranspose();
  dotranspose_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.DoTranspose)
}

// optional bool DoAligned = 16;
inline bool Inst_bmnet_tl_load_bmkernel::has_doaligned() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_doaligned() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_doaligned() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_doaligned() {
  doaligned_ = false;
  clear_has_doaligned();
}
inline bool Inst_bmnet_tl_load_bmkernel::doaligned() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.DoAligned)
  return doaligned_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_doaligned(bool value) {
  set_has_doaligned();
  doaligned_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.DoAligned)
}

// optional bool isNeuron = 17;
inline bool Inst_bmnet_tl_load_bmkernel::has_isneuron() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_tl_load_bmkernel::set_has_isneuron() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_has_isneuron() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_tl_load_bmkernel::clear_isneuron() {
  isneuron_ = false;
  clear_has_isneuron();
}
inline bool Inst_bmnet_tl_load_bmkernel::isneuron() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.isNeuron)
  return isneuron_;
}
inline void Inst_bmnet_tl_load_bmkernel::set_isneuron(bool value) {
  set_has_isneuron();
  isneuron_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_load_bmkernel.isNeuron)
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_store_stride_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_store_stride_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_store_stride_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_store_stride_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_store_stride_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_store_stride_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.depends)
}
inline void Inst_bmnet_tl_store_stride_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_store_stride_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_store_stride_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_store_stride_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.depends_len)
}

// optional uint64 ga_dst = 6;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_ga_dst() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_ga_dst() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_ga_dst() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_ga_dst() {
  ga_dst_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_dst();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_store_stride_bmkernel::ga_dst() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.ga_dst)
  return ga_dst_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_ga_dst(::google::protobuf::uint64 value) {
  set_has_ga_dst();
  ga_dst_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.ga_dst)
}

// optional uint64 la_src = 7;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_la_src() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_la_src() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_la_src() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_la_src() {
  la_src_ = GOOGLE_ULONGLONG(0);
  clear_has_la_src();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_store_stride_bmkernel::la_src() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.la_src)
  return la_src_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_la_src(::google::protobuf::uint64 value) {
  set_has_la_src();
  la_src_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.la_src)
}

// optional int32 Local_N = 8;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_local_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_local_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_local_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_local_n() {
  local_n_ = 0;
  clear_has_local_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_stride_bmkernel::local_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Local_N)
  return local_n_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_local_n(::google::protobuf::int32 value) {
  set_has_local_n();
  local_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Local_N)
}

// optional int32 Local_C = 9;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_local_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_local_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_local_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_local_c() {
  local_c_ = 0;
  clear_has_local_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_stride_bmkernel::local_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Local_C)
  return local_c_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_local_c(::google::protobuf::int32 value) {
  set_has_local_c();
  local_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Local_C)
}

// optional int32 Local_H = 10;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_local_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_local_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_local_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_local_h() {
  local_h_ = 0;
  clear_has_local_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_stride_bmkernel::local_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Local_H)
  return local_h_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_local_h(::google::protobuf::int32 value) {
  set_has_local_h();
  local_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Local_H)
}

// optional int32 Local_W = 11;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_local_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_local_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_local_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_local_w() {
  local_w_ = 0;
  clear_has_local_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_stride_bmkernel::local_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Local_W)
  return local_w_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_local_w(::google::protobuf::int32 value) {
  set_has_local_w();
  local_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Local_W)
}

// optional int32 Global_C = 12;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_global_c() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_global_c() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_global_c() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_global_c() {
  global_c_ = 0;
  clear_has_global_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_stride_bmkernel::global_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Global_C)
  return global_c_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_global_c(::google::protobuf::int32 value) {
  set_has_global_c();
  global_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Global_C)
}

// optional int32 Global_H = 13;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_global_h() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_global_h() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_global_h() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_global_h() {
  global_h_ = 0;
  clear_has_global_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_stride_bmkernel::global_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Global_H)
  return global_h_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_global_h(::google::protobuf::int32 value) {
  set_has_global_h();
  global_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Global_H)
}

// optional int32 Global_W = 14;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_global_w() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_global_w() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_global_w() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_global_w() {
  global_w_ = 0;
  clear_has_global_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_stride_bmkernel::global_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Global_W)
  return global_w_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_global_w(::google::protobuf::int32 value) {
  set_has_global_w();
  global_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.Global_W)
}

// optional bool DoTranspose = 15;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_dotranspose() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_dotranspose() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_dotranspose() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_dotranspose() {
  dotranspose_ = false;
  clear_has_dotranspose();
}
inline bool Inst_bmnet_tl_store_stride_bmkernel::dotranspose() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.DoTranspose)
  return dotranspose_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_dotranspose(bool value) {
  set_has_dotranspose();
  dotranspose_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.DoTranspose)
}

// optional bool DoAligned = 16;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_doaligned() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_doaligned() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_doaligned() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_doaligned() {
  doaligned_ = false;
  clear_has_doaligned();
}
inline bool Inst_bmnet_tl_store_stride_bmkernel::doaligned() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.DoAligned)
  return doaligned_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_doaligned(bool value) {
  set_has_doaligned();
  doaligned_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.DoAligned)
}

// optional bool isNeuron = 17;
inline bool Inst_bmnet_tl_store_stride_bmkernel::has_isneuron() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_has_isneuron() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_has_isneuron() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::clear_isneuron() {
  isneuron_ = false;
  clear_has_isneuron();
}
inline bool Inst_bmnet_tl_store_stride_bmkernel::isneuron() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.isNeuron)
  return isneuron_;
}
inline void Inst_bmnet_tl_store_stride_bmkernel::set_isneuron(bool value) {
  set_has_isneuron();
  isneuron_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel.isNeuron)
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_store_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_store_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_store_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_store_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_store_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_store_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_store_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_store_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_store_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_store_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_store_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.depends)
}
inline void Inst_bmnet_tl_store_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_store_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_store_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_store_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_store_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.depends_len)
}

// optional uint64 ga_dst = 6;
inline bool Inst_bmnet_tl_store_bmkernel::has_ga_dst() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_ga_dst() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_ga_dst() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_ga_dst() {
  ga_dst_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_dst();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_store_bmkernel::ga_dst() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.ga_dst)
  return ga_dst_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_ga_dst(::google::protobuf::uint64 value) {
  set_has_ga_dst();
  ga_dst_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.ga_dst)
}

// optional uint64 la_src = 7;
inline bool Inst_bmnet_tl_store_bmkernel::has_la_src() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_la_src() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_la_src() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_la_src() {
  la_src_ = GOOGLE_ULONGLONG(0);
  clear_has_la_src();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_store_bmkernel::la_src() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.la_src)
  return la_src_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_la_src(::google::protobuf::uint64 value) {
  set_has_la_src();
  la_src_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.la_src)
}

// optional int32 Local_N = 8;
inline bool Inst_bmnet_tl_store_bmkernel::has_local_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_local_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_local_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_local_n() {
  local_n_ = 0;
  clear_has_local_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_bmkernel::local_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Local_N)
  return local_n_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_local_n(::google::protobuf::int32 value) {
  set_has_local_n();
  local_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Local_N)
}

// optional int32 Local_C = 9;
inline bool Inst_bmnet_tl_store_bmkernel::has_local_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_local_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_local_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_local_c() {
  local_c_ = 0;
  clear_has_local_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_bmkernel::local_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Local_C)
  return local_c_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_local_c(::google::protobuf::int32 value) {
  set_has_local_c();
  local_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Local_C)
}

// optional int32 Local_H = 10;
inline bool Inst_bmnet_tl_store_bmkernel::has_local_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_local_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_local_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_local_h() {
  local_h_ = 0;
  clear_has_local_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_bmkernel::local_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Local_H)
  return local_h_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_local_h(::google::protobuf::int32 value) {
  set_has_local_h();
  local_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Local_H)
}

// optional int32 Local_W = 11;
inline bool Inst_bmnet_tl_store_bmkernel::has_local_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_local_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_local_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_local_w() {
  local_w_ = 0;
  clear_has_local_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_bmkernel::local_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Local_W)
  return local_w_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_local_w(::google::protobuf::int32 value) {
  set_has_local_w();
  local_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Local_W)
}

// optional int32 Global_C = 12;
inline bool Inst_bmnet_tl_store_bmkernel::has_global_c() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_global_c() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_global_c() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_global_c() {
  global_c_ = 0;
  clear_has_global_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_bmkernel::global_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Global_C)
  return global_c_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_global_c(::google::protobuf::int32 value) {
  set_has_global_c();
  global_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Global_C)
}

// optional int32 Global_H = 13;
inline bool Inst_bmnet_tl_store_bmkernel::has_global_h() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_global_h() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_global_h() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_global_h() {
  global_h_ = 0;
  clear_has_global_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_bmkernel::global_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Global_H)
  return global_h_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_global_h(::google::protobuf::int32 value) {
  set_has_global_h();
  global_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Global_H)
}

// optional int32 Global_W = 14;
inline bool Inst_bmnet_tl_store_bmkernel::has_global_w() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_global_w() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_global_w() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_global_w() {
  global_w_ = 0;
  clear_has_global_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_store_bmkernel::global_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Global_W)
  return global_w_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_global_w(::google::protobuf::int32 value) {
  set_has_global_w();
  global_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.Global_W)
}

// optional bool DoTranspose = 15;
inline bool Inst_bmnet_tl_store_bmkernel::has_dotranspose() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_dotranspose() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_dotranspose() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_dotranspose() {
  dotranspose_ = false;
  clear_has_dotranspose();
}
inline bool Inst_bmnet_tl_store_bmkernel::dotranspose() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.DoTranspose)
  return dotranspose_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_dotranspose(bool value) {
  set_has_dotranspose();
  dotranspose_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.DoTranspose)
}

// optional bool DoAligned = 16;
inline bool Inst_bmnet_tl_store_bmkernel::has_doaligned() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_doaligned() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_doaligned() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_doaligned() {
  doaligned_ = false;
  clear_has_doaligned();
}
inline bool Inst_bmnet_tl_store_bmkernel::doaligned() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.DoAligned)
  return doaligned_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_doaligned(bool value) {
  set_has_doaligned();
  doaligned_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.DoAligned)
}

// optional bool isNeuron = 17;
inline bool Inst_bmnet_tl_store_bmkernel::has_isneuron() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_tl_store_bmkernel::set_has_isneuron() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_has_isneuron() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_tl_store_bmkernel::clear_isneuron() {
  isneuron_ = false;
  clear_has_isneuron();
}
inline bool Inst_bmnet_tl_store_bmkernel::isneuron() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.isNeuron)
  return isneuron_;
}
inline void Inst_bmnet_tl_store_bmkernel::set_isneuron(bool value) {
  set_has_isneuron();
  isneuron_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_store_bmkernel.isNeuron)
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_relu_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_relu_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_relu_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_relu_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_relu_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_relu_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_relu_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_relu_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_relu_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.depends)
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_relu_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_relu_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_relu_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_relu_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.depends_len)
}

// optional uint64 input_laddr = 6;
inline bool Inst_bmnet_tl_relu_forward_bmkernel::has_input_laddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_has_input_laddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_has_input_laddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_input_laddr() {
  input_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_relu_forward_bmkernel::input_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.input_laddr)
  return input_laddr_;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_input_laddr(::google::protobuf::uint64 value) {
  set_has_input_laddr();
  input_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.input_laddr)
}

// optional uint64 output_laddr = 7;
inline bool Inst_bmnet_tl_relu_forward_bmkernel::has_output_laddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_has_output_laddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_has_output_laddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_output_laddr() {
  output_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_relu_forward_bmkernel::output_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.output_laddr)
  return output_laddr_;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_output_laddr(::google::protobuf::uint64 value) {
  set_has_output_laddr();
  output_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.output_laddr)
}

// optional int32 input_n = 8;
inline bool Inst_bmnet_tl_relu_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_relu_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.input_n)
}

// optional int32 input_c = 9;
inline bool Inst_bmnet_tl_relu_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_relu_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.input_c)
}

// optional int32 input_h = 10;
inline bool Inst_bmnet_tl_relu_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_relu_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.input_h)
}

// optional int32 input_w = 11;
inline bool Inst_bmnet_tl_relu_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_relu_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_tl_relu_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_fc_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_fc_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_fc_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_fc_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_fc_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_fc_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_fc_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_fc_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_fc_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.depends)
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_fc_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_fc_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_fc_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_fc_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.depends_len)
}

// optional uint64 input_data_laddr = 6;
inline bool Inst_bmnet_tl_fc_forward_bmkernel::has_input_data_laddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_has_input_data_laddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_has_input_data_laddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_input_data_laddr() {
  input_data_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_data_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_fc_forward_bmkernel::input_data_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.input_data_laddr)
  return input_data_laddr_;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_input_data_laddr(::google::protobuf::uint64 value) {
  set_has_input_data_laddr();
  input_data_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.input_data_laddr)
}

// optional uint64 output_data_laddr = 7;
inline bool Inst_bmnet_tl_fc_forward_bmkernel::has_output_data_laddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_has_output_data_laddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_has_output_data_laddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_output_data_laddr() {
  output_data_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_data_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_fc_forward_bmkernel::output_data_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.output_data_laddr)
  return output_data_laddr_;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_output_data_laddr(::google::protobuf::uint64 value) {
  set_has_output_data_laddr();
  output_data_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.output_data_laddr)
}

// optional uint64 weight_data_laddr = 8;
inline bool Inst_bmnet_tl_fc_forward_bmkernel::has_weight_data_laddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_has_weight_data_laddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_has_weight_data_laddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_weight_data_laddr() {
  weight_data_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_weight_data_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_fc_forward_bmkernel::weight_data_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.weight_data_laddr)
  return weight_data_laddr_;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_weight_data_laddr(::google::protobuf::uint64 value) {
  set_has_weight_data_laddr();
  weight_data_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.weight_data_laddr)
}

// optional uint64 bias_data_laddr = 9;
inline bool Inst_bmnet_tl_fc_forward_bmkernel::has_bias_data_laddr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_has_bias_data_laddr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_has_bias_data_laddr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_bias_data_laddr() {
  bias_data_laddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bias_data_laddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_fc_forward_bmkernel::bias_data_laddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.bias_data_laddr)
  return bias_data_laddr_;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_bias_data_laddr(::google::protobuf::uint64 value) {
  set_has_bias_data_laddr();
  bias_data_laddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.bias_data_laddr)
}

// optional int32 in_row = 10;
inline bool Inst_bmnet_tl_fc_forward_bmkernel::has_in_row() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_has_in_row() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_has_in_row() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_in_row() {
  in_row_ = 0;
  clear_has_in_row();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_fc_forward_bmkernel::in_row() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.in_row)
  return in_row_;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_in_row(::google::protobuf::int32 value) {
  set_has_in_row();
  in_row_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.in_row)
}

// optional int32 in_col = 11;
inline bool Inst_bmnet_tl_fc_forward_bmkernel::has_in_col() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_has_in_col() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_has_in_col() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_in_col() {
  in_col_ = 0;
  clear_has_in_col();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_fc_forward_bmkernel::in_col() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.in_col)
  return in_col_;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_in_col(::google::protobuf::int32 value) {
  set_has_in_col();
  in_col_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.in_col)
}

// optional int32 out_col = 12;
inline bool Inst_bmnet_tl_fc_forward_bmkernel::has_out_col() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_has_out_col() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_has_out_col() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_out_col() {
  out_col_ = 0;
  clear_has_out_col();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_fc_forward_bmkernel::out_col() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.out_col)
  return out_col_;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_out_col(::google::protobuf::int32 value) {
  set_has_out_col();
  out_col_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.out_col)
}

// optional bool do_bias = 13;
inline bool Inst_bmnet_tl_fc_forward_bmkernel::has_do_bias() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_has_do_bias() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_has_do_bias() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::clear_do_bias() {
  do_bias_ = false;
  clear_has_do_bias();
}
inline bool Inst_bmnet_tl_fc_forward_bmkernel::do_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.do_bias)
  return do_bias_;
}
inline void Inst_bmnet_tl_fc_forward_bmkernel::set_do_bias(bool value) {
  set_has_do_bias();
  do_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel.do_bias)
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_deconv_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_deconv_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.depends)
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_deconv_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_deconv_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.depends_len)
}

// optional uint64 la_ifmap = 6;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_la_ifmap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_la_ifmap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_la_ifmap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_la_ifmap() {
  la_ifmap_ = GOOGLE_ULONGLONG(0);
  clear_has_la_ifmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_deconv_forward_bmkernel::la_ifmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.la_ifmap)
  return la_ifmap_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_la_ifmap(::google::protobuf::uint64 value) {
  set_has_la_ifmap();
  la_ifmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.la_ifmap)
}

// optional uint64 la_ofmap = 7;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_la_ofmap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_la_ofmap() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_la_ofmap() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_la_ofmap() {
  la_ofmap_ = GOOGLE_ULONGLONG(0);
  clear_has_la_ofmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_deconv_forward_bmkernel::la_ofmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.la_ofmap)
  return la_ofmap_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_la_ofmap(::google::protobuf::uint64 value) {
  set_has_la_ofmap();
  la_ofmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.la_ofmap)
}

// optional uint64 la_weight = 8;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_la_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_la_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_la_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_la_weight() {
  la_weight_ = GOOGLE_ULONGLONG(0);
  clear_has_la_weight();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_deconv_forward_bmkernel::la_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.la_weight)
  return la_weight_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_la_weight(::google::protobuf::uint64 value) {
  set_has_la_weight();
  la_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.la_weight)
}

// optional uint64 la_bias = 9;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_la_bias() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_la_bias() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_la_bias() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_la_bias() {
  la_bias_ = GOOGLE_ULONGLONG(0);
  clear_has_la_bias();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_deconv_forward_bmkernel::la_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.la_bias)
  return la_bias_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_la_bias(::google::protobuf::uint64 value) {
  set_has_la_bias();
  la_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.la_bias)
}

// repeated uint32 group_weight = 10;
inline int Inst_bmnet_tl_deconv_forward_bmkernel::group_weight_size() const {
  return group_weight_.size();
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_group_weight() {
  group_weight_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::group_weight(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.group_weight)
  return group_weight_.Get(index);
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_group_weight(int index, ::google::protobuf::uint32 value) {
  group_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.group_weight)
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::add_group_weight(::google::protobuf::uint32 value) {
  group_weight_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.group_weight)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_deconv_forward_bmkernel::group_weight() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.group_weight)
  return group_weight_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_deconv_forward_bmkernel::mutable_group_weight() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.group_weight)
  return &group_weight_;
}

// repeated uint32 group_bias = 11;
inline int Inst_bmnet_tl_deconv_forward_bmkernel::group_bias_size() const {
  return group_bias_.size();
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_group_bias() {
  group_bias_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::group_bias(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.group_bias)
  return group_bias_.Get(index);
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_group_bias(int index, ::google::protobuf::uint32 value) {
  group_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.group_bias)
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::add_group_bias(::google::protobuf::uint32 value) {
  group_bias_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.group_bias)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_deconv_forward_bmkernel::group_bias() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.group_bias)
  return group_bias_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_deconv_forward_bmkernel::mutable_group_bias() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.group_bias)
  return &group_bias_;
}

// optional int32 input_n = 12;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_deconv_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.input_n)
}

// optional int32 input_c = 13;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_deconv_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.input_c)
}

// optional int32 input_h = 14;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_deconv_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.input_h)
}

// optional int32 input_w = 15;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_deconv_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.input_w)
}

// optional int32 group = 16;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_group() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_group() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_deconv_forward_bmkernel::group() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.group)
  return group_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.group)
}

// optional int32 output_c = 17;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_output_c() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_output_c() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_output_c() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_output_c() {
  output_c_ = 0;
  clear_has_output_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_deconv_forward_bmkernel::output_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.output_c)
  return output_c_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_output_c(::google::protobuf::int32 value) {
  set_has_output_c();
  output_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.output_c)
}

// optional int32 output_h = 18;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_output_h() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_output_h() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_output_h() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_output_h() {
  output_h_ = 0;
  clear_has_output_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_deconv_forward_bmkernel::output_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.output_h)
  return output_h_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_output_h(::google::protobuf::int32 value) {
  set_has_output_h();
  output_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.output_h)
}

// optional int32 output_w = 19;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_output_w() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_output_w() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_output_w() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_output_w() {
  output_w_ = 0;
  clear_has_output_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_deconv_forward_bmkernel::output_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.output_w)
  return output_w_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_output_w(::google::protobuf::int32 value) {
  set_has_output_w();
  output_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.output_w)
}

// optional uint32 kh = 20;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_kh() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_kh() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_kh() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_kh() {
  kh_ = 0u;
  clear_has_kh();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::kh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.kh)
  return kh_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_kh(::google::protobuf::uint32 value) {
  set_has_kh();
  kh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.kh)
}

// optional uint32 kw = 21;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_kw() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_kw() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_kw() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_kw() {
  kw_ = 0u;
  clear_has_kw();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::kw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.kw)
  return kw_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_kw(::google::protobuf::uint32 value) {
  set_has_kw();
  kw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.kw)
}

// optional uint32 dh = 22;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_dh() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_dh() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_dh() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_dh() {
  dh_ = 0u;
  clear_has_dh();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::dh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.dh)
  return dh_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_dh(::google::protobuf::uint32 value) {
  set_has_dh();
  dh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.dh)
}

// optional uint32 dw = 23;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_dw() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_dw() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_dw() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_dw() {
  dw_ = 0u;
  clear_has_dw();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::dw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.dw)
  return dw_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_dw(::google::protobuf::uint32 value) {
  set_has_dw();
  dw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.dw)
}

// optional uint32 pad_h_top = 24;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_pad_h_top() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_pad_h_top() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_pad_h_top() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_pad_h_top() {
  pad_h_top_ = 0u;
  clear_has_pad_h_top();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::pad_h_top() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.pad_h_top)
  return pad_h_top_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_pad_h_top(::google::protobuf::uint32 value) {
  set_has_pad_h_top();
  pad_h_top_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.pad_h_top)
}

// optional uint32 pad_h_bottom = 25;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_pad_h_bottom() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_pad_h_bottom() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_pad_h_bottom() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_pad_h_bottom() {
  pad_h_bottom_ = 0u;
  clear_has_pad_h_bottom();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::pad_h_bottom() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.pad_h_bottom)
  return pad_h_bottom_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_pad_h_bottom(::google::protobuf::uint32 value) {
  set_has_pad_h_bottom();
  pad_h_bottom_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.pad_h_bottom)
}

// optional uint32 pad_w_left = 26;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_pad_w_left() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_pad_w_left() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_pad_w_left() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_pad_w_left() {
  pad_w_left_ = 0u;
  clear_has_pad_w_left();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::pad_w_left() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.pad_w_left)
  return pad_w_left_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_pad_w_left(::google::protobuf::uint32 value) {
  set_has_pad_w_left();
  pad_w_left_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.pad_w_left)
}

// optional uint32 pad_w_right = 27;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_pad_w_right() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_pad_w_right() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_pad_w_right() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_pad_w_right() {
  pad_w_right_ = 0u;
  clear_has_pad_w_right();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::pad_w_right() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.pad_w_right)
  return pad_w_right_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_pad_w_right(::google::protobuf::uint32 value) {
  set_has_pad_w_right();
  pad_w_right_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.pad_w_right)
}

// optional uint32 ins_h = 28;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_ins_h() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_ins_h() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_ins_h() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_ins_h() {
  ins_h_ = 0u;
  clear_has_ins_h();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::ins_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.ins_h)
  return ins_h_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_ins_h(::google::protobuf::uint32 value) {
  set_has_ins_h();
  ins_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.ins_h)
}

// optional uint32 ins_last_h = 29;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_ins_last_h() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_ins_last_h() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_ins_last_h() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_ins_last_h() {
  ins_last_h_ = 0u;
  clear_has_ins_last_h();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::ins_last_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.ins_last_h)
  return ins_last_h_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_ins_last_h(::google::protobuf::uint32 value) {
  set_has_ins_last_h();
  ins_last_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.ins_last_h)
}

// optional uint32 ins_w = 30;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_ins_w() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_ins_w() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_ins_w() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_ins_w() {
  ins_w_ = 0u;
  clear_has_ins_w();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::ins_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.ins_w)
  return ins_w_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_ins_w(::google::protobuf::uint32 value) {
  set_has_ins_w();
  ins_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.ins_w)
}

// optional uint32 ins_w_last = 31;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_ins_w_last() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_ins_w_last() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_ins_w_last() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_ins_w_last() {
  ins_w_last_ = 0u;
  clear_has_ins_w_last();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::ins_w_last() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.ins_w_last)
  return ins_w_last_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_ins_w_last(::google::protobuf::uint32 value) {
  set_has_ins_w_last();
  ins_w_last_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.ins_w_last)
}

// optional uint32 result_add = 32;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_result_add() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_result_add() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_result_add() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_result_add() {
  result_add_ = 0u;
  clear_has_result_add();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_deconv_forward_bmkernel::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.result_add)
  return result_add_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_result_add(::google::protobuf::uint32 value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.result_add)
}

// optional int32 rshift = 33;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_rshift() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_rshift() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_rshift() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_rshift() {
  rshift_ = 0;
  clear_has_rshift();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_deconv_forward_bmkernel::rshift() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.rshift)
  return rshift_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_rshift(::google::protobuf::int32 value) {
  set_has_rshift();
  rshift_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.rshift)
}

// optional bool do_bias = 34;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_do_bias() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_do_bias() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_do_bias() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_do_bias() {
  do_bias_ = false;
  clear_has_do_bias();
}
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::do_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.do_bias)
  return do_bias_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_do_bias(bool value) {
  set_has_do_bias();
  do_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.do_bias)
}

// optional bool use_winograd = 35;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_use_winograd() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_use_winograd() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_use_winograd() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_use_winograd() {
  use_winograd_ = false;
  clear_has_use_winograd();
}
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::use_winograd() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.use_winograd)
  return use_winograd_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_use_winograd(bool value) {
  set_has_use_winograd();
  use_winograd_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.use_winograd)
}

// optional bool do_relu = 36;
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::has_do_relu() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_has_do_relu() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_has_do_relu() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::clear_do_relu() {
  do_relu_ = false;
  clear_has_do_relu();
}
inline bool Inst_bmnet_tl_deconv_forward_bmkernel::do_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.do_relu)
  return do_relu_;
}
inline void Inst_bmnet_tl_deconv_forward_bmkernel::set_do_relu(bool value) {
  set_has_do_relu();
  do_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel.do_relu)
}

// -------------------------------------------------------------------

// Inst_bmnet_tl_quantization_forward_bmkernel

// optional uint32 stream_id = 1;
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_quantization_forward_bmkernel::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.stream_id)
  return stream_id_;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.stream_id)
}

// optional uint32 inst_id = 2;
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_quantization_forward_bmkernel::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.inst_id)
  return inst_id_;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.inst_id)
}

// optional uint32 layer_id = 3;
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::has_layer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_has_layer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_layer_id() {
  layer_id_ = 0u;
  clear_has_layer_id();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_quantization_forward_bmkernel::layer_id() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.layer_id)
  return layer_id_;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_layer_id(::google::protobuf::uint32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.layer_id)
}

// repeated uint32 depends = 4;
inline int Inst_bmnet_tl_quantization_forward_bmkernel::depends_size() const {
  return depends_.size();
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_quantization_forward_bmkernel::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.depends)
  return depends_.Get(index);
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.depends)
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Inst_bmnet_tl_quantization_forward_bmkernel::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Inst_bmnet_tl_quantization_forward_bmkernel::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.depends)
  return &depends_;
}

// optional uint32 depends_len = 5;
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::has_depends_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_has_depends_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_has_depends_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_depends_len() {
  depends_len_ = 0u;
  clear_has_depends_len();
}
inline ::google::protobuf::uint32 Inst_bmnet_tl_quantization_forward_bmkernel::depends_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.depends_len)
  return depends_len_;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_depends_len(::google::protobuf::uint32 value) {
  set_has_depends_len();
  depends_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.depends_len)
}

// optional uint64 la_input = 6;
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::has_la_input() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_has_la_input() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_has_la_input() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_la_input() {
  la_input_ = GOOGLE_ULONGLONG(0);
  clear_has_la_input();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_quantization_forward_bmkernel::la_input() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.la_input)
  return la_input_;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_la_input(::google::protobuf::uint64 value) {
  set_has_la_input();
  la_input_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.la_input)
}

// optional uint64 la_output = 7;
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::has_la_output() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_has_la_output() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_has_la_output() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_la_output() {
  la_output_ = GOOGLE_ULONGLONG(0);
  clear_has_la_output();
}
inline ::google::protobuf::uint64 Inst_bmnet_tl_quantization_forward_bmkernel::la_output() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.la_output)
  return la_output_;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_la_output(::google::protobuf::uint64 value) {
  set_has_la_output();
  la_output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.la_output)
}

// optional int32 input_n = 8;
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_quantization_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.input_n)
}

// optional int32 input_c = 9;
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_quantization_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.input_c)
}

// optional int32 input_h = 10;
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_quantization_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.input_h)
}

// optional int32 input_w = 11;
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_quantization_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.input_w)
}

// repeated int32 right_shift_width = 12;
inline int Inst_bmnet_tl_quantization_forward_bmkernel::right_shift_width_size() const {
  return right_shift_width_.size();
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_right_shift_width() {
  right_shift_width_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_quantization_forward_bmkernel::right_shift_width(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.right_shift_width)
  return right_shift_width_.Get(index);
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_right_shift_width(int index, ::google::protobuf::int32 value) {
  right_shift_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.right_shift_width)
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::add_right_shift_width(::google::protobuf::int32 value) {
  right_shift_width_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.right_shift_width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_tl_quantization_forward_bmkernel::right_shift_width() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.right_shift_width)
  return right_shift_width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_tl_quantization_forward_bmkernel::mutable_right_shift_width() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.right_shift_width)
  return &right_shift_width_;
}

// optional int32 op = 13;
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::has_op() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_has_op() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_has_op() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_quantization_forward_bmkernel::op() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.op)
  return op_;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.op)
}

// repeated int32 threshold_x_quantized = 14;
inline int Inst_bmnet_tl_quantization_forward_bmkernel::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_tl_quantization_forward_bmkernel::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.threshold_x_quantized)
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_tl_quantization_forward_bmkernel::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_tl_quantization_forward_bmkernel::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// optional bool do_relu = 15;
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::has_do_relu() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_has_do_relu() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_has_do_relu() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_do_relu() {
  do_relu_ = false;
  clear_has_do_relu();
}
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::do_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.do_relu)
  return do_relu_;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_do_relu(bool value) {
  set_has_do_relu();
  do_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.do_relu)
}

// optional float relu_slope = 16;
inline bool Inst_bmnet_tl_quantization_forward_bmkernel::has_relu_slope() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_has_relu_slope() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_has_relu_slope() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::clear_relu_slope() {
  relu_slope_ = 0;
  clear_has_relu_slope();
}
inline float Inst_bmnet_tl_quantization_forward_bmkernel::relu_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.relu_slope)
  return relu_slope_;
}
inline void Inst_bmnet_tl_quantization_forward_bmkernel::set_relu_slope(float value) {
  set_has_relu_slope();
  relu_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel.relu_slope)
}

// -------------------------------------------------------------------

// Inst

// optional string name = 1;
inline bool Inst::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Inst::name() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.name)
  return name_.GetNoArena();
}
inline void Inst::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.name)
}
#if LANG_CXX11
inline void Inst::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bmnet.bm1880.Inst.name)
}
#endif
inline void Inst::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bmnet.bm1880.Inst.name)
}
inline void Inst::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bmnet.bm1880.Inst.name)
}
inline ::std::string* Inst::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Inst::release_name() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Inst::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.name)
}

// optional string type = 2;
inline bool Inst::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Inst::type() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.type)
  return type_.GetNoArena();
}
inline void Inst::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bmnet.bm1880.Inst.type)
}
#if LANG_CXX11
inline void Inst::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bmnet.bm1880.Inst.type)
}
#endif
inline void Inst::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bmnet.bm1880.Inst.type)
}
inline void Inst::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bmnet.bm1880.Inst.type)
}
inline ::std::string* Inst::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Inst::release_type() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Inst::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.type)
}

// optional .bmnet.bm1880.Inst.bmnet_pooling_fixed_forward_bmkernel pooling = 4;
inline bool Inst::has_pooling() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst::set_has_pooling() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst::clear_has_pooling() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst::clear_pooling() {
  if (pooling_ != NULL) pooling_->Clear();
  clear_has_pooling();
}
inline const ::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel& Inst::_internal_pooling() const {
  return *pooling_;
}
inline const ::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel& Inst::pooling() const {
  const ::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel* p = pooling_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.pooling)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_pooling_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel* Inst::release_pooling() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.pooling)
  clear_has_pooling();
  ::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel* temp = pooling_;
  pooling_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel* Inst::mutable_pooling() {
  set_has_pooling();
  if (pooling_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel>(GetArenaNoVirtual());
    pooling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.pooling)
  return pooling_;
}
inline void Inst::set_allocated_pooling(::bmnet::bm1880::Inst_bmnet_pooling_fixed_forward_bmkernel* pooling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pooling_;
  }
  if (pooling) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pooling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pooling, submessage_arena);
    }
    set_has_pooling();
  } else {
    clear_has_pooling();
  }
  pooling_ = pooling;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.pooling)
}

// optional .bmnet.bm1880.Inst.bmnet_conv_fixed_forward_bmkernel conv = 5;
inline bool Inst::has_conv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst::set_has_conv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst::clear_has_conv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst::clear_conv() {
  if (conv_ != NULL) conv_->Clear();
  clear_has_conv();
}
inline const ::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel& Inst::_internal_conv() const {
  return *conv_;
}
inline const ::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel& Inst::conv() const {
  const ::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel* p = conv_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.conv)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_conv_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel* Inst::release_conv() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.conv)
  clear_has_conv();
  ::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel* temp = conv_;
  conv_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel* Inst::mutable_conv() {
  set_has_conv();
  if (conv_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel>(GetArenaNoVirtual());
    conv_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.conv)
  return conv_;
}
inline void Inst::set_allocated_conv(::bmnet::bm1880::Inst_bmnet_conv_fixed_forward_bmkernel* conv) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete conv_;
  }
  if (conv) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conv = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conv, submessage_arena);
    }
    set_has_conv();
  } else {
    clear_has_conv();
  }
  conv_ = conv;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.conv)
}

// optional .bmnet.bm1880.Inst.bmnet_conv_parallel_fixed_forward_bmkernel conv_p = 6;
inline bool Inst::has_conv_p() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst::set_has_conv_p() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst::clear_has_conv_p() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst::clear_conv_p() {
  if (conv_p_ != NULL) conv_p_->Clear();
  clear_has_conv_p();
}
inline const ::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel& Inst::_internal_conv_p() const {
  return *conv_p_;
}
inline const ::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel& Inst::conv_p() const {
  const ::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel* p = conv_p_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.conv_p)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_conv_parallel_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel* Inst::release_conv_p() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.conv_p)
  clear_has_conv_p();
  ::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel* temp = conv_p_;
  conv_p_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel* Inst::mutable_conv_p() {
  set_has_conv_p();
  if (conv_p_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel>(GetArenaNoVirtual());
    conv_p_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.conv_p)
  return conv_p_;
}
inline void Inst::set_allocated_conv_p(::bmnet::bm1880::Inst_bmnet_conv_parallel_fixed_forward_bmkernel* conv_p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete conv_p_;
  }
  if (conv_p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conv_p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conv_p, submessage_arena);
    }
    set_has_conv_p();
  } else {
    clear_has_conv_p();
  }
  conv_p_ = conv_p;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.conv_p)
}

// optional .bmnet.bm1880.Inst.bmnet_fc_fixed_forward_bmkernel fc = 7;
inline bool Inst::has_fc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst::set_has_fc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst::clear_has_fc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst::clear_fc() {
  if (fc_ != NULL) fc_->Clear();
  clear_has_fc();
}
inline const ::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel& Inst::_internal_fc() const {
  return *fc_;
}
inline const ::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel& Inst::fc() const {
  const ::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel* p = fc_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.fc)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_fc_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel* Inst::release_fc() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.fc)
  clear_has_fc();
  ::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel* temp = fc_;
  fc_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel* Inst::mutable_fc() {
  set_has_fc();
  if (fc_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel>(GetArenaNoVirtual());
    fc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.fc)
  return fc_;
}
inline void Inst::set_allocated_fc(::bmnet::bm1880::Inst_bmnet_fc_fixed_forward_bmkernel* fc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fc_;
  }
  if (fc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fc, submessage_arena);
    }
    set_has_fc();
  } else {
    clear_has_fc();
  }
  fc_ = fc;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.fc)
}

// optional .bmnet.bm1880.Inst.bmnet_relu_fixed_forward_bmkernel relu = 8;
inline bool Inst::has_relu() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst::set_has_relu() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst::clear_has_relu() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst::clear_relu() {
  if (relu_ != NULL) relu_->Clear();
  clear_has_relu();
}
inline const ::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel& Inst::_internal_relu() const {
  return *relu_;
}
inline const ::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel& Inst::relu() const {
  const ::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel* p = relu_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.relu)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_relu_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel* Inst::release_relu() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.relu)
  clear_has_relu();
  ::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel* temp = relu_;
  relu_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel* Inst::mutable_relu() {
  set_has_relu();
  if (relu_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel>(GetArenaNoVirtual());
    relu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.relu)
  return relu_;
}
inline void Inst::set_allocated_relu(::bmnet::bm1880::Inst_bmnet_relu_fixed_forward_bmkernel* relu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete relu_;
  }
  if (relu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relu, submessage_arena);
    }
    set_has_relu();
  } else {
    clear_has_relu();
  }
  relu_ = relu;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.relu)
}

// optional .bmnet.bm1880.Inst.bmnet_clip_fixed_forward_bmkernel clip = 9;
inline bool Inst::has_clip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst::set_has_clip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst::clear_has_clip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst::clear_clip() {
  if (clip_ != NULL) clip_->Clear();
  clear_has_clip();
}
inline const ::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel& Inst::_internal_clip() const {
  return *clip_;
}
inline const ::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel& Inst::clip() const {
  const ::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel* p = clip_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.clip)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_clip_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel* Inst::release_clip() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.clip)
  clear_has_clip();
  ::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel* temp = clip_;
  clip_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel* Inst::mutable_clip() {
  set_has_clip();
  if (clip_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel>(GetArenaNoVirtual());
    clip_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.clip)
  return clip_;
}
inline void Inst::set_allocated_clip(::bmnet::bm1880::Inst_bmnet_clip_fixed_forward_bmkernel* clip) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clip_;
  }
  if (clip) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clip = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clip, submessage_arena);
    }
    set_has_clip();
  } else {
    clear_has_clip();
  }
  clip_ = clip;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.clip)
}

// optional .bmnet.bm1880.Inst.bmnet_leakyrelu_fixed_forward_bmkernel leakyrelu = 10;
inline bool Inst::has_leakyrelu() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst::set_has_leakyrelu() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst::clear_has_leakyrelu() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst::clear_leakyrelu() {
  if (leakyrelu_ != NULL) leakyrelu_->Clear();
  clear_has_leakyrelu();
}
inline const ::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel& Inst::_internal_leakyrelu() const {
  return *leakyrelu_;
}
inline const ::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel& Inst::leakyrelu() const {
  const ::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel* p = leakyrelu_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.leakyrelu)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_leakyrelu_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel* Inst::release_leakyrelu() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.leakyrelu)
  clear_has_leakyrelu();
  ::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel* temp = leakyrelu_;
  leakyrelu_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel* Inst::mutable_leakyrelu() {
  set_has_leakyrelu();
  if (leakyrelu_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel>(GetArenaNoVirtual());
    leakyrelu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.leakyrelu)
  return leakyrelu_;
}
inline void Inst::set_allocated_leakyrelu(::bmnet::bm1880::Inst_bmnet_leakyrelu_fixed_forward_bmkernel* leakyrelu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leakyrelu_;
  }
  if (leakyrelu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leakyrelu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leakyrelu, submessage_arena);
    }
    set_has_leakyrelu();
  } else {
    clear_has_leakyrelu();
  }
  leakyrelu_ = leakyrelu;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.leakyrelu)
}

// optional .bmnet.bm1880.Inst.bmnet_prelu_fixed_forward_bmkernel prelu = 11;
inline bool Inst::has_prelu() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst::set_has_prelu() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst::clear_has_prelu() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst::clear_prelu() {
  if (prelu_ != NULL) prelu_->Clear();
  clear_has_prelu();
}
inline const ::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel& Inst::_internal_prelu() const {
  return *prelu_;
}
inline const ::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel& Inst::prelu() const {
  const ::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel* p = prelu_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.prelu)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_prelu_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel* Inst::release_prelu() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.prelu)
  clear_has_prelu();
  ::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel* temp = prelu_;
  prelu_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel* Inst::mutable_prelu() {
  set_has_prelu();
  if (prelu_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel>(GetArenaNoVirtual());
    prelu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.prelu)
  return prelu_;
}
inline void Inst::set_allocated_prelu(::bmnet::bm1880::Inst_bmnet_prelu_fixed_forward_bmkernel* prelu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prelu_;
  }
  if (prelu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prelu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prelu, submessage_arena);
    }
    set_has_prelu();
  } else {
    clear_has_prelu();
  }
  prelu_ = prelu;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.prelu)
}

// optional .bmnet.bm1880.Inst.bmnet_sigmoid_fixed_forward_bmkernel sigmoid = 12;
inline bool Inst::has_sigmoid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst::set_has_sigmoid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst::clear_has_sigmoid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst::clear_sigmoid() {
  if (sigmoid_ != NULL) sigmoid_->Clear();
  clear_has_sigmoid();
}
inline const ::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel& Inst::_internal_sigmoid() const {
  return *sigmoid_;
}
inline const ::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel& Inst::sigmoid() const {
  const ::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel* p = sigmoid_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.sigmoid)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_sigmoid_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel* Inst::release_sigmoid() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.sigmoid)
  clear_has_sigmoid();
  ::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel* temp = sigmoid_;
  sigmoid_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel* Inst::mutable_sigmoid() {
  set_has_sigmoid();
  if (sigmoid_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel>(GetArenaNoVirtual());
    sigmoid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.sigmoid)
  return sigmoid_;
}
inline void Inst::set_allocated_sigmoid(::bmnet::bm1880::Inst_bmnet_sigmoid_fixed_forward_bmkernel* sigmoid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sigmoid_;
  }
  if (sigmoid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sigmoid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sigmoid, submessage_arena);
    }
    set_has_sigmoid();
  } else {
    clear_has_sigmoid();
  }
  sigmoid_ = sigmoid;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.sigmoid)
}

// optional .bmnet.bm1880.Inst.bmnet_batchnorm_fixed_forward_inference_bmkernel batchnorm = 13;
inline bool Inst::has_batchnorm() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst::set_has_batchnorm() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst::clear_has_batchnorm() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst::clear_batchnorm() {
  if (batchnorm_ != NULL) batchnorm_->Clear();
  clear_has_batchnorm();
}
inline const ::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel& Inst::_internal_batchnorm() const {
  return *batchnorm_;
}
inline const ::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel& Inst::batchnorm() const {
  const ::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* p = batchnorm_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.batchnorm)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* Inst::release_batchnorm() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.batchnorm)
  clear_has_batchnorm();
  ::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* temp = batchnorm_;
  batchnorm_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* Inst::mutable_batchnorm() {
  set_has_batchnorm();
  if (batchnorm_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel>(GetArenaNoVirtual());
    batchnorm_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.batchnorm)
  return batchnorm_;
}
inline void Inst::set_allocated_batchnorm(::bmnet::bm1880::Inst_bmnet_batchnorm_fixed_forward_inference_bmkernel* batchnorm) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete batchnorm_;
  }
  if (batchnorm) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      batchnorm = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, batchnorm, submessage_arena);
    }
    set_has_batchnorm();
  } else {
    clear_has_batchnorm();
  }
  batchnorm_ = batchnorm;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.batchnorm)
}

// optional .bmnet.bm1880.Inst.bmnet_scale_fixed_forward_bmkernel scale = 14;
inline bool Inst::has_scale() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst::set_has_scale() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst::clear_has_scale() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst::clear_scale() {
  if (scale_ != NULL) scale_->Clear();
  clear_has_scale();
}
inline const ::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel& Inst::_internal_scale() const {
  return *scale_;
}
inline const ::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel& Inst::scale() const {
  const ::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel* p = scale_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.scale)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_scale_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel* Inst::release_scale() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.scale)
  clear_has_scale();
  ::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel* Inst::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel>(GetArenaNoVirtual());
    scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.scale)
  return scale_;
}
inline void Inst::set_allocated_scale(::bmnet::bm1880::Inst_bmnet_scale_fixed_forward_bmkernel* scale) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scale_;
  }
  if (scale) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scale = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    set_has_scale();
  } else {
    clear_has_scale();
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.scale)
}

// optional .bmnet.bm1880.Inst.bmnet_reshape_fixed_forward_bmkernel reshape = 15;
inline bool Inst::has_reshape() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst::set_has_reshape() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst::clear_has_reshape() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst::clear_reshape() {
  if (reshape_ != NULL) reshape_->Clear();
  clear_has_reshape();
}
inline const ::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel& Inst::_internal_reshape() const {
  return *reshape_;
}
inline const ::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel& Inst::reshape() const {
  const ::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel* p = reshape_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.reshape)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_reshape_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel* Inst::release_reshape() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.reshape)
  clear_has_reshape();
  ::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel* temp = reshape_;
  reshape_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel* Inst::mutable_reshape() {
  set_has_reshape();
  if (reshape_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel>(GetArenaNoVirtual());
    reshape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.reshape)
  return reshape_;
}
inline void Inst::set_allocated_reshape(::bmnet::bm1880::Inst_bmnet_reshape_fixed_forward_bmkernel* reshape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reshape_;
  }
  if (reshape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reshape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reshape, submessage_arena);
    }
    set_has_reshape();
  } else {
    clear_has_reshape();
  }
  reshape_ = reshape;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.reshape)
}

// optional .bmnet.bm1880.Inst.bmnet_split_fixed_forward_bmkernel split = 16;
inline bool Inst::has_split() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst::set_has_split() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst::clear_has_split() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst::clear_split() {
  if (split_ != NULL) split_->Clear();
  clear_has_split();
}
inline const ::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel& Inst::_internal_split() const {
  return *split_;
}
inline const ::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel& Inst::split() const {
  const ::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel* p = split_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.split)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_split_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel* Inst::release_split() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.split)
  clear_has_split();
  ::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel* temp = split_;
  split_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel* Inst::mutable_split() {
  set_has_split();
  if (split_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel>(GetArenaNoVirtual());
    split_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.split)
  return split_;
}
inline void Inst::set_allocated_split(::bmnet::bm1880::Inst_bmnet_split_fixed_forward_bmkernel* split) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete split_;
  }
  if (split) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      split = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, split, submessage_arena);
    }
    set_has_split();
  } else {
    clear_has_split();
  }
  split_ = split;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.split)
}

// optional .bmnet.bm1880.Inst.bmnet_concat_fixed_forward_bmkernel concat = 17;
inline bool Inst::has_concat() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst::set_has_concat() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst::clear_has_concat() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst::clear_concat() {
  if (concat_ != NULL) concat_->Clear();
  clear_has_concat();
}
inline const ::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel& Inst::_internal_concat() const {
  return *concat_;
}
inline const ::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel& Inst::concat() const {
  const ::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel* p = concat_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.concat)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_concat_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel* Inst::release_concat() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.concat)
  clear_has_concat();
  ::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel* temp = concat_;
  concat_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel* Inst::mutable_concat() {
  set_has_concat();
  if (concat_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel>(GetArenaNoVirtual());
    concat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.concat)
  return concat_;
}
inline void Inst::set_allocated_concat(::bmnet::bm1880::Inst_bmnet_concat_fixed_forward_bmkernel* concat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete concat_;
  }
  if (concat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      concat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, concat, submessage_arena);
    }
    set_has_concat();
  } else {
    clear_has_concat();
  }
  concat_ = concat;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.concat)
}

// optional .bmnet.bm1880.Inst.bmnet_eltwise_fixed_forward_bmkernel eltwise = 18;
inline bool Inst::has_eltwise() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst::set_has_eltwise() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst::clear_has_eltwise() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst::clear_eltwise() {
  if (eltwise_ != NULL) eltwise_->Clear();
  clear_has_eltwise();
}
inline const ::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel& Inst::_internal_eltwise() const {
  return *eltwise_;
}
inline const ::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel& Inst::eltwise() const {
  const ::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel* p = eltwise_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.eltwise)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_eltwise_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel* Inst::release_eltwise() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.eltwise)
  clear_has_eltwise();
  ::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel* temp = eltwise_;
  eltwise_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel* Inst::mutable_eltwise() {
  set_has_eltwise();
  if (eltwise_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel>(GetArenaNoVirtual());
    eltwise_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.eltwise)
  return eltwise_;
}
inline void Inst::set_allocated_eltwise(::bmnet::bm1880::Inst_bmnet_eltwise_fixed_forward_bmkernel* eltwise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete eltwise_;
  }
  if (eltwise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      eltwise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eltwise, submessage_arena);
    }
    set_has_eltwise();
  } else {
    clear_has_eltwise();
  }
  eltwise_ = eltwise;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.eltwise)
}

// optional .bmnet.bm1880.Inst.bmnet_permute_fixed_forward_bmkernel permute = 19;
inline bool Inst::has_permute() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst::set_has_permute() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst::clear_has_permute() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst::clear_permute() {
  if (permute_ != NULL) permute_->Clear();
  clear_has_permute();
}
inline const ::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel& Inst::_internal_permute() const {
  return *permute_;
}
inline const ::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel& Inst::permute() const {
  const ::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel* p = permute_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.permute)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_permute_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel* Inst::release_permute() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.permute)
  clear_has_permute();
  ::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel* temp = permute_;
  permute_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel* Inst::mutable_permute() {
  set_has_permute();
  if (permute_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel>(GetArenaNoVirtual());
    permute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.permute)
  return permute_;
}
inline void Inst::set_allocated_permute(::bmnet::bm1880::Inst_bmnet_permute_fixed_forward_bmkernel* permute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete permute_;
  }
  if (permute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      permute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permute, submessage_arena);
    }
    set_has_permute();
  } else {
    clear_has_permute();
  }
  permute_ = permute;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.permute)
}

// optional .bmnet.bm1880.Inst.bmnet_priorbox_fixed_forward_bmkernel priorbox = 20;
inline bool Inst::has_priorbox() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst::set_has_priorbox() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst::clear_has_priorbox() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst::clear_priorbox() {
  if (priorbox_ != NULL) priorbox_->Clear();
  clear_has_priorbox();
}
inline const ::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel& Inst::_internal_priorbox() const {
  return *priorbox_;
}
inline const ::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel& Inst::priorbox() const {
  const ::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel* p = priorbox_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.priorbox)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_priorbox_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel* Inst::release_priorbox() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.priorbox)
  clear_has_priorbox();
  ::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel* temp = priorbox_;
  priorbox_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel* Inst::mutable_priorbox() {
  set_has_priorbox();
  if (priorbox_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel>(GetArenaNoVirtual());
    priorbox_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.priorbox)
  return priorbox_;
}
inline void Inst::set_allocated_priorbox(::bmnet::bm1880::Inst_bmnet_priorbox_fixed_forward_bmkernel* priorbox) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete priorbox_;
  }
  if (priorbox) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      priorbox = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, priorbox, submessage_arena);
    }
    set_has_priorbox();
  } else {
    clear_has_priorbox();
  }
  priorbox_ = priorbox;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.priorbox)
}

// optional .bmnet.bm1880.Inst.bmnet_lrn_fixed_forward_bmkernel lrn = 21;
inline bool Inst::has_lrn() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst::set_has_lrn() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst::clear_has_lrn() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst::clear_lrn() {
  if (lrn_ != NULL) lrn_->Clear();
  clear_has_lrn();
}
inline const ::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel& Inst::_internal_lrn() const {
  return *lrn_;
}
inline const ::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel& Inst::lrn() const {
  const ::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel* p = lrn_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.lrn)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_lrn_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel* Inst::release_lrn() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.lrn)
  clear_has_lrn();
  ::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel* temp = lrn_;
  lrn_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel* Inst::mutable_lrn() {
  set_has_lrn();
  if (lrn_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel>(GetArenaNoVirtual());
    lrn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.lrn)
  return lrn_;
}
inline void Inst::set_allocated_lrn(::bmnet::bm1880::Inst_bmnet_lrn_fixed_forward_bmkernel* lrn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lrn_;
  }
  if (lrn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lrn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lrn, submessage_arena);
    }
    set_has_lrn();
  } else {
    clear_has_lrn();
  }
  lrn_ = lrn;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.lrn)
}

// optional .bmnet.bm1880.Inst.bmnet_upsample_fixed_bmkernel upsample = 22;
inline bool Inst::has_upsample() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst::set_has_upsample() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst::clear_has_upsample() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst::clear_upsample() {
  if (upsample_ != NULL) upsample_->Clear();
  clear_has_upsample();
}
inline const ::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel& Inst::_internal_upsample() const {
  return *upsample_;
}
inline const ::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel& Inst::upsample() const {
  const ::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel* p = upsample_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.upsample)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_upsample_fixed_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel* Inst::release_upsample() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.upsample)
  clear_has_upsample();
  ::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel* temp = upsample_;
  upsample_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel* Inst::mutable_upsample() {
  set_has_upsample();
  if (upsample_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel>(GetArenaNoVirtual());
    upsample_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.upsample)
  return upsample_;
}
inline void Inst::set_allocated_upsample(::bmnet::bm1880::Inst_bmnet_upsample_fixed_bmkernel* upsample) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete upsample_;
  }
  if (upsample) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upsample = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upsample, submessage_arena);
    }
    set_has_upsample();
  } else {
    clear_has_upsample();
  }
  upsample_ = upsample;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.upsample)
}

// optional .bmnet.bm1880.Inst.bmnet_normalize_fixed_forward_bmkernel normalize = 23;
inline bool Inst::has_normalize() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Inst::set_has_normalize() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Inst::clear_has_normalize() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Inst::clear_normalize() {
  if (normalize_ != NULL) normalize_->Clear();
  clear_has_normalize();
}
inline const ::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel& Inst::_internal_normalize() const {
  return *normalize_;
}
inline const ::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel& Inst::normalize() const {
  const ::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel* p = normalize_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.normalize)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_normalize_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel* Inst::release_normalize() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.normalize)
  clear_has_normalize();
  ::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel* temp = normalize_;
  normalize_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel* Inst::mutable_normalize() {
  set_has_normalize();
  if (normalize_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel>(GetArenaNoVirtual());
    normalize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.normalize)
  return normalize_;
}
inline void Inst::set_allocated_normalize(::bmnet::bm1880::Inst_bmnet_normalize_fixed_forward_bmkernel* normalize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete normalize_;
  }
  if (normalize) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      normalize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, normalize, submessage_arena);
    }
    set_has_normalize();
  } else {
    clear_has_normalize();
  }
  normalize_ = normalize;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.normalize)
}

// optional .bmnet.bm1880.Inst.bmnet_deconv_fixed_forward_bmkernel deconv = 24;
inline bool Inst::has_deconv() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Inst::set_has_deconv() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Inst::clear_has_deconv() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Inst::clear_deconv() {
  if (deconv_ != NULL) deconv_->Clear();
  clear_has_deconv();
}
inline const ::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel& Inst::_internal_deconv() const {
  return *deconv_;
}
inline const ::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel& Inst::deconv() const {
  const ::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel* p = deconv_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.deconv)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_deconv_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel* Inst::release_deconv() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.deconv)
  clear_has_deconv();
  ::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel* temp = deconv_;
  deconv_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel* Inst::mutable_deconv() {
  set_has_deconv();
  if (deconv_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel>(GetArenaNoVirtual());
    deconv_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.deconv)
  return deconv_;
}
inline void Inst::set_allocated_deconv(::bmnet::bm1880::Inst_bmnet_deconv_fixed_forward_bmkernel* deconv) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deconv_;
  }
  if (deconv) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deconv = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deconv, submessage_arena);
    }
    set_has_deconv();
  } else {
    clear_has_deconv();
  }
  deconv_ = deconv;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.deconv)
}

// optional .bmnet.bm1880.Inst.bmnet_crop_fixed_forward_bmkernel crop = 25;
inline bool Inst::has_crop() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Inst::set_has_crop() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Inst::clear_has_crop() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Inst::clear_crop() {
  if (crop_ != NULL) crop_->Clear();
  clear_has_crop();
}
inline const ::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel& Inst::_internal_crop() const {
  return *crop_;
}
inline const ::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel& Inst::crop() const {
  const ::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel* p = crop_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.crop)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_crop_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel* Inst::release_crop() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.crop)
  clear_has_crop();
  ::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel* temp = crop_;
  crop_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel* Inst::mutable_crop() {
  set_has_crop();
  if (crop_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel>(GetArenaNoVirtual());
    crop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.crop)
  return crop_;
}
inline void Inst::set_allocated_crop(::bmnet::bm1880::Inst_bmnet_crop_fixed_forward_bmkernel* crop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete crop_;
  }
  if (crop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crop, submessage_arena);
    }
    set_has_crop();
  } else {
    clear_has_crop();
  }
  crop_ = crop;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.crop)
}

// optional .bmnet.bm1880.Inst.bmnet_arithmetic_fixed_forward_bmkernel arithmetic = 26;
inline bool Inst::has_arithmetic() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Inst::set_has_arithmetic() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Inst::clear_has_arithmetic() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Inst::clear_arithmetic() {
  if (arithmetic_ != NULL) arithmetic_->Clear();
  clear_has_arithmetic();
}
inline const ::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel& Inst::_internal_arithmetic() const {
  return *arithmetic_;
}
inline const ::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel& Inst::arithmetic() const {
  const ::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel* p = arithmetic_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.arithmetic)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_arithmetic_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel* Inst::release_arithmetic() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.arithmetic)
  clear_has_arithmetic();
  ::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel* temp = arithmetic_;
  arithmetic_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel* Inst::mutable_arithmetic() {
  set_has_arithmetic();
  if (arithmetic_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel>(GetArenaNoVirtual());
    arithmetic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.arithmetic)
  return arithmetic_;
}
inline void Inst::set_allocated_arithmetic(::bmnet::bm1880::Inst_bmnet_arithmetic_fixed_forward_bmkernel* arithmetic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete arithmetic_;
  }
  if (arithmetic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      arithmetic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, arithmetic, submessage_arena);
    }
    set_has_arithmetic();
  } else {
    clear_has_arithmetic();
  }
  arithmetic_ = arithmetic;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.arithmetic)
}

// optional .bmnet.bm1880.Inst.bmnet_joinone_fixed_forward_bmkernel join = 27;
inline bool Inst::has_join() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Inst::set_has_join() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Inst::clear_has_join() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Inst::clear_join() {
  if (join_ != NULL) join_->Clear();
  clear_has_join();
}
inline const ::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel& Inst::_internal_join() const {
  return *join_;
}
inline const ::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel& Inst::join() const {
  const ::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel* p = join_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.join)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_joinone_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel* Inst::release_join() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.join)
  clear_has_join();
  ::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel* temp = join_;
  join_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel* Inst::mutable_join() {
  set_has_join();
  if (join_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel>(GetArenaNoVirtual());
    join_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.join)
  return join_;
}
inline void Inst::set_allocated_join(::bmnet::bm1880::Inst_bmnet_joinone_fixed_forward_bmkernel* join) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete join_;
  }
  if (join) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      join = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    set_has_join();
  } else {
    clear_has_join();
  }
  join_ = join;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.join)
}

// optional .bmnet.bm1880.Inst.bmnet_quantization_fixed_forward_bmkernel quantization = 28;
inline bool Inst::has_quantization() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Inst::set_has_quantization() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Inst::clear_has_quantization() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Inst::clear_quantization() {
  if (quantization_ != NULL) quantization_->Clear();
  clear_has_quantization();
}
inline const ::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel& Inst::_internal_quantization() const {
  return *quantization_;
}
inline const ::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel& Inst::quantization() const {
  const ::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel* p = quantization_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.quantization)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_quantization_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel* Inst::release_quantization() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.quantization)
  clear_has_quantization();
  ::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel* temp = quantization_;
  quantization_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel* Inst::mutable_quantization() {
  set_has_quantization();
  if (quantization_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel>(GetArenaNoVirtual());
    quantization_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.quantization)
  return quantization_;
}
inline void Inst::set_allocated_quantization(::bmnet::bm1880::Inst_bmnet_quantization_fixed_forward_bmkernel* quantization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete quantization_;
  }
  if (quantization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quantization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quantization, submessage_arena);
    }
    set_has_quantization();
  } else {
    clear_has_quantization();
  }
  quantization_ = quantization;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.quantization)
}

// optional .bmnet.bm1880.Inst.bmnet_slice_fixed_forward_bmkernel slice = 29;
inline bool Inst::has_slice() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Inst::set_has_slice() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Inst::clear_has_slice() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Inst::clear_slice() {
  if (slice_ != NULL) slice_->Clear();
  clear_has_slice();
}
inline const ::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel& Inst::_internal_slice() const {
  return *slice_;
}
inline const ::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel& Inst::slice() const {
  const ::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel* p = slice_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.slice)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_slice_fixed_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel* Inst::release_slice() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.slice)
  clear_has_slice();
  ::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel* temp = slice_;
  slice_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel* Inst::mutable_slice() {
  set_has_slice();
  if (slice_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel>(GetArenaNoVirtual());
    slice_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.slice)
  return slice_;
}
inline void Inst::set_allocated_slice(::bmnet::bm1880::Inst_bmnet_slice_fixed_forward_bmkernel* slice) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete slice_;
  }
  if (slice) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      slice = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, slice, submessage_arena);
    }
    set_has_slice();
  } else {
    clear_has_slice();
  }
  slice_ = slice;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.slice)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_conv_forward_bmkernel bm_tl_conv = 30;
inline bool Inst::has_bm_tl_conv() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Inst::set_has_bm_tl_conv() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Inst::clear_has_bm_tl_conv() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Inst::clear_bm_tl_conv() {
  if (bm_tl_conv_ != NULL) bm_tl_conv_->Clear();
  clear_has_bm_tl_conv();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel& Inst::_internal_bm_tl_conv() const {
  return *bm_tl_conv_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel& Inst::bm_tl_conv() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel* p = bm_tl_conv_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bm_tl_conv)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_conv_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel* Inst::release_bm_tl_conv() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.bm_tl_conv)
  clear_has_bm_tl_conv();
  ::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel* temp = bm_tl_conv_;
  bm_tl_conv_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel* Inst::mutable_bm_tl_conv() {
  set_has_bm_tl_conv();
  if (bm_tl_conv_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel>(GetArenaNoVirtual());
    bm_tl_conv_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.bm_tl_conv)
  return bm_tl_conv_;
}
inline void Inst::set_allocated_bm_tl_conv(::bmnet::bm1880::Inst_bmnet_tl_conv_forward_bmkernel* bm_tl_conv) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bm_tl_conv_;
  }
  if (bm_tl_conv) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bm_tl_conv = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bm_tl_conv, submessage_arena);
    }
    set_has_bm_tl_conv();
  } else {
    clear_has_bm_tl_conv();
  }
  bm_tl_conv_ = bm_tl_conv;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.bm_tl_conv)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_activation_forward_bmkernel tl_activation = 31;
inline bool Inst::has_tl_activation() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Inst::set_has_tl_activation() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Inst::clear_has_tl_activation() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Inst::clear_tl_activation() {
  if (tl_activation_ != NULL) tl_activation_->Clear();
  clear_has_tl_activation();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel& Inst::_internal_tl_activation() const {
  return *tl_activation_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel& Inst::tl_activation() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel* p = tl_activation_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_activation)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_activation_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel* Inst::release_tl_activation() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_activation)
  clear_has_tl_activation();
  ::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel* temp = tl_activation_;
  tl_activation_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel* Inst::mutable_tl_activation() {
  set_has_tl_activation();
  if (tl_activation_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel>(GetArenaNoVirtual());
    tl_activation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_activation)
  return tl_activation_;
}
inline void Inst::set_allocated_tl_activation(::bmnet::bm1880::Inst_bmnet_tl_activation_forward_bmkernel* tl_activation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_activation_;
  }
  if (tl_activation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_activation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_activation, submessage_arena);
    }
    set_has_tl_activation();
  } else {
    clear_has_tl_activation();
  }
  tl_activation_ = tl_activation;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_activation)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_scale_forward_bmkernel tl_csale = 32;
inline bool Inst::has_tl_csale() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Inst::set_has_tl_csale() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Inst::clear_has_tl_csale() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Inst::clear_tl_csale() {
  if (tl_csale_ != NULL) tl_csale_->Clear();
  clear_has_tl_csale();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel& Inst::_internal_tl_csale() const {
  return *tl_csale_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel& Inst::tl_csale() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel* p = tl_csale_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_csale)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_scale_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel* Inst::release_tl_csale() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_csale)
  clear_has_tl_csale();
  ::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel* temp = tl_csale_;
  tl_csale_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel* Inst::mutable_tl_csale() {
  set_has_tl_csale();
  if (tl_csale_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel>(GetArenaNoVirtual());
    tl_csale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_csale)
  return tl_csale_;
}
inline void Inst::set_allocated_tl_csale(::bmnet::bm1880::Inst_bmnet_tl_scale_forward_bmkernel* tl_csale) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_csale_;
  }
  if (tl_csale) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_csale = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_csale, submessage_arena);
    }
    set_has_tl_csale();
  } else {
    clear_has_tl_csale();
  }
  tl_csale_ = tl_csale;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_csale)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_batchnorm_forward_bmkernel tl_bn = 33;
inline bool Inst::has_tl_bn() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Inst::set_has_tl_bn() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Inst::clear_has_tl_bn() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Inst::clear_tl_bn() {
  if (tl_bn_ != NULL) tl_bn_->Clear();
  clear_has_tl_bn();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel& Inst::_internal_tl_bn() const {
  return *tl_bn_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel& Inst::tl_bn() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel* p = tl_bn_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_bn)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_batchnorm_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel* Inst::release_tl_bn() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_bn)
  clear_has_tl_bn();
  ::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel* temp = tl_bn_;
  tl_bn_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel* Inst::mutable_tl_bn() {
  set_has_tl_bn();
  if (tl_bn_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel>(GetArenaNoVirtual());
    tl_bn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_bn)
  return tl_bn_;
}
inline void Inst::set_allocated_tl_bn(::bmnet::bm1880::Inst_bmnet_tl_batchnorm_forward_bmkernel* tl_bn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_bn_;
  }
  if (tl_bn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_bn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_bn, submessage_arena);
    }
    set_has_tl_bn();
  } else {
    clear_has_tl_bn();
  }
  tl_bn_ = tl_bn;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_bn)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_eltwise_forward_bmkernel tl_eltwise = 34;
inline bool Inst::has_tl_eltwise() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Inst::set_has_tl_eltwise() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Inst::clear_has_tl_eltwise() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Inst::clear_tl_eltwise() {
  if (tl_eltwise_ != NULL) tl_eltwise_->Clear();
  clear_has_tl_eltwise();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel& Inst::_internal_tl_eltwise() const {
  return *tl_eltwise_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel& Inst::tl_eltwise() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel* p = tl_eltwise_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_eltwise)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_eltwise_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel* Inst::release_tl_eltwise() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_eltwise)
  clear_has_tl_eltwise();
  ::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel* temp = tl_eltwise_;
  tl_eltwise_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel* Inst::mutable_tl_eltwise() {
  set_has_tl_eltwise();
  if (tl_eltwise_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel>(GetArenaNoVirtual());
    tl_eltwise_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_eltwise)
  return tl_eltwise_;
}
inline void Inst::set_allocated_tl_eltwise(::bmnet::bm1880::Inst_bmnet_tl_eltwise_forward_bmkernel* tl_eltwise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_eltwise_;
  }
  if (tl_eltwise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_eltwise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_eltwise, submessage_arena);
    }
    set_has_tl_eltwise();
  } else {
    clear_has_tl_eltwise();
  }
  tl_eltwise_ = tl_eltwise;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_eltwise)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_lrn_forward_bmkernel tl_lrn = 35;
inline bool Inst::has_tl_lrn() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Inst::set_has_tl_lrn() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Inst::clear_has_tl_lrn() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Inst::clear_tl_lrn() {
  if (tl_lrn_ != NULL) tl_lrn_->Clear();
  clear_has_tl_lrn();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel& Inst::_internal_tl_lrn() const {
  return *tl_lrn_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel& Inst::tl_lrn() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel* p = tl_lrn_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_lrn)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_lrn_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel* Inst::release_tl_lrn() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_lrn)
  clear_has_tl_lrn();
  ::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel* temp = tl_lrn_;
  tl_lrn_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel* Inst::mutable_tl_lrn() {
  set_has_tl_lrn();
  if (tl_lrn_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel>(GetArenaNoVirtual());
    tl_lrn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_lrn)
  return tl_lrn_;
}
inline void Inst::set_allocated_tl_lrn(::bmnet::bm1880::Inst_bmnet_tl_lrn_forward_bmkernel* tl_lrn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_lrn_;
  }
  if (tl_lrn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_lrn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_lrn, submessage_arena);
    }
    set_has_tl_lrn();
  } else {
    clear_has_tl_lrn();
  }
  tl_lrn_ = tl_lrn;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_lrn)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_pooling_forward_bmkernel tl_pool = 36;
inline bool Inst::has_tl_pool() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Inst::set_has_tl_pool() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Inst::clear_has_tl_pool() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Inst::clear_tl_pool() {
  if (tl_pool_ != NULL) tl_pool_->Clear();
  clear_has_tl_pool();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel& Inst::_internal_tl_pool() const {
  return *tl_pool_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel& Inst::tl_pool() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel* p = tl_pool_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_pool)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_pooling_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel* Inst::release_tl_pool() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_pool)
  clear_has_tl_pool();
  ::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel* temp = tl_pool_;
  tl_pool_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel* Inst::mutable_tl_pool() {
  set_has_tl_pool();
  if (tl_pool_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel>(GetArenaNoVirtual());
    tl_pool_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_pool)
  return tl_pool_;
}
inline void Inst::set_allocated_tl_pool(::bmnet::bm1880::Inst_bmnet_tl_pooling_forward_bmkernel* tl_pool) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_pool_;
  }
  if (tl_pool) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_pool = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_pool, submessage_arena);
    }
    set_has_tl_pool();
  } else {
    clear_has_tl_pool();
  }
  tl_pool_ = tl_pool;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_pool)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_upsample_forward_bmkernel tl_upsample = 37;
inline bool Inst::has_tl_upsample() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Inst::set_has_tl_upsample() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Inst::clear_has_tl_upsample() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Inst::clear_tl_upsample() {
  if (tl_upsample_ != NULL) tl_upsample_->Clear();
  clear_has_tl_upsample();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel& Inst::_internal_tl_upsample() const {
  return *tl_upsample_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel& Inst::tl_upsample() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel* p = tl_upsample_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_upsample)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_upsample_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel* Inst::release_tl_upsample() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_upsample)
  clear_has_tl_upsample();
  ::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel* temp = tl_upsample_;
  tl_upsample_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel* Inst::mutable_tl_upsample() {
  set_has_tl_upsample();
  if (tl_upsample_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel>(GetArenaNoVirtual());
    tl_upsample_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_upsample)
  return tl_upsample_;
}
inline void Inst::set_allocated_tl_upsample(::bmnet::bm1880::Inst_bmnet_tl_upsample_forward_bmkernel* tl_upsample) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_upsample_;
  }
  if (tl_upsample) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_upsample = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_upsample, submessage_arena);
    }
    set_has_tl_upsample();
  } else {
    clear_has_tl_upsample();
  }
  tl_upsample_ = tl_upsample;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_upsample)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_load_stride_bmkernel tl_layer_load_stride = 38;
inline bool Inst::has_tl_layer_load_stride() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Inst::set_has_tl_layer_load_stride() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Inst::clear_has_tl_layer_load_stride() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Inst::clear_tl_layer_load_stride() {
  if (tl_layer_load_stride_ != NULL) tl_layer_load_stride_->Clear();
  clear_has_tl_layer_load_stride();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel& Inst::_internal_tl_layer_load_stride() const {
  return *tl_layer_load_stride_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel& Inst::tl_layer_load_stride() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel* p = tl_layer_load_stride_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_layer_load_stride)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_load_stride_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel* Inst::release_tl_layer_load_stride() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_layer_load_stride)
  clear_has_tl_layer_load_stride();
  ::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel* temp = tl_layer_load_stride_;
  tl_layer_load_stride_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel* Inst::mutable_tl_layer_load_stride() {
  set_has_tl_layer_load_stride();
  if (tl_layer_load_stride_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel>(GetArenaNoVirtual());
    tl_layer_load_stride_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_layer_load_stride)
  return tl_layer_load_stride_;
}
inline void Inst::set_allocated_tl_layer_load_stride(::bmnet::bm1880::Inst_bmnet_tl_load_stride_bmkernel* tl_layer_load_stride) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_layer_load_stride_;
  }
  if (tl_layer_load_stride) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_layer_load_stride = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_layer_load_stride, submessage_arena);
    }
    set_has_tl_layer_load_stride();
  } else {
    clear_has_tl_layer_load_stride();
  }
  tl_layer_load_stride_ = tl_layer_load_stride;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_layer_load_stride)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_load_bmkernel tl_layer_load = 39;
inline bool Inst::has_tl_layer_load() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Inst::set_has_tl_layer_load() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Inst::clear_has_tl_layer_load() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Inst::clear_tl_layer_load() {
  if (tl_layer_load_ != NULL) tl_layer_load_->Clear();
  clear_has_tl_layer_load();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel& Inst::_internal_tl_layer_load() const {
  return *tl_layer_load_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel& Inst::tl_layer_load() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel* p = tl_layer_load_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_layer_load)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_load_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel* Inst::release_tl_layer_load() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_layer_load)
  clear_has_tl_layer_load();
  ::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel* temp = tl_layer_load_;
  tl_layer_load_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel* Inst::mutable_tl_layer_load() {
  set_has_tl_layer_load();
  if (tl_layer_load_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel>(GetArenaNoVirtual());
    tl_layer_load_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_layer_load)
  return tl_layer_load_;
}
inline void Inst::set_allocated_tl_layer_load(::bmnet::bm1880::Inst_bmnet_tl_load_bmkernel* tl_layer_load) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_layer_load_;
  }
  if (tl_layer_load) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_layer_load = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_layer_load, submessage_arena);
    }
    set_has_tl_layer_load();
  } else {
    clear_has_tl_layer_load();
  }
  tl_layer_load_ = tl_layer_load;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_layer_load)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_store_stride_bmkernel tl_layer_store_stride = 40;
inline bool Inst::has_tl_layer_store_stride() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Inst::set_has_tl_layer_store_stride() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Inst::clear_has_tl_layer_store_stride() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Inst::clear_tl_layer_store_stride() {
  if (tl_layer_store_stride_ != NULL) tl_layer_store_stride_->Clear();
  clear_has_tl_layer_store_stride();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel& Inst::_internal_tl_layer_store_stride() const {
  return *tl_layer_store_stride_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel& Inst::tl_layer_store_stride() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel* p = tl_layer_store_stride_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_layer_store_stride)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_store_stride_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel* Inst::release_tl_layer_store_stride() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_layer_store_stride)
  clear_has_tl_layer_store_stride();
  ::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel* temp = tl_layer_store_stride_;
  tl_layer_store_stride_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel* Inst::mutable_tl_layer_store_stride() {
  set_has_tl_layer_store_stride();
  if (tl_layer_store_stride_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel>(GetArenaNoVirtual());
    tl_layer_store_stride_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_layer_store_stride)
  return tl_layer_store_stride_;
}
inline void Inst::set_allocated_tl_layer_store_stride(::bmnet::bm1880::Inst_bmnet_tl_store_stride_bmkernel* tl_layer_store_stride) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_layer_store_stride_;
  }
  if (tl_layer_store_stride) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_layer_store_stride = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_layer_store_stride, submessage_arena);
    }
    set_has_tl_layer_store_stride();
  } else {
    clear_has_tl_layer_store_stride();
  }
  tl_layer_store_stride_ = tl_layer_store_stride;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_layer_store_stride)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_store_bmkernel tl_layer_store = 41;
inline bool Inst::has_tl_layer_store() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Inst::set_has_tl_layer_store() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Inst::clear_has_tl_layer_store() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Inst::clear_tl_layer_store() {
  if (tl_layer_store_ != NULL) tl_layer_store_->Clear();
  clear_has_tl_layer_store();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel& Inst::_internal_tl_layer_store() const {
  return *tl_layer_store_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel& Inst::tl_layer_store() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel* p = tl_layer_store_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_layer_store)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_store_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel* Inst::release_tl_layer_store() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_layer_store)
  clear_has_tl_layer_store();
  ::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel* temp = tl_layer_store_;
  tl_layer_store_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel* Inst::mutable_tl_layer_store() {
  set_has_tl_layer_store();
  if (tl_layer_store_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel>(GetArenaNoVirtual());
    tl_layer_store_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_layer_store)
  return tl_layer_store_;
}
inline void Inst::set_allocated_tl_layer_store(::bmnet::bm1880::Inst_bmnet_tl_store_bmkernel* tl_layer_store) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_layer_store_;
  }
  if (tl_layer_store) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_layer_store = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_layer_store, submessage_arena);
    }
    set_has_tl_layer_store();
  } else {
    clear_has_tl_layer_store();
  }
  tl_layer_store_ = tl_layer_store;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_layer_store)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_relu_forward_bmkernel tl_relu = 42;
inline bool Inst::has_tl_relu() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Inst::set_has_tl_relu() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Inst::clear_has_tl_relu() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Inst::clear_tl_relu() {
  if (tl_relu_ != NULL) tl_relu_->Clear();
  clear_has_tl_relu();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel& Inst::_internal_tl_relu() const {
  return *tl_relu_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel& Inst::tl_relu() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel* p = tl_relu_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_relu)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_relu_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel* Inst::release_tl_relu() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_relu)
  clear_has_tl_relu();
  ::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel* temp = tl_relu_;
  tl_relu_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel* Inst::mutable_tl_relu() {
  set_has_tl_relu();
  if (tl_relu_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel>(GetArenaNoVirtual());
    tl_relu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_relu)
  return tl_relu_;
}
inline void Inst::set_allocated_tl_relu(::bmnet::bm1880::Inst_bmnet_tl_relu_forward_bmkernel* tl_relu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_relu_;
  }
  if (tl_relu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_relu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_relu, submessage_arena);
    }
    set_has_tl_relu();
  } else {
    clear_has_tl_relu();
  }
  tl_relu_ = tl_relu;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_relu)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_fc_forward_bmkernel tl_fc = 43;
inline bool Inst::has_tl_fc() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Inst::set_has_tl_fc() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Inst::clear_has_tl_fc() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Inst::clear_tl_fc() {
  if (tl_fc_ != NULL) tl_fc_->Clear();
  clear_has_tl_fc();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel& Inst::_internal_tl_fc() const {
  return *tl_fc_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel& Inst::tl_fc() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel* p = tl_fc_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_fc)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_fc_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel* Inst::release_tl_fc() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_fc)
  clear_has_tl_fc();
  ::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel* temp = tl_fc_;
  tl_fc_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel* Inst::mutable_tl_fc() {
  set_has_tl_fc();
  if (tl_fc_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel>(GetArenaNoVirtual());
    tl_fc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_fc)
  return tl_fc_;
}
inline void Inst::set_allocated_tl_fc(::bmnet::bm1880::Inst_bmnet_tl_fc_forward_bmkernel* tl_fc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_fc_;
  }
  if (tl_fc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_fc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_fc, submessage_arena);
    }
    set_has_tl_fc();
  } else {
    clear_has_tl_fc();
  }
  tl_fc_ = tl_fc;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_fc)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_deconv_forward_bmkernel bm_tl_deconv = 44;
inline bool Inst::has_bm_tl_deconv() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Inst::set_has_bm_tl_deconv() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Inst::clear_has_bm_tl_deconv() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Inst::clear_bm_tl_deconv() {
  if (bm_tl_deconv_ != NULL) bm_tl_deconv_->Clear();
  clear_has_bm_tl_deconv();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel& Inst::_internal_bm_tl_deconv() const {
  return *bm_tl_deconv_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel& Inst::bm_tl_deconv() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel* p = bm_tl_deconv_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.bm_tl_deconv)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_deconv_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel* Inst::release_bm_tl_deconv() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.bm_tl_deconv)
  clear_has_bm_tl_deconv();
  ::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel* temp = bm_tl_deconv_;
  bm_tl_deconv_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel* Inst::mutable_bm_tl_deconv() {
  set_has_bm_tl_deconv();
  if (bm_tl_deconv_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel>(GetArenaNoVirtual());
    bm_tl_deconv_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.bm_tl_deconv)
  return bm_tl_deconv_;
}
inline void Inst::set_allocated_bm_tl_deconv(::bmnet::bm1880::Inst_bmnet_tl_deconv_forward_bmkernel* bm_tl_deconv) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bm_tl_deconv_;
  }
  if (bm_tl_deconv) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bm_tl_deconv = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bm_tl_deconv, submessage_arena);
    }
    set_has_bm_tl_deconv();
  } else {
    clear_has_bm_tl_deconv();
  }
  bm_tl_deconv_ = bm_tl_deconv;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.bm_tl_deconv)
}

// optional .bmnet.bm1880.Inst.bmnet_tl_quantization_forward_bmkernel tl_quantization = 45;
inline bool Inst::has_tl_quantization() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Inst::set_has_tl_quantization() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Inst::clear_has_tl_quantization() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Inst::clear_tl_quantization() {
  if (tl_quantization_ != NULL) tl_quantization_->Clear();
  clear_has_tl_quantization();
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel& Inst::_internal_tl_quantization() const {
  return *tl_quantization_;
}
inline const ::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel& Inst::tl_quantization() const {
  const ::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel* p = tl_quantization_;
  // @@protoc_insertion_point(field_get:bmnet.bm1880.Inst.tl_quantization)
  return p != NULL ? *p : *reinterpret_cast<const ::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel*>(
      &::bmnet::bm1880::_Inst_bmnet_tl_quantization_forward_bmkernel_default_instance_);
}
inline ::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel* Inst::release_tl_quantization() {
  // @@protoc_insertion_point(field_release:bmnet.bm1880.Inst.tl_quantization)
  clear_has_tl_quantization();
  ::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel* temp = tl_quantization_;
  tl_quantization_ = NULL;
  return temp;
}
inline ::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel* Inst::mutable_tl_quantization() {
  set_has_tl_quantization();
  if (tl_quantization_ == NULL) {
    auto* p = CreateMaybeMessage<::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel>(GetArenaNoVirtual());
    tl_quantization_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1880.Inst.tl_quantization)
  return tl_quantization_;
}
inline void Inst::set_allocated_tl_quantization(::bmnet::bm1880::Inst_bmnet_tl_quantization_forward_bmkernel* tl_quantization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tl_quantization_;
  }
  if (tl_quantization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tl_quantization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tl_quantization, submessage_arena);
    }
    set_has_tl_quantization();
  } else {
    clear_has_tl_quantization();
  }
  tl_quantization_ = tl_quantization;
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1880.Inst.tl_quantization)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bm1880
}  // namespace bmnet

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bmnet::bm1880::Inst_ActivationMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::bm1880::Inst_ActivationMethod>() {
  return ::bmnet::bm1880::Inst_ActivationMethod_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_bm188x_5fasm_2eproto
