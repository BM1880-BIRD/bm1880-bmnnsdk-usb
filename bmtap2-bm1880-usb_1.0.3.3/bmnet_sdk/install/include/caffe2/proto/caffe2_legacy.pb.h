// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2/proto/caffe2_legacy.proto

#ifndef PROTOBUF_caffe2_2fproto_2fcaffe2_5flegacy_2eproto__INCLUDED
#define PROTOBUF_caffe2_2fproto_2fcaffe2_5flegacy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

// Internal implementation detail -- do not call these.
void CAFFE2_API protobuf_AddDesc_caffe2_2fproto_2fcaffe2_5flegacy_2eproto();
void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_5flegacy_2eproto();
void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_5flegacy_2eproto();

class CaffeDatum;

enum LegacyPadding {
  NOTSET = 0,
  VALID = 1,
  SAME = 2,
  CAFFE_LEGACY_POOLING = 3
};
CAFFE2_API bool LegacyPadding_IsValid(int value);
const LegacyPadding LegacyPadding_MIN = NOTSET;
const LegacyPadding LegacyPadding_MAX = CAFFE_LEGACY_POOLING;
const int LegacyPadding_ARRAYSIZE = LegacyPadding_MAX + 1;

CAFFE2_API const ::google::protobuf::EnumDescriptor* LegacyPadding_descriptor();
inline const ::std::string& LegacyPadding_Name(LegacyPadding value) {
  return ::google::protobuf::internal::NameOfEnum(
    LegacyPadding_descriptor(), value);
}
inline bool LegacyPadding_Parse(
    const ::std::string& name, LegacyPadding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LegacyPadding>(
    LegacyPadding_descriptor(), name, value);
}
// ===================================================================

class CAFFE2_API CaffeDatum : public ::google::protobuf::Message {
 public:
  CaffeDatum();
  virtual ~CaffeDatum();

  CaffeDatum(const CaffeDatum& from);

  inline CaffeDatum& operator=(const CaffeDatum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaffeDatum& default_instance();

  void Swap(CaffeDatum* other);

  // implements Message ----------------------------------------------

  CaffeDatum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaffeDatum& from);
  void MergeFrom(const CaffeDatum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channels = 1;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 1;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int32 label = 5;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 5;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // repeated float float_data = 6;
  inline int float_data_size() const;
  inline void clear_float_data();
  static const int kFloatDataFieldNumber = 6;
  inline float float_data(int index) const;
  inline void set_float_data(int index, float value);
  inline void add_float_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bool encoded = 7 [default = false];
  inline bool has_encoded() const;
  inline void clear_encoded();
  static const int kEncodedFieldNumber = 7;
  inline bool encoded() const;
  inline void set_encoded(bool value);

  // @@protoc_insertion_point(class_scope:caffe2.CaffeDatum)
 private:
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_encoded();
  inline void clear_has_encoded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::std::string* data_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 label_;
  ::google::protobuf::RepeatedField< float > float_data_;
  bool encoded_;
  friend void CAFFE2_API protobuf_AddDesc_caffe2_2fproto_2fcaffe2_5flegacy_2eproto();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_5flegacy_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_5flegacy_2eproto();

  void InitAsDefaultInstance();
  static CaffeDatum* default_instance_;
};
// ===================================================================


// ===================================================================

// CaffeDatum

// optional int32 channels = 1;
inline bool CaffeDatum::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaffeDatum::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaffeDatum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaffeDatum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 CaffeDatum::channels() const {
  // @@protoc_insertion_point(field_get:caffe2.CaffeDatum.channels)
  return channels_;
}
inline void CaffeDatum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe2.CaffeDatum.channels)
}

// optional int32 height = 2;
inline bool CaffeDatum::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaffeDatum::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaffeDatum::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaffeDatum::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 CaffeDatum::height() const {
  // @@protoc_insertion_point(field_get:caffe2.CaffeDatum.height)
  return height_;
}
inline void CaffeDatum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe2.CaffeDatum.height)
}

// optional int32 width = 3;
inline bool CaffeDatum::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CaffeDatum::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CaffeDatum::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CaffeDatum::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 CaffeDatum::width() const {
  // @@protoc_insertion_point(field_get:caffe2.CaffeDatum.width)
  return width_;
}
inline void CaffeDatum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe2.CaffeDatum.width)
}

// optional bytes data = 4;
inline bool CaffeDatum::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CaffeDatum::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CaffeDatum::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CaffeDatum::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CaffeDatum::data() const {
  // @@protoc_insertion_point(field_get:caffe2.CaffeDatum.data)
  return *data_;
}
inline void CaffeDatum::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.CaffeDatum.data)
}
inline void CaffeDatum::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.CaffeDatum.data)
}
inline void CaffeDatum::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.CaffeDatum.data)
}
inline ::std::string* CaffeDatum::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.CaffeDatum.data)
  return data_;
}
inline ::std::string* CaffeDatum::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CaffeDatum::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.CaffeDatum.data)
}

// optional int32 label = 5;
inline bool CaffeDatum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CaffeDatum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CaffeDatum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CaffeDatum::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 CaffeDatum::label() const {
  // @@protoc_insertion_point(field_get:caffe2.CaffeDatum.label)
  return label_;
}
inline void CaffeDatum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe2.CaffeDatum.label)
}

// repeated float float_data = 6;
inline int CaffeDatum::float_data_size() const {
  return float_data_.size();
}
inline void CaffeDatum::clear_float_data() {
  float_data_.Clear();
}
inline float CaffeDatum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.CaffeDatum.float_data)
  return float_data_.Get(index);
}
inline void CaffeDatum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.CaffeDatum.float_data)
}
inline void CaffeDatum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.CaffeDatum.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
CaffeDatum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe2.CaffeDatum.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
CaffeDatum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.CaffeDatum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
inline bool CaffeDatum::has_encoded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CaffeDatum::set_has_encoded() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CaffeDatum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CaffeDatum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
inline bool CaffeDatum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe2.CaffeDatum.encoded)
  return encoded_;
}
inline void CaffeDatum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe2.CaffeDatum.encoded)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe2::LegacyPadding> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe2::LegacyPadding>() {
  return ::caffe2::LegacyPadding_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe2_2fproto_2fcaffe2_5flegacy_2eproto__INCLUDED
