// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2/proto/predictor_consts.proto

#ifndef PROTOBUF_caffe2_2fproto_2fpredictor_5fconsts_2eproto__INCLUDED
#define PROTOBUF_caffe2_2fproto_2fpredictor_5fconsts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

// Internal implementation detail -- do not call these.
void CAFFE2_API protobuf_AddDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto();
void protobuf_AssignDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto();
void protobuf_ShutdownFile_caffe2_2fproto_2fpredictor_5fconsts_2eproto();

class PredictorConsts;

// ===================================================================

class CAFFE2_API PredictorConsts : public ::google::protobuf::Message {
 public:
  PredictorConsts();
  virtual ~PredictorConsts();

  PredictorConsts(const PredictorConsts& from);

  inline PredictorConsts& operator=(const PredictorConsts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictorConsts& default_instance();

  void Swap(PredictorConsts* other);

  // implements Message ----------------------------------------------

  PredictorConsts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PredictorConsts& from);
  void MergeFrom(const PredictorConsts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
  inline bool has_meta_net_def() const;
  inline void clear_meta_net_def();
  static const int kMETANETDEFFieldNumber = 1;
  inline const ::std::string& meta_net_def() const;
  inline void set_meta_net_def(const ::std::string& value);
  inline void set_meta_net_def(const char* value);
  inline void set_meta_net_def(const char* value, size_t size);
  inline ::std::string* mutable_meta_net_def();
  inline ::std::string* release_meta_net_def();
  inline void set_allocated_meta_net_def(::std::string* meta_net_def);

  // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
  inline bool has_predictor_dbreader() const;
  inline void clear_predictor_dbreader();
  static const int kPREDICTORDBREADERFieldNumber = 2;
  inline const ::std::string& predictor_dbreader() const;
  inline void set_predictor_dbreader(const ::std::string& value);
  inline void set_predictor_dbreader(const char* value);
  inline void set_predictor_dbreader(const char* value, size_t size);
  inline ::std::string* mutable_predictor_dbreader();
  inline ::std::string* release_predictor_dbreader();
  inline void set_allocated_predictor_dbreader(::std::string* predictor_dbreader);

  // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
  inline bool has_parameters_blob_type() const;
  inline void clear_parameters_blob_type();
  static const int kPARAMETERSBLOBTYPEFieldNumber = 3;
  inline const ::std::string& parameters_blob_type() const;
  inline void set_parameters_blob_type(const ::std::string& value);
  inline void set_parameters_blob_type(const char* value);
  inline void set_parameters_blob_type(const char* value, size_t size);
  inline ::std::string* mutable_parameters_blob_type();
  inline ::std::string* release_parameters_blob_type();
  inline void set_allocated_parameters_blob_type(::std::string* parameters_blob_type);

  // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
  inline bool has_inputs_blob_type() const;
  inline void clear_inputs_blob_type();
  static const int kINPUTSBLOBTYPEFieldNumber = 4;
  inline const ::std::string& inputs_blob_type() const;
  inline void set_inputs_blob_type(const ::std::string& value);
  inline void set_inputs_blob_type(const char* value);
  inline void set_inputs_blob_type(const char* value, size_t size);
  inline ::std::string* mutable_inputs_blob_type();
  inline ::std::string* release_inputs_blob_type();
  inline void set_allocated_inputs_blob_type(::std::string* inputs_blob_type);

  // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
  inline bool has_outputs_blob_type() const;
  inline void clear_outputs_blob_type();
  static const int kOUTPUTSBLOBTYPEFieldNumber = 5;
  inline const ::std::string& outputs_blob_type() const;
  inline void set_outputs_blob_type(const ::std::string& value);
  inline void set_outputs_blob_type(const char* value);
  inline void set_outputs_blob_type(const char* value, size_t size);
  inline ::std::string* mutable_outputs_blob_type();
  inline ::std::string* release_outputs_blob_type();
  inline void set_allocated_outputs_blob_type(::std::string* outputs_blob_type);

  // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
  inline bool has_global_init_net_type() const;
  inline void clear_global_init_net_type();
  static const int kGLOBALINITNETTYPEFieldNumber = 6;
  inline const ::std::string& global_init_net_type() const;
  inline void set_global_init_net_type(const ::std::string& value);
  inline void set_global_init_net_type(const char* value);
  inline void set_global_init_net_type(const char* value, size_t size);
  inline ::std::string* mutable_global_init_net_type();
  inline ::std::string* release_global_init_net_type();
  inline void set_allocated_global_init_net_type(::std::string* global_init_net_type);

  // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
  inline bool has_predict_init_net_type() const;
  inline void clear_predict_init_net_type();
  static const int kPREDICTINITNETTYPEFieldNumber = 7;
  inline const ::std::string& predict_init_net_type() const;
  inline void set_predict_init_net_type(const ::std::string& value);
  inline void set_predict_init_net_type(const char* value);
  inline void set_predict_init_net_type(const char* value, size_t size);
  inline ::std::string* mutable_predict_init_net_type();
  inline ::std::string* release_predict_init_net_type();
  inline void set_allocated_predict_init_net_type(::std::string* predict_init_net_type);

  // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
  inline bool has_predict_net_type() const;
  inline void clear_predict_net_type();
  static const int kPREDICTNETTYPEFieldNumber = 8;
  inline const ::std::string& predict_net_type() const;
  inline void set_predict_net_type(const ::std::string& value);
  inline void set_predict_net_type(const char* value);
  inline void set_predict_net_type(const char* value, size_t size);
  inline ::std::string* mutable_predict_net_type();
  inline ::std::string* release_predict_net_type();
  inline void set_allocated_predict_net_type(::std::string* predict_net_type);

  // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
  inline bool has_single_predictor() const;
  inline void clear_single_predictor();
  static const int kSINGLEPREDICTORFieldNumber = 9;
  inline const ::std::string& single_predictor() const;
  inline void set_single_predictor(const ::std::string& value);
  inline void set_single_predictor(const char* value);
  inline void set_single_predictor(const char* value, size_t size);
  inline ::std::string* mutable_single_predictor();
  inline ::std::string* release_single_predictor();
  inline void set_allocated_single_predictor(::std::string* single_predictor);

  // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
  inline bool has_multi_predictor() const;
  inline void clear_multi_predictor();
  static const int kMULTIPREDICTORFieldNumber = 10;
  inline const ::std::string& multi_predictor() const;
  inline void set_multi_predictor(const ::std::string& value);
  inline void set_multi_predictor(const char* value);
  inline void set_multi_predictor(const char* value, size_t size);
  inline ::std::string* mutable_multi_predictor();
  inline ::std::string* release_multi_predictor();
  inline void set_allocated_multi_predictor(::std::string* multi_predictor);

  // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
  inline bool has_train_init_plan_type() const;
  inline void clear_train_init_plan_type();
  static const int kTRAININITPLANTYPEFieldNumber = 11;
  inline const ::std::string& train_init_plan_type() const;
  inline void set_train_init_plan_type(const ::std::string& value);
  inline void set_train_init_plan_type(const char* value);
  inline void set_train_init_plan_type(const char* value, size_t size);
  inline ::std::string* mutable_train_init_plan_type();
  inline ::std::string* release_train_init_plan_type();
  inline void set_allocated_train_init_plan_type(::std::string* train_init_plan_type);

  // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
  inline bool has_train_plan_type() const;
  inline void clear_train_plan_type();
  static const int kTRAINPLANTYPEFieldNumber = 12;
  inline const ::std::string& train_plan_type() const;
  inline void set_train_plan_type(const ::std::string& value);
  inline void set_train_plan_type(const char* value);
  inline void set_train_plan_type(const char* value, size_t size);
  inline ::std::string* mutable_train_plan_type();
  inline ::std::string* release_train_plan_type();
  inline void set_allocated_train_plan_type(::std::string* train_plan_type);

  // @@protoc_insertion_point(class_scope:caffe2.PredictorConsts)
 private:
  inline void set_has_meta_net_def();
  inline void clear_has_meta_net_def();
  inline void set_has_predictor_dbreader();
  inline void clear_has_predictor_dbreader();
  inline void set_has_parameters_blob_type();
  inline void clear_has_parameters_blob_type();
  inline void set_has_inputs_blob_type();
  inline void clear_has_inputs_blob_type();
  inline void set_has_outputs_blob_type();
  inline void clear_has_outputs_blob_type();
  inline void set_has_global_init_net_type();
  inline void clear_has_global_init_net_type();
  inline void set_has_predict_init_net_type();
  inline void clear_has_predict_init_net_type();
  inline void set_has_predict_net_type();
  inline void clear_has_predict_net_type();
  inline void set_has_single_predictor();
  inline void clear_has_single_predictor();
  inline void set_has_multi_predictor();
  inline void clear_has_multi_predictor();
  inline void set_has_train_init_plan_type();
  inline void clear_has_train_init_plan_type();
  inline void set_has_train_plan_type();
  inline void clear_has_train_plan_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_meta_net_def_;
  ::std::string* meta_net_def_;
  static ::std::string* _default_predictor_dbreader_;
  ::std::string* predictor_dbreader_;
  static ::std::string* _default_parameters_blob_type_;
  ::std::string* parameters_blob_type_;
  static ::std::string* _default_inputs_blob_type_;
  ::std::string* inputs_blob_type_;
  static ::std::string* _default_outputs_blob_type_;
  ::std::string* outputs_blob_type_;
  static ::std::string* _default_global_init_net_type_;
  ::std::string* global_init_net_type_;
  static ::std::string* _default_predict_init_net_type_;
  ::std::string* predict_init_net_type_;
  static ::std::string* _default_predict_net_type_;
  ::std::string* predict_net_type_;
  static ::std::string* _default_single_predictor_;
  ::std::string* single_predictor_;
  static ::std::string* _default_multi_predictor_;
  ::std::string* multi_predictor_;
  static ::std::string* _default_train_init_plan_type_;
  ::std::string* train_init_plan_type_;
  static ::std::string* _default_train_plan_type_;
  ::std::string* train_plan_type_;
  friend void CAFFE2_API protobuf_AddDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fpredictor_5fconsts_2eproto();

  void InitAsDefaultInstance();
  static PredictorConsts* default_instance_;
};
// ===================================================================


// ===================================================================

// PredictorConsts

// optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
inline bool PredictorConsts::has_meta_net_def() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PredictorConsts::set_has_meta_net_def() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PredictorConsts::clear_has_meta_net_def() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PredictorConsts::clear_meta_net_def() {
  if (meta_net_def_ != _default_meta_net_def_) {
    meta_net_def_->assign(*_default_meta_net_def_);
  }
  clear_has_meta_net_def();
}
inline const ::std::string& PredictorConsts::meta_net_def() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.META_NET_DEF)
  return *meta_net_def_;
}
inline void PredictorConsts::set_meta_net_def(const ::std::string& value) {
  set_has_meta_net_def();
  if (meta_net_def_ == _default_meta_net_def_) {
    meta_net_def_ = new ::std::string;
  }
  meta_net_def_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.META_NET_DEF)
}
inline void PredictorConsts::set_meta_net_def(const char* value) {
  set_has_meta_net_def();
  if (meta_net_def_ == _default_meta_net_def_) {
    meta_net_def_ = new ::std::string;
  }
  meta_net_def_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.META_NET_DEF)
}
inline void PredictorConsts::set_meta_net_def(const char* value, size_t size) {
  set_has_meta_net_def();
  if (meta_net_def_ == _default_meta_net_def_) {
    meta_net_def_ = new ::std::string;
  }
  meta_net_def_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.META_NET_DEF)
}
inline ::std::string* PredictorConsts::mutable_meta_net_def() {
  set_has_meta_net_def();
  if (meta_net_def_ == _default_meta_net_def_) {
    meta_net_def_ = new ::std::string(*_default_meta_net_def_);
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.META_NET_DEF)
  return meta_net_def_;
}
inline ::std::string* PredictorConsts::release_meta_net_def() {
  clear_has_meta_net_def();
  if (meta_net_def_ == _default_meta_net_def_) {
    return NULL;
  } else {
    ::std::string* temp = meta_net_def_;
    meta_net_def_ = const_cast< ::std::string*>(_default_meta_net_def_);
    return temp;
  }
}
inline void PredictorConsts::set_allocated_meta_net_def(::std::string* meta_net_def) {
  if (meta_net_def_ != _default_meta_net_def_) {
    delete meta_net_def_;
  }
  if (meta_net_def) {
    set_has_meta_net_def();
    meta_net_def_ = meta_net_def;
  } else {
    clear_has_meta_net_def();
    meta_net_def_ = const_cast< ::std::string*>(_default_meta_net_def_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.META_NET_DEF)
}

// optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
inline bool PredictorConsts::has_predictor_dbreader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PredictorConsts::set_has_predictor_dbreader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PredictorConsts::clear_has_predictor_dbreader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PredictorConsts::clear_predictor_dbreader() {
  if (predictor_dbreader_ != _default_predictor_dbreader_) {
    predictor_dbreader_->assign(*_default_predictor_dbreader_);
  }
  clear_has_predictor_dbreader();
}
inline const ::std::string& PredictorConsts::predictor_dbreader() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  return *predictor_dbreader_;
}
inline void PredictorConsts::set_predictor_dbreader(const ::std::string& value) {
  set_has_predictor_dbreader();
  if (predictor_dbreader_ == _default_predictor_dbreader_) {
    predictor_dbreader_ = new ::std::string;
  }
  predictor_dbreader_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
inline void PredictorConsts::set_predictor_dbreader(const char* value) {
  set_has_predictor_dbreader();
  if (predictor_dbreader_ == _default_predictor_dbreader_) {
    predictor_dbreader_ = new ::std::string;
  }
  predictor_dbreader_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
inline void PredictorConsts::set_predictor_dbreader(const char* value, size_t size) {
  set_has_predictor_dbreader();
  if (predictor_dbreader_ == _default_predictor_dbreader_) {
    predictor_dbreader_ = new ::std::string;
  }
  predictor_dbreader_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
inline ::std::string* PredictorConsts::mutable_predictor_dbreader() {
  set_has_predictor_dbreader();
  if (predictor_dbreader_ == _default_predictor_dbreader_) {
    predictor_dbreader_ = new ::std::string(*_default_predictor_dbreader_);
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  return predictor_dbreader_;
}
inline ::std::string* PredictorConsts::release_predictor_dbreader() {
  clear_has_predictor_dbreader();
  if (predictor_dbreader_ == _default_predictor_dbreader_) {
    return NULL;
  } else {
    ::std::string* temp = predictor_dbreader_;
    predictor_dbreader_ = const_cast< ::std::string*>(_default_predictor_dbreader_);
    return temp;
  }
}
inline void PredictorConsts::set_allocated_predictor_dbreader(::std::string* predictor_dbreader) {
  if (predictor_dbreader_ != _default_predictor_dbreader_) {
    delete predictor_dbreader_;
  }
  if (predictor_dbreader) {
    set_has_predictor_dbreader();
    predictor_dbreader_ = predictor_dbreader;
  } else {
    clear_has_predictor_dbreader();
    predictor_dbreader_ = const_cast< ::std::string*>(_default_predictor_dbreader_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}

// optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
inline bool PredictorConsts::has_parameters_blob_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PredictorConsts::set_has_parameters_blob_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PredictorConsts::clear_has_parameters_blob_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PredictorConsts::clear_parameters_blob_type() {
  if (parameters_blob_type_ != _default_parameters_blob_type_) {
    parameters_blob_type_->assign(*_default_parameters_blob_type_);
  }
  clear_has_parameters_blob_type();
}
inline const ::std::string& PredictorConsts::parameters_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  return *parameters_blob_type_;
}
inline void PredictorConsts::set_parameters_blob_type(const ::std::string& value) {
  set_has_parameters_blob_type();
  if (parameters_blob_type_ == _default_parameters_blob_type_) {
    parameters_blob_type_ = new ::std::string;
  }
  parameters_blob_type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
inline void PredictorConsts::set_parameters_blob_type(const char* value) {
  set_has_parameters_blob_type();
  if (parameters_blob_type_ == _default_parameters_blob_type_) {
    parameters_blob_type_ = new ::std::string;
  }
  parameters_blob_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
inline void PredictorConsts::set_parameters_blob_type(const char* value, size_t size) {
  set_has_parameters_blob_type();
  if (parameters_blob_type_ == _default_parameters_blob_type_) {
    parameters_blob_type_ = new ::std::string;
  }
  parameters_blob_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
inline ::std::string* PredictorConsts::mutable_parameters_blob_type() {
  set_has_parameters_blob_type();
  if (parameters_blob_type_ == _default_parameters_blob_type_) {
    parameters_blob_type_ = new ::std::string(*_default_parameters_blob_type_);
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  return parameters_blob_type_;
}
inline ::std::string* PredictorConsts::release_parameters_blob_type() {
  clear_has_parameters_blob_type();
  if (parameters_blob_type_ == _default_parameters_blob_type_) {
    return NULL;
  } else {
    ::std::string* temp = parameters_blob_type_;
    parameters_blob_type_ = const_cast< ::std::string*>(_default_parameters_blob_type_);
    return temp;
  }
}
inline void PredictorConsts::set_allocated_parameters_blob_type(::std::string* parameters_blob_type) {
  if (parameters_blob_type_ != _default_parameters_blob_type_) {
    delete parameters_blob_type_;
  }
  if (parameters_blob_type) {
    set_has_parameters_blob_type();
    parameters_blob_type_ = parameters_blob_type;
  } else {
    clear_has_parameters_blob_type();
    parameters_blob_type_ = const_cast< ::std::string*>(_default_parameters_blob_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}

// optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
inline bool PredictorConsts::has_inputs_blob_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PredictorConsts::set_has_inputs_blob_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PredictorConsts::clear_has_inputs_blob_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PredictorConsts::clear_inputs_blob_type() {
  if (inputs_blob_type_ != _default_inputs_blob_type_) {
    inputs_blob_type_->assign(*_default_inputs_blob_type_);
  }
  clear_has_inputs_blob_type();
}
inline const ::std::string& PredictorConsts::inputs_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  return *inputs_blob_type_;
}
inline void PredictorConsts::set_inputs_blob_type(const ::std::string& value) {
  set_has_inputs_blob_type();
  if (inputs_blob_type_ == _default_inputs_blob_type_) {
    inputs_blob_type_ = new ::std::string;
  }
  inputs_blob_type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
inline void PredictorConsts::set_inputs_blob_type(const char* value) {
  set_has_inputs_blob_type();
  if (inputs_blob_type_ == _default_inputs_blob_type_) {
    inputs_blob_type_ = new ::std::string;
  }
  inputs_blob_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
inline void PredictorConsts::set_inputs_blob_type(const char* value, size_t size) {
  set_has_inputs_blob_type();
  if (inputs_blob_type_ == _default_inputs_blob_type_) {
    inputs_blob_type_ = new ::std::string;
  }
  inputs_blob_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
inline ::std::string* PredictorConsts::mutable_inputs_blob_type() {
  set_has_inputs_blob_type();
  if (inputs_blob_type_ == _default_inputs_blob_type_) {
    inputs_blob_type_ = new ::std::string(*_default_inputs_blob_type_);
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  return inputs_blob_type_;
}
inline ::std::string* PredictorConsts::release_inputs_blob_type() {
  clear_has_inputs_blob_type();
  if (inputs_blob_type_ == _default_inputs_blob_type_) {
    return NULL;
  } else {
    ::std::string* temp = inputs_blob_type_;
    inputs_blob_type_ = const_cast< ::std::string*>(_default_inputs_blob_type_);
    return temp;
  }
}
inline void PredictorConsts::set_allocated_inputs_blob_type(::std::string* inputs_blob_type) {
  if (inputs_blob_type_ != _default_inputs_blob_type_) {
    delete inputs_blob_type_;
  }
  if (inputs_blob_type) {
    set_has_inputs_blob_type();
    inputs_blob_type_ = inputs_blob_type;
  } else {
    clear_has_inputs_blob_type();
    inputs_blob_type_ = const_cast< ::std::string*>(_default_inputs_blob_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}

// optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
inline bool PredictorConsts::has_outputs_blob_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PredictorConsts::set_has_outputs_blob_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PredictorConsts::clear_has_outputs_blob_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PredictorConsts::clear_outputs_blob_type() {
  if (outputs_blob_type_ != _default_outputs_blob_type_) {
    outputs_blob_type_->assign(*_default_outputs_blob_type_);
  }
  clear_has_outputs_blob_type();
}
inline const ::std::string& PredictorConsts::outputs_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  return *outputs_blob_type_;
}
inline void PredictorConsts::set_outputs_blob_type(const ::std::string& value) {
  set_has_outputs_blob_type();
  if (outputs_blob_type_ == _default_outputs_blob_type_) {
    outputs_blob_type_ = new ::std::string;
  }
  outputs_blob_type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
inline void PredictorConsts::set_outputs_blob_type(const char* value) {
  set_has_outputs_blob_type();
  if (outputs_blob_type_ == _default_outputs_blob_type_) {
    outputs_blob_type_ = new ::std::string;
  }
  outputs_blob_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
inline void PredictorConsts::set_outputs_blob_type(const char* value, size_t size) {
  set_has_outputs_blob_type();
  if (outputs_blob_type_ == _default_outputs_blob_type_) {
    outputs_blob_type_ = new ::std::string;
  }
  outputs_blob_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
inline ::std::string* PredictorConsts::mutable_outputs_blob_type() {
  set_has_outputs_blob_type();
  if (outputs_blob_type_ == _default_outputs_blob_type_) {
    outputs_blob_type_ = new ::std::string(*_default_outputs_blob_type_);
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  return outputs_blob_type_;
}
inline ::std::string* PredictorConsts::release_outputs_blob_type() {
  clear_has_outputs_blob_type();
  if (outputs_blob_type_ == _default_outputs_blob_type_) {
    return NULL;
  } else {
    ::std::string* temp = outputs_blob_type_;
    outputs_blob_type_ = const_cast< ::std::string*>(_default_outputs_blob_type_);
    return temp;
  }
}
inline void PredictorConsts::set_allocated_outputs_blob_type(::std::string* outputs_blob_type) {
  if (outputs_blob_type_ != _default_outputs_blob_type_) {
    delete outputs_blob_type_;
  }
  if (outputs_blob_type) {
    set_has_outputs_blob_type();
    outputs_blob_type_ = outputs_blob_type;
  } else {
    clear_has_outputs_blob_type();
    outputs_blob_type_ = const_cast< ::std::string*>(_default_outputs_blob_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}

// optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
inline bool PredictorConsts::has_global_init_net_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PredictorConsts::set_has_global_init_net_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PredictorConsts::clear_has_global_init_net_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PredictorConsts::clear_global_init_net_type() {
  if (global_init_net_type_ != _default_global_init_net_type_) {
    global_init_net_type_->assign(*_default_global_init_net_type_);
  }
  clear_has_global_init_net_type();
}
inline const ::std::string& PredictorConsts::global_init_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  return *global_init_net_type_;
}
inline void PredictorConsts::set_global_init_net_type(const ::std::string& value) {
  set_has_global_init_net_type();
  if (global_init_net_type_ == _default_global_init_net_type_) {
    global_init_net_type_ = new ::std::string;
  }
  global_init_net_type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
inline void PredictorConsts::set_global_init_net_type(const char* value) {
  set_has_global_init_net_type();
  if (global_init_net_type_ == _default_global_init_net_type_) {
    global_init_net_type_ = new ::std::string;
  }
  global_init_net_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
inline void PredictorConsts::set_global_init_net_type(const char* value, size_t size) {
  set_has_global_init_net_type();
  if (global_init_net_type_ == _default_global_init_net_type_) {
    global_init_net_type_ = new ::std::string;
  }
  global_init_net_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
inline ::std::string* PredictorConsts::mutable_global_init_net_type() {
  set_has_global_init_net_type();
  if (global_init_net_type_ == _default_global_init_net_type_) {
    global_init_net_type_ = new ::std::string(*_default_global_init_net_type_);
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  return global_init_net_type_;
}
inline ::std::string* PredictorConsts::release_global_init_net_type() {
  clear_has_global_init_net_type();
  if (global_init_net_type_ == _default_global_init_net_type_) {
    return NULL;
  } else {
    ::std::string* temp = global_init_net_type_;
    global_init_net_type_ = const_cast< ::std::string*>(_default_global_init_net_type_);
    return temp;
  }
}
inline void PredictorConsts::set_allocated_global_init_net_type(::std::string* global_init_net_type) {
  if (global_init_net_type_ != _default_global_init_net_type_) {
    delete global_init_net_type_;
  }
  if (global_init_net_type) {
    set_has_global_init_net_type();
    global_init_net_type_ = global_init_net_type;
  } else {
    clear_has_global_init_net_type();
    global_init_net_type_ = const_cast< ::std::string*>(_default_global_init_net_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}

// optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
inline bool PredictorConsts::has_predict_init_net_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PredictorConsts::set_has_predict_init_net_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PredictorConsts::clear_has_predict_init_net_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PredictorConsts::clear_predict_init_net_type() {
  if (predict_init_net_type_ != _default_predict_init_net_type_) {
    predict_init_net_type_->assign(*_default_predict_init_net_type_);
  }
  clear_has_predict_init_net_type();
}
inline const ::std::string& PredictorConsts::predict_init_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  return *predict_init_net_type_;
}
inline void PredictorConsts::set_predict_init_net_type(const ::std::string& value) {
  set_has_predict_init_net_type();
  if (predict_init_net_type_ == _default_predict_init_net_type_) {
    predict_init_net_type_ = new ::std::string;
  }
  predict_init_net_type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
inline void PredictorConsts::set_predict_init_net_type(const char* value) {
  set_has_predict_init_net_type();
  if (predict_init_net_type_ == _default_predict_init_net_type_) {
    predict_init_net_type_ = new ::std::string;
  }
  predict_init_net_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
inline void PredictorConsts::set_predict_init_net_type(const char* value, size_t size) {
  set_has_predict_init_net_type();
  if (predict_init_net_type_ == _default_predict_init_net_type_) {
    predict_init_net_type_ = new ::std::string;
  }
  predict_init_net_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
inline ::std::string* PredictorConsts::mutable_predict_init_net_type() {
  set_has_predict_init_net_type();
  if (predict_init_net_type_ == _default_predict_init_net_type_) {
    predict_init_net_type_ = new ::std::string(*_default_predict_init_net_type_);
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  return predict_init_net_type_;
}
inline ::std::string* PredictorConsts::release_predict_init_net_type() {
  clear_has_predict_init_net_type();
  if (predict_init_net_type_ == _default_predict_init_net_type_) {
    return NULL;
  } else {
    ::std::string* temp = predict_init_net_type_;
    predict_init_net_type_ = const_cast< ::std::string*>(_default_predict_init_net_type_);
    return temp;
  }
}
inline void PredictorConsts::set_allocated_predict_init_net_type(::std::string* predict_init_net_type) {
  if (predict_init_net_type_ != _default_predict_init_net_type_) {
    delete predict_init_net_type_;
  }
  if (predict_init_net_type) {
    set_has_predict_init_net_type();
    predict_init_net_type_ = predict_init_net_type;
  } else {
    clear_has_predict_init_net_type();
    predict_init_net_type_ = const_cast< ::std::string*>(_default_predict_init_net_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}

// optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
inline bool PredictorConsts::has_predict_net_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PredictorConsts::set_has_predict_net_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PredictorConsts::clear_has_predict_net_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PredictorConsts::clear_predict_net_type() {
  if (predict_net_type_ != _default_predict_net_type_) {
    predict_net_type_->assign(*_default_predict_net_type_);
  }
  clear_has_predict_net_type();
}
inline const ::std::string& PredictorConsts::predict_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  return *predict_net_type_;
}
inline void PredictorConsts::set_predict_net_type(const ::std::string& value) {
  set_has_predict_net_type();
  if (predict_net_type_ == _default_predict_net_type_) {
    predict_net_type_ = new ::std::string;
  }
  predict_net_type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
inline void PredictorConsts::set_predict_net_type(const char* value) {
  set_has_predict_net_type();
  if (predict_net_type_ == _default_predict_net_type_) {
    predict_net_type_ = new ::std::string;
  }
  predict_net_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
inline void PredictorConsts::set_predict_net_type(const char* value, size_t size) {
  set_has_predict_net_type();
  if (predict_net_type_ == _default_predict_net_type_) {
    predict_net_type_ = new ::std::string;
  }
  predict_net_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
inline ::std::string* PredictorConsts::mutable_predict_net_type() {
  set_has_predict_net_type();
  if (predict_net_type_ == _default_predict_net_type_) {
    predict_net_type_ = new ::std::string(*_default_predict_net_type_);
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  return predict_net_type_;
}
inline ::std::string* PredictorConsts::release_predict_net_type() {
  clear_has_predict_net_type();
  if (predict_net_type_ == _default_predict_net_type_) {
    return NULL;
  } else {
    ::std::string* temp = predict_net_type_;
    predict_net_type_ = const_cast< ::std::string*>(_default_predict_net_type_);
    return temp;
  }
}
inline void PredictorConsts::set_allocated_predict_net_type(::std::string* predict_net_type) {
  if (predict_net_type_ != _default_predict_net_type_) {
    delete predict_net_type_;
  }
  if (predict_net_type) {
    set_has_predict_net_type();
    predict_net_type_ = predict_net_type;
  } else {
    clear_has_predict_net_type();
    predict_net_type_ = const_cast< ::std::string*>(_default_predict_net_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}

// optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
inline bool PredictorConsts::has_single_predictor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PredictorConsts::set_has_single_predictor() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PredictorConsts::clear_has_single_predictor() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PredictorConsts::clear_single_predictor() {
  if (single_predictor_ != _default_single_predictor_) {
    single_predictor_->assign(*_default_single_predictor_);
  }
  clear_has_single_predictor();
}
inline const ::std::string& PredictorConsts::single_predictor() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  return *single_predictor_;
}
inline void PredictorConsts::set_single_predictor(const ::std::string& value) {
  set_has_single_predictor();
  if (single_predictor_ == _default_single_predictor_) {
    single_predictor_ = new ::std::string;
  }
  single_predictor_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
inline void PredictorConsts::set_single_predictor(const char* value) {
  set_has_single_predictor();
  if (single_predictor_ == _default_single_predictor_) {
    single_predictor_ = new ::std::string;
  }
  single_predictor_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
inline void PredictorConsts::set_single_predictor(const char* value, size_t size) {
  set_has_single_predictor();
  if (single_predictor_ == _default_single_predictor_) {
    single_predictor_ = new ::std::string;
  }
  single_predictor_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
inline ::std::string* PredictorConsts::mutable_single_predictor() {
  set_has_single_predictor();
  if (single_predictor_ == _default_single_predictor_) {
    single_predictor_ = new ::std::string(*_default_single_predictor_);
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  return single_predictor_;
}
inline ::std::string* PredictorConsts::release_single_predictor() {
  clear_has_single_predictor();
  if (single_predictor_ == _default_single_predictor_) {
    return NULL;
  } else {
    ::std::string* temp = single_predictor_;
    single_predictor_ = const_cast< ::std::string*>(_default_single_predictor_);
    return temp;
  }
}
inline void PredictorConsts::set_allocated_single_predictor(::std::string* single_predictor) {
  if (single_predictor_ != _default_single_predictor_) {
    delete single_predictor_;
  }
  if (single_predictor) {
    set_has_single_predictor();
    single_predictor_ = single_predictor;
  } else {
    clear_has_single_predictor();
    single_predictor_ = const_cast< ::std::string*>(_default_single_predictor_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}

// optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
inline bool PredictorConsts::has_multi_predictor() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PredictorConsts::set_has_multi_predictor() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PredictorConsts::clear_has_multi_predictor() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PredictorConsts::clear_multi_predictor() {
  if (multi_predictor_ != _default_multi_predictor_) {
    multi_predictor_->assign(*_default_multi_predictor_);
  }
  clear_has_multi_predictor();
}
inline const ::std::string& PredictorConsts::multi_predictor() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.MULTI_PREDICTOR)
  return *multi_predictor_;
}
inline void PredictorConsts::set_multi_predictor(const ::std::string& value) {
  set_has_multi_predictor();
  if (multi_predictor_ == _default_multi_predictor_) {
    multi_predictor_ = new ::std::string;
  }
  multi_predictor_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
inline void PredictorConsts::set_multi_predictor(const char* value) {
  set_has_multi_predictor();
  if (multi_predictor_ == _default_multi_predictor_) {
    multi_predictor_ = new ::std::string;
  }
  multi_predictor_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
inline void PredictorConsts::set_multi_predictor(const char* value, size_t size) {
  set_has_multi_predictor();
  if (multi_predictor_ == _default_multi_predictor_) {
    multi_predictor_ = new ::std::string;
  }
  multi_predictor_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
inline ::std::string* PredictorConsts::mutable_multi_predictor() {
  set_has_multi_predictor();
  if (multi_predictor_ == _default_multi_predictor_) {
    multi_predictor_ = new ::std::string(*_default_multi_predictor_);
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.MULTI_PREDICTOR)
  return multi_predictor_;
}
inline ::std::string* PredictorConsts::release_multi_predictor() {
  clear_has_multi_predictor();
  if (multi_predictor_ == _default_multi_predictor_) {
    return NULL;
  } else {
    ::std::string* temp = multi_predictor_;
    multi_predictor_ = const_cast< ::std::string*>(_default_multi_predictor_);
    return temp;
  }
}
inline void PredictorConsts::set_allocated_multi_predictor(::std::string* multi_predictor) {
  if (multi_predictor_ != _default_multi_predictor_) {
    delete multi_predictor_;
  }
  if (multi_predictor) {
    set_has_multi_predictor();
    multi_predictor_ = multi_predictor;
  } else {
    clear_has_multi_predictor();
    multi_predictor_ = const_cast< ::std::string*>(_default_multi_predictor_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.MULTI_PREDICTOR)
}

// optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
inline bool PredictorConsts::has_train_init_plan_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PredictorConsts::set_has_train_init_plan_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PredictorConsts::clear_has_train_init_plan_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PredictorConsts::clear_train_init_plan_type() {
  if (train_init_plan_type_ != _default_train_init_plan_type_) {
    train_init_plan_type_->assign(*_default_train_init_plan_type_);
  }
  clear_has_train_init_plan_type();
}
inline const ::std::string& PredictorConsts::train_init_plan_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  return *train_init_plan_type_;
}
inline void PredictorConsts::set_train_init_plan_type(const ::std::string& value) {
  set_has_train_init_plan_type();
  if (train_init_plan_type_ == _default_train_init_plan_type_) {
    train_init_plan_type_ = new ::std::string;
  }
  train_init_plan_type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
inline void PredictorConsts::set_train_init_plan_type(const char* value) {
  set_has_train_init_plan_type();
  if (train_init_plan_type_ == _default_train_init_plan_type_) {
    train_init_plan_type_ = new ::std::string;
  }
  train_init_plan_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
inline void PredictorConsts::set_train_init_plan_type(const char* value, size_t size) {
  set_has_train_init_plan_type();
  if (train_init_plan_type_ == _default_train_init_plan_type_) {
    train_init_plan_type_ = new ::std::string;
  }
  train_init_plan_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
inline ::std::string* PredictorConsts::mutable_train_init_plan_type() {
  set_has_train_init_plan_type();
  if (train_init_plan_type_ == _default_train_init_plan_type_) {
    train_init_plan_type_ = new ::std::string(*_default_train_init_plan_type_);
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  return train_init_plan_type_;
}
inline ::std::string* PredictorConsts::release_train_init_plan_type() {
  clear_has_train_init_plan_type();
  if (train_init_plan_type_ == _default_train_init_plan_type_) {
    return NULL;
  } else {
    ::std::string* temp = train_init_plan_type_;
    train_init_plan_type_ = const_cast< ::std::string*>(_default_train_init_plan_type_);
    return temp;
  }
}
inline void PredictorConsts::set_allocated_train_init_plan_type(::std::string* train_init_plan_type) {
  if (train_init_plan_type_ != _default_train_init_plan_type_) {
    delete train_init_plan_type_;
  }
  if (train_init_plan_type) {
    set_has_train_init_plan_type();
    train_init_plan_type_ = train_init_plan_type;
  } else {
    clear_has_train_init_plan_type();
    train_init_plan_type_ = const_cast< ::std::string*>(_default_train_init_plan_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}

// optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
inline bool PredictorConsts::has_train_plan_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PredictorConsts::set_has_train_plan_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PredictorConsts::clear_has_train_plan_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PredictorConsts::clear_train_plan_type() {
  if (train_plan_type_ != _default_train_plan_type_) {
    train_plan_type_->assign(*_default_train_plan_type_);
  }
  clear_has_train_plan_type();
}
inline const ::std::string& PredictorConsts::train_plan_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  return *train_plan_type_;
}
inline void PredictorConsts::set_train_plan_type(const ::std::string& value) {
  set_has_train_plan_type();
  if (train_plan_type_ == _default_train_plan_type_) {
    train_plan_type_ = new ::std::string;
  }
  train_plan_type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
inline void PredictorConsts::set_train_plan_type(const char* value) {
  set_has_train_plan_type();
  if (train_plan_type_ == _default_train_plan_type_) {
    train_plan_type_ = new ::std::string;
  }
  train_plan_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
inline void PredictorConsts::set_train_plan_type(const char* value, size_t size) {
  set_has_train_plan_type();
  if (train_plan_type_ == _default_train_plan_type_) {
    train_plan_type_ = new ::std::string;
  }
  train_plan_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
inline ::std::string* PredictorConsts::mutable_train_plan_type() {
  set_has_train_plan_type();
  if (train_plan_type_ == _default_train_plan_type_) {
    train_plan_type_ = new ::std::string(*_default_train_plan_type_);
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  return train_plan_type_;
}
inline ::std::string* PredictorConsts::release_train_plan_type() {
  clear_has_train_plan_type();
  if (train_plan_type_ == _default_train_plan_type_) {
    return NULL;
  } else {
    ::std::string* temp = train_plan_type_;
    train_plan_type_ = const_cast< ::std::string*>(_default_train_plan_type_);
    return temp;
  }
}
inline void PredictorConsts::set_allocated_train_plan_type(::std::string* train_plan_type) {
  if (train_plan_type_ != _default_train_plan_type_) {
    delete train_plan_type_;
  }
  if (train_plan_type) {
    set_has_train_plan_type();
    train_plan_type_ = train_plan_type;
  } else {
    clear_has_train_plan_type();
    train_plan_type_ = const_cast< ::std::string*>(_default_train_plan_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe2_2fproto_2fpredictor_5fconsts_2eproto__INCLUDED
