// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bmnet/bmnet.proto

#ifndef PROTOBUF_bmnet_2fbmnet_2eproto__INCLUDED
#define PROTOBUF_bmnet_2fbmnet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bmnet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

class BlobShape;
class DependInfo;
class FillerParameter;
class NetParameter;
class LayerParameter;
class StartParameter;
class EndParameter;
class TLGroupParameter;
class TLInnerProductParameter;
class TLConvolutionParameter;
class TLShuffleChannelParameter;
class TLPoolingParameter;
class TLUpsampleParameter;
class TLLrnParameter;
class TLBatchNormParameter;
class TLScaleParameter;
class TLEltwiseParameter;
class TLActivationParameter;
class TLDummyParameter;
class TLTransportParameter;
class TLArithmeticParameter;
class TLResizeBilinearParameter;
class TGConvolutionParameter;
class TGPoolingParameter;
class TGInnerProductParameter;
class TGActivationParameter;
class TGBatchNormParameter;
class TGSoftmaxParameter;
class TGDropoutParameter;
class TGEltwiseParameter;
class TGLRNParameter;
class TGPowerParameter;
class TGScaleParameter;
class TGPReLUParameter;
class TGPermuteParameter;
class TGNormalizeParameter;
class TGCropParameter;
class TGSliceParameter;
class TGReductionParameter;
class TGUpsampleParameter;
class TGReorgParameter;
class TGConcatParameter;
class TGPriorBoxParameter;
class TGArithmeticParameter;
class TGResizeBilinearParameter;
class TGShuffleChannelParameter;
class TGInterpParameter;
class TGProposalParameter;
class TGRoiPoolingParameter;
class TGPSRoiPoolingParameter;
class TGTileParameter;
class TGDetectOutputParameter;
class TGCustomizedParameter;
class TGYoloParameter;
class TGRegionParameter;
class TGClipParameter;
class TGYoloPostParameter;
class TGReverseParameter;
class TGLstmUnitParameter;

enum FillerParameter_VarianceNorm {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2
};
bool FillerParameter_VarianceNorm_IsValid(int value);
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
const int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
inline const ::std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const ::std::string& name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum TLLrnParameter_NormRegion {
  TLLrnParameter_NormRegion_ACROSS_CHANNELS = 0,
  TLLrnParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool TLLrnParameter_NormRegion_IsValid(int value);
const TLLrnParameter_NormRegion TLLrnParameter_NormRegion_NormRegion_MIN = TLLrnParameter_NormRegion_ACROSS_CHANNELS;
const TLLrnParameter_NormRegion TLLrnParameter_NormRegion_NormRegion_MAX = TLLrnParameter_NormRegion_WITHIN_CHANNEL;
const int TLLrnParameter_NormRegion_NormRegion_ARRAYSIZE = TLLrnParameter_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* TLLrnParameter_NormRegion_descriptor();
inline const ::std::string& TLLrnParameter_NormRegion_Name(TLLrnParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    TLLrnParameter_NormRegion_descriptor(), value);
}
inline bool TLLrnParameter_NormRegion_Parse(
    const ::std::string& name, TLLrnParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TLLrnParameter_NormRegion>(
    TLLrnParameter_NormRegion_descriptor(), name, value);
}
enum TLTransportParameter_TransportDataType {
  TLTransportParameter_TransportDataType_NEURON = 0,
  TLTransportParameter_TransportDataType_COEFF = 1,
  TLTransportParameter_TransportDataType_COEFF_INT8 = 2,
  TLTransportParameter_TransportDataType_BIAS_INT8 = 3
};
bool TLTransportParameter_TransportDataType_IsValid(int value);
const TLTransportParameter_TransportDataType TLTransportParameter_TransportDataType_TransportDataType_MIN = TLTransportParameter_TransportDataType_NEURON;
const TLTransportParameter_TransportDataType TLTransportParameter_TransportDataType_TransportDataType_MAX = TLTransportParameter_TransportDataType_BIAS_INT8;
const int TLTransportParameter_TransportDataType_TransportDataType_ARRAYSIZE = TLTransportParameter_TransportDataType_TransportDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TLTransportParameter_TransportDataType_descriptor();
inline const ::std::string& TLTransportParameter_TransportDataType_Name(TLTransportParameter_TransportDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TLTransportParameter_TransportDataType_descriptor(), value);
}
inline bool TLTransportParameter_TransportDataType_Parse(
    const ::std::string& name, TLTransportParameter_TransportDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TLTransportParameter_TransportDataType>(
    TLTransportParameter_TransportDataType_descriptor(), name, value);
}
enum TLTransportParameter_TransportStage {
  TLTransportParameter_TransportStage_PRE = 0,
  TLTransportParameter_TransportStage_CUR = 1,
  TLTransportParameter_TransportStage_POST = 2
};
bool TLTransportParameter_TransportStage_IsValid(int value);
const TLTransportParameter_TransportStage TLTransportParameter_TransportStage_TransportStage_MIN = TLTransportParameter_TransportStage_PRE;
const TLTransportParameter_TransportStage TLTransportParameter_TransportStage_TransportStage_MAX = TLTransportParameter_TransportStage_POST;
const int TLTransportParameter_TransportStage_TransportStage_ARRAYSIZE = TLTransportParameter_TransportStage_TransportStage_MAX + 1;

const ::google::protobuf::EnumDescriptor* TLTransportParameter_TransportStage_descriptor();
inline const ::std::string& TLTransportParameter_TransportStage_Name(TLTransportParameter_TransportStage value) {
  return ::google::protobuf::internal::NameOfEnum(
    TLTransportParameter_TransportStage_descriptor(), value);
}
inline bool TLTransportParameter_TransportStage_Parse(
    const ::std::string& name, TLTransportParameter_TransportStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TLTransportParameter_TransportStage>(
    TLTransportParameter_TransportStage_descriptor(), name, value);
}
enum TLTransportParameter_TransportDirection {
  TLTransportParameter_TransportDirection_S2L = 0,
  TLTransportParameter_TransportDirection_L2S = 1,
  TLTransportParameter_TransportDirection_S2S = 2,
  TLTransportParameter_TransportDirection_L2L = 3,
  TLTransportParameter_TransportDirection_S2TSM = 4,
  TLTransportParameter_TransportDirection_L2TSM = 5,
  TLTransportParameter_TransportDirection_TSM2S = 6,
  TLTransportParameter_TransportDirection_TSM2L = 7
};
bool TLTransportParameter_TransportDirection_IsValid(int value);
const TLTransportParameter_TransportDirection TLTransportParameter_TransportDirection_TransportDirection_MIN = TLTransportParameter_TransportDirection_S2L;
const TLTransportParameter_TransportDirection TLTransportParameter_TransportDirection_TransportDirection_MAX = TLTransportParameter_TransportDirection_TSM2L;
const int TLTransportParameter_TransportDirection_TransportDirection_ARRAYSIZE = TLTransportParameter_TransportDirection_TransportDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* TLTransportParameter_TransportDirection_descriptor();
inline const ::std::string& TLTransportParameter_TransportDirection_Name(TLTransportParameter_TransportDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    TLTransportParameter_TransportDirection_descriptor(), value);
}
inline bool TLTransportParameter_TransportDirection_Parse(
    const ::std::string& name, TLTransportParameter_TransportDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TLTransportParameter_TransportDirection>(
    TLTransportParameter_TransportDirection_descriptor(), name, value);
}
enum TLArithmeticParameter_ArithmeticOp {
  TLArithmeticParameter_ArithmeticOp_ADD = 0,
  TLArithmeticParameter_ArithmeticOp_SUB = 1,
  TLArithmeticParameter_ArithmeticOp_MUL = 2,
  TLArithmeticParameter_ArithmeticOp_DIV = 3
};
bool TLArithmeticParameter_ArithmeticOp_IsValid(int value);
const TLArithmeticParameter_ArithmeticOp TLArithmeticParameter_ArithmeticOp_ArithmeticOp_MIN = TLArithmeticParameter_ArithmeticOp_ADD;
const TLArithmeticParameter_ArithmeticOp TLArithmeticParameter_ArithmeticOp_ArithmeticOp_MAX = TLArithmeticParameter_ArithmeticOp_DIV;
const int TLArithmeticParameter_ArithmeticOp_ArithmeticOp_ARRAYSIZE = TLArithmeticParameter_ArithmeticOp_ArithmeticOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* TLArithmeticParameter_ArithmeticOp_descriptor();
inline const ::std::string& TLArithmeticParameter_ArithmeticOp_Name(TLArithmeticParameter_ArithmeticOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    TLArithmeticParameter_ArithmeticOp_descriptor(), value);
}
inline bool TLArithmeticParameter_ArithmeticOp_Parse(
    const ::std::string& name, TLArithmeticParameter_ArithmeticOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TLArithmeticParameter_ArithmeticOp>(
    TLArithmeticParameter_ArithmeticOp_descriptor(), name, value);
}
enum TGPoolingParameter_PoolMethod {
  TGPoolingParameter_PoolMethod_MAX = 0,
  TGPoolingParameter_PoolMethod_AVE = 1
};
bool TGPoolingParameter_PoolMethod_IsValid(int value);
const TGPoolingParameter_PoolMethod TGPoolingParameter_PoolMethod_PoolMethod_MIN = TGPoolingParameter_PoolMethod_MAX;
const TGPoolingParameter_PoolMethod TGPoolingParameter_PoolMethod_PoolMethod_MAX = TGPoolingParameter_PoolMethod_AVE;
const int TGPoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = TGPoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* TGPoolingParameter_PoolMethod_descriptor();
inline const ::std::string& TGPoolingParameter_PoolMethod_Name(TGPoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    TGPoolingParameter_PoolMethod_descriptor(), value);
}
inline bool TGPoolingParameter_PoolMethod_Parse(
    const ::std::string& name, TGPoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TGPoolingParameter_PoolMethod>(
    TGPoolingParameter_PoolMethod_descriptor(), name, value);
}
enum TGEltwiseParameter_EltwiseOp {
  TGEltwiseParameter_EltwiseOp_PROD = 0,
  TGEltwiseParameter_EltwiseOp_SUM = 1,
  TGEltwiseParameter_EltwiseOp_MAX = 2
};
bool TGEltwiseParameter_EltwiseOp_IsValid(int value);
const TGEltwiseParameter_EltwiseOp TGEltwiseParameter_EltwiseOp_EltwiseOp_MIN = TGEltwiseParameter_EltwiseOp_PROD;
const TGEltwiseParameter_EltwiseOp TGEltwiseParameter_EltwiseOp_EltwiseOp_MAX = TGEltwiseParameter_EltwiseOp_MAX;
const int TGEltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = TGEltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* TGEltwiseParameter_EltwiseOp_descriptor();
inline const ::std::string& TGEltwiseParameter_EltwiseOp_Name(TGEltwiseParameter_EltwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    TGEltwiseParameter_EltwiseOp_descriptor(), value);
}
inline bool TGEltwiseParameter_EltwiseOp_Parse(
    const ::std::string& name, TGEltwiseParameter_EltwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TGEltwiseParameter_EltwiseOp>(
    TGEltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum TGLRNParameter_NormRegion {
  TGLRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  TGLRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool TGLRNParameter_NormRegion_IsValid(int value);
const TGLRNParameter_NormRegion TGLRNParameter_NormRegion_NormRegion_MIN = TGLRNParameter_NormRegion_ACROSS_CHANNELS;
const TGLRNParameter_NormRegion TGLRNParameter_NormRegion_NormRegion_MAX = TGLRNParameter_NormRegion_WITHIN_CHANNEL;
const int TGLRNParameter_NormRegion_NormRegion_ARRAYSIZE = TGLRNParameter_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* TGLRNParameter_NormRegion_descriptor();
inline const ::std::string& TGLRNParameter_NormRegion_Name(TGLRNParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    TGLRNParameter_NormRegion_descriptor(), value);
}
inline bool TGLRNParameter_NormRegion_Parse(
    const ::std::string& name, TGLRNParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TGLRNParameter_NormRegion>(
    TGLRNParameter_NormRegion_descriptor(), name, value);
}
enum TGReductionParameter_ReductionOp {
  TGReductionParameter_ReductionOp_SUM = 1,
  TGReductionParameter_ReductionOp_ASUM = 2,
  TGReductionParameter_ReductionOp_SUMSQ = 3,
  TGReductionParameter_ReductionOp_MEAN = 4
};
bool TGReductionParameter_ReductionOp_IsValid(int value);
const TGReductionParameter_ReductionOp TGReductionParameter_ReductionOp_ReductionOp_MIN = TGReductionParameter_ReductionOp_SUM;
const TGReductionParameter_ReductionOp TGReductionParameter_ReductionOp_ReductionOp_MAX = TGReductionParameter_ReductionOp_MEAN;
const int TGReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE = TGReductionParameter_ReductionOp_ReductionOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* TGReductionParameter_ReductionOp_descriptor();
inline const ::std::string& TGReductionParameter_ReductionOp_Name(TGReductionParameter_ReductionOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    TGReductionParameter_ReductionOp_descriptor(), value);
}
inline bool TGReductionParameter_ReductionOp_Parse(
    const ::std::string& name, TGReductionParameter_ReductionOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TGReductionParameter_ReductionOp>(
    TGReductionParameter_ReductionOp_descriptor(), name, value);
}
enum TGArithmeticParameter_ArithmeticOp {
  TGArithmeticParameter_ArithmeticOp_ADD = 0,
  TGArithmeticParameter_ArithmeticOp_SUB = 1,
  TGArithmeticParameter_ArithmeticOp_MUL = 2,
  TGArithmeticParameter_ArithmeticOp_DIV = 3
};
bool TGArithmeticParameter_ArithmeticOp_IsValid(int value);
const TGArithmeticParameter_ArithmeticOp TGArithmeticParameter_ArithmeticOp_ArithmeticOp_MIN = TGArithmeticParameter_ArithmeticOp_ADD;
const TGArithmeticParameter_ArithmeticOp TGArithmeticParameter_ArithmeticOp_ArithmeticOp_MAX = TGArithmeticParameter_ArithmeticOp_DIV;
const int TGArithmeticParameter_ArithmeticOp_ArithmeticOp_ARRAYSIZE = TGArithmeticParameter_ArithmeticOp_ArithmeticOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* TGArithmeticParameter_ArithmeticOp_descriptor();
inline const ::std::string& TGArithmeticParameter_ArithmeticOp_Name(TGArithmeticParameter_ArithmeticOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    TGArithmeticParameter_ArithmeticOp_descriptor(), value);
}
inline bool TGArithmeticParameter_ArithmeticOp_Parse(
    const ::std::string& name, TGArithmeticParameter_ArithmeticOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TGArithmeticParameter_ArithmeticOp>(
    TGArithmeticParameter_ArithmeticOp_descriptor(), name, value);
}
enum TGLstmUnitParameter_LstmDataOrder {
  TGLstmUnitParameter_LstmDataOrder_ORDER_IFGO = 0,
  TGLstmUnitParameter_LstmDataOrder_ORDER_IFOG = 1
};
bool TGLstmUnitParameter_LstmDataOrder_IsValid(int value);
const TGLstmUnitParameter_LstmDataOrder TGLstmUnitParameter_LstmDataOrder_LstmDataOrder_MIN = TGLstmUnitParameter_LstmDataOrder_ORDER_IFGO;
const TGLstmUnitParameter_LstmDataOrder TGLstmUnitParameter_LstmDataOrder_LstmDataOrder_MAX = TGLstmUnitParameter_LstmDataOrder_ORDER_IFOG;
const int TGLstmUnitParameter_LstmDataOrder_LstmDataOrder_ARRAYSIZE = TGLstmUnitParameter_LstmDataOrder_LstmDataOrder_MAX + 1;

const ::google::protobuf::EnumDescriptor* TGLstmUnitParameter_LstmDataOrder_descriptor();
inline const ::std::string& TGLstmUnitParameter_LstmDataOrder_Name(TGLstmUnitParameter_LstmDataOrder value) {
  return ::google::protobuf::internal::NameOfEnum(
    TGLstmUnitParameter_LstmDataOrder_descriptor(), value);
}
inline bool TGLstmUnitParameter_LstmDataOrder_Parse(
    const ::std::string& name, TGLstmUnitParameter_LstmDataOrder* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TGLstmUnitParameter_LstmDataOrder>(
    TGLstmUnitParameter_LstmDataOrder_descriptor(), name, value);
}
enum ActivationMethod {
  RELU = 0,
  SIGMOID = 1,
  TANH = 2,
  ELU = 3,
  PRELU = 4,
  ABS = 5
};
bool ActivationMethod_IsValid(int value);
const ActivationMethod ActivationMethod_MIN = RELU;
const ActivationMethod ActivationMethod_MAX = ABS;
const int ActivationMethod_ARRAYSIZE = ActivationMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActivationMethod_descriptor();
inline const ::std::string& ActivationMethod_Name(ActivationMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActivationMethod_descriptor(), value);
}
inline bool ActivationMethod_Parse(
    const ::std::string& name, ActivationMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivationMethod>(
    ActivationMethod_descriptor(), name, value);
}
enum TGDataType {
  NEURON = 0,
  WEIGHT = 1
};
bool TGDataType_IsValid(int value);
const TGDataType TGDataType_MIN = NEURON;
const TGDataType TGDataType_MAX = WEIGHT;
const int TGDataType_ARRAYSIZE = TGDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TGDataType_descriptor();
inline const ::std::string& TGDataType_Name(TGDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TGDataType_descriptor(), value);
}
inline bool TGDataType_Parse(
    const ::std::string& name, TGDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TGDataType>(
    TGDataType_descriptor(), name, value);
}
// ===================================================================

class BlobShape : public ::google::protobuf::Message {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShape& default_instance();

  void Swap(BlobShape* other);

  // implements Message ----------------------------------------------

  BlobShape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  inline int dim_size() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 1;
  inline ::google::protobuf::int64 dim(int index) const;
  inline void set_dim(int index, ::google::protobuf::int64 value);
  inline void add_dim(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // optional int32 data_type_size = 2 [default = 4];
  inline bool has_data_type_size() const;
  inline void clear_data_type_size();
  static const int kDataTypeSizeFieldNumber = 2;
  inline ::google::protobuf::int32 data_type_size() const;
  inline void set_data_type_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.BlobShape)
 private:
  inline void set_has_data_type_size();
  inline void clear_has_data_type_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  ::google::protobuf::int32 data_type_size_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static BlobShape* default_instance_;
};
// -------------------------------------------------------------------

class DependInfo : public ::google::protobuf::Message {
 public:
  DependInfo();
  virtual ~DependInfo();

  DependInfo(const DependInfo& from);

  inline DependInfo& operator=(const DependInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DependInfo& default_instance();

  void Swap(DependInfo* other);

  // implements Message ----------------------------------------------

  DependInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DependInfo& from);
  void MergeFrom(const DependInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stream_id = 1 [default = 0];
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  inline ::google::protobuf::uint32 stream_id() const;
  inline void set_stream_id(::google::protobuf::uint32 value);

  // optional uint32 inst_id = 2 [default = 0];
  inline bool has_inst_id() const;
  inline void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  inline ::google::protobuf::uint32 inst_id() const;
  inline void set_inst_id(::google::protobuf::uint32 value);

  // repeated uint32 depends = 3;
  inline int depends_size() const;
  inline void clear_depends();
  static const int kDependsFieldNumber = 3;
  inline ::google::protobuf::uint32 depends(int index) const;
  inline void set_depends(int index, ::google::protobuf::uint32 value);
  inline void add_depends(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      depends() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_depends();

  // @@protoc_insertion_point(class_scope:bmnet.DependInfo)
 private:
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  inline void set_has_inst_id();
  inline void clear_has_inst_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 stream_id_;
  ::google::protobuf::uint32 inst_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > depends_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static DependInfo* default_instance_;
};
// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  void Swap(FillerParameter* other);

  // implements Message ----------------------------------------------

  FillerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static const VarianceNorm FAN_IN = FillerParameter_VarianceNorm_FAN_IN;
  static const VarianceNorm FAN_OUT = FillerParameter_VarianceNorm_FAN_OUT;
  static const VarianceNorm AVERAGE = FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static const VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static const VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static const int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  static inline const ::std::string& VarianceNorm_Name(VarianceNorm value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(const ::std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float value = 2 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value() const;
  inline void set_value(float value);

  // optional float min = 3 [default = 0];
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 3;
  inline float min() const;
  inline void set_min(float value);

  // optional float max = 4 [default = 1];
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 4;
  inline float max() const;
  inline void set_max(float value);

  // optional float mean = 5 [default = 0];
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 5;
  inline float mean() const;
  inline void set_mean(float value);

  // optional float std = 6 [default = 1];
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 6;
  inline float std() const;
  inline void set_std(float value);

  // optional int32 sparse = 7 [default = -1];
  inline bool has_sparse() const;
  inline void clear_sparse();
  static const int kSparseFieldNumber = 7;
  inline ::google::protobuf::int32 sparse() const;
  inline void set_sparse(::google::protobuf::int32 value);

  // optional .bmnet.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  inline bool has_variance_norm() const;
  inline void clear_variance_norm();
  static const int kVarianceNormFieldNumber = 8;
  inline ::bmnet::FillerParameter_VarianceNorm variance_norm() const;
  inline void set_variance_norm(::bmnet::FillerParameter_VarianceNorm value);

  // @@protoc_insertion_point(class_scope:bmnet.FillerParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_sparse();
  inline void clear_has_sparse();
  inline void set_has_variance_norm();
  inline void clear_has_variance_norm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_type_;
  ::std::string* type_;
  float value_;
  float min_;
  float max_;
  float mean_;
  float std_;
  ::google::protobuf::int32 sparse_;
  int variance_norm_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static FillerParameter* default_instance_;
};
// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  NetParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated int32 input_dim = 4;
  inline int input_dim_size() const;
  inline void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  inline ::google::protobuf::int32 input_dim(int index) const;
  inline void set_input_dim(int index, ::google::protobuf::int32 value);
  inline void add_input_dim(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // repeated .bmnet.LayerParameter layer = 100;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 100;
  inline const ::bmnet::LayerParameter& layer(int index) const;
  inline ::bmnet::LayerParameter* mutable_layer(int index);
  inline ::bmnet::LayerParameter* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::bmnet::LayerParameter >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::bmnet::LayerParameter >*
      mutable_layer();

  // optional uint32 weight_size = 5 [default = 0];
  inline bool has_weight_size() const;
  inline void clear_weight_size();
  static const int kWeightSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 weight_size() const;
  inline void set_weight_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bmnet.NetParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_weight_size();
  inline void clear_has_weight_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::google::protobuf::RepeatedPtrField< ::bmnet::LayerParameter > layer_;
  ::google::protobuf::uint32 weight_size_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static NetParameter* default_instance_;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated string bottom = 3;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 3;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 4;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 4;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional bool in_place = 5 [default = false];
  inline bool has_in_place() const;
  inline void clear_in_place();
  static const int kInPlaceFieldNumber = 5;
  inline bool in_place() const;
  inline void set_in_place(bool value);

  // optional bool cpu_op = 6 [default = false];
  inline bool has_cpu_op() const;
  inline void clear_cpu_op();
  static const int kCpuOpFieldNumber = 6;
  inline bool cpu_op() const;
  inline void set_cpu_op(bool value);

  // repeated float threshold_x = 7;
  inline int threshold_x_size() const;
  inline void clear_threshold_x();
  static const int kThresholdXFieldNumber = 7;
  inline float threshold_x(int index) const;
  inline void set_threshold_x(int index, float value);
  inline void add_threshold_x(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      threshold_x() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_threshold_x();

  // repeated float threshold_y = 8;
  inline int threshold_y_size() const;
  inline void clear_threshold_y();
  static const int kThresholdYFieldNumber = 8;
  inline float threshold_y(int index) const;
  inline void set_threshold_y(int index, float value);
  inline void add_threshold_y(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      threshold_y() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_threshold_y();

  // optional string calib_id = 12;
  inline bool has_calib_id() const;
  inline void clear_calib_id();
  static const int kCalibIdFieldNumber = 12;
  inline const ::std::string& calib_id() const;
  inline void set_calib_id(const ::std::string& value);
  inline void set_calib_id(const char* value);
  inline void set_calib_id(const char* value, size_t size);
  inline ::std::string* mutable_calib_id();
  inline ::std::string* release_calib_id();
  inline void set_allocated_calib_id(::std::string* calib_id);

  // repeated .bmnet.BlobShape input_shape = 200;
  inline int input_shape_size() const;
  inline void clear_input_shape();
  static const int kInputShapeFieldNumber = 200;
  inline const ::bmnet::BlobShape& input_shape(int index) const;
  inline ::bmnet::BlobShape* mutable_input_shape(int index);
  inline ::bmnet::BlobShape* add_input_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::bmnet::BlobShape >&
      input_shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::bmnet::BlobShape >*
      mutable_input_shape();

  // repeated .bmnet.BlobShape output_shape = 201;
  inline int output_shape_size() const;
  inline void clear_output_shape();
  static const int kOutputShapeFieldNumber = 201;
  inline const ::bmnet::BlobShape& output_shape(int index) const;
  inline ::bmnet::BlobShape* mutable_output_shape(int index);
  inline ::bmnet::BlobShape* add_output_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::bmnet::BlobShape >&
      output_shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::bmnet::BlobShape >*
      mutable_output_shape();

  // repeated uint64 global_input = 202;
  inline int global_input_size() const;
  inline void clear_global_input();
  static const int kGlobalInputFieldNumber = 202;
  inline ::google::protobuf::uint64 global_input(int index) const;
  inline void set_global_input(int index, ::google::protobuf::uint64 value);
  inline void add_global_input(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      global_input() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_global_input();

  // repeated uint64 global_output = 203;
  inline int global_output_size() const;
  inline void clear_global_output();
  static const int kGlobalOutputFieldNumber = 203;
  inline ::google::protobuf::uint64 global_output(int index) const;
  inline void set_global_output(int index, ::google::protobuf::uint64 value);
  inline void add_global_output(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      global_output() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_global_output();

  // optional .bmnet.StartParameter start_param = 210;
  inline bool has_start_param() const;
  inline void clear_start_param();
  static const int kStartParamFieldNumber = 210;
  inline const ::bmnet::StartParameter& start_param() const;
  inline ::bmnet::StartParameter* mutable_start_param();
  inline ::bmnet::StartParameter* release_start_param();
  inline void set_allocated_start_param(::bmnet::StartParameter* start_param);

  // optional .bmnet.EndParameter end_param = 211;
  inline bool has_end_param() const;
  inline void clear_end_param();
  static const int kEndParamFieldNumber = 211;
  inline const ::bmnet::EndParameter& end_param() const;
  inline ::bmnet::EndParameter* mutable_end_param();
  inline ::bmnet::EndParameter* release_end_param();
  inline void set_allocated_end_param(::bmnet::EndParameter* end_param);

  // optional .bmnet.TLConvolutionParameter tl_convolution_param = 222;
  inline bool has_tl_convolution_param() const;
  inline void clear_tl_convolution_param();
  static const int kTlConvolutionParamFieldNumber = 222;
  inline const ::bmnet::TLConvolutionParameter& tl_convolution_param() const;
  inline ::bmnet::TLConvolutionParameter* mutable_tl_convolution_param();
  inline ::bmnet::TLConvolutionParameter* release_tl_convolution_param();
  inline void set_allocated_tl_convolution_param(::bmnet::TLConvolutionParameter* tl_convolution_param);

  // optional .bmnet.TLPoolingParameter tl_pooling_param = 223;
  inline bool has_tl_pooling_param() const;
  inline void clear_tl_pooling_param();
  static const int kTlPoolingParamFieldNumber = 223;
  inline const ::bmnet::TLPoolingParameter& tl_pooling_param() const;
  inline ::bmnet::TLPoolingParameter* mutable_tl_pooling_param();
  inline ::bmnet::TLPoolingParameter* release_tl_pooling_param();
  inline void set_allocated_tl_pooling_param(::bmnet::TLPoolingParameter* tl_pooling_param);

  // optional .bmnet.TLInnerProductParameter tl_inner_product_param = 224;
  inline bool has_tl_inner_product_param() const;
  inline void clear_tl_inner_product_param();
  static const int kTlInnerProductParamFieldNumber = 224;
  inline const ::bmnet::TLInnerProductParameter& tl_inner_product_param() const;
  inline ::bmnet::TLInnerProductParameter* mutable_tl_inner_product_param();
  inline ::bmnet::TLInnerProductParameter* release_tl_inner_product_param();
  inline void set_allocated_tl_inner_product_param(::bmnet::TLInnerProductParameter* tl_inner_product_param);

  // optional .bmnet.TLActivationParameter tl_activation_param = 225;
  inline bool has_tl_activation_param() const;
  inline void clear_tl_activation_param();
  static const int kTlActivationParamFieldNumber = 225;
  inline const ::bmnet::TLActivationParameter& tl_activation_param() const;
  inline ::bmnet::TLActivationParameter* mutable_tl_activation_param();
  inline ::bmnet::TLActivationParameter* release_tl_activation_param();
  inline void set_allocated_tl_activation_param(::bmnet::TLActivationParameter* tl_activation_param);

  // optional .bmnet.TLUpsampleParameter tl_upsample_param = 226;
  inline bool has_tl_upsample_param() const;
  inline void clear_tl_upsample_param();
  static const int kTlUpsampleParamFieldNumber = 226;
  inline const ::bmnet::TLUpsampleParameter& tl_upsample_param() const;
  inline ::bmnet::TLUpsampleParameter* mutable_tl_upsample_param();
  inline ::bmnet::TLUpsampleParameter* release_tl_upsample_param();
  inline void set_allocated_tl_upsample_param(::bmnet::TLUpsampleParameter* tl_upsample_param);

  // optional .bmnet.TLLrnParameter tl_lrn_param = 227;
  inline bool has_tl_lrn_param() const;
  inline void clear_tl_lrn_param();
  static const int kTlLrnParamFieldNumber = 227;
  inline const ::bmnet::TLLrnParameter& tl_lrn_param() const;
  inline ::bmnet::TLLrnParameter* mutable_tl_lrn_param();
  inline ::bmnet::TLLrnParameter* release_tl_lrn_param();
  inline void set_allocated_tl_lrn_param(::bmnet::TLLrnParameter* tl_lrn_param);

  // optional .bmnet.TLScaleParameter tl_scale_param = 228;
  inline bool has_tl_scale_param() const;
  inline void clear_tl_scale_param();
  static const int kTlScaleParamFieldNumber = 228;
  inline const ::bmnet::TLScaleParameter& tl_scale_param() const;
  inline ::bmnet::TLScaleParameter* mutable_tl_scale_param();
  inline ::bmnet::TLScaleParameter* release_tl_scale_param();
  inline void set_allocated_tl_scale_param(::bmnet::TLScaleParameter* tl_scale_param);

  // optional .bmnet.TLEltwiseParameter tl_eltwise_param = 229;
  inline bool has_tl_eltwise_param() const;
  inline void clear_tl_eltwise_param();
  static const int kTlEltwiseParamFieldNumber = 229;
  inline const ::bmnet::TLEltwiseParameter& tl_eltwise_param() const;
  inline ::bmnet::TLEltwiseParameter* mutable_tl_eltwise_param();
  inline ::bmnet::TLEltwiseParameter* release_tl_eltwise_param();
  inline void set_allocated_tl_eltwise_param(::bmnet::TLEltwiseParameter* tl_eltwise_param);

  // optional .bmnet.TLBatchNormParameter tl_batchnorm_param = 230;
  inline bool has_tl_batchnorm_param() const;
  inline void clear_tl_batchnorm_param();
  static const int kTlBatchnormParamFieldNumber = 230;
  inline const ::bmnet::TLBatchNormParameter& tl_batchnorm_param() const;
  inline ::bmnet::TLBatchNormParameter* mutable_tl_batchnorm_param();
  inline ::bmnet::TLBatchNormParameter* release_tl_batchnorm_param();
  inline void set_allocated_tl_batchnorm_param(::bmnet::TLBatchNormParameter* tl_batchnorm_param);

  // repeated .bmnet.TLTransportParameter tl_transport_param = 231;
  inline int tl_transport_param_size() const;
  inline void clear_tl_transport_param();
  static const int kTlTransportParamFieldNumber = 231;
  inline const ::bmnet::TLTransportParameter& tl_transport_param(int index) const;
  inline ::bmnet::TLTransportParameter* mutable_tl_transport_param(int index);
  inline ::bmnet::TLTransportParameter* add_tl_transport_param();
  inline const ::google::protobuf::RepeatedPtrField< ::bmnet::TLTransportParameter >&
      tl_transport_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::bmnet::TLTransportParameter >*
      mutable_tl_transport_param();

  // optional .bmnet.TLDummyParameter tl_dummy_param = 232;
  inline bool has_tl_dummy_param() const;
  inline void clear_tl_dummy_param();
  static const int kTlDummyParamFieldNumber = 232;
  inline const ::bmnet::TLDummyParameter& tl_dummy_param() const;
  inline ::bmnet::TLDummyParameter* mutable_tl_dummy_param();
  inline ::bmnet::TLDummyParameter* release_tl_dummy_param();
  inline void set_allocated_tl_dummy_param(::bmnet::TLDummyParameter* tl_dummy_param);

  // optional .bmnet.TLGroupParameter tl_group_param = 233;
  inline bool has_tl_group_param() const;
  inline void clear_tl_group_param();
  static const int kTlGroupParamFieldNumber = 233;
  inline const ::bmnet::TLGroupParameter& tl_group_param() const;
  inline ::bmnet::TLGroupParameter* mutable_tl_group_param();
  inline ::bmnet::TLGroupParameter* release_tl_group_param();
  inline void set_allocated_tl_group_param(::bmnet::TLGroupParameter* tl_group_param);

  // optional .bmnet.TLShuffleChannelParameter tl_shuffle_channel_param = 234;
  inline bool has_tl_shuffle_channel_param() const;
  inline void clear_tl_shuffle_channel_param();
  static const int kTlShuffleChannelParamFieldNumber = 234;
  inline const ::bmnet::TLShuffleChannelParameter& tl_shuffle_channel_param() const;
  inline ::bmnet::TLShuffleChannelParameter* mutable_tl_shuffle_channel_param();
  inline ::bmnet::TLShuffleChannelParameter* release_tl_shuffle_channel_param();
  inline void set_allocated_tl_shuffle_channel_param(::bmnet::TLShuffleChannelParameter* tl_shuffle_channel_param);

  // optional .bmnet.TLArithmeticParameter tl_arithmetic_param = 235;
  inline bool has_tl_arithmetic_param() const;
  inline void clear_tl_arithmetic_param();
  static const int kTlArithmeticParamFieldNumber = 235;
  inline const ::bmnet::TLArithmeticParameter& tl_arithmetic_param() const;
  inline ::bmnet::TLArithmeticParameter* mutable_tl_arithmetic_param();
  inline ::bmnet::TLArithmeticParameter* release_tl_arithmetic_param();
  inline void set_allocated_tl_arithmetic_param(::bmnet::TLArithmeticParameter* tl_arithmetic_param);

  // optional .bmnet.TLResizeBilinearParameter tl_resizebilinear_param = 236;
  inline bool has_tl_resizebilinear_param() const;
  inline void clear_tl_resizebilinear_param();
  static const int kTlResizebilinearParamFieldNumber = 236;
  inline const ::bmnet::TLResizeBilinearParameter& tl_resizebilinear_param() const;
  inline ::bmnet::TLResizeBilinearParameter* mutable_tl_resizebilinear_param();
  inline ::bmnet::TLResizeBilinearParameter* release_tl_resizebilinear_param();
  inline void set_allocated_tl_resizebilinear_param(::bmnet::TLResizeBilinearParameter* tl_resizebilinear_param);

  // optional .bmnet.TGConvolutionParameter tg_convolution_param = 260;
  inline bool has_tg_convolution_param() const;
  inline void clear_tg_convolution_param();
  static const int kTgConvolutionParamFieldNumber = 260;
  inline const ::bmnet::TGConvolutionParameter& tg_convolution_param() const;
  inline ::bmnet::TGConvolutionParameter* mutable_tg_convolution_param();
  inline ::bmnet::TGConvolutionParameter* release_tg_convolution_param();
  inline void set_allocated_tg_convolution_param(::bmnet::TGConvolutionParameter* tg_convolution_param);

  // optional .bmnet.TGPoolingParameter tg_pooling_param = 261;
  inline bool has_tg_pooling_param() const;
  inline void clear_tg_pooling_param();
  static const int kTgPoolingParamFieldNumber = 261;
  inline const ::bmnet::TGPoolingParameter& tg_pooling_param() const;
  inline ::bmnet::TGPoolingParameter* mutable_tg_pooling_param();
  inline ::bmnet::TGPoolingParameter* release_tg_pooling_param();
  inline void set_allocated_tg_pooling_param(::bmnet::TGPoolingParameter* tg_pooling_param);

  // optional .bmnet.TGInnerProductParameter tg_inner_product_param = 262;
  inline bool has_tg_inner_product_param() const;
  inline void clear_tg_inner_product_param();
  static const int kTgInnerProductParamFieldNumber = 262;
  inline const ::bmnet::TGInnerProductParameter& tg_inner_product_param() const;
  inline ::bmnet::TGInnerProductParameter* mutable_tg_inner_product_param();
  inline ::bmnet::TGInnerProductParameter* release_tg_inner_product_param();
  inline void set_allocated_tg_inner_product_param(::bmnet::TGInnerProductParameter* tg_inner_product_param);

  // optional .bmnet.TGActivationParameter tg_activation_param = 263;
  inline bool has_tg_activation_param() const;
  inline void clear_tg_activation_param();
  static const int kTgActivationParamFieldNumber = 263;
  inline const ::bmnet::TGActivationParameter& tg_activation_param() const;
  inline ::bmnet::TGActivationParameter* mutable_tg_activation_param();
  inline ::bmnet::TGActivationParameter* release_tg_activation_param();
  inline void set_allocated_tg_activation_param(::bmnet::TGActivationParameter* tg_activation_param);

  // optional .bmnet.TGBatchNormParameter tg_batchnorm_param = 264;
  inline bool has_tg_batchnorm_param() const;
  inline void clear_tg_batchnorm_param();
  static const int kTgBatchnormParamFieldNumber = 264;
  inline const ::bmnet::TGBatchNormParameter& tg_batchnorm_param() const;
  inline ::bmnet::TGBatchNormParameter* mutable_tg_batchnorm_param();
  inline ::bmnet::TGBatchNormParameter* release_tg_batchnorm_param();
  inline void set_allocated_tg_batchnorm_param(::bmnet::TGBatchNormParameter* tg_batchnorm_param);

  // optional .bmnet.TGSoftmaxParameter tg_softmax_param = 265;
  inline bool has_tg_softmax_param() const;
  inline void clear_tg_softmax_param();
  static const int kTgSoftmaxParamFieldNumber = 265;
  inline const ::bmnet::TGSoftmaxParameter& tg_softmax_param() const;
  inline ::bmnet::TGSoftmaxParameter* mutable_tg_softmax_param();
  inline ::bmnet::TGSoftmaxParameter* release_tg_softmax_param();
  inline void set_allocated_tg_softmax_param(::bmnet::TGSoftmaxParameter* tg_softmax_param);

  // optional .bmnet.TGDropoutParameter tg_dropout_param = 266;
  inline bool has_tg_dropout_param() const;
  inline void clear_tg_dropout_param();
  static const int kTgDropoutParamFieldNumber = 266;
  inline const ::bmnet::TGDropoutParameter& tg_dropout_param() const;
  inline ::bmnet::TGDropoutParameter* mutable_tg_dropout_param();
  inline ::bmnet::TGDropoutParameter* release_tg_dropout_param();
  inline void set_allocated_tg_dropout_param(::bmnet::TGDropoutParameter* tg_dropout_param);

  // optional .bmnet.TGEltwiseParameter tg_eltwise_param = 267;
  inline bool has_tg_eltwise_param() const;
  inline void clear_tg_eltwise_param();
  static const int kTgEltwiseParamFieldNumber = 267;
  inline const ::bmnet::TGEltwiseParameter& tg_eltwise_param() const;
  inline ::bmnet::TGEltwiseParameter* mutable_tg_eltwise_param();
  inline ::bmnet::TGEltwiseParameter* release_tg_eltwise_param();
  inline void set_allocated_tg_eltwise_param(::bmnet::TGEltwiseParameter* tg_eltwise_param);

  // optional .bmnet.TGLRNParameter tg_lrn_param = 268;
  inline bool has_tg_lrn_param() const;
  inline void clear_tg_lrn_param();
  static const int kTgLrnParamFieldNumber = 268;
  inline const ::bmnet::TGLRNParameter& tg_lrn_param() const;
  inline ::bmnet::TGLRNParameter* mutable_tg_lrn_param();
  inline ::bmnet::TGLRNParameter* release_tg_lrn_param();
  inline void set_allocated_tg_lrn_param(::bmnet::TGLRNParameter* tg_lrn_param);

  // optional .bmnet.TGPowerParameter tg_power_param = 269;
  inline bool has_tg_power_param() const;
  inline void clear_tg_power_param();
  static const int kTgPowerParamFieldNumber = 269;
  inline const ::bmnet::TGPowerParameter& tg_power_param() const;
  inline ::bmnet::TGPowerParameter* mutable_tg_power_param();
  inline ::bmnet::TGPowerParameter* release_tg_power_param();
  inline void set_allocated_tg_power_param(::bmnet::TGPowerParameter* tg_power_param);

  // optional .bmnet.TGScaleParameter tg_scale_param = 270;
  inline bool has_tg_scale_param() const;
  inline void clear_tg_scale_param();
  static const int kTgScaleParamFieldNumber = 270;
  inline const ::bmnet::TGScaleParameter& tg_scale_param() const;
  inline ::bmnet::TGScaleParameter* mutable_tg_scale_param();
  inline ::bmnet::TGScaleParameter* release_tg_scale_param();
  inline void set_allocated_tg_scale_param(::bmnet::TGScaleParameter* tg_scale_param);

  // optional .bmnet.TGPReLUParameter tg_prelu_param = 271;
  inline bool has_tg_prelu_param() const;
  inline void clear_tg_prelu_param();
  static const int kTgPreluParamFieldNumber = 271;
  inline const ::bmnet::TGPReLUParameter& tg_prelu_param() const;
  inline ::bmnet::TGPReLUParameter* mutable_tg_prelu_param();
  inline ::bmnet::TGPReLUParameter* release_tg_prelu_param();
  inline void set_allocated_tg_prelu_param(::bmnet::TGPReLUParameter* tg_prelu_param);

  // optional .bmnet.TGUpsampleParameter tg_upsample_param = 272;
  inline bool has_tg_upsample_param() const;
  inline void clear_tg_upsample_param();
  static const int kTgUpsampleParamFieldNumber = 272;
  inline const ::bmnet::TGUpsampleParameter& tg_upsample_param() const;
  inline ::bmnet::TGUpsampleParameter* mutable_tg_upsample_param();
  inline ::bmnet::TGUpsampleParameter* release_tg_upsample_param();
  inline void set_allocated_tg_upsample_param(::bmnet::TGUpsampleParameter* tg_upsample_param);

  // optional .bmnet.TGReorgParameter tg_reorg_param = 273;
  inline bool has_tg_reorg_param() const;
  inline void clear_tg_reorg_param();
  static const int kTgReorgParamFieldNumber = 273;
  inline const ::bmnet::TGReorgParameter& tg_reorg_param() const;
  inline ::bmnet::TGReorgParameter* mutable_tg_reorg_param();
  inline ::bmnet::TGReorgParameter* release_tg_reorg_param();
  inline void set_allocated_tg_reorg_param(::bmnet::TGReorgParameter* tg_reorg_param);

  // optional .bmnet.TGConcatParameter tg_concat_param = 274;
  inline bool has_tg_concat_param() const;
  inline void clear_tg_concat_param();
  static const int kTgConcatParamFieldNumber = 274;
  inline const ::bmnet::TGConcatParameter& tg_concat_param() const;
  inline ::bmnet::TGConcatParameter* mutable_tg_concat_param();
  inline ::bmnet::TGConcatParameter* release_tg_concat_param();
  inline void set_allocated_tg_concat_param(::bmnet::TGConcatParameter* tg_concat_param);

  // optional .bmnet.TGPermuteParameter tg_permute_param = 275;
  inline bool has_tg_permute_param() const;
  inline void clear_tg_permute_param();
  static const int kTgPermuteParamFieldNumber = 275;
  inline const ::bmnet::TGPermuteParameter& tg_permute_param() const;
  inline ::bmnet::TGPermuteParameter* mutable_tg_permute_param();
  inline ::bmnet::TGPermuteParameter* release_tg_permute_param();
  inline void set_allocated_tg_permute_param(::bmnet::TGPermuteParameter* tg_permute_param);

  // optional .bmnet.TGNormalizeParameter tg_norm_param = 276;
  inline bool has_tg_norm_param() const;
  inline void clear_tg_norm_param();
  static const int kTgNormParamFieldNumber = 276;
  inline const ::bmnet::TGNormalizeParameter& tg_norm_param() const;
  inline ::bmnet::TGNormalizeParameter* mutable_tg_norm_param();
  inline ::bmnet::TGNormalizeParameter* release_tg_norm_param();
  inline void set_allocated_tg_norm_param(::bmnet::TGNormalizeParameter* tg_norm_param);

  // optional .bmnet.TGPriorBoxParameter tg_prior_box_param = 277;
  inline bool has_tg_prior_box_param() const;
  inline void clear_tg_prior_box_param();
  static const int kTgPriorBoxParamFieldNumber = 277;
  inline const ::bmnet::TGPriorBoxParameter& tg_prior_box_param() const;
  inline ::bmnet::TGPriorBoxParameter* mutable_tg_prior_box_param();
  inline ::bmnet::TGPriorBoxParameter* release_tg_prior_box_param();
  inline void set_allocated_tg_prior_box_param(::bmnet::TGPriorBoxParameter* tg_prior_box_param);

  // optional .bmnet.TGCropParameter tg_crop_param = 278;
  inline bool has_tg_crop_param() const;
  inline void clear_tg_crop_param();
  static const int kTgCropParamFieldNumber = 278;
  inline const ::bmnet::TGCropParameter& tg_crop_param() const;
  inline ::bmnet::TGCropParameter* mutable_tg_crop_param();
  inline ::bmnet::TGCropParameter* release_tg_crop_param();
  inline void set_allocated_tg_crop_param(::bmnet::TGCropParameter* tg_crop_param);

  // optional .bmnet.TGReductionParameter tg_reduction_param = 279;
  inline bool has_tg_reduction_param() const;
  inline void clear_tg_reduction_param();
  static const int kTgReductionParamFieldNumber = 279;
  inline const ::bmnet::TGReductionParameter& tg_reduction_param() const;
  inline ::bmnet::TGReductionParameter* mutable_tg_reduction_param();
  inline ::bmnet::TGReductionParameter* release_tg_reduction_param();
  inline void set_allocated_tg_reduction_param(::bmnet::TGReductionParameter* tg_reduction_param);

  // optional .bmnet.TGShuffleChannelParameter tg_shuffle_channel_param = 280;
  inline bool has_tg_shuffle_channel_param() const;
  inline void clear_tg_shuffle_channel_param();
  static const int kTgShuffleChannelParamFieldNumber = 280;
  inline const ::bmnet::TGShuffleChannelParameter& tg_shuffle_channel_param() const;
  inline ::bmnet::TGShuffleChannelParameter* mutable_tg_shuffle_channel_param();
  inline ::bmnet::TGShuffleChannelParameter* release_tg_shuffle_channel_param();
  inline void set_allocated_tg_shuffle_channel_param(::bmnet::TGShuffleChannelParameter* tg_shuffle_channel_param);

  // optional .bmnet.TGSliceParameter tg_slice_param = 281;
  inline bool has_tg_slice_param() const;
  inline void clear_tg_slice_param();
  static const int kTgSliceParamFieldNumber = 281;
  inline const ::bmnet::TGSliceParameter& tg_slice_param() const;
  inline ::bmnet::TGSliceParameter* mutable_tg_slice_param();
  inline ::bmnet::TGSliceParameter* release_tg_slice_param();
  inline void set_allocated_tg_slice_param(::bmnet::TGSliceParameter* tg_slice_param);

  // optional .bmnet.TGArithmeticParameter tg_arithmetic_param = 282;
  inline bool has_tg_arithmetic_param() const;
  inline void clear_tg_arithmetic_param();
  static const int kTgArithmeticParamFieldNumber = 282;
  inline const ::bmnet::TGArithmeticParameter& tg_arithmetic_param() const;
  inline ::bmnet::TGArithmeticParameter* mutable_tg_arithmetic_param();
  inline ::bmnet::TGArithmeticParameter* release_tg_arithmetic_param();
  inline void set_allocated_tg_arithmetic_param(::bmnet::TGArithmeticParameter* tg_arithmetic_param);

  // optional .bmnet.TGResizeBilinearParameter tg_resizebilinear_param = 283;
  inline bool has_tg_resizebilinear_param() const;
  inline void clear_tg_resizebilinear_param();
  static const int kTgResizebilinearParamFieldNumber = 283;
  inline const ::bmnet::TGResizeBilinearParameter& tg_resizebilinear_param() const;
  inline ::bmnet::TGResizeBilinearParameter* mutable_tg_resizebilinear_param();
  inline ::bmnet::TGResizeBilinearParameter* release_tg_resizebilinear_param();
  inline void set_allocated_tg_resizebilinear_param(::bmnet::TGResizeBilinearParameter* tg_resizebilinear_param);

  // optional .bmnet.TGInterpParameter tg_interp_param = 286;
  inline bool has_tg_interp_param() const;
  inline void clear_tg_interp_param();
  static const int kTgInterpParamFieldNumber = 286;
  inline const ::bmnet::TGInterpParameter& tg_interp_param() const;
  inline ::bmnet::TGInterpParameter* mutable_tg_interp_param();
  inline ::bmnet::TGInterpParameter* release_tg_interp_param();
  inline void set_allocated_tg_interp_param(::bmnet::TGInterpParameter* tg_interp_param);

  // optional .bmnet.TGProposalParameter tg_proposal_param = 287;
  inline bool has_tg_proposal_param() const;
  inline void clear_tg_proposal_param();
  static const int kTgProposalParamFieldNumber = 287;
  inline const ::bmnet::TGProposalParameter& tg_proposal_param() const;
  inline ::bmnet::TGProposalParameter* mutable_tg_proposal_param();
  inline ::bmnet::TGProposalParameter* release_tg_proposal_param();
  inline void set_allocated_tg_proposal_param(::bmnet::TGProposalParameter* tg_proposal_param);

  // optional .bmnet.TGRoiPoolingParameter tg_roi_pooling_param = 288;
  inline bool has_tg_roi_pooling_param() const;
  inline void clear_tg_roi_pooling_param();
  static const int kTgRoiPoolingParamFieldNumber = 288;
  inline const ::bmnet::TGRoiPoolingParameter& tg_roi_pooling_param() const;
  inline ::bmnet::TGRoiPoolingParameter* mutable_tg_roi_pooling_param();
  inline ::bmnet::TGRoiPoolingParameter* release_tg_roi_pooling_param();
  inline void set_allocated_tg_roi_pooling_param(::bmnet::TGRoiPoolingParameter* tg_roi_pooling_param);

  // optional .bmnet.TGYoloParameter tg_yolo_param = 289;
  inline bool has_tg_yolo_param() const;
  inline void clear_tg_yolo_param();
  static const int kTgYoloParamFieldNumber = 289;
  inline const ::bmnet::TGYoloParameter& tg_yolo_param() const;
  inline ::bmnet::TGYoloParameter* mutable_tg_yolo_param();
  inline ::bmnet::TGYoloParameter* release_tg_yolo_param();
  inline void set_allocated_tg_yolo_param(::bmnet::TGYoloParameter* tg_yolo_param);

  // optional .bmnet.TGPSRoiPoolingParameter tg_psroi_pooling_param = 290;
  inline bool has_tg_psroi_pooling_param() const;
  inline void clear_tg_psroi_pooling_param();
  static const int kTgPsroiPoolingParamFieldNumber = 290;
  inline const ::bmnet::TGPSRoiPoolingParameter& tg_psroi_pooling_param() const;
  inline ::bmnet::TGPSRoiPoolingParameter* mutable_tg_psroi_pooling_param();
  inline ::bmnet::TGPSRoiPoolingParameter* release_tg_psroi_pooling_param();
  inline void set_allocated_tg_psroi_pooling_param(::bmnet::TGPSRoiPoolingParameter* tg_psroi_pooling_param);

  // optional .bmnet.TGTileParameter tg_tile_param = 291;
  inline bool has_tg_tile_param() const;
  inline void clear_tg_tile_param();
  static const int kTgTileParamFieldNumber = 291;
  inline const ::bmnet::TGTileParameter& tg_tile_param() const;
  inline ::bmnet::TGTileParameter* mutable_tg_tile_param();
  inline ::bmnet::TGTileParameter* release_tg_tile_param();
  inline void set_allocated_tg_tile_param(::bmnet::TGTileParameter* tg_tile_param);

  // optional .bmnet.TGCustomizedParameter tg_customized_param = 350;
  inline bool has_tg_customized_param() const;
  inline void clear_tg_customized_param();
  static const int kTgCustomizedParamFieldNumber = 350;
  inline const ::bmnet::TGCustomizedParameter& tg_customized_param() const;
  inline ::bmnet::TGCustomizedParameter* mutable_tg_customized_param();
  inline ::bmnet::TGCustomizedParameter* release_tg_customized_param();
  inline void set_allocated_tg_customized_param(::bmnet::TGCustomizedParameter* tg_customized_param);

  // optional .bmnet.TGDetectOutputParameter tg_detectoutput_param = 361;
  inline bool has_tg_detectoutput_param() const;
  inline void clear_tg_detectoutput_param();
  static const int kTgDetectoutputParamFieldNumber = 361;
  inline const ::bmnet::TGDetectOutputParameter& tg_detectoutput_param() const;
  inline ::bmnet::TGDetectOutputParameter* mutable_tg_detectoutput_param();
  inline ::bmnet::TGDetectOutputParameter* release_tg_detectoutput_param();
  inline void set_allocated_tg_detectoutput_param(::bmnet::TGDetectOutputParameter* tg_detectoutput_param);

  // optional .bmnet.TGRegionParameter tg_region_param = 362;
  inline bool has_tg_region_param() const;
  inline void clear_tg_region_param();
  static const int kTgRegionParamFieldNumber = 362;
  inline const ::bmnet::TGRegionParameter& tg_region_param() const;
  inline ::bmnet::TGRegionParameter* mutable_tg_region_param();
  inline ::bmnet::TGRegionParameter* release_tg_region_param();
  inline void set_allocated_tg_region_param(::bmnet::TGRegionParameter* tg_region_param);

  // optional .bmnet.TGClipParameter tg_clip_param = 363;
  inline bool has_tg_clip_param() const;
  inline void clear_tg_clip_param();
  static const int kTgClipParamFieldNumber = 363;
  inline const ::bmnet::TGClipParameter& tg_clip_param() const;
  inline ::bmnet::TGClipParameter* mutable_tg_clip_param();
  inline ::bmnet::TGClipParameter* release_tg_clip_param();
  inline void set_allocated_tg_clip_param(::bmnet::TGClipParameter* tg_clip_param);

  // optional .bmnet.TGYoloPostParameter tg_yolopost_param = 292;
  inline bool has_tg_yolopost_param() const;
  inline void clear_tg_yolopost_param();
  static const int kTgYolopostParamFieldNumber = 292;
  inline const ::bmnet::TGYoloPostParameter& tg_yolopost_param() const;
  inline ::bmnet::TGYoloPostParameter* mutable_tg_yolopost_param();
  inline ::bmnet::TGYoloPostParameter* release_tg_yolopost_param();
  inline void set_allocated_tg_yolopost_param(::bmnet::TGYoloPostParameter* tg_yolopost_param);

  // optional .bmnet.TGReverseParameter tg_reverse_param = 293;
  inline bool has_tg_reverse_param() const;
  inline void clear_tg_reverse_param();
  static const int kTgReverseParamFieldNumber = 293;
  inline const ::bmnet::TGReverseParameter& tg_reverse_param() const;
  inline ::bmnet::TGReverseParameter* mutable_tg_reverse_param();
  inline ::bmnet::TGReverseParameter* release_tg_reverse_param();
  inline void set_allocated_tg_reverse_param(::bmnet::TGReverseParameter* tg_reverse_param);

  // optional .bmnet.TGLstmUnitParameter tg_lstm_unit_param = 294;
  inline bool has_tg_lstm_unit_param() const;
  inline void clear_tg_lstm_unit_param();
  static const int kTgLstmUnitParamFieldNumber = 294;
  inline const ::bmnet::TGLstmUnitParameter& tg_lstm_unit_param() const;
  inline ::bmnet::TGLstmUnitParameter* mutable_tg_lstm_unit_param();
  inline ::bmnet::TGLstmUnitParameter* release_tg_lstm_unit_param();
  inline void set_allocated_tg_lstm_unit_param(::bmnet::TGLstmUnitParameter* tg_lstm_unit_param);

  // @@protoc_insertion_point(class_scope:bmnet.LayerParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_in_place();
  inline void clear_has_in_place();
  inline void set_has_cpu_op();
  inline void clear_has_cpu_op();
  inline void set_has_calib_id();
  inline void clear_has_calib_id();
  inline void set_has_start_param();
  inline void clear_has_start_param();
  inline void set_has_end_param();
  inline void clear_has_end_param();
  inline void set_has_tl_convolution_param();
  inline void clear_has_tl_convolution_param();
  inline void set_has_tl_pooling_param();
  inline void clear_has_tl_pooling_param();
  inline void set_has_tl_inner_product_param();
  inline void clear_has_tl_inner_product_param();
  inline void set_has_tl_activation_param();
  inline void clear_has_tl_activation_param();
  inline void set_has_tl_upsample_param();
  inline void clear_has_tl_upsample_param();
  inline void set_has_tl_lrn_param();
  inline void clear_has_tl_lrn_param();
  inline void set_has_tl_scale_param();
  inline void clear_has_tl_scale_param();
  inline void set_has_tl_eltwise_param();
  inline void clear_has_tl_eltwise_param();
  inline void set_has_tl_batchnorm_param();
  inline void clear_has_tl_batchnorm_param();
  inline void set_has_tl_dummy_param();
  inline void clear_has_tl_dummy_param();
  inline void set_has_tl_group_param();
  inline void clear_has_tl_group_param();
  inline void set_has_tl_shuffle_channel_param();
  inline void clear_has_tl_shuffle_channel_param();
  inline void set_has_tl_arithmetic_param();
  inline void clear_has_tl_arithmetic_param();
  inline void set_has_tl_resizebilinear_param();
  inline void clear_has_tl_resizebilinear_param();
  inline void set_has_tg_convolution_param();
  inline void clear_has_tg_convolution_param();
  inline void set_has_tg_pooling_param();
  inline void clear_has_tg_pooling_param();
  inline void set_has_tg_inner_product_param();
  inline void clear_has_tg_inner_product_param();
  inline void set_has_tg_activation_param();
  inline void clear_has_tg_activation_param();
  inline void set_has_tg_batchnorm_param();
  inline void clear_has_tg_batchnorm_param();
  inline void set_has_tg_softmax_param();
  inline void clear_has_tg_softmax_param();
  inline void set_has_tg_dropout_param();
  inline void clear_has_tg_dropout_param();
  inline void set_has_tg_eltwise_param();
  inline void clear_has_tg_eltwise_param();
  inline void set_has_tg_lrn_param();
  inline void clear_has_tg_lrn_param();
  inline void set_has_tg_power_param();
  inline void clear_has_tg_power_param();
  inline void set_has_tg_scale_param();
  inline void clear_has_tg_scale_param();
  inline void set_has_tg_prelu_param();
  inline void clear_has_tg_prelu_param();
  inline void set_has_tg_upsample_param();
  inline void clear_has_tg_upsample_param();
  inline void set_has_tg_reorg_param();
  inline void clear_has_tg_reorg_param();
  inline void set_has_tg_concat_param();
  inline void clear_has_tg_concat_param();
  inline void set_has_tg_permute_param();
  inline void clear_has_tg_permute_param();
  inline void set_has_tg_norm_param();
  inline void clear_has_tg_norm_param();
  inline void set_has_tg_prior_box_param();
  inline void clear_has_tg_prior_box_param();
  inline void set_has_tg_crop_param();
  inline void clear_has_tg_crop_param();
  inline void set_has_tg_reduction_param();
  inline void clear_has_tg_reduction_param();
  inline void set_has_tg_shuffle_channel_param();
  inline void clear_has_tg_shuffle_channel_param();
  inline void set_has_tg_slice_param();
  inline void clear_has_tg_slice_param();
  inline void set_has_tg_arithmetic_param();
  inline void clear_has_tg_arithmetic_param();
  inline void set_has_tg_resizebilinear_param();
  inline void clear_has_tg_resizebilinear_param();
  inline void set_has_tg_interp_param();
  inline void clear_has_tg_interp_param();
  inline void set_has_tg_proposal_param();
  inline void clear_has_tg_proposal_param();
  inline void set_has_tg_roi_pooling_param();
  inline void clear_has_tg_roi_pooling_param();
  inline void set_has_tg_yolo_param();
  inline void clear_has_tg_yolo_param();
  inline void set_has_tg_psroi_pooling_param();
  inline void clear_has_tg_psroi_pooling_param();
  inline void set_has_tg_tile_param();
  inline void clear_has_tg_tile_param();
  inline void set_has_tg_customized_param();
  inline void clear_has_tg_customized_param();
  inline void set_has_tg_detectoutput_param();
  inline void clear_has_tg_detectoutput_param();
  inline void set_has_tg_region_param();
  inline void clear_has_tg_region_param();
  inline void set_has_tg_clip_param();
  inline void clear_has_tg_clip_param();
  inline void set_has_tg_yolopost_param();
  inline void clear_has_tg_yolopost_param();
  inline void set_has_tg_reverse_param();
  inline void clear_has_tg_reverse_param();
  inline void set_has_tg_lstm_unit_param();
  inline void clear_has_tg_lstm_unit_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedField< float > threshold_x_;
  ::google::protobuf::RepeatedField< float > threshold_y_;
  ::std::string* calib_id_;
  ::google::protobuf::RepeatedPtrField< ::bmnet::BlobShape > input_shape_;
  ::google::protobuf::RepeatedPtrField< ::bmnet::BlobShape > output_shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > global_input_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > global_output_;
  ::bmnet::StartParameter* start_param_;
  ::bmnet::EndParameter* end_param_;
  ::bmnet::TLConvolutionParameter* tl_convolution_param_;
  ::bmnet::TLPoolingParameter* tl_pooling_param_;
  ::bmnet::TLInnerProductParameter* tl_inner_product_param_;
  ::bmnet::TLActivationParameter* tl_activation_param_;
  ::bmnet::TLUpsampleParameter* tl_upsample_param_;
  ::bmnet::TLLrnParameter* tl_lrn_param_;
  ::bmnet::TLScaleParameter* tl_scale_param_;
  ::bmnet::TLEltwiseParameter* tl_eltwise_param_;
  ::bmnet::TLBatchNormParameter* tl_batchnorm_param_;
  ::google::protobuf::RepeatedPtrField< ::bmnet::TLTransportParameter > tl_transport_param_;
  ::bmnet::TLDummyParameter* tl_dummy_param_;
  ::bmnet::TLGroupParameter* tl_group_param_;
  ::bmnet::TLShuffleChannelParameter* tl_shuffle_channel_param_;
  ::bmnet::TLArithmeticParameter* tl_arithmetic_param_;
  ::bmnet::TLResizeBilinearParameter* tl_resizebilinear_param_;
  ::bmnet::TGConvolutionParameter* tg_convolution_param_;
  ::bmnet::TGPoolingParameter* tg_pooling_param_;
  ::bmnet::TGInnerProductParameter* tg_inner_product_param_;
  ::bmnet::TGActivationParameter* tg_activation_param_;
  ::bmnet::TGBatchNormParameter* tg_batchnorm_param_;
  ::bmnet::TGSoftmaxParameter* tg_softmax_param_;
  ::bmnet::TGDropoutParameter* tg_dropout_param_;
  ::bmnet::TGEltwiseParameter* tg_eltwise_param_;
  ::bmnet::TGLRNParameter* tg_lrn_param_;
  ::bmnet::TGPowerParameter* tg_power_param_;
  ::bmnet::TGScaleParameter* tg_scale_param_;
  ::bmnet::TGPReLUParameter* tg_prelu_param_;
  ::bmnet::TGUpsampleParameter* tg_upsample_param_;
  ::bmnet::TGReorgParameter* tg_reorg_param_;
  ::bmnet::TGConcatParameter* tg_concat_param_;
  ::bmnet::TGPermuteParameter* tg_permute_param_;
  ::bmnet::TGNormalizeParameter* tg_norm_param_;
  ::bmnet::TGPriorBoxParameter* tg_prior_box_param_;
  ::bmnet::TGCropParameter* tg_crop_param_;
  ::bmnet::TGReductionParameter* tg_reduction_param_;
  ::bmnet::TGShuffleChannelParameter* tg_shuffle_channel_param_;
  ::bmnet::TGSliceParameter* tg_slice_param_;
  ::bmnet::TGArithmeticParameter* tg_arithmetic_param_;
  ::bmnet::TGResizeBilinearParameter* tg_resizebilinear_param_;
  ::bmnet::TGInterpParameter* tg_interp_param_;
  ::bmnet::TGProposalParameter* tg_proposal_param_;
  ::bmnet::TGRoiPoolingParameter* tg_roi_pooling_param_;
  ::bmnet::TGYoloParameter* tg_yolo_param_;
  ::bmnet::TGPSRoiPoolingParameter* tg_psroi_pooling_param_;
  ::bmnet::TGTileParameter* tg_tile_param_;
  ::bmnet::TGCustomizedParameter* tg_customized_param_;
  ::bmnet::TGDetectOutputParameter* tg_detectoutput_param_;
  ::bmnet::TGRegionParameter* tg_region_param_;
  ::bmnet::TGClipParameter* tg_clip_param_;
  ::bmnet::TGYoloPostParameter* tg_yolopost_param_;
  ::bmnet::TGReverseParameter* tg_reverse_param_;
  ::bmnet::TGLstmUnitParameter* tg_lstm_unit_param_;
  bool in_place_;
  bool cpu_op_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class StartParameter : public ::google::protobuf::Message {
 public:
  StartParameter();
  virtual ~StartParameter();

  StartParameter(const StartParameter& from);

  inline StartParameter& operator=(const StartParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartParameter& default_instance();

  void Swap(StartParameter* other);

  // implements Message ----------------------------------------------

  StartParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartParameter& from);
  void MergeFrom(const StartParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint64 input_offset = 1 [default = 0];
  inline bool has_input_offset() const;
  inline void clear_input_offset();
  static const int kInputOffsetFieldNumber = 1;
  inline ::google::protobuf::uint64 input_offset() const;
  inline void set_input_offset(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:bmnet.StartParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_input_offset();
  inline void clear_has_input_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint64 input_offset_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static StartParameter* default_instance_;
};
// -------------------------------------------------------------------

class EndParameter : public ::google::protobuf::Message {
 public:
  EndParameter();
  virtual ~EndParameter();

  EndParameter(const EndParameter& from);

  inline EndParameter& operator=(const EndParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EndParameter& default_instance();

  void Swap(EndParameter* other);

  // implements Message ----------------------------------------------

  EndParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EndParameter& from);
  void MergeFrom(const EndParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint64 output_offset = 1 [default = 281474976710655];
  inline bool has_output_offset() const;
  inline void clear_output_offset();
  static const int kOutputOffsetFieldNumber = 1;
  inline ::google::protobuf::uint64 output_offset() const;
  inline void set_output_offset(::google::protobuf::uint64 value);

  // optional uint64 output_size = 2 [default = 0];
  inline bool has_output_size() const;
  inline void clear_output_size();
  static const int kOutputSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 output_size() const;
  inline void set_output_size(::google::protobuf::uint64 value);

  // optional uint64 total_neuron_size = 3 [default = 0];
  inline bool has_total_neuron_size() const;
  inline void clear_total_neuron_size();
  static const int kTotalNeuronSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 total_neuron_size() const;
  inline void set_total_neuron_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:bmnet.EndParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_output_offset();
  inline void clear_has_output_offset();
  inline void set_has_output_size();
  inline void clear_has_output_size();
  inline void set_has_total_neuron_size();
  inline void clear_has_total_neuron_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint64 output_offset_;
  ::google::protobuf::uint64 output_size_;
  ::google::protobuf::uint64 total_neuron_size_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static EndParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLGroupParameter : public ::google::protobuf::Message {
 public:
  TLGroupParameter();
  virtual ~TLGroupParameter();

  TLGroupParameter(const TLGroupParameter& from);

  inline TLGroupParameter& operator=(const TLGroupParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLGroupParameter& default_instance();

  void Swap(TLGroupParameter* other);

  // implements Message ----------------------------------------------

  TLGroupParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLGroupParameter& from);
  void MergeFrom(const TLGroupParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // repeated string from_layer = 1;
  inline int from_layer_size() const;
  inline void clear_from_layer();
  static const int kFromLayerFieldNumber = 1;
  inline const ::std::string& from_layer(int index) const;
  inline ::std::string* mutable_from_layer(int index);
  inline void set_from_layer(int index, const ::std::string& value);
  inline void set_from_layer(int index, const char* value);
  inline void set_from_layer(int index, const char* value, size_t size);
  inline ::std::string* add_from_layer();
  inline void add_from_layer(const ::std::string& value);
  inline void add_from_layer(const char* value);
  inline void add_from_layer(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& from_layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_from_layer();

  // @@protoc_insertion_point(class_scope:bmnet.TLGroupParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::RepeatedPtrField< ::std::string> from_layer_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLGroupParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLInnerProductParameter : public ::google::protobuf::Message {
 public:
  TLInnerProductParameter();
  virtual ~TLInnerProductParameter();

  TLInnerProductParameter(const TLInnerProductParameter& from);

  inline TLInnerProductParameter& operator=(const TLInnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLInnerProductParameter& default_instance();

  void Swap(TLInnerProductParameter* other);

  // implements Message ----------------------------------------------

  TLInnerProductParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLInnerProductParameter& from);
  void MergeFrom(const TLInnerProductParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 input = 3 [default = 4294967295];
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline ::google::protobuf::uint32 input() const;
  inline void set_input(::google::protobuf::uint32 value);

  // optional uint32 output = 4 [default = 4294967295];
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 4;
  inline ::google::protobuf::uint32 output() const;
  inline void set_output(::google::protobuf::uint32 value);

  // optional uint32 weight = 5 [default = 4294967295];
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 5;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // optional uint32 bias = 6 [default = 4294967295];
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 6;
  inline ::google::protobuf::uint32 bias() const;
  inline void set_bias(::google::protobuf::uint32 value);

  // optional bool bias_term = 7 [default = false];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 7;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional bool transpose = 8 [default = false];
  inline bool has_transpose() const;
  inline void clear_transpose();
  static const int kTransposeFieldNumber = 8;
  inline bool transpose() const;
  inline void set_transpose(bool value);

  // optional bool result_add = 9 [default = false];
  inline bool has_result_add() const;
  inline void clear_result_add();
  static const int kResultAddFieldNumber = 9;
  inline bool result_add() const;
  inline void set_result_add(bool value);

  // optional bool do_activation = 10 [default = false];
  inline bool has_do_activation() const;
  inline void clear_do_activation();
  static const int kDoActivationFieldNumber = 10;
  inline bool do_activation() const;
  inline void set_do_activation(bool value);

  // optional .bmnet.ActivationMethod activation = 11 [default = RELU];
  inline bool has_activation() const;
  inline void clear_activation();
  static const int kActivationFieldNumber = 11;
  inline ::bmnet::ActivationMethod activation() const;
  inline void set_activation(::bmnet::ActivationMethod value);

  // @@protoc_insertion_point(class_scope:bmnet.TLInnerProductParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_transpose();
  inline void clear_has_transpose();
  inline void set_has_result_add();
  inline void clear_has_result_add();
  inline void set_has_do_activation();
  inline void clear_has_do_activation();
  inline void set_has_activation();
  inline void clear_has_activation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 output_;
  ::google::protobuf::uint32 weight_;
  ::google::protobuf::uint32 bias_;
  bool bias_term_;
  bool transpose_;
  bool result_add_;
  bool do_activation_;
  int activation_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLInnerProductParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLConvolutionParameter : public ::google::protobuf::Message {
 public:
  TLConvolutionParameter();
  virtual ~TLConvolutionParameter();

  TLConvolutionParameter(const TLConvolutionParameter& from);

  inline TLConvolutionParameter& operator=(const TLConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLConvolutionParameter& default_instance();

  void Swap(TLConvolutionParameter* other);

  // implements Message ----------------------------------------------

  TLConvolutionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLConvolutionParameter& from);
  void MergeFrom(const TLConvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 input = 3 [default = 4294967295];
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline ::google::protobuf::uint32 input() const;
  inline void set_input(::google::protobuf::uint32 value);

  // optional uint32 output = 4 [default = 4294967295];
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 4;
  inline ::google::protobuf::uint32 output() const;
  inline void set_output(::google::protobuf::uint32 value);

  // optional uint32 weight = 5 [default = 4294967295];
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 5;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // optional uint32 bias = 6 [default = 4294967295];
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 6;
  inline ::google::protobuf::uint32 bias() const;
  inline void set_bias(::google::protobuf::uint32 value);

  // optional uint32 working = 7 [default = 4294967295];
  inline bool has_working() const;
  inline void clear_working();
  static const int kWorkingFieldNumber = 7;
  inline ::google::protobuf::uint32 working() const;
  inline void set_working(::google::protobuf::uint32 value);

  // optional uint32 group = 8 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 8;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional bool bias_term = 11 [default = false];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 11;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // repeated uint32 kernel_size = 12;
  inline int kernel_size_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 12;
  inline ::google::protobuf::uint32 kernel_size(int index) const;
  inline void set_kernel_size(int index, ::google::protobuf::uint32 value);
  inline void add_kernel_size(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_size();

  // repeated uint32 stride = 13;
  inline int stride_size() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 13;
  inline ::google::protobuf::uint32 stride(int index) const;
  inline void set_stride(int index, ::google::protobuf::uint32 value);
  inline void add_stride(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 dilation = 14;
  inline int dilation_size() const;
  inline void clear_dilation();
  static const int kDilationFieldNumber = 14;
  inline ::google::protobuf::uint32 dilation(int index) const;
  inline void set_dilation(int index, ::google::protobuf::uint32 value);
  inline void add_dilation(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dilation() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dilation();

  // repeated uint32 pad = 15;
  inline int pad_size() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 15;
  inline ::google::protobuf::uint32 pad(int index) const;
  inline void set_pad(int index, ::google::protobuf::uint32 value);
  inline void add_pad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 ins = 16;
  inline int ins_size() const;
  inline void clear_ins();
  static const int kInsFieldNumber = 16;
  inline ::google::protobuf::uint32 ins(int index) const;
  inline void set_ins(int index, ::google::protobuf::uint32 value);
  inline void add_ins(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ins() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ins();

  // optional bool result_add = 17 [default = false];
  inline bool has_result_add() const;
  inline void clear_result_add();
  static const int kResultAddFieldNumber = 17;
  inline bool result_add() const;
  inline void set_result_add(bool value);

  // optional bool if_relu = 18 [default = false];
  inline bool has_if_relu() const;
  inline void clear_if_relu();
  static const int kIfReluFieldNumber = 18;
  inline bool if_relu() const;
  inline void set_if_relu(bool value);

  // optional float relu_slope = 19 [default = 0];
  inline bool has_relu_slope() const;
  inline void clear_relu_slope();
  static const int kReluSlopeFieldNumber = 19;
  inline float relu_slope() const;
  inline void set_relu_slope(float value);

  // optional uint32 global_bn_mean = 20;
  inline bool has_global_bn_mean() const;
  inline void clear_global_bn_mean();
  static const int kGlobalBnMeanFieldNumber = 20;
  inline ::google::protobuf::uint32 global_bn_mean() const;
  inline void set_global_bn_mean(::google::protobuf::uint32 value);

  // optional uint32 global_bn_variance = 21;
  inline bool has_global_bn_variance() const;
  inline void clear_global_bn_variance();
  static const int kGlobalBnVarianceFieldNumber = 21;
  inline ::google::protobuf::uint32 global_bn_variance() const;
  inline void set_global_bn_variance(::google::protobuf::uint32 value);

  // repeated uint32 group_bias = 22;
  inline int group_bias_size() const;
  inline void clear_group_bias();
  static const int kGroupBiasFieldNumber = 22;
  inline ::google::protobuf::uint32 group_bias(int index) const;
  inline void set_group_bias(int index, ::google::protobuf::uint32 value);
  inline void add_group_bias(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      group_bias() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_group_bias();

  // optional bool use_winograd = 23 [default = false];
  inline bool has_use_winograd() const;
  inline void clear_use_winograd();
  static const int kUseWinogradFieldNumber = 23;
  inline bool use_winograd() const;
  inline void set_use_winograd(bool value);

  // repeated uint32 group_weight = 24;
  inline int group_weight_size() const;
  inline void clear_group_weight();
  static const int kGroupWeightFieldNumber = 24;
  inline ::google::protobuf::uint32 group_weight(int index) const;
  inline void set_group_weight(int index, ::google::protobuf::uint32 value);
  inline void add_group_weight(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      group_weight() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_group_weight();

  // optional bool h_slice_skip_first = 25 [default = false];
  inline bool has_h_slice_skip_first() const;
  inline void clear_h_slice_skip_first();
  static const int kHSliceSkipFirstFieldNumber = 25;
  inline bool h_slice_skip_first() const;
  inline void set_h_slice_skip_first(bool value);

  // optional bool h_slice_skip_last = 26 [default = false];
  inline bool has_h_slice_skip_last() const;
  inline void clear_h_slice_skip_last();
  static const int kHSliceSkipLastFieldNumber = 26;
  inline bool h_slice_skip_last() const;
  inline void set_h_slice_skip_last(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.TLConvolutionParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_working();
  inline void clear_has_working();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_result_add();
  inline void clear_has_result_add();
  inline void set_has_if_relu();
  inline void clear_has_if_relu();
  inline void set_has_relu_slope();
  inline void clear_has_relu_slope();
  inline void set_has_global_bn_mean();
  inline void clear_has_global_bn_mean();
  inline void set_has_global_bn_variance();
  inline void clear_has_global_bn_variance();
  inline void set_has_use_winograd();
  inline void clear_has_use_winograd();
  inline void set_has_h_slice_skip_first();
  inline void clear_has_h_slice_skip_first();
  inline void set_has_h_slice_skip_last();
  inline void clear_has_h_slice_skip_last();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 output_;
  ::google::protobuf::uint32 weight_;
  ::google::protobuf::uint32 bias_;
  ::google::protobuf::uint32 working_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dilation_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ins_;
  bool bias_term_;
  bool result_add_;
  bool if_relu_;
  bool use_winograd_;
  float relu_slope_;
  ::google::protobuf::uint32 global_bn_mean_;
  ::google::protobuf::uint32 global_bn_variance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > group_bias_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > group_weight_;
  bool h_slice_skip_first_;
  bool h_slice_skip_last_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLConvolutionParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLShuffleChannelParameter : public ::google::protobuf::Message {
 public:
  TLShuffleChannelParameter();
  virtual ~TLShuffleChannelParameter();

  TLShuffleChannelParameter(const TLShuffleChannelParameter& from);

  inline TLShuffleChannelParameter& operator=(const TLShuffleChannelParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLShuffleChannelParameter& default_instance();

  void Swap(TLShuffleChannelParameter* other);

  // implements Message ----------------------------------------------

  TLShuffleChannelParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLShuffleChannelParameter& from);
  void MergeFrom(const TLShuffleChannelParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 input = 3;
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline ::google::protobuf::uint32 input() const;
  inline void set_input(::google::protobuf::uint32 value);

  // optional uint32 output = 4 [default = 4294967295];
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 4;
  inline ::google::protobuf::uint32 output() const;
  inline void set_output(::google::protobuf::uint32 value);

  // optional uint32 group = 5 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TLShuffleChannelParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_group();
  inline void clear_has_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 output_;
  ::google::protobuf::uint32 group_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLShuffleChannelParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLPoolingParameter : public ::google::protobuf::Message {
 public:
  TLPoolingParameter();
  virtual ~TLPoolingParameter();

  TLPoolingParameter(const TLPoolingParameter& from);

  inline TLPoolingParameter& operator=(const TLPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLPoolingParameter& default_instance();

  void Swap(TLPoolingParameter* other);

  // implements Message ----------------------------------------------

  TLPoolingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLPoolingParameter& from);
  void MergeFrom(const TLPoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 input = 3 [default = 4294967295];
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline ::google::protobuf::uint32 input() const;
  inline void set_input(::google::protobuf::uint32 value);

  // optional uint32 output = 4 [default = 4294967295];
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 4;
  inline ::google::protobuf::uint32 output() const;
  inline void set_output(::google::protobuf::uint32 value);

  // optional uint32 working = 5 [default = 4294967295];
  inline bool has_working() const;
  inline void clear_working();
  static const int kWorkingFieldNumber = 5;
  inline ::google::protobuf::uint32 working() const;
  inline void set_working(::google::protobuf::uint32 value);

  // optional bool avg_pool = 6 [default = true];
  inline bool has_avg_pool() const;
  inline void clear_avg_pool();
  static const int kAvgPoolFieldNumber = 6;
  inline bool avg_pool() const;
  inline void set_avg_pool(bool value);

  // repeated uint32 kernel_size = 7;
  inline int kernel_size_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 7;
  inline ::google::protobuf::uint32 kernel_size(int index) const;
  inline void set_kernel_size(int index, ::google::protobuf::uint32 value);
  inline void add_kernel_size(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_size();

  // repeated uint32 stride = 8;
  inline int stride_size() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 8;
  inline ::google::protobuf::uint32 stride(int index) const;
  inline void set_stride(int index, ::google::protobuf::uint32 value);
  inline void add_stride(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 pad = 9;
  inline int pad_size() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 9;
  inline ::google::protobuf::uint32 pad(int index) const;
  inline void set_pad(int index, ::google::protobuf::uint32 value);
  inline void add_pad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // optional bool if_relu = 10 [default = false];
  inline bool has_if_relu() const;
  inline void clear_if_relu();
  static const int kIfReluFieldNumber = 10;
  inline bool if_relu() const;
  inline void set_if_relu(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.TLPoolingParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_working();
  inline void clear_has_working();
  inline void set_has_avg_pool();
  inline void clear_has_avg_pool();
  inline void set_has_if_relu();
  inline void clear_has_if_relu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 output_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_size_;
  ::google::protobuf::uint32 working_;
  bool avg_pool_;
  bool if_relu_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLPoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLUpsampleParameter : public ::google::protobuf::Message {
 public:
  TLUpsampleParameter();
  virtual ~TLUpsampleParameter();

  TLUpsampleParameter(const TLUpsampleParameter& from);

  inline TLUpsampleParameter& operator=(const TLUpsampleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLUpsampleParameter& default_instance();

  void Swap(TLUpsampleParameter* other);

  // implements Message ----------------------------------------------

  TLUpsampleParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLUpsampleParameter& from);
  void MergeFrom(const TLUpsampleParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 input = 3 [default = 4294967295];
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline ::google::protobuf::uint32 input() const;
  inline void set_input(::google::protobuf::uint32 value);

  // optional uint32 output = 4 [default = 4294967295];
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 4;
  inline ::google::protobuf::uint32 output() const;
  inline void set_output(::google::protobuf::uint32 value);

  // optional uint32 working = 5 [default = 4294967295];
  inline bool has_working() const;
  inline void clear_working();
  static const int kWorkingFieldNumber = 5;
  inline ::google::protobuf::uint32 working() const;
  inline void set_working(::google::protobuf::uint32 value);

  // repeated uint32 size = 6;
  inline int size_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 6;
  inline ::google::protobuf::uint32 size(int index) const;
  inline void set_size(int index, ::google::protobuf::uint32 value);
  inline void add_size(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_size();

  // @@protoc_insertion_point(class_scope:bmnet.TLUpsampleParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_working();
  inline void clear_has_working();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 output_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > size_;
  ::google::protobuf::uint32 working_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLUpsampleParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLLrnParameter : public ::google::protobuf::Message {
 public:
  TLLrnParameter();
  virtual ~TLLrnParameter();

  TLLrnParameter(const TLLrnParameter& from);

  inline TLLrnParameter& operator=(const TLLrnParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLLrnParameter& default_instance();

  void Swap(TLLrnParameter* other);

  // implements Message ----------------------------------------------

  TLLrnParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLLrnParameter& from);
  void MergeFrom(const TLLrnParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TLLrnParameter_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS = TLLrnParameter_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL = TLLrnParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return TLLrnParameter_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    TLLrnParameter_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    TLLrnParameter_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    TLLrnParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return TLLrnParameter_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return TLLrnParameter_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return TLLrnParameter_NormRegion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 input = 3 [default = 4294967295];
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline ::google::protobuf::uint32 input() const;
  inline void set_input(::google::protobuf::uint32 value);

  // optional uint32 output = 4 [default = 4294967295];
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 4;
  inline ::google::protobuf::uint32 output() const;
  inline void set_output(::google::protobuf::uint32 value);

  // optional uint32 working = 5 [default = 4294967295];
  inline bool has_working() const;
  inline void clear_working();
  static const int kWorkingFieldNumber = 5;
  inline ::google::protobuf::uint32 working() const;
  inline void set_working(::google::protobuf::uint32 value);

  // optional uint32 local_size = 8 [default = 5];
  inline bool has_local_size() const;
  inline void clear_local_size();
  static const int kLocalSizeFieldNumber = 8;
  inline ::google::protobuf::uint32 local_size() const;
  inline void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 9 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 9;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 10 [default = 0.75];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 10;
  inline float beta() const;
  inline void set_beta(float value);

  // optional float k = 11 [default = 1];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 11;
  inline float k() const;
  inline void set_k(float value);

  // optional .bmnet.TLLrnParameter.NormRegion norm_region = 12 [default = ACROSS_CHANNELS];
  inline bool has_norm_region() const;
  inline void clear_norm_region();
  static const int kNormRegionFieldNumber = 12;
  inline ::bmnet::TLLrnParameter_NormRegion norm_region() const;
  inline void set_norm_region(::bmnet::TLLrnParameter_NormRegion value);

  // optional uint32 sqr_lut_weight = 13 [default = 4294967295];
  inline bool has_sqr_lut_weight() const;
  inline void clear_sqr_lut_weight();
  static const int kSqrLutWeightFieldNumber = 13;
  inline ::google::protobuf::uint32 sqr_lut_weight() const;
  inline void set_sqr_lut_weight(::google::protobuf::uint32 value);

  // optional uint32 power_lut_weight = 14 [default = 4294967295];
  inline bool has_power_lut_weight() const;
  inline void clear_power_lut_weight();
  static const int kPowerLutWeightFieldNumber = 14;
  inline ::google::protobuf::uint32 power_lut_weight() const;
  inline void set_power_lut_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TLLrnParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_working();
  inline void clear_has_working();
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_norm_region();
  inline void clear_has_norm_region();
  inline void set_has_sqr_lut_weight();
  inline void clear_has_sqr_lut_weight();
  inline void set_has_power_lut_weight();
  inline void clear_has_power_lut_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 output_;
  ::google::protobuf::uint32 working_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  float k_;
  int norm_region_;
  ::google::protobuf::uint32 sqr_lut_weight_;
  ::google::protobuf::uint32 power_lut_weight_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLLrnParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLBatchNormParameter : public ::google::protobuf::Message {
 public:
  TLBatchNormParameter();
  virtual ~TLBatchNormParameter();

  TLBatchNormParameter(const TLBatchNormParameter& from);

  inline TLBatchNormParameter& operator=(const TLBatchNormParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLBatchNormParameter& default_instance();

  void Swap(TLBatchNormParameter* other);

  // implements Message ----------------------------------------------

  TLBatchNormParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLBatchNormParameter& from);
  void MergeFrom(const TLBatchNormParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 input = 3 [default = 4294967295];
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline ::google::protobuf::uint32 input() const;
  inline void set_input(::google::protobuf::uint32 value);

  // optional uint32 mean = 5 [default = 4294967295];
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 5;
  inline ::google::protobuf::uint32 mean() const;
  inline void set_mean(::google::protobuf::uint32 value);

  // optional uint32 variance = 6 [default = 4294967295];
  inline bool has_variance() const;
  inline void clear_variance();
  static const int kVarianceFieldNumber = 6;
  inline ::google::protobuf::uint32 variance() const;
  inline void set_variance(::google::protobuf::uint32 value);

  // optional uint32 output = 8 [default = 4294967295];
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 8;
  inline ::google::protobuf::uint32 output() const;
  inline void set_output(::google::protobuf::uint32 value);

  // optional uint32 working = 9 [default = 4294967295];
  inline bool has_working() const;
  inline void clear_working();
  static const int kWorkingFieldNumber = 9;
  inline ::google::protobuf::uint32 working() const;
  inline void set_working(::google::protobuf::uint32 value);

  // optional uint64 scale_ma = 10 [default = 18446744073709551615];
  inline bool has_scale_ma() const;
  inline void clear_scale_ma();
  static const int kScaleMaFieldNumber = 10;
  inline ::google::protobuf::uint64 scale_ma() const;
  inline void set_scale_ma(::google::protobuf::uint64 value);

  // optional float eps = 11 [default = 1e-05];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 11;
  inline float eps() const;
  inline void set_eps(float value);

  // optional bool if_relu = 12 [default = false];
  inline bool has_if_relu() const;
  inline void clear_if_relu();
  static const int kIfReluFieldNumber = 12;
  inline bool if_relu() const;
  inline void set_if_relu(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.TLBatchNormParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_variance();
  inline void clear_has_variance();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_working();
  inline void clear_has_working();
  inline void set_has_scale_ma();
  inline void clear_has_scale_ma();
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_if_relu();
  inline void clear_has_if_relu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 mean_;
  ::google::protobuf::uint32 variance_;
  ::google::protobuf::uint32 output_;
  ::google::protobuf::uint64 scale_ma_;
  ::google::protobuf::uint32 working_;
  float eps_;
  bool if_relu_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLBatchNormParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLScaleParameter : public ::google::protobuf::Message {
 public:
  TLScaleParameter();
  virtual ~TLScaleParameter();

  TLScaleParameter(const TLScaleParameter& from);

  inline TLScaleParameter& operator=(const TLScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLScaleParameter& default_instance();

  void Swap(TLScaleParameter* other);

  // implements Message ----------------------------------------------

  TLScaleParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLScaleParameter& from);
  void MergeFrom(const TLScaleParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 input = 3;
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline ::google::protobuf::uint32 input() const;
  inline void set_input(::google::protobuf::uint32 value);

  // optional uint32 output = 4 [default = 4294967295];
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 4;
  inline ::google::protobuf::uint32 output() const;
  inline void set_output(::google::protobuf::uint32 value);

  // optional uint32 scale = 5 [default = 4294967295];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 5;
  inline ::google::protobuf::uint32 scale() const;
  inline void set_scale(::google::protobuf::uint32 value);

  // optional uint32 bias = 6 [default = 4294967295];
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 6;
  inline ::google::protobuf::uint32 bias() const;
  inline void set_bias(::google::protobuf::uint32 value);

  // optional uint32 working = 7 [default = 4294967295];
  inline bool has_working() const;
  inline void clear_working();
  static const int kWorkingFieldNumber = 7;
  inline ::google::protobuf::uint32 working() const;
  inline void set_working(::google::protobuf::uint32 value);

  // optional uint32 scale_dim = 8;
  inline bool has_scale_dim() const;
  inline void clear_scale_dim();
  static const int kScaleDimFieldNumber = 8;
  inline ::google::protobuf::uint32 scale_dim() const;
  inline void set_scale_dim(::google::protobuf::uint32 value);

  // optional bool bias_term = 9 [default = false];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 9;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional bool if_relu = 10 [default = false];
  inline bool has_if_relu() const;
  inline void clear_if_relu();
  static const int kIfReluFieldNumber = 10;
  inline bool if_relu() const;
  inline void set_if_relu(bool value);

  // optional float relu_slope = 19 [default = 0];
  inline bool has_relu_slope() const;
  inline void clear_relu_slope();
  static const int kReluSlopeFieldNumber = 19;
  inline float relu_slope() const;
  inline void set_relu_slope(float value);

  // @@protoc_insertion_point(class_scope:bmnet.TLScaleParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_working();
  inline void clear_has_working();
  inline void set_has_scale_dim();
  inline void clear_has_scale_dim();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_if_relu();
  inline void clear_has_if_relu();
  inline void set_has_relu_slope();
  inline void clear_has_relu_slope();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 output_;
  ::google::protobuf::uint32 scale_;
  ::google::protobuf::uint32 bias_;
  ::google::protobuf::uint32 working_;
  ::google::protobuf::uint32 scale_dim_;
  bool bias_term_;
  bool if_relu_;
  float relu_slope_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLScaleParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLEltwiseParameter : public ::google::protobuf::Message {
 public:
  TLEltwiseParameter();
  virtual ~TLEltwiseParameter();

  TLEltwiseParameter(const TLEltwiseParameter& from);

  inline TLEltwiseParameter& operator=(const TLEltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLEltwiseParameter& default_instance();

  void Swap(TLEltwiseParameter* other);

  // implements Message ----------------------------------------------

  TLEltwiseParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLEltwiseParameter& from);
  void MergeFrom(const TLEltwiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // repeated uint32 input = 3;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline ::google::protobuf::uint32 input(int index) const;
  inline void set_input(int index, ::google::protobuf::uint32 value);
  inline void add_input(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      input() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_input();

  // optional uint32 output = 4 [default = 4294967295];
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 4;
  inline ::google::protobuf::uint32 output() const;
  inline void set_output(::google::protobuf::uint32 value);

  // optional uint32 working = 5 [default = 4294967295];
  inline bool has_working() const;
  inline void clear_working();
  static const int kWorkingFieldNumber = 5;
  inline ::google::protobuf::uint32 working() const;
  inline void set_working(::google::protobuf::uint32 value);

  // optional int32 op_code = 7 [default = 1];
  inline bool has_op_code() const;
  inline void clear_op_code();
  static const int kOpCodeFieldNumber = 7;
  inline ::google::protobuf::int32 op_code() const;
  inline void set_op_code(::google::protobuf::int32 value);

  // repeated float coeff = 8;
  inline int coeff_size() const;
  inline void clear_coeff();
  static const int kCoeffFieldNumber = 8;
  inline float coeff(int index) const;
  inline void set_coeff(int index, float value);
  inline void add_coeff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional bool if_relu = 9 [default = false];
  inline bool has_if_relu() const;
  inline void clear_if_relu();
  static const int kIfReluFieldNumber = 9;
  inline bool if_relu() const;
  inline void set_if_relu(bool value);

  // optional float relu_slope = 19 [default = 0];
  inline bool has_relu_slope() const;
  inline void clear_relu_slope();
  static const int kReluSlopeFieldNumber = 19;
  inline float relu_slope() const;
  inline void set_relu_slope(float value);

  // @@protoc_insertion_point(class_scope:bmnet.TLEltwiseParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_working();
  inline void clear_has_working();
  inline void set_has_op_code();
  inline void clear_has_op_code();
  inline void set_has_if_relu();
  inline void clear_has_if_relu();
  inline void set_has_relu_slope();
  inline void clear_has_relu_slope();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > input_;
  ::google::protobuf::uint32 output_;
  ::google::protobuf::uint32 working_;
  ::google::protobuf::RepeatedField< float > coeff_;
  ::google::protobuf::int32 op_code_;
  bool if_relu_;
  float relu_slope_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLEltwiseParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLActivationParameter : public ::google::protobuf::Message {
 public:
  TLActivationParameter();
  virtual ~TLActivationParameter();

  TLActivationParameter(const TLActivationParameter& from);

  inline TLActivationParameter& operator=(const TLActivationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLActivationParameter& default_instance();

  void Swap(TLActivationParameter* other);

  // implements Message ----------------------------------------------

  TLActivationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLActivationParameter& from);
  void MergeFrom(const TLActivationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 input = 3 [default = 4294967295];
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline ::google::protobuf::uint32 input() const;
  inline void set_input(::google::protobuf::uint32 value);

  // optional uint32 output = 4 [default = 4294967295];
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 4;
  inline ::google::protobuf::uint32 output() const;
  inline void set_output(::google::protobuf::uint32 value);

  // optional uint32 weight = 5 [default = 4294967295];
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 5;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // optional .bmnet.ActivationMethod activation = 6 [default = RELU];
  inline bool has_activation() const;
  inline void clear_activation();
  static const int kActivationFieldNumber = 6;
  inline ::bmnet::ActivationMethod activation() const;
  inline void set_activation(::bmnet::ActivationMethod value);

  // repeated float activation_arg = 7;
  inline int activation_arg_size() const;
  inline void clear_activation_arg();
  static const int kActivationArgFieldNumber = 7;
  inline float activation_arg(int index) const;
  inline void set_activation_arg(int index, float value);
  inline void add_activation_arg(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      activation_arg() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_activation_arg();

  // optional uint64 global_slope = 31 [default = 281474976710655];
  inline bool has_global_slope() const;
  inline void clear_global_slope();
  static const int kGlobalSlopeFieldNumber = 31;
  inline ::google::protobuf::uint64 global_slope() const;
  inline void set_global_slope(::google::protobuf::uint64 value);

  // optional bool channel_shared = 32 [default = false];
  inline bool has_channel_shared() const;
  inline void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 32;
  inline bool channel_shared() const;
  inline void set_channel_shared(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.TLActivationParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_activation();
  inline void clear_has_activation();
  inline void set_has_global_slope();
  inline void clear_has_global_slope();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 output_;
  ::google::protobuf::uint32 weight_;
  int activation_;
  ::google::protobuf::RepeatedField< float > activation_arg_;
  ::google::protobuf::uint64 global_slope_;
  bool channel_shared_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLActivationParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLDummyParameter : public ::google::protobuf::Message {
 public:
  TLDummyParameter();
  virtual ~TLDummyParameter();

  TLDummyParameter(const TLDummyParameter& from);

  inline TLDummyParameter& operator=(const TLDummyParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLDummyParameter& default_instance();

  void Swap(TLDummyParameter* other);

  // implements Message ----------------------------------------------

  TLDummyParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLDummyParameter& from);
  void MergeFrom(const TLDummyParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 input = 3 [default = 4294967295];
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline ::google::protobuf::uint32 input() const;
  inline void set_input(::google::protobuf::uint32 value);

  // optional uint32 output = 4 [default = 4294967295];
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 4;
  inline ::google::protobuf::uint32 output() const;
  inline void set_output(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TLDummyParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_output();
  inline void clear_has_output();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 output_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLDummyParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLTransportParameter : public ::google::protobuf::Message {
 public:
  TLTransportParameter();
  virtual ~TLTransportParameter();

  TLTransportParameter(const TLTransportParameter& from);

  inline TLTransportParameter& operator=(const TLTransportParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLTransportParameter& default_instance();

  void Swap(TLTransportParameter* other);

  // implements Message ----------------------------------------------

  TLTransportParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLTransportParameter& from);
  void MergeFrom(const TLTransportParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TLTransportParameter_TransportDataType TransportDataType;
  static const TransportDataType NEURON = TLTransportParameter_TransportDataType_NEURON;
  static const TransportDataType COEFF = TLTransportParameter_TransportDataType_COEFF;
  static const TransportDataType COEFF_INT8 = TLTransportParameter_TransportDataType_COEFF_INT8;
  static const TransportDataType BIAS_INT8 = TLTransportParameter_TransportDataType_BIAS_INT8;
  static inline bool TransportDataType_IsValid(int value) {
    return TLTransportParameter_TransportDataType_IsValid(value);
  }
  static const TransportDataType TransportDataType_MIN =
    TLTransportParameter_TransportDataType_TransportDataType_MIN;
  static const TransportDataType TransportDataType_MAX =
    TLTransportParameter_TransportDataType_TransportDataType_MAX;
  static const int TransportDataType_ARRAYSIZE =
    TLTransportParameter_TransportDataType_TransportDataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TransportDataType_descriptor() {
    return TLTransportParameter_TransportDataType_descriptor();
  }
  static inline const ::std::string& TransportDataType_Name(TransportDataType value) {
    return TLTransportParameter_TransportDataType_Name(value);
  }
  static inline bool TransportDataType_Parse(const ::std::string& name,
      TransportDataType* value) {
    return TLTransportParameter_TransportDataType_Parse(name, value);
  }

  typedef TLTransportParameter_TransportStage TransportStage;
  static const TransportStage PRE = TLTransportParameter_TransportStage_PRE;
  static const TransportStage CUR = TLTransportParameter_TransportStage_CUR;
  static const TransportStage POST = TLTransportParameter_TransportStage_POST;
  static inline bool TransportStage_IsValid(int value) {
    return TLTransportParameter_TransportStage_IsValid(value);
  }
  static const TransportStage TransportStage_MIN =
    TLTransportParameter_TransportStage_TransportStage_MIN;
  static const TransportStage TransportStage_MAX =
    TLTransportParameter_TransportStage_TransportStage_MAX;
  static const int TransportStage_ARRAYSIZE =
    TLTransportParameter_TransportStage_TransportStage_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TransportStage_descriptor() {
    return TLTransportParameter_TransportStage_descriptor();
  }
  static inline const ::std::string& TransportStage_Name(TransportStage value) {
    return TLTransportParameter_TransportStage_Name(value);
  }
  static inline bool TransportStage_Parse(const ::std::string& name,
      TransportStage* value) {
    return TLTransportParameter_TransportStage_Parse(name, value);
  }

  typedef TLTransportParameter_TransportDirection TransportDirection;
  static const TransportDirection S2L = TLTransportParameter_TransportDirection_S2L;
  static const TransportDirection L2S = TLTransportParameter_TransportDirection_L2S;
  static const TransportDirection S2S = TLTransportParameter_TransportDirection_S2S;
  static const TransportDirection L2L = TLTransportParameter_TransportDirection_L2L;
  static const TransportDirection S2TSM = TLTransportParameter_TransportDirection_S2TSM;
  static const TransportDirection L2TSM = TLTransportParameter_TransportDirection_L2TSM;
  static const TransportDirection TSM2S = TLTransportParameter_TransportDirection_TSM2S;
  static const TransportDirection TSM2L = TLTransportParameter_TransportDirection_TSM2L;
  static inline bool TransportDirection_IsValid(int value) {
    return TLTransportParameter_TransportDirection_IsValid(value);
  }
  static const TransportDirection TransportDirection_MIN =
    TLTransportParameter_TransportDirection_TransportDirection_MIN;
  static const TransportDirection TransportDirection_MAX =
    TLTransportParameter_TransportDirection_TransportDirection_MAX;
  static const int TransportDirection_ARRAYSIZE =
    TLTransportParameter_TransportDirection_TransportDirection_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TransportDirection_descriptor() {
    return TLTransportParameter_TransportDirection_descriptor();
  }
  static inline const ::std::string& TransportDirection_Name(TransportDirection value) {
    return TLTransportParameter_TransportDirection_Name(value);
  }
  static inline bool TransportDirection_Parse(const ::std::string& name,
      TransportDirection* value) {
    return TLTransportParameter_TransportDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .bmnet.BlobShape global_shape = 2;
  inline bool has_global_shape() const;
  inline void clear_global_shape();
  static const int kGlobalShapeFieldNumber = 2;
  inline const ::bmnet::BlobShape& global_shape() const;
  inline ::bmnet::BlobShape* mutable_global_shape();
  inline ::bmnet::BlobShape* release_global_shape();
  inline void set_allocated_global_shape(::bmnet::BlobShape* global_shape);

  // optional .bmnet.BlobShape local_shape = 3;
  inline bool has_local_shape() const;
  inline void clear_local_shape();
  static const int kLocalShapeFieldNumber = 3;
  inline const ::bmnet::BlobShape& local_shape() const;
  inline ::bmnet::BlobShape* mutable_local_shape();
  inline ::bmnet::BlobShape* release_local_shape();
  inline void set_allocated_local_shape(::bmnet::BlobShape* local_shape);

  // optional uint64 global_offset = 4 [default = 281474976710655];
  inline bool has_global_offset() const;
  inline void clear_global_offset();
  static const int kGlobalOffsetFieldNumber = 4;
  inline ::google::protobuf::uint64 global_offset() const;
  inline void set_global_offset(::google::protobuf::uint64 value);

  // optional uint32 local_address = 5 [default = 4294967295];
  inline bool has_local_address() const;
  inline void clear_local_address();
  static const int kLocalAddressFieldNumber = 5;
  inline ::google::protobuf::uint32 local_address() const;
  inline void set_local_address(::google::protobuf::uint32 value);

  // optional int32 direction = 6 [default = 0];
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 6;
  inline ::google::protobuf::int32 direction() const;
  inline void set_direction(::google::protobuf::int32 value);

  // optional bool transpose = 7 [default = false];
  inline bool has_transpose() const;
  inline void clear_transpose();
  static const int kTransposeFieldNumber = 7;
  inline bool transpose() const;
  inline void set_transpose(bool value);

  // optional bool aligned = 8 [default = true];
  inline bool has_aligned() const;
  inline void clear_aligned();
  static const int kAlignedFieldNumber = 8;
  inline bool aligned() const;
  inline void set_aligned(bool value);

  // optional .bmnet.TLTransportParameter.TransportStage stage = 9 [default = CUR];
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 9;
  inline ::bmnet::TLTransportParameter_TransportStage stage() const;
  inline void set_stage(::bmnet::TLTransportParameter_TransportStage value);

  // optional .bmnet.TLTransportParameter.TransportDataType data_type = 10 [default = NEURON];
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 10;
  inline ::bmnet::TLTransportParameter_TransportDataType data_type() const;
  inline void set_data_type(::bmnet::TLTransportParameter_TransportDataType value);

  // optional uint64 src_addr = 11 [default = 281474976710655];
  inline bool has_src_addr() const;
  inline void clear_src_addr();
  static const int kSrcAddrFieldNumber = 11;
  inline ::google::protobuf::uint64 src_addr() const;
  inline void set_src_addr(::google::protobuf::uint64 value);

  // optional uint64 dst_addr = 12 [default = 281474976710655];
  inline bool has_dst_addr() const;
  inline void clear_dst_addr();
  static const int kDstAddrFieldNumber = 12;
  inline ::google::protobuf::uint64 dst_addr() const;
  inline void set_dst_addr(::google::protobuf::uint64 value);

  // optional .bmnet.BlobShape src_shape = 13;
  inline bool has_src_shape() const;
  inline void clear_src_shape();
  static const int kSrcShapeFieldNumber = 13;
  inline const ::bmnet::BlobShape& src_shape() const;
  inline ::bmnet::BlobShape* mutable_src_shape();
  inline ::bmnet::BlobShape* release_src_shape();
  inline void set_allocated_src_shape(::bmnet::BlobShape* src_shape);

  // optional .bmnet.BlobShape dst_shape = 14;
  inline bool has_dst_shape() const;
  inline void clear_dst_shape();
  static const int kDstShapeFieldNumber = 14;
  inline const ::bmnet::BlobShape& dst_shape() const;
  inline ::bmnet::BlobShape* mutable_dst_shape();
  inline ::bmnet::BlobShape* release_dst_shape();
  inline void set_allocated_dst_shape(::bmnet::BlobShape* dst_shape);

  // optional string parent_name = 15;
  inline bool has_parent_name() const;
  inline void clear_parent_name();
  static const int kParentNameFieldNumber = 15;
  inline const ::std::string& parent_name() const;
  inline void set_parent_name(const ::std::string& value);
  inline void set_parent_name(const char* value);
  inline void set_parent_name(const char* value, size_t size);
  inline ::std::string* mutable_parent_name();
  inline ::std::string* release_parent_name();
  inline void set_allocated_parent_name(::std::string* parent_name);

  // @@protoc_insertion_point(class_scope:bmnet.TLTransportParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_global_shape();
  inline void clear_has_global_shape();
  inline void set_has_local_shape();
  inline void clear_has_local_shape();
  inline void set_has_global_offset();
  inline void clear_has_global_offset();
  inline void set_has_local_address();
  inline void clear_has_local_address();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_transpose();
  inline void clear_has_transpose();
  inline void set_has_aligned();
  inline void clear_has_aligned();
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_src_addr();
  inline void clear_has_src_addr();
  inline void set_has_dst_addr();
  inline void clear_has_dst_addr();
  inline void set_has_src_shape();
  inline void clear_has_src_shape();
  inline void set_has_dst_shape();
  inline void clear_has_dst_shape();
  inline void set_has_parent_name();
  inline void clear_has_parent_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::std::string* name_;
  ::bmnet::BlobShape* global_shape_;
  ::bmnet::BlobShape* local_shape_;
  ::google::protobuf::uint64 global_offset_;
  ::google::protobuf::uint32 local_address_;
  ::google::protobuf::int32 direction_;
  bool transpose_;
  bool aligned_;
  int stage_;
  ::google::protobuf::uint64 src_addr_;
  ::google::protobuf::uint64 dst_addr_;
  ::bmnet::BlobShape* src_shape_;
  ::bmnet::BlobShape* dst_shape_;
  ::std::string* parent_name_;
  int data_type_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLTransportParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLArithmeticParameter : public ::google::protobuf::Message {
 public:
  TLArithmeticParameter();
  virtual ~TLArithmeticParameter();

  TLArithmeticParameter(const TLArithmeticParameter& from);

  inline TLArithmeticParameter& operator=(const TLArithmeticParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLArithmeticParameter& default_instance();

  void Swap(TLArithmeticParameter* other);

  // implements Message ----------------------------------------------

  TLArithmeticParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLArithmeticParameter& from);
  void MergeFrom(const TLArithmeticParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TLArithmeticParameter_ArithmeticOp ArithmeticOp;
  static const ArithmeticOp ADD = TLArithmeticParameter_ArithmeticOp_ADD;
  static const ArithmeticOp SUB = TLArithmeticParameter_ArithmeticOp_SUB;
  static const ArithmeticOp MUL = TLArithmeticParameter_ArithmeticOp_MUL;
  static const ArithmeticOp DIV = TLArithmeticParameter_ArithmeticOp_DIV;
  static inline bool ArithmeticOp_IsValid(int value) {
    return TLArithmeticParameter_ArithmeticOp_IsValid(value);
  }
  static const ArithmeticOp ArithmeticOp_MIN =
    TLArithmeticParameter_ArithmeticOp_ArithmeticOp_MIN;
  static const ArithmeticOp ArithmeticOp_MAX =
    TLArithmeticParameter_ArithmeticOp_ArithmeticOp_MAX;
  static const int ArithmeticOp_ARRAYSIZE =
    TLArithmeticParameter_ArithmeticOp_ArithmeticOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ArithmeticOp_descriptor() {
    return TLArithmeticParameter_ArithmeticOp_descriptor();
  }
  static inline const ::std::string& ArithmeticOp_Name(ArithmeticOp value) {
    return TLArithmeticParameter_ArithmeticOp_Name(value);
  }
  static inline bool ArithmeticOp_Parse(const ::std::string& name,
      ArithmeticOp* value) {
    return TLArithmeticParameter_ArithmeticOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .bmnet.TLArithmeticParameter.ArithmeticOp operation = 1 [default = ADD];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::bmnet::TLArithmeticParameter_ArithmeticOp operation() const;
  inline void set_operation(::bmnet::TLArithmeticParameter_ArithmeticOp value);

  // optional bool is_b_const = 2 [default = false];
  inline bool has_is_b_const() const;
  inline void clear_is_b_const();
  static const int kIsBConstFieldNumber = 2;
  inline bool is_b_const() const;
  inline void set_is_b_const(bool value);

  // optional uint64 global_b = 3;
  inline bool has_global_b() const;
  inline void clear_global_b();
  static const int kGlobalBFieldNumber = 3;
  inline ::google::protobuf::uint64 global_b() const;
  inline void set_global_b(::google::protobuf::uint64 value);

  // optional .bmnet.BlobShape b_shape = 4;
  inline bool has_b_shape() const;
  inline void clear_b_shape();
  static const int kBShapeFieldNumber = 4;
  inline const ::bmnet::BlobShape& b_shape() const;
  inline ::bmnet::BlobShape* mutable_b_shape();
  inline ::bmnet::BlobShape* release_b_shape();
  inline void set_allocated_b_shape(::bmnet::BlobShape* b_shape);

  // optional uint32 input = 7 [default = 4294967295];
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 7;
  inline ::google::protobuf::uint32 input() const;
  inline void set_input(::google::protobuf::uint32 value);

  // optional uint32 output = 8 [default = 4294967295];
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 8;
  inline ::google::protobuf::uint32 output() const;
  inline void set_output(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TLArithmeticParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_is_b_const();
  inline void clear_has_is_b_const();
  inline void set_has_global_b();
  inline void clear_has_global_b();
  inline void set_has_b_shape();
  inline void clear_has_b_shape();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_output();
  inline void clear_has_output();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int operation_;
  bool is_b_const_;
  ::google::protobuf::uint64 global_b_;
  ::bmnet::BlobShape* b_shape_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 output_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLArithmeticParameter* default_instance_;
};
// -------------------------------------------------------------------

class TLResizeBilinearParameter : public ::google::protobuf::Message {
 public:
  TLResizeBilinearParameter();
  virtual ~TLResizeBilinearParameter();

  TLResizeBilinearParameter(const TLResizeBilinearParameter& from);

  inline TLResizeBilinearParameter& operator=(const TLResizeBilinearParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLResizeBilinearParameter& default_instance();

  void Swap(TLResizeBilinearParameter* other);

  // implements Message ----------------------------------------------

  TLResizeBilinearParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLResizeBilinearParameter& from);
  void MergeFrom(const TLResizeBilinearParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 resize_h = 1;
  inline bool has_resize_h() const;
  inline void clear_resize_h();
  static const int kResizeHFieldNumber = 1;
  inline ::google::protobuf::uint32 resize_h() const;
  inline void set_resize_h(::google::protobuf::uint32 value);

  // optional uint32 resize_w = 2;
  inline bool has_resize_w() const;
  inline void clear_resize_w();
  static const int kResizeWFieldNumber = 2;
  inline ::google::protobuf::uint32 resize_w() const;
  inline void set_resize_w(::google::protobuf::uint32 value);

  // optional uint32 global_weight = 3 [default = 4294967295];
  inline bool has_global_weight() const;
  inline void clear_global_weight();
  static const int kGlobalWeightFieldNumber = 3;
  inline ::google::protobuf::uint32 global_weight() const;
  inline void set_global_weight(::google::protobuf::uint32 value);

  // optional .bmnet.BlobShape weight_shape = 4;
  inline bool has_weight_shape() const;
  inline void clear_weight_shape();
  static const int kWeightShapeFieldNumber = 4;
  inline const ::bmnet::BlobShape& weight_shape() const;
  inline ::bmnet::BlobShape* mutable_weight_shape();
  inline ::bmnet::BlobShape* release_weight_shape();
  inline void set_allocated_weight_shape(::bmnet::BlobShape* weight_shape);

  // optional uint32 input = 7 [default = 4294967295];
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 7;
  inline ::google::protobuf::uint32 input() const;
  inline void set_input(::google::protobuf::uint32 value);

  // optional uint32 output = 8 [default = 4294967295];
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 8;
  inline ::google::protobuf::uint32 output() const;
  inline void set_output(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TLResizeBilinearParameter)
 private:
  inline void set_has_resize_h();
  inline void clear_has_resize_h();
  inline void set_has_resize_w();
  inline void clear_has_resize_w();
  inline void set_has_global_weight();
  inline void clear_has_global_weight();
  inline void set_has_weight_shape();
  inline void clear_has_weight_shape();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_output();
  inline void clear_has_output();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 resize_h_;
  ::google::protobuf::uint32 resize_w_;
  ::bmnet::BlobShape* weight_shape_;
  ::google::protobuf::uint32 global_weight_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 output_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TLResizeBilinearParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGConvolutionParameter : public ::google::protobuf::Message {
 public:
  TGConvolutionParameter();
  virtual ~TGConvolutionParameter();

  TGConvolutionParameter(const TGConvolutionParameter& from);

  inline TGConvolutionParameter& operator=(const TGConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGConvolutionParameter& default_instance();

  void Swap(TGConvolutionParameter* other);

  // implements Message ----------------------------------------------

  TGConvolutionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGConvolutionParameter& from);
  void MergeFrom(const TGConvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional string weight_name = 1;
  inline bool has_weight_name() const;
  inline void clear_weight_name();
  static const int kWeightNameFieldNumber = 1;
  inline const ::std::string& weight_name() const;
  inline void set_weight_name(const ::std::string& value);
  inline void set_weight_name(const char* value);
  inline void set_weight_name(const char* value, size_t size);
  inline ::std::string* mutable_weight_name();
  inline ::std::string* release_weight_name();
  inline void set_allocated_weight_name(::std::string* weight_name);

  // optional string bias_name = 2;
  inline bool has_bias_name() const;
  inline void clear_bias_name();
  static const int kBiasNameFieldNumber = 2;
  inline const ::std::string& bias_name() const;
  inline void set_bias_name(const ::std::string& value);
  inline void set_bias_name(const char* value);
  inline void set_bias_name(const char* value, size_t size);
  inline ::std::string* mutable_bias_name();
  inline ::std::string* release_bias_name();
  inline void set_allocated_bias_name(::std::string* bias_name);

  // optional uint64 global_weight = 5 [default = 281474976710655];
  inline bool has_global_weight() const;
  inline void clear_global_weight();
  static const int kGlobalWeightFieldNumber = 5;
  inline ::google::protobuf::uint64 global_weight() const;
  inline void set_global_weight(::google::protobuf::uint64 value);

  // optional uint64 global_bias = 6 [default = 281474976710655];
  inline bool has_global_bias() const;
  inline void clear_global_bias();
  static const int kGlobalBiasFieldNumber = 6;
  inline ::google::protobuf::uint64 global_bias() const;
  inline void set_global_bias(::google::protobuf::uint64 value);

  // optional uint64 global_bn_mean = 7 [default = 281474976710655];
  inline bool has_global_bn_mean() const;
  inline void clear_global_bn_mean();
  static const int kGlobalBnMeanFieldNumber = 7;
  inline ::google::protobuf::uint64 global_bn_mean() const;
  inline void set_global_bn_mean(::google::protobuf::uint64 value);

  // optional uint64 global_bn_variance = 8 [default = 281474976710655];
  inline bool has_global_bn_variance() const;
  inline void clear_global_bn_variance();
  static const int kGlobalBnVarianceFieldNumber = 8;
  inline ::google::protobuf::uint64 global_bn_variance() const;
  inline void set_global_bn_variance(::google::protobuf::uint64 value);

  // optional uint64 global_scale = 9 [default = 281474976710655];
  inline bool has_global_scale() const;
  inline void clear_global_scale();
  static const int kGlobalScaleFieldNumber = 9;
  inline ::google::protobuf::uint64 global_scale() const;
  inline void set_global_scale(::google::protobuf::uint64 value);

  // optional uint64 global_scale_bias = 10 [default = 281474976710655];
  inline bool has_global_scale_bias() const;
  inline void clear_global_scale_bias();
  static const int kGlobalScaleBiasFieldNumber = 10;
  inline ::google::protobuf::uint64 global_scale_bias() const;
  inline void set_global_scale_bias(::google::protobuf::uint64 value);

  // optional bool bias_term = 11 [default = false];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 11;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // repeated uint32 kernel_size = 12;
  inline int kernel_size_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 12;
  inline ::google::protobuf::uint32 kernel_size(int index) const;
  inline void set_kernel_size(int index, ::google::protobuf::uint32 value);
  inline void add_kernel_size(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_size();

  // repeated uint32 stride = 13;
  inline int stride_size() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 13;
  inline ::google::protobuf::uint32 stride(int index) const;
  inline void set_stride(int index, ::google::protobuf::uint32 value);
  inline void add_stride(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 dilation = 14;
  inline int dilation_size() const;
  inline void clear_dilation();
  static const int kDilationFieldNumber = 14;
  inline ::google::protobuf::uint32 dilation(int index) const;
  inline void set_dilation(int index, ::google::protobuf::uint32 value);
  inline void add_dilation(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dilation() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dilation();

  // repeated uint32 pad = 15;
  inline int pad_size() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 15;
  inline ::google::protobuf::uint32 pad(int index) const;
  inline void set_pad(int index, ::google::protobuf::uint32 value);
  inline void add_pad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 ins = 16;
  inline int ins_size() const;
  inline void clear_ins();
  static const int kInsFieldNumber = 16;
  inline ::google::protobuf::uint32 ins(int index) const;
  inline void set_ins(int index, ::google::protobuf::uint32 value);
  inline void add_ins(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ins() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ins();

  // optional uint32 group = 17 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 17;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional bool result_add = 18 [default = false];
  inline bool has_result_add() const;
  inline void clear_result_add();
  static const int kResultAddFieldNumber = 18;
  inline bool result_add() const;
  inline void set_result_add(bool value);

  // optional bool do_bn = 19 [default = false];
  inline bool has_do_bn() const;
  inline void clear_do_bn();
  static const int kDoBnFieldNumber = 19;
  inline bool do_bn() const;
  inline void set_do_bn(bool value);

  // optional bool do_scale = 20 [default = false];
  inline bool has_do_scale() const;
  inline void clear_do_scale();
  static const int kDoScaleFieldNumber = 20;
  inline bool do_scale() const;
  inline void set_do_scale(bool value);

  // optional bool do_scale_bias = 21 [default = false];
  inline bool has_do_scale_bias() const;
  inline void clear_do_scale_bias();
  static const int kDoScaleBiasFieldNumber = 21;
  inline bool do_scale_bias() const;
  inline void set_do_scale_bias(bool value);

  // optional bool do_activation = 22 [default = false];
  inline bool has_do_activation() const;
  inline void clear_do_activation();
  static const int kDoActivationFieldNumber = 22;
  inline bool do_activation() const;
  inline void set_do_activation(bool value);

  // optional bool do_pooling = 23 [default = false];
  inline bool has_do_pooling() const;
  inline void clear_do_pooling();
  static const int kDoPoolingFieldNumber = 23;
  inline bool do_pooling() const;
  inline void set_do_pooling(bool value);

  // repeated uint32 pooling_kernel_size = 24;
  inline int pooling_kernel_size_size() const;
  inline void clear_pooling_kernel_size();
  static const int kPoolingKernelSizeFieldNumber = 24;
  inline ::google::protobuf::uint32 pooling_kernel_size(int index) const;
  inline void set_pooling_kernel_size(int index, ::google::protobuf::uint32 value);
  inline void add_pooling_kernel_size(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pooling_kernel_size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pooling_kernel_size();

  // repeated uint32 pooling_stride = 25;
  inline int pooling_stride_size() const;
  inline void clear_pooling_stride();
  static const int kPoolingStrideFieldNumber = 25;
  inline ::google::protobuf::uint32 pooling_stride(int index) const;
  inline void set_pooling_stride(int index, ::google::protobuf::uint32 value);
  inline void add_pooling_stride(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pooling_stride() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pooling_stride();

  // repeated uint32 pooling_pad = 26;
  inline int pooling_pad_size() const;
  inline void clear_pooling_pad();
  static const int kPoolingPadFieldNumber = 26;
  inline ::google::protobuf::uint32 pooling_pad(int index) const;
  inline void set_pooling_pad(int index, ::google::protobuf::uint32 value);
  inline void add_pooling_pad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pooling_pad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pooling_pad();

  // optional .bmnet.ActivationMethod activation = 27 [default = RELU];
  inline bool has_activation() const;
  inline void clear_activation();
  static const int kActivationFieldNumber = 27;
  inline ::bmnet::ActivationMethod activation() const;
  inline void set_activation(::bmnet::ActivationMethod value);

  // repeated float activation_arg = 28;
  inline int activation_arg_size() const;
  inline void clear_activation_arg();
  static const int kActivationArgFieldNumber = 28;
  inline float activation_arg(int index) const;
  inline void set_activation_arg(int index, float value);
  inline void add_activation_arg(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      activation_arg() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_activation_arg();

  // optional uint64 global_bn_fraction = 29 [default = 281474976710655];
  inline bool has_global_bn_fraction() const;
  inline void clear_global_bn_fraction();
  static const int kGlobalBnFractionFieldNumber = 29;
  inline ::google::protobuf::uint64 global_bn_fraction() const;
  inline void set_global_bn_fraction(::google::protobuf::uint64 value);

  // optional float bn_eps = 30 [default = 1e-06];
  inline bool has_bn_eps() const;
  inline void clear_bn_eps();
  static const int kBnEpsFieldNumber = 30;
  inline float bn_eps() const;
  inline void set_bn_eps(float value);

  // optional uint64 activation_global_slope = 31 [default = 281474976710655];
  inline bool has_activation_global_slope() const;
  inline void clear_activation_global_slope();
  static const int kActivationGlobalSlopeFieldNumber = 31;
  inline ::google::protobuf::uint64 activation_global_slope() const;
  inline void set_activation_global_slope(::google::protobuf::uint64 value);

  // optional bool activation_channel_shared = 32 [default = false];
  inline bool has_activation_channel_shared() const;
  inline void clear_activation_channel_shared();
  static const int kActivationChannelSharedFieldNumber = 32;
  inline bool activation_channel_shared() const;
  inline void set_activation_channel_shared(bool value);

  // optional bool use_winograd = 33 [default = false];
  inline bool has_use_winograd() const;
  inline void clear_use_winograd();
  static const int kUseWinogradFieldNumber = 33;
  inline bool use_winograd() const;
  inline void set_use_winograd(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.TGConvolutionParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_weight_name();
  inline void clear_has_weight_name();
  inline void set_has_bias_name();
  inline void clear_has_bias_name();
  inline void set_has_global_weight();
  inline void clear_has_global_weight();
  inline void set_has_global_bias();
  inline void clear_has_global_bias();
  inline void set_has_global_bn_mean();
  inline void clear_has_global_bn_mean();
  inline void set_has_global_bn_variance();
  inline void clear_has_global_bn_variance();
  inline void set_has_global_scale();
  inline void clear_has_global_scale();
  inline void set_has_global_scale_bias();
  inline void clear_has_global_scale_bias();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_result_add();
  inline void clear_has_result_add();
  inline void set_has_do_bn();
  inline void clear_has_do_bn();
  inline void set_has_do_scale();
  inline void clear_has_do_scale();
  inline void set_has_do_scale_bias();
  inline void clear_has_do_scale_bias();
  inline void set_has_do_activation();
  inline void clear_has_do_activation();
  inline void set_has_do_pooling();
  inline void clear_has_do_pooling();
  inline void set_has_activation();
  inline void clear_has_activation();
  inline void set_has_global_bn_fraction();
  inline void clear_has_global_bn_fraction();
  inline void set_has_bn_eps();
  inline void clear_has_bn_eps();
  inline void set_has_activation_global_slope();
  inline void clear_has_activation_global_slope();
  inline void set_has_activation_channel_shared();
  inline void clear_has_activation_channel_shared();
  inline void set_has_use_winograd();
  inline void clear_has_use_winograd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::std::string* weight_name_;
  ::std::string* bias_name_;
  ::google::protobuf::uint64 global_weight_;
  ::google::protobuf::uint64 global_bias_;
  ::google::protobuf::uint64 global_bn_mean_;
  ::google::protobuf::uint64 global_bn_variance_;
  ::google::protobuf::uint64 global_scale_;
  ::google::protobuf::uint64 global_scale_bias_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dilation_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ins_;
  ::google::protobuf::uint32 group_;
  bool bias_term_;
  bool result_add_;
  bool do_bn_;
  bool do_scale_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pooling_kernel_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pooling_stride_;
  bool do_scale_bias_;
  bool do_activation_;
  bool do_pooling_;
  bool activation_channel_shared_;
  int activation_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pooling_pad_;
  ::google::protobuf::RepeatedField< float > activation_arg_;
  ::google::protobuf::uint64 global_bn_fraction_;
  ::google::protobuf::uint64 activation_global_slope_;
  float bn_eps_;
  bool use_winograd_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGConvolutionParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGPoolingParameter : public ::google::protobuf::Message {
 public:
  TGPoolingParameter();
  virtual ~TGPoolingParameter();

  TGPoolingParameter(const TGPoolingParameter& from);

  inline TGPoolingParameter& operator=(const TGPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGPoolingParameter& default_instance();

  void Swap(TGPoolingParameter* other);

  // implements Message ----------------------------------------------

  TGPoolingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGPoolingParameter& from);
  void MergeFrom(const TGPoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TGPoolingParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX = TGPoolingParameter_PoolMethod_MAX;
  static const PoolMethod AVE = TGPoolingParameter_PoolMethod_AVE;
  static inline bool PoolMethod_IsValid(int value) {
    return TGPoolingParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    TGPoolingParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    TGPoolingParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    TGPoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return TGPoolingParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return TGPoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return TGPoolingParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional .bmnet.TGPoolingParameter.PoolMethod pool = 6 [default = MAX];
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 6;
  inline ::bmnet::TGPoolingParameter_PoolMethod pool() const;
  inline void set_pool(::bmnet::TGPoolingParameter_PoolMethod value);

  // repeated uint32 kernel_size = 7;
  inline int kernel_size_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 7;
  inline ::google::protobuf::uint32 kernel_size(int index) const;
  inline void set_kernel_size(int index, ::google::protobuf::uint32 value);
  inline void add_kernel_size(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_size();

  // repeated uint32 stride = 8;
  inline int stride_size() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 8;
  inline ::google::protobuf::uint32 stride(int index) const;
  inline void set_stride(int index, ::google::protobuf::uint32 value);
  inline void add_stride(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 pad = 9;
  inline int pad_size() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 9;
  inline ::google::protobuf::uint32 pad(int index) const;
  inline void set_pad(int index, ::google::protobuf::uint32 value);
  inline void add_pad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 ins = 10;
  inline int ins_size() const;
  inline void clear_ins();
  static const int kInsFieldNumber = 10;
  inline ::google::protobuf::uint32 ins(int index) const;
  inline void set_ins(int index, ::google::protobuf::uint32 value);
  inline void add_ins(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ins() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ins();

  // optional bool do_activation = 11 [default = false];
  inline bool has_do_activation() const;
  inline void clear_do_activation();
  static const int kDoActivationFieldNumber = 11;
  inline bool do_activation() const;
  inline void set_do_activation(bool value);

  // optional .bmnet.ActivationMethod activation = 12 [default = RELU];
  inline bool has_activation() const;
  inline void clear_activation();
  static const int kActivationFieldNumber = 12;
  inline ::bmnet::ActivationMethod activation() const;
  inline void set_activation(::bmnet::ActivationMethod value);

  // repeated float activation_arg = 13;
  inline int activation_arg_size() const;
  inline void clear_activation_arg();
  static const int kActivationArgFieldNumber = 13;
  inline float activation_arg(int index) const;
  inline void set_activation_arg(int index, float value);
  inline void add_activation_arg(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      activation_arg() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_activation_arg();

  // optional bool ceil_mode = 14 [default = true];
  inline bool has_ceil_mode() const;
  inline void clear_ceil_mode();
  static const int kCeilModeFieldNumber = 14;
  inline bool ceil_mode() const;
  inline void set_ceil_mode(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.TGPoolingParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_do_activation();
  inline void clear_has_do_activation();
  inline void set_has_activation();
  inline void clear_has_activation();
  inline void set_has_ceil_mode();
  inline void clear_has_ceil_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  int pool_;
  int activation_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ins_;
  ::google::protobuf::RepeatedField< float > activation_arg_;
  bool do_activation_;
  bool ceil_mode_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGPoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGInnerProductParameter : public ::google::protobuf::Message {
 public:
  TGInnerProductParameter();
  virtual ~TGInnerProductParameter();

  TGInnerProductParameter(const TGInnerProductParameter& from);

  inline TGInnerProductParameter& operator=(const TGInnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGInnerProductParameter& default_instance();

  void Swap(TGInnerProductParameter* other);

  // implements Message ----------------------------------------------

  TGInnerProductParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGInnerProductParameter& from);
  void MergeFrom(const TGInnerProductParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional string weight_name = 1;
  inline bool has_weight_name() const;
  inline void clear_weight_name();
  static const int kWeightNameFieldNumber = 1;
  inline const ::std::string& weight_name() const;
  inline void set_weight_name(const ::std::string& value);
  inline void set_weight_name(const char* value);
  inline void set_weight_name(const char* value, size_t size);
  inline ::std::string* mutable_weight_name();
  inline ::std::string* release_weight_name();
  inline void set_allocated_weight_name(::std::string* weight_name);

  // optional string bias_name = 2;
  inline bool has_bias_name() const;
  inline void clear_bias_name();
  static const int kBiasNameFieldNumber = 2;
  inline const ::std::string& bias_name() const;
  inline void set_bias_name(const ::std::string& value);
  inline void set_bias_name(const char* value);
  inline void set_bias_name(const char* value, size_t size);
  inline ::std::string* mutable_bias_name();
  inline ::std::string* release_bias_name();
  inline void set_allocated_bias_name(::std::string* bias_name);

  // optional uint64 global_weight = 5 [default = 281474976710655];
  inline bool has_global_weight() const;
  inline void clear_global_weight();
  static const int kGlobalWeightFieldNumber = 5;
  inline ::google::protobuf::uint64 global_weight() const;
  inline void set_global_weight(::google::protobuf::uint64 value);

  // optional uint64 global_bias = 6 [default = 281474976710655];
  inline bool has_global_bias() const;
  inline void clear_global_bias();
  static const int kGlobalBiasFieldNumber = 6;
  inline ::google::protobuf::uint64 global_bias() const;
  inline void set_global_bias(::google::protobuf::uint64 value);

  // optional bool bias_term = 7 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 7;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional bool result_add = 9 [default = false];
  inline bool has_result_add() const;
  inline void clear_result_add();
  static const int kResultAddFieldNumber = 9;
  inline bool result_add() const;
  inline void set_result_add(bool value);

  // optional uint32 num_output = 10;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 10;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool do_activation = 11 [default = false];
  inline bool has_do_activation() const;
  inline void clear_do_activation();
  static const int kDoActivationFieldNumber = 11;
  inline bool do_activation() const;
  inline void set_do_activation(bool value);

  // optional .bmnet.ActivationMethod activation = 12 [default = RELU];
  inline bool has_activation() const;
  inline void clear_activation();
  static const int kActivationFieldNumber = 12;
  inline ::bmnet::ActivationMethod activation() const;
  inline void set_activation(::bmnet::ActivationMethod value);

  // repeated float activation_arg = 13;
  inline int activation_arg_size() const;
  inline void clear_activation_arg();
  static const int kActivationArgFieldNumber = 13;
  inline float activation_arg(int index) const;
  inline void set_activation_arg(int index, float value);
  inline void add_activation_arg(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      activation_arg() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_activation_arg();

  // optional bool weight_transpose = 14 [default = true];
  inline bool has_weight_transpose() const;
  inline void clear_weight_transpose();
  static const int kWeightTransposeFieldNumber = 14;
  inline bool weight_transpose() const;
  inline void set_weight_transpose(bool value);

  // optional uint64 activation_global_slope = 31 [default = 281474976710655];
  inline bool has_activation_global_slope() const;
  inline void clear_activation_global_slope();
  static const int kActivationGlobalSlopeFieldNumber = 31;
  inline ::google::protobuf::uint64 activation_global_slope() const;
  inline void set_activation_global_slope(::google::protobuf::uint64 value);

  // optional bool activation_channel_shared = 32 [default = false];
  inline bool has_activation_channel_shared() const;
  inline void clear_activation_channel_shared();
  static const int kActivationChannelSharedFieldNumber = 32;
  inline bool activation_channel_shared() const;
  inline void set_activation_channel_shared(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.TGInnerProductParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_weight_name();
  inline void clear_has_weight_name();
  inline void set_has_bias_name();
  inline void clear_has_bias_name();
  inline void set_has_global_weight();
  inline void clear_has_global_weight();
  inline void set_has_global_bias();
  inline void clear_has_global_bias();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_result_add();
  inline void clear_has_result_add();
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_do_activation();
  inline void clear_has_do_activation();
  inline void set_has_activation();
  inline void clear_has_activation();
  inline void set_has_weight_transpose();
  inline void clear_has_weight_transpose();
  inline void set_has_activation_global_slope();
  inline void clear_has_activation_global_slope();
  inline void set_has_activation_channel_shared();
  inline void clear_has_activation_channel_shared();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::std::string* weight_name_;
  ::std::string* bias_name_;
  ::google::protobuf::uint64 global_weight_;
  ::google::protobuf::uint64 global_bias_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  bool result_add_;
  bool do_activation_;
  bool weight_transpose_;
  ::google::protobuf::RepeatedField< float > activation_arg_;
  int activation_;
  bool activation_channel_shared_;
  ::google::protobuf::uint64 activation_global_slope_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGInnerProductParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGActivationParameter : public ::google::protobuf::Message {
 public:
  TGActivationParameter();
  virtual ~TGActivationParameter();

  TGActivationParameter(const TGActivationParameter& from);

  inline TGActivationParameter& operator=(const TGActivationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGActivationParameter& default_instance();

  void Swap(TGActivationParameter* other);

  // implements Message ----------------------------------------------

  TGActivationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGActivationParameter& from);
  void MergeFrom(const TGActivationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional .bmnet.ActivationMethod activation = 5 [default = RELU];
  inline bool has_activation() const;
  inline void clear_activation();
  static const int kActivationFieldNumber = 5;
  inline ::bmnet::ActivationMethod activation() const;
  inline void set_activation(::bmnet::ActivationMethod value);

  // repeated float activation_arg = 6;
  inline int activation_arg_size() const;
  inline void clear_activation_arg();
  static const int kActivationArgFieldNumber = 6;
  inline float activation_arg(int index) const;
  inline void set_activation_arg(int index, float value);
  inline void add_activation_arg(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      activation_arg() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_activation_arg();

  // optional .bmnet.FillerParameter filler = 7;
  inline bool has_filler() const;
  inline void clear_filler();
  static const int kFillerFieldNumber = 7;
  inline const ::bmnet::FillerParameter& filler() const;
  inline ::bmnet::FillerParameter* mutable_filler();
  inline ::bmnet::FillerParameter* release_filler();
  inline void set_allocated_filler(::bmnet::FillerParameter* filler);

  // optional bool channel_shared = 8 [default = false];
  inline bool has_channel_shared() const;
  inline void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 8;
  inline bool channel_shared() const;
  inline void set_channel_shared(bool value);

  // optional uint64 global_slope = 9 [default = 281474976710655];
  inline bool has_global_slope() const;
  inline void clear_global_slope();
  static const int kGlobalSlopeFieldNumber = 9;
  inline ::google::protobuf::uint64 global_slope() const;
  inline void set_global_slope(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGActivationParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_activation();
  inline void clear_has_activation();
  inline void set_has_filler();
  inline void clear_has_filler();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();
  inline void set_has_global_slope();
  inline void clear_has_global_slope();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::RepeatedField< float > activation_arg_;
  int activation_;
  bool channel_shared_;
  ::bmnet::FillerParameter* filler_;
  ::google::protobuf::uint64 global_slope_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGActivationParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGBatchNormParameter : public ::google::protobuf::Message {
 public:
  TGBatchNormParameter();
  virtual ~TGBatchNormParameter();

  TGBatchNormParameter(const TGBatchNormParameter& from);

  inline TGBatchNormParameter& operator=(const TGBatchNormParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGBatchNormParameter& default_instance();

  void Swap(TGBatchNormParameter* other);

  // implements Message ----------------------------------------------

  TGBatchNormParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGBatchNormParameter& from);
  void MergeFrom(const TGBatchNormParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint64 global_mean = 5 [default = 281474976710655];
  inline bool has_global_mean() const;
  inline void clear_global_mean();
  static const int kGlobalMeanFieldNumber = 5;
  inline ::google::protobuf::uint64 global_mean() const;
  inline void set_global_mean(::google::protobuf::uint64 value);

  // optional uint64 global_variance = 6 [default = 281474976710655];
  inline bool has_global_variance() const;
  inline void clear_global_variance();
  static const int kGlobalVarianceFieldNumber = 6;
  inline ::google::protobuf::uint64 global_variance() const;
  inline void set_global_variance(::google::protobuf::uint64 value);

  // optional uint64 global_fraction = 7 [default = 281474976710655];
  inline bool has_global_fraction() const;
  inline void clear_global_fraction();
  static const int kGlobalFractionFieldNumber = 7;
  inline ::google::protobuf::uint64 global_fraction() const;
  inline void set_global_fraction(::google::protobuf::uint64 value);

  // optional float eps = 8 [default = 1e-05];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 8;
  inline float eps() const;
  inline void set_eps(float value);

  // optional bool fusion_skipped = 9 [default = false];
  inline bool has_fusion_skipped() const;
  inline void clear_fusion_skipped();
  static const int kFusionSkippedFieldNumber = 9;
  inline bool fusion_skipped() const;
  inline void set_fusion_skipped(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.TGBatchNormParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_global_mean();
  inline void clear_has_global_mean();
  inline void set_has_global_variance();
  inline void clear_has_global_variance();
  inline void set_has_global_fraction();
  inline void clear_has_global_fraction();
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_fusion_skipped();
  inline void clear_has_fusion_skipped();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint64 global_mean_;
  ::google::protobuf::uint64 global_variance_;
  ::google::protobuf::uint64 global_fraction_;
  float eps_;
  bool fusion_skipped_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGBatchNormParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGSoftmaxParameter : public ::google::protobuf::Message {
 public:
  TGSoftmaxParameter();
  virtual ~TGSoftmaxParameter();

  TGSoftmaxParameter(const TGSoftmaxParameter& from);

  inline TGSoftmaxParameter& operator=(const TGSoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGSoftmaxParameter& default_instance();

  void Swap(TGSoftmaxParameter* other);

  // implements Message ----------------------------------------------

  TGSoftmaxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGSoftmaxParameter& from);
  void MergeFrom(const TGSoftmaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional int32 axis = 5 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 5;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGSoftmaxParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGSoftmaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGDropoutParameter : public ::google::protobuf::Message {
 public:
  TGDropoutParameter();
  virtual ~TGDropoutParameter();

  TGDropoutParameter(const TGDropoutParameter& from);

  inline TGDropoutParameter& operator=(const TGDropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGDropoutParameter& default_instance();

  void Swap(TGDropoutParameter* other);

  // implements Message ----------------------------------------------

  TGDropoutParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGDropoutParameter& from);
  void MergeFrom(const TGDropoutParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional float dropout_ratio = 1 [default = 0.5];
  inline bool has_dropout_ratio() const;
  inline void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 1;
  inline float dropout_ratio() const;
  inline void set_dropout_ratio(float value);

  // optional uint64 global_mask = 3 [default = 281474976710655];
  inline bool has_global_mask() const;
  inline void clear_global_mask();
  static const int kGlobalMaskFieldNumber = 3;
  inline ::google::protobuf::uint64 global_mask() const;
  inline void set_global_mask(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGDropoutParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();
  inline void set_has_global_mask();
  inline void clear_has_global_mask();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint64 global_mask_;
  float dropout_ratio_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGDropoutParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGEltwiseParameter : public ::google::protobuf::Message {
 public:
  TGEltwiseParameter();
  virtual ~TGEltwiseParameter();

  TGEltwiseParameter(const TGEltwiseParameter& from);

  inline TGEltwiseParameter& operator=(const TGEltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGEltwiseParameter& default_instance();

  void Swap(TGEltwiseParameter* other);

  // implements Message ----------------------------------------------

  TGEltwiseParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGEltwiseParameter& from);
  void MergeFrom(const TGEltwiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TGEltwiseParameter_EltwiseOp EltwiseOp;
  static const EltwiseOp PROD = TGEltwiseParameter_EltwiseOp_PROD;
  static const EltwiseOp SUM = TGEltwiseParameter_EltwiseOp_SUM;
  static const EltwiseOp MAX = TGEltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return TGEltwiseParameter_EltwiseOp_IsValid(value);
  }
  static const EltwiseOp EltwiseOp_MIN =
    TGEltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static const EltwiseOp EltwiseOp_MAX =
    TGEltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static const int EltwiseOp_ARRAYSIZE =
    TGEltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EltwiseOp_descriptor() {
    return TGEltwiseParameter_EltwiseOp_descriptor();
  }
  static inline const ::std::string& EltwiseOp_Name(EltwiseOp value) {
    return TGEltwiseParameter_EltwiseOp_Name(value);
  }
  static inline bool EltwiseOp_Parse(const ::std::string& name,
      EltwiseOp* value) {
    return TGEltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional .bmnet.TGEltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::bmnet::TGEltwiseParameter_EltwiseOp operation() const;
  inline void set_operation(::bmnet::TGEltwiseParameter_EltwiseOp value);

  // repeated float coeff = 2;
  inline int coeff_size() const;
  inline void clear_coeff();
  static const int kCoeffFieldNumber = 2;
  inline float coeff(int index) const;
  inline void set_coeff(int index, float value);
  inline void add_coeff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional bool stable_prod_grad = 3 [default = true];
  inline bool has_stable_prod_grad() const;
  inline void clear_stable_prod_grad();
  static const int kStableProdGradFieldNumber = 3;
  inline bool stable_prod_grad() const;
  inline void set_stable_prod_grad(bool value);

  // optional bool do_activation = 4 [default = false];
  inline bool has_do_activation() const;
  inline void clear_do_activation();
  static const int kDoActivationFieldNumber = 4;
  inline bool do_activation() const;
  inline void set_do_activation(bool value);

  // optional .bmnet.ActivationMethod activation = 5 [default = RELU];
  inline bool has_activation() const;
  inline void clear_activation();
  static const int kActivationFieldNumber = 5;
  inline ::bmnet::ActivationMethod activation() const;
  inline void set_activation(::bmnet::ActivationMethod value);

  // repeated float activation_arg = 6;
  inline int activation_arg_size() const;
  inline void clear_activation_arg();
  static const int kActivationArgFieldNumber = 6;
  inline float activation_arg(int index) const;
  inline void set_activation_arg(int index, float value);
  inline void add_activation_arg(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      activation_arg() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_activation_arg();

  // @@protoc_insertion_point(class_scope:bmnet.TGEltwiseParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_stable_prod_grad();
  inline void clear_has_stable_prod_grad();
  inline void set_has_do_activation();
  inline void clear_has_do_activation();
  inline void set_has_activation();
  inline void clear_has_activation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::RepeatedField< float > coeff_;
  int operation_;
  bool stable_prod_grad_;
  bool do_activation_;
  ::google::protobuf::RepeatedField< float > activation_arg_;
  int activation_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGEltwiseParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGLRNParameter : public ::google::protobuf::Message {
 public:
  TGLRNParameter();
  virtual ~TGLRNParameter();

  TGLRNParameter(const TGLRNParameter& from);

  inline TGLRNParameter& operator=(const TGLRNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGLRNParameter& default_instance();

  void Swap(TGLRNParameter* other);

  // implements Message ----------------------------------------------

  TGLRNParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGLRNParameter& from);
  void MergeFrom(const TGLRNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TGLRNParameter_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS = TGLRNParameter_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL = TGLRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return TGLRNParameter_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    TGLRNParameter_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    TGLRNParameter_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    TGLRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return TGLRNParameter_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return TGLRNParameter_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return TGLRNParameter_NormRegion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 local_size = 5 [default = 5];
  inline bool has_local_size() const;
  inline void clear_local_size();
  static const int kLocalSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 local_size() const;
  inline void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 6 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 6;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 7 [default = 0.75];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 7;
  inline float beta() const;
  inline void set_beta(float value);

  // optional .bmnet.TGLRNParameter.NormRegion norm_region = 8 [default = ACROSS_CHANNELS];
  inline bool has_norm_region() const;
  inline void clear_norm_region();
  static const int kNormRegionFieldNumber = 8;
  inline ::bmnet::TGLRNParameter_NormRegion norm_region() const;
  inline void set_norm_region(::bmnet::TGLRNParameter_NormRegion value);

  // optional float k = 9 [default = 1];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 9;
  inline float k() const;
  inline void set_k(float value);

  // optional uint64 sqr_lut_weight = 10 [default = 281474976710655];
  inline bool has_sqr_lut_weight() const;
  inline void clear_sqr_lut_weight();
  static const int kSqrLutWeightFieldNumber = 10;
  inline ::google::protobuf::uint64 sqr_lut_weight() const;
  inline void set_sqr_lut_weight(::google::protobuf::uint64 value);

  // optional uint64 power_lut_weight = 11 [default = 281474976710655];
  inline bool has_power_lut_weight() const;
  inline void clear_power_lut_weight();
  static const int kPowerLutWeightFieldNumber = 11;
  inline ::google::protobuf::uint64 power_lut_weight() const;
  inline void set_power_lut_weight(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGLRNParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_norm_region();
  inline void clear_has_norm_region();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_sqr_lut_weight();
  inline void clear_has_sqr_lut_weight();
  inline void set_has_power_lut_weight();
  inline void clear_has_power_lut_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  int norm_region_;
  ::google::protobuf::uint64 sqr_lut_weight_;
  ::google::protobuf::uint64 power_lut_weight_;
  float k_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGLRNParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGPowerParameter : public ::google::protobuf::Message {
 public:
  TGPowerParameter();
  virtual ~TGPowerParameter();

  TGPowerParameter(const TGPowerParameter& from);

  inline TGPowerParameter& operator=(const TGPowerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGPowerParameter& default_instance();

  void Swap(TGPowerParameter* other);

  // implements Message ----------------------------------------------

  TGPowerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGPowerParameter& from);
  void MergeFrom(const TGPowerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional float power = 1 [default = 1];
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 1;
  inline float power() const;
  inline void set_power(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:bmnet.TGPowerParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  float power_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGPowerParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGScaleParameter : public ::google::protobuf::Message {
 public:
  TGScaleParameter();
  virtual ~TGScaleParameter();

  TGScaleParameter(const TGScaleParameter& from);

  inline TGScaleParameter& operator=(const TGScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGScaleParameter& default_instance();

  void Swap(TGScaleParameter* other);

  // implements Message ----------------------------------------------

  TGScaleParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGScaleParameter& from);
  void MergeFrom(const TGScaleParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional bool bias_term = 4 [default = false];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 4;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .bmnet.FillerParameter bias_filler = 5;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  inline const ::bmnet::FillerParameter& bias_filler() const;
  inline ::bmnet::FillerParameter* mutable_bias_filler();
  inline ::bmnet::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::bmnet::FillerParameter* bias_filler);

  // optional uint32 scale_dim = 6;
  inline bool has_scale_dim() const;
  inline void clear_scale_dim();
  static const int kScaleDimFieldNumber = 6;
  inline ::google::protobuf::uint32 scale_dim() const;
  inline void set_scale_dim(::google::protobuf::uint32 value);

  // optional uint32 inner_dim = 7;
  inline bool has_inner_dim() const;
  inline void clear_inner_dim();
  static const int kInnerDimFieldNumber = 7;
  inline ::google::protobuf::uint32 inner_dim() const;
  inline void set_inner_dim(::google::protobuf::uint32 value);

  // optional uint64 global_scale = 8 [default = 281474976710655];
  inline bool has_global_scale() const;
  inline void clear_global_scale();
  static const int kGlobalScaleFieldNumber = 8;
  inline ::google::protobuf::uint64 global_scale() const;
  inline void set_global_scale(::google::protobuf::uint64 value);

  // optional uint64 global_bias = 9 [default = 281474976710655];
  inline bool has_global_bias() const;
  inline void clear_global_bias();
  static const int kGlobalBiasFieldNumber = 9;
  inline ::google::protobuf::uint64 global_bias() const;
  inline void set_global_bias(::google::protobuf::uint64 value);

  // optional int32 axis = 10 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 10;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 11 [default = 1];
  inline bool has_num_axes() const;
  inline void clear_num_axes();
  static const int kNumAxesFieldNumber = 11;
  inline ::google::protobuf::int32 num_axes() const;
  inline void set_num_axes(::google::protobuf::int32 value);

  // optional bool do_activation = 12 [default = false];
  inline bool has_do_activation() const;
  inline void clear_do_activation();
  static const int kDoActivationFieldNumber = 12;
  inline bool do_activation() const;
  inline void set_do_activation(bool value);

  // optional .bmnet.ActivationMethod activation = 13 [default = RELU];
  inline bool has_activation() const;
  inline void clear_activation();
  static const int kActivationFieldNumber = 13;
  inline ::bmnet::ActivationMethod activation() const;
  inline void set_activation(::bmnet::ActivationMethod value);

  // repeated float activation_arg = 14;
  inline int activation_arg_size() const;
  inline void clear_activation_arg();
  static const int kActivationArgFieldNumber = 14;
  inline float activation_arg(int index) const;
  inline void set_activation_arg(int index, float value);
  inline void add_activation_arg(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      activation_arg() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_activation_arg();

  // optional bool fusion_skipped = 15 [default = true];
  inline bool has_fusion_skipped() const;
  inline void clear_fusion_skipped();
  static const int kFusionSkippedFieldNumber = 15;
  inline bool fusion_skipped() const;
  inline void set_fusion_skipped(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.TGScaleParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_scale_dim();
  inline void clear_has_scale_dim();
  inline void set_has_inner_dim();
  inline void clear_has_inner_dim();
  inline void set_has_global_scale();
  inline void clear_has_global_scale();
  inline void set_has_global_bias();
  inline void clear_has_global_bias();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();
  inline void set_has_do_activation();
  inline void clear_has_do_activation();
  inline void set_has_activation();
  inline void clear_has_activation();
  inline void set_has_fusion_skipped();
  inline void clear_has_fusion_skipped();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::bmnet::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 scale_dim_;
  ::google::protobuf::uint32 inner_dim_;
  ::google::protobuf::uint64 global_scale_;
  ::google::protobuf::uint64 global_bias_;
  ::google::protobuf::int32 axis_;
  bool bias_term_;
  bool do_activation_;
  bool fusion_skipped_;
  ::google::protobuf::int32 num_axes_;
  int activation_;
  ::google::protobuf::RepeatedField< float > activation_arg_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGScaleParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGPReLUParameter : public ::google::protobuf::Message {
 public:
  TGPReLUParameter();
  virtual ~TGPReLUParameter();

  TGPReLUParameter(const TGPReLUParameter& from);

  inline TGPReLUParameter& operator=(const TGPReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGPReLUParameter& default_instance();

  void Swap(TGPReLUParameter* other);

  // implements Message ----------------------------------------------

  TGPReLUParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGPReLUParameter& from);
  void MergeFrom(const TGPReLUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional .bmnet.FillerParameter filler = 1;
  inline bool has_filler() const;
  inline void clear_filler();
  static const int kFillerFieldNumber = 1;
  inline const ::bmnet::FillerParameter& filler() const;
  inline ::bmnet::FillerParameter* mutable_filler();
  inline ::bmnet::FillerParameter* release_filler();
  inline void set_allocated_filler(::bmnet::FillerParameter* filler);

  // optional bool channel_shared = 2 [default = false];
  inline bool has_channel_shared() const;
  inline void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 2;
  inline bool channel_shared() const;
  inline void set_channel_shared(bool value);

  // optional uint64 global_slope = 8 [default = 281474976710655];
  inline bool has_global_slope() const;
  inline void clear_global_slope();
  static const int kGlobalSlopeFieldNumber = 8;
  inline ::google::protobuf::uint64 global_slope() const;
  inline void set_global_slope(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGPReLUParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_filler();
  inline void clear_has_filler();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();
  inline void set_has_global_slope();
  inline void clear_has_global_slope();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::bmnet::FillerParameter* filler_;
  ::google::protobuf::uint64 global_slope_;
  bool channel_shared_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGPReLUParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGPermuteParameter : public ::google::protobuf::Message {
 public:
  TGPermuteParameter();
  virtual ~TGPermuteParameter();

  TGPermuteParameter(const TGPermuteParameter& from);

  inline TGPermuteParameter& operator=(const TGPermuteParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGPermuteParameter& default_instance();

  void Swap(TGPermuteParameter* other);

  // implements Message ----------------------------------------------

  TGPermuteParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGPermuteParameter& from);
  void MergeFrom(const TGPermuteParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // repeated uint32 order = 1;
  inline int order_size() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 1;
  inline ::google::protobuf::uint32 order(int index) const;
  inline void set_order(int index, ::google::protobuf::uint32 value);
  inline void add_order(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      order() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_order();

  // @@protoc_insertion_point(class_scope:bmnet.TGPermuteParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > order_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGPermuteParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGNormalizeParameter : public ::google::protobuf::Message {
 public:
  TGNormalizeParameter();
  virtual ~TGNormalizeParameter();

  TGNormalizeParameter(const TGNormalizeParameter& from);

  inline TGNormalizeParameter& operator=(const TGNormalizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGNormalizeParameter& default_instance();

  void Swap(TGNormalizeParameter* other);

  // implements Message ----------------------------------------------

  TGNormalizeParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGNormalizeParameter& from);
  void MergeFrom(const TGNormalizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional bool across_spatial = 5 [default = true];
  inline bool has_across_spatial() const;
  inline void clear_across_spatial();
  static const int kAcrossSpatialFieldNumber = 5;
  inline bool across_spatial() const;
  inline void set_across_spatial(bool value);

  // repeated float scale = 6;
  inline int scale_size() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 6;
  inline float scale(int index) const;
  inline void set_scale(int index, float value);
  inline void add_scale(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      scale() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_scale();

  // optional bool channel_shared = 7 [default = true];
  inline bool has_channel_shared() const;
  inline void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 7;
  inline bool channel_shared() const;
  inline void set_channel_shared(bool value);

  // optional float eps = 8 [default = 1e-10];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 8;
  inline float eps() const;
  inline void set_eps(float value);

  // optional .bmnet.FillerParameter bias_filler = 9;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 9;
  inline const ::bmnet::FillerParameter& bias_filler() const;
  inline ::bmnet::FillerParameter* mutable_bias_filler();
  inline ::bmnet::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::bmnet::FillerParameter* bias_filler);

  // optional uint64 global_scale = 10 [default = 281474976710655];
  inline bool has_global_scale() const;
  inline void clear_global_scale();
  static const int kGlobalScaleFieldNumber = 10;
  inline ::google::protobuf::uint64 global_scale() const;
  inline void set_global_scale(::google::protobuf::uint64 value);

  // optional uint64 global_sqr_lut = 11 [default = 281474976710655];
  inline bool has_global_sqr_lut() const;
  inline void clear_global_sqr_lut();
  static const int kGlobalSqrLutFieldNumber = 11;
  inline ::google::protobuf::uint64 global_sqr_lut() const;
  inline void set_global_sqr_lut(::google::protobuf::uint64 value);

  // optional uint64 global_sqrt_lut = 12 [default = 281474976710655];
  inline bool has_global_sqrt_lut() const;
  inline void clear_global_sqrt_lut();
  static const int kGlobalSqrtLutFieldNumber = 12;
  inline ::google::protobuf::uint64 global_sqrt_lut() const;
  inline void set_global_sqrt_lut(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGNormalizeParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_across_spatial();
  inline void clear_has_across_spatial();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_global_scale();
  inline void clear_has_global_scale();
  inline void set_has_global_sqr_lut();
  inline void clear_has_global_sqr_lut();
  inline void set_has_global_sqrt_lut();
  inline void clear_has_global_sqrt_lut();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::RepeatedField< float > scale_;
  bool across_spatial_;
  bool channel_shared_;
  float eps_;
  ::bmnet::FillerParameter* bias_filler_;
  ::google::protobuf::uint64 global_scale_;
  ::google::protobuf::uint64 global_sqr_lut_;
  ::google::protobuf::uint64 global_sqrt_lut_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGNormalizeParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGCropParameter : public ::google::protobuf::Message {
 public:
  TGCropParameter();
  virtual ~TGCropParameter();

  TGCropParameter(const TGCropParameter& from);

  inline TGCropParameter& operator=(const TGCropParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGCropParameter& default_instance();

  void Swap(TGCropParameter* other);

  // implements Message ----------------------------------------------

  TGCropParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGCropParameter& from);
  void MergeFrom(const TGCropParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // repeated uint32 offset = 1;
  inline int offset_size() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::uint32 offset(int index) const;
  inline void set_offset(int index, ::google::protobuf::uint32 value);
  inline void add_offset(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset();

  // @@protoc_insertion_point(class_scope:bmnet.TGCropParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGCropParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGSliceParameter : public ::google::protobuf::Message {
 public:
  TGSliceParameter();
  virtual ~TGSliceParameter();

  TGSliceParameter(const TGSliceParameter& from);

  inline TGSliceParameter& operator=(const TGSliceParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGSliceParameter& default_instance();

  void Swap(TGSliceParameter* other);

  // implements Message ----------------------------------------------

  TGSliceParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGSliceParameter& from);
  void MergeFrom(const TGSliceParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional int32 axis = 1;
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGSliceParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGSliceParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGReductionParameter : public ::google::protobuf::Message {
 public:
  TGReductionParameter();
  virtual ~TGReductionParameter();

  TGReductionParameter(const TGReductionParameter& from);

  inline TGReductionParameter& operator=(const TGReductionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGReductionParameter& default_instance();

  void Swap(TGReductionParameter* other);

  // implements Message ----------------------------------------------

  TGReductionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGReductionParameter& from);
  void MergeFrom(const TGReductionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TGReductionParameter_ReductionOp ReductionOp;
  static const ReductionOp SUM = TGReductionParameter_ReductionOp_SUM;
  static const ReductionOp ASUM = TGReductionParameter_ReductionOp_ASUM;
  static const ReductionOp SUMSQ = TGReductionParameter_ReductionOp_SUMSQ;
  static const ReductionOp MEAN = TGReductionParameter_ReductionOp_MEAN;
  static inline bool ReductionOp_IsValid(int value) {
    return TGReductionParameter_ReductionOp_IsValid(value);
  }
  static const ReductionOp ReductionOp_MIN =
    TGReductionParameter_ReductionOp_ReductionOp_MIN;
  static const ReductionOp ReductionOp_MAX =
    TGReductionParameter_ReductionOp_ReductionOp_MAX;
  static const int ReductionOp_ARRAYSIZE =
    TGReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReductionOp_descriptor() {
    return TGReductionParameter_ReductionOp_descriptor();
  }
  static inline const ::std::string& ReductionOp_Name(ReductionOp value) {
    return TGReductionParameter_ReductionOp_Name(value);
  }
  static inline bool ReductionOp_Parse(const ::std::string& name,
      ReductionOp* value) {
    return TGReductionParameter_ReductionOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional .bmnet.TGReductionParameter.ReductionOp operation = 1 [default = SUM];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::bmnet::TGReductionParameter_ReductionOp operation() const;
  inline void set_operation(::bmnet::TGReductionParameter_ReductionOp value);

  // optional int32 axis = 2 [default = 0];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional float coeff = 3 [default = 1];
  inline bool has_coeff() const;
  inline void clear_coeff();
  static const int kCoeffFieldNumber = 3;
  inline float coeff() const;
  inline void set_coeff(float value);

  // @@protoc_insertion_point(class_scope:bmnet.TGReductionParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_coeff();
  inline void clear_has_coeff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  int operation_;
  ::google::protobuf::int32 axis_;
  float coeff_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGReductionParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGUpsampleParameter : public ::google::protobuf::Message {
 public:
  TGUpsampleParameter();
  virtual ~TGUpsampleParameter();

  TGUpsampleParameter(const TGUpsampleParameter& from);

  inline TGUpsampleParameter& operator=(const TGUpsampleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGUpsampleParameter& default_instance();

  void Swap(TGUpsampleParameter* other);

  // implements Message ----------------------------------------------

  TGUpsampleParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGUpsampleParameter& from);
  void MergeFrom(const TGUpsampleParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // repeated uint32 size = 1;
  inline int size_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 size(int index) const;
  inline void set_size(int index, ::google::protobuf::uint32 value);
  inline void add_size(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_size();

  // @@protoc_insertion_point(class_scope:bmnet.TGUpsampleParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > size_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGUpsampleParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGReorgParameter : public ::google::protobuf::Message {
 public:
  TGReorgParameter();
  virtual ~TGReorgParameter();

  TGReorgParameter(const TGReorgParameter& from);

  inline TGReorgParameter& operator=(const TGReorgParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGReorgParameter& default_instance();

  void Swap(TGReorgParameter* other);

  // implements Message ----------------------------------------------

  TGReorgParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGReorgParameter& from);
  void MergeFrom(const TGReorgParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // repeated uint32 size = 1;
  inline int size_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 size(int index) const;
  inline void set_size(int index, ::google::protobuf::uint32 value);
  inline void add_size(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_size();

  // optional uint32 stride = 2;
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 2;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // optional bool reverse = 3 [default = false];
  inline bool has_reverse() const;
  inline void clear_reverse();
  static const int kReverseFieldNumber = 3;
  inline bool reverse() const;
  inline void set_reverse(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.TGReorgParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_reverse();
  inline void clear_has_reverse();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > size_;
  ::google::protobuf::uint32 stride_;
  bool reverse_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGReorgParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGConcatParameter : public ::google::protobuf::Message {
 public:
  TGConcatParameter();
  virtual ~TGConcatParameter();

  TGConcatParameter(const TGConcatParameter& from);

  inline TGConcatParameter& operator=(const TGConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGConcatParameter& default_instance();

  void Swap(TGConcatParameter* other);

  // implements Message ----------------------------------------------

  TGConcatParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGConcatParameter& from);
  void MergeFrom(const TGConcatParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // repeated int32 ignored_bottom = 3;
  inline int ignored_bottom_size() const;
  inline void clear_ignored_bottom();
  static const int kIgnoredBottomFieldNumber = 3;
  inline ::google::protobuf::int32 ignored_bottom(int index) const;
  inline void set_ignored_bottom(int index, ::google::protobuf::int32 value);
  inline void add_ignored_bottom(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ignored_bottom() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ignored_bottom();

  // @@protoc_insertion_point(class_scope:bmnet.TGConcatParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ignored_bottom_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGConcatParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGPriorBoxParameter : public ::google::protobuf::Message {
 public:
  TGPriorBoxParameter();
  virtual ~TGPriorBoxParameter();

  TGPriorBoxParameter(const TGPriorBoxParameter& from);

  inline TGPriorBoxParameter& operator=(const TGPriorBoxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGPriorBoxParameter& default_instance();

  void Swap(TGPriorBoxParameter* other);

  // implements Message ----------------------------------------------

  TGPriorBoxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGPriorBoxParameter& from);
  void MergeFrom(const TGPriorBoxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // repeated float min_size = 1;
  inline int min_size_size() const;
  inline void clear_min_size();
  static const int kMinSizeFieldNumber = 1;
  inline float min_size(int index) const;
  inline void set_min_size(int index, float value);
  inline void add_min_size(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      min_size() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_min_size();

  // repeated float max_size = 2;
  inline int max_size_size() const;
  inline void clear_max_size();
  static const int kMaxSizeFieldNumber = 2;
  inline float max_size(int index) const;
  inline void set_max_size(int index, float value);
  inline void add_max_size(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      max_size() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_max_size();

  // repeated float aspect_ratio = 3;
  inline int aspect_ratio_size() const;
  inline void clear_aspect_ratio();
  static const int kAspectRatioFieldNumber = 3;
  inline float aspect_ratio(int index) const;
  inline void set_aspect_ratio(int index, float value);
  inline void add_aspect_ratio(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      aspect_ratio() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_aspect_ratio();

  // optional int32 num_priors = 4 [default = 0];
  inline bool has_num_priors() const;
  inline void clear_num_priors();
  static const int kNumPriorsFieldNumber = 4;
  inline ::google::protobuf::int32 num_priors() const;
  inline void set_num_priors(::google::protobuf::int32 value);

  // optional bool clip = 5 [default = false];
  inline bool has_clip() const;
  inline void clear_clip();
  static const int kClipFieldNumber = 5;
  inline bool clip() const;
  inline void set_clip(bool value);

  // repeated float variance = 6;
  inline int variance_size() const;
  inline void clear_variance();
  static const int kVarianceFieldNumber = 6;
  inline float variance(int index) const;
  inline void set_variance(int index, float value);
  inline void add_variance(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      variance() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_variance();

  // optional uint32 img_h = 7;
  inline bool has_img_h() const;
  inline void clear_img_h();
  static const int kImgHFieldNumber = 7;
  inline ::google::protobuf::uint32 img_h() const;
  inline void set_img_h(::google::protobuf::uint32 value);

  // optional uint32 img_w = 8;
  inline bool has_img_w() const;
  inline void clear_img_w();
  static const int kImgWFieldNumber = 8;
  inline ::google::protobuf::uint32 img_w() const;
  inline void set_img_w(::google::protobuf::uint32 value);

  // optional float step_h = 9;
  inline bool has_step_h() const;
  inline void clear_step_h();
  static const int kStepHFieldNumber = 9;
  inline float step_h() const;
  inline void set_step_h(float value);

  // optional float step_w = 10;
  inline bool has_step_w() const;
  inline void clear_step_w();
  static const int kStepWFieldNumber = 10;
  inline float step_w() const;
  inline void set_step_w(float value);

  // optional float offset = 13 [default = 0.5];
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 13;
  inline float offset() const;
  inline void set_offset(float value);

  // optional bool reduce_boxes = 14 [default = false];
  inline bool has_reduce_boxes() const;
  inline void clear_reduce_boxes();
  static const int kReduceBoxesFieldNumber = 14;
  inline bool reduce_boxes() const;
  inline void set_reduce_boxes(bool value);

  // optional uint64 global_weight = 15 [default = 281474976710655];
  inline bool has_global_weight() const;
  inline void clear_global_weight();
  static const int kGlobalWeightFieldNumber = 15;
  inline ::google::protobuf::uint64 global_weight() const;
  inline void set_global_weight(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGPriorBoxParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_num_priors();
  inline void clear_has_num_priors();
  inline void set_has_clip();
  inline void clear_has_clip();
  inline void set_has_img_h();
  inline void clear_has_img_h();
  inline void set_has_img_w();
  inline void clear_has_img_w();
  inline void set_has_step_h();
  inline void clear_has_step_h();
  inline void set_has_step_w();
  inline void clear_has_step_w();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_reduce_boxes();
  inline void clear_has_reduce_boxes();
  inline void set_has_global_weight();
  inline void clear_has_global_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::RepeatedField< float > min_size_;
  ::google::protobuf::RepeatedField< float > max_size_;
  ::google::protobuf::RepeatedField< float > aspect_ratio_;
  ::google::protobuf::int32 num_priors_;
  ::google::protobuf::uint32 img_h_;
  ::google::protobuf::RepeatedField< float > variance_;
  ::google::protobuf::uint32 img_w_;
  bool clip_;
  bool reduce_boxes_;
  float step_h_;
  float step_w_;
  ::google::protobuf::uint64 global_weight_;
  float offset_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGPriorBoxParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGArithmeticParameter : public ::google::protobuf::Message {
 public:
  TGArithmeticParameter();
  virtual ~TGArithmeticParameter();

  TGArithmeticParameter(const TGArithmeticParameter& from);

  inline TGArithmeticParameter& operator=(const TGArithmeticParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGArithmeticParameter& default_instance();

  void Swap(TGArithmeticParameter* other);

  // implements Message ----------------------------------------------

  TGArithmeticParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGArithmeticParameter& from);
  void MergeFrom(const TGArithmeticParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TGArithmeticParameter_ArithmeticOp ArithmeticOp;
  static const ArithmeticOp ADD = TGArithmeticParameter_ArithmeticOp_ADD;
  static const ArithmeticOp SUB = TGArithmeticParameter_ArithmeticOp_SUB;
  static const ArithmeticOp MUL = TGArithmeticParameter_ArithmeticOp_MUL;
  static const ArithmeticOp DIV = TGArithmeticParameter_ArithmeticOp_DIV;
  static inline bool ArithmeticOp_IsValid(int value) {
    return TGArithmeticParameter_ArithmeticOp_IsValid(value);
  }
  static const ArithmeticOp ArithmeticOp_MIN =
    TGArithmeticParameter_ArithmeticOp_ArithmeticOp_MIN;
  static const ArithmeticOp ArithmeticOp_MAX =
    TGArithmeticParameter_ArithmeticOp_ArithmeticOp_MAX;
  static const int ArithmeticOp_ARRAYSIZE =
    TGArithmeticParameter_ArithmeticOp_ArithmeticOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ArithmeticOp_descriptor() {
    return TGArithmeticParameter_ArithmeticOp_descriptor();
  }
  static inline const ::std::string& ArithmeticOp_Name(ArithmeticOp value) {
    return TGArithmeticParameter_ArithmeticOp_Name(value);
  }
  static inline bool ArithmeticOp_Parse(const ::std::string& name,
      ArithmeticOp* value) {
    return TGArithmeticParameter_ArithmeticOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional .bmnet.TGArithmeticParameter.ArithmeticOp operation = 1 [default = ADD];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::bmnet::TGArithmeticParameter_ArithmeticOp operation() const;
  inline void set_operation(::bmnet::TGArithmeticParameter_ArithmeticOp value);

  // optional bool is_b_const = 2 [default = false];
  inline bool has_is_b_const() const;
  inline void clear_is_b_const();
  static const int kIsBConstFieldNumber = 2;
  inline bool is_b_const() const;
  inline void set_is_b_const(bool value);

  // optional uint64 global_b = 3;
  inline bool has_global_b() const;
  inline void clear_global_b();
  static const int kGlobalBFieldNumber = 3;
  inline ::google::protobuf::uint64 global_b() const;
  inline void set_global_b(::google::protobuf::uint64 value);

  // optional .bmnet.BlobShape b_shape = 4;
  inline bool has_b_shape() const;
  inline void clear_b_shape();
  static const int kBShapeFieldNumber = 4;
  inline const ::bmnet::BlobShape& b_shape() const;
  inline ::bmnet::BlobShape* mutable_b_shape();
  inline ::bmnet::BlobShape* release_b_shape();
  inline void set_allocated_b_shape(::bmnet::BlobShape* b_shape);

  // @@protoc_insertion_point(class_scope:bmnet.TGArithmeticParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_is_b_const();
  inline void clear_has_is_b_const();
  inline void set_has_global_b();
  inline void clear_has_global_b();
  inline void set_has_b_shape();
  inline void clear_has_b_shape();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  int operation_;
  bool is_b_const_;
  ::google::protobuf::uint64 global_b_;
  ::bmnet::BlobShape* b_shape_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGArithmeticParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGResizeBilinearParameter : public ::google::protobuf::Message {
 public:
  TGResizeBilinearParameter();
  virtual ~TGResizeBilinearParameter();

  TGResizeBilinearParameter(const TGResizeBilinearParameter& from);

  inline TGResizeBilinearParameter& operator=(const TGResizeBilinearParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGResizeBilinearParameter& default_instance();

  void Swap(TGResizeBilinearParameter* other);

  // implements Message ----------------------------------------------

  TGResizeBilinearParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGResizeBilinearParameter& from);
  void MergeFrom(const TGResizeBilinearParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 resize_h = 1;
  inline bool has_resize_h() const;
  inline void clear_resize_h();
  static const int kResizeHFieldNumber = 1;
  inline ::google::protobuf::uint32 resize_h() const;
  inline void set_resize_h(::google::protobuf::uint32 value);

  // optional uint32 resize_w = 2;
  inline bool has_resize_w() const;
  inline void clear_resize_w();
  static const int kResizeWFieldNumber = 2;
  inline ::google::protobuf::uint32 resize_w() const;
  inline void set_resize_w(::google::protobuf::uint32 value);

  // optional uint32 global_weight = 3 [default = 4294967295];
  inline bool has_global_weight() const;
  inline void clear_global_weight();
  static const int kGlobalWeightFieldNumber = 3;
  inline ::google::protobuf::uint32 global_weight() const;
  inline void set_global_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGResizeBilinearParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_resize_h();
  inline void clear_has_resize_h();
  inline void set_has_resize_w();
  inline void clear_has_resize_w();
  inline void set_has_global_weight();
  inline void clear_has_global_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 resize_h_;
  ::google::protobuf::uint32 resize_w_;
  ::google::protobuf::uint32 global_weight_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGResizeBilinearParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGShuffleChannelParameter : public ::google::protobuf::Message {
 public:
  TGShuffleChannelParameter();
  virtual ~TGShuffleChannelParameter();

  TGShuffleChannelParameter(const TGShuffleChannelParameter& from);

  inline TGShuffleChannelParameter& operator=(const TGShuffleChannelParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGShuffleChannelParameter& default_instance();

  void Swap(TGShuffleChannelParameter* other);

  // implements Message ----------------------------------------------

  TGShuffleChannelParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGShuffleChannelParameter& from);
  void MergeFrom(const TGShuffleChannelParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 group = 1 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 1;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGShuffleChannelParameter)
 private:
  inline void set_has_group();
  inline void clear_has_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 group_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGShuffleChannelParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGInterpParameter : public ::google::protobuf::Message {
 public:
  TGInterpParameter();
  virtual ~TGInterpParameter();

  TGInterpParameter(const TGInterpParameter& from);

  inline TGInterpParameter& operator=(const TGInterpParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGInterpParameter& default_instance();

  void Swap(TGInterpParameter* other);

  // implements Message ----------------------------------------------

  TGInterpParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGInterpParameter& from);
  void MergeFrom(const TGInterpParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 pad_beg = 1;
  inline bool has_pad_beg() const;
  inline void clear_pad_beg();
  static const int kPadBegFieldNumber = 1;
  inline ::google::protobuf::uint32 pad_beg() const;
  inline void set_pad_beg(::google::protobuf::uint32 value);

  // optional uint32 pad_end = 2;
  inline bool has_pad_end() const;
  inline void clear_pad_end();
  static const int kPadEndFieldNumber = 2;
  inline ::google::protobuf::uint32 pad_end() const;
  inline void set_pad_end(::google::protobuf::uint32 value);

  // optional uint32 global_weight = 3 [default = 4294967295];
  inline bool has_global_weight() const;
  inline void clear_global_weight();
  static const int kGlobalWeightFieldNumber = 3;
  inline ::google::protobuf::uint32 global_weight() const;
  inline void set_global_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGInterpParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_pad_beg();
  inline void clear_has_pad_beg();
  inline void set_has_pad_end();
  inline void clear_has_pad_end();
  inline void set_has_global_weight();
  inline void clear_has_global_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 pad_beg_;
  ::google::protobuf::uint32 pad_end_;
  ::google::protobuf::uint32 global_weight_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGInterpParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGProposalParameter : public ::google::protobuf::Message {
 public:
  TGProposalParameter();
  virtual ~TGProposalParameter();

  TGProposalParameter(const TGProposalParameter& from);

  inline TGProposalParameter& operator=(const TGProposalParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGProposalParameter& default_instance();

  void Swap(TGProposalParameter* other);

  // implements Message ----------------------------------------------

  TGProposalParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGProposalParameter& from);
  void MergeFrom(const TGProposalParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional int32 feat_stride = 1 [default = 16];
  inline bool has_feat_stride() const;
  inline void clear_feat_stride();
  static const int kFeatStrideFieldNumber = 1;
  inline ::google::protobuf::int32 feat_stride() const;
  inline void set_feat_stride(::google::protobuf::int32 value);

  // optional uint32 pre_nms_topN = 2 [default = 6000];
  inline bool has_pre_nms_topn() const;
  inline void clear_pre_nms_topn();
  static const int kPreNmsTopNFieldNumber = 2;
  inline ::google::protobuf::uint32 pre_nms_topn() const;
  inline void set_pre_nms_topn(::google::protobuf::uint32 value);

  // optional uint32 post_nms_topN = 3 [default = 300];
  inline bool has_post_nms_topn() const;
  inline void clear_post_nms_topn();
  static const int kPostNmsTopNFieldNumber = 3;
  inline ::google::protobuf::uint32 post_nms_topn() const;
  inline void set_post_nms_topn(::google::protobuf::uint32 value);

  // optional float nms_thresh = 4 [default = 0.7];
  inline bool has_nms_thresh() const;
  inline void clear_nms_thresh();
  static const int kNmsThreshFieldNumber = 4;
  inline float nms_thresh() const;
  inline void set_nms_thresh(float value);

  // optional uint32 min_size = 5 [default = 16];
  inline bool has_min_size() const;
  inline void clear_min_size();
  static const int kMinSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 min_size() const;
  inline void set_min_size(::google::protobuf::uint32 value);

  // optional uint32 base_size = 6 [default = 16];
  inline bool has_base_size() const;
  inline void clear_base_size();
  static const int kBaseSizeFieldNumber = 6;
  inline ::google::protobuf::uint32 base_size() const;
  inline void set_base_size(::google::protobuf::uint32 value);

  // optional uint32 version = 7 [default = 2];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 7;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated float scale = 8 [packed = true];
  inline int scale_size() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 8;
  inline float scale(int index) const;
  inline void set_scale(int index, float value);
  inline void add_scale(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      scale() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_scale();

  // repeated float ratio = 9 [packed = true];
  inline int ratio_size() const;
  inline void clear_ratio();
  static const int kRatioFieldNumber = 9;
  inline float ratio(int index) const;
  inline void set_ratio(int index, float value);
  inline void add_ratio(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      ratio() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_ratio();

  // @@protoc_insertion_point(class_scope:bmnet.TGProposalParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_feat_stride();
  inline void clear_has_feat_stride();
  inline void set_has_pre_nms_topn();
  inline void clear_has_pre_nms_topn();
  inline void set_has_post_nms_topn();
  inline void clear_has_post_nms_topn();
  inline void set_has_nms_thresh();
  inline void clear_has_nms_thresh();
  inline void set_has_min_size();
  inline void clear_has_min_size();
  inline void set_has_base_size();
  inline void clear_has_base_size();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::int32 feat_stride_;
  ::google::protobuf::uint32 pre_nms_topn_;
  ::google::protobuf::uint32 post_nms_topn_;
  float nms_thresh_;
  ::google::protobuf::uint32 min_size_;
  ::google::protobuf::uint32 base_size_;
  ::google::protobuf::RepeatedField< float > scale_;
  mutable int _scale_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > ratio_;
  mutable int _ratio_cached_byte_size_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGProposalParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGRoiPoolingParameter : public ::google::protobuf::Message {
 public:
  TGRoiPoolingParameter();
  virtual ~TGRoiPoolingParameter();

  TGRoiPoolingParameter(const TGRoiPoolingParameter& from);

  inline TGRoiPoolingParameter& operator=(const TGRoiPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGRoiPoolingParameter& default_instance();

  void Swap(TGRoiPoolingParameter* other);

  // implements Message ----------------------------------------------

  TGRoiPoolingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGRoiPoolingParameter& from);
  void MergeFrom(const TGRoiPoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional uint32 pooled_h = 1 [default = 0];
  inline bool has_pooled_h() const;
  inline void clear_pooled_h();
  static const int kPooledHFieldNumber = 1;
  inline ::google::protobuf::uint32 pooled_h() const;
  inline void set_pooled_h(::google::protobuf::uint32 value);

  // optional uint32 pooled_w = 2 [default = 0];
  inline bool has_pooled_w() const;
  inline void clear_pooled_w();
  static const int kPooledWFieldNumber = 2;
  inline ::google::protobuf::uint32 pooled_w() const;
  inline void set_pooled_w(::google::protobuf::uint32 value);

  // optional float spatial_scale = 3 [default = 1];
  inline bool has_spatial_scale() const;
  inline void clear_spatial_scale();
  static const int kSpatialScaleFieldNumber = 3;
  inline float spatial_scale() const;
  inline void set_spatial_scale(float value);

  // @@protoc_insertion_point(class_scope:bmnet.TGRoiPoolingParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_pooled_h();
  inline void clear_has_pooled_h();
  inline void set_has_pooled_w();
  inline void clear_has_pooled_w();
  inline void set_has_spatial_scale();
  inline void clear_has_spatial_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::uint32 pooled_h_;
  ::google::protobuf::uint32 pooled_w_;
  float spatial_scale_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGRoiPoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGPSRoiPoolingParameter : public ::google::protobuf::Message {
 public:
  TGPSRoiPoolingParameter();
  virtual ~TGPSRoiPoolingParameter();

  TGPSRoiPoolingParameter(const TGPSRoiPoolingParameter& from);

  inline TGPSRoiPoolingParameter& operator=(const TGPSRoiPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGPSRoiPoolingParameter& default_instance();

  void Swap(TGPSRoiPoolingParameter* other);

  // implements Message ----------------------------------------------

  TGPSRoiPoolingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGPSRoiPoolingParameter& from);
  void MergeFrom(const TGPSRoiPoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // required float spatial_scale = 1;
  inline bool has_spatial_scale() const;
  inline void clear_spatial_scale();
  static const int kSpatialScaleFieldNumber = 1;
  inline float spatial_scale() const;
  inline void set_spatial_scale(float value);

  // required int32 output_dim = 2;
  inline bool has_output_dim() const;
  inline void clear_output_dim();
  static const int kOutputDimFieldNumber = 2;
  inline ::google::protobuf::int32 output_dim() const;
  inline void set_output_dim(::google::protobuf::int32 value);

  // required int32 group_size = 3;
  inline bool has_group_size() const;
  inline void clear_group_size();
  static const int kGroupSizeFieldNumber = 3;
  inline ::google::protobuf::int32 group_size() const;
  inline void set_group_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGPSRoiPoolingParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_spatial_scale();
  inline void clear_has_spatial_scale();
  inline void set_has_output_dim();
  inline void clear_has_output_dim();
  inline void set_has_group_size();
  inline void clear_has_group_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  float spatial_scale_;
  ::google::protobuf::int32 output_dim_;
  ::google::protobuf::int32 group_size_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGPSRoiPoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGTileParameter : public ::google::protobuf::Message {
 public:
  TGTileParameter();
  virtual ~TGTileParameter();

  TGTileParameter(const TGTileParameter& from);

  inline TGTileParameter& operator=(const TGTileParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGTileParameter& default_instance();

  void Swap(TGTileParameter* other);

  // implements Message ----------------------------------------------

  TGTileParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGTileParameter& from);
  void MergeFrom(const TGTileParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 tiles = 2;
  inline bool has_tiles() const;
  inline void clear_tiles();
  static const int kTilesFieldNumber = 2;
  inline ::google::protobuf::int32 tiles() const;
  inline void set_tiles(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGTileParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_tiles();
  inline void clear_has_tiles();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 tiles_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGTileParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGDetectOutputParameter : public ::google::protobuf::Message {
 public:
  TGDetectOutputParameter();
  virtual ~TGDetectOutputParameter();

  TGDetectOutputParameter(const TGDetectOutputParameter& from);

  inline TGDetectOutputParameter& operator=(const TGDetectOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGDetectOutputParameter& default_instance();

  void Swap(TGDetectOutputParameter* other);

  // implements Message ----------------------------------------------

  TGDetectOutputParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGDetectOutputParameter& from);
  void MergeFrom(const TGDetectOutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional int32 num_classes = 1 [default = 21];
  inline bool has_num_classes() const;
  inline void clear_num_classes();
  static const int kNumClassesFieldNumber = 1;
  inline ::google::protobuf::int32 num_classes() const;
  inline void set_num_classes(::google::protobuf::int32 value);

  // optional bool share_location = 2 [default = true];
  inline bool has_share_location() const;
  inline void clear_share_location();
  static const int kShareLocationFieldNumber = 2;
  inline bool share_location() const;
  inline void set_share_location(bool value);

  // optional int32 background_label_id = 3 [default = 0];
  inline bool has_background_label_id() const;
  inline void clear_background_label_id();
  static const int kBackgroundLabelIdFieldNumber = 3;
  inline ::google::protobuf::int32 background_label_id() const;
  inline void set_background_label_id(::google::protobuf::int32 value);

  // optional float nms_threshold = 4 [default = 0.45];
  inline bool has_nms_threshold() const;
  inline void clear_nms_threshold();
  static const int kNmsThresholdFieldNumber = 4;
  inline float nms_threshold() const;
  inline void set_nms_threshold(float value);

  // optional int32 top_k = 5 [default = 400];
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 5;
  inline ::google::protobuf::int32 top_k() const;
  inline void set_top_k(::google::protobuf::int32 value);

  // optional int32 code_type = 6 [default = 1];
  inline bool has_code_type() const;
  inline void clear_code_type();
  static const int kCodeTypeFieldNumber = 6;
  inline ::google::protobuf::int32 code_type() const;
  inline void set_code_type(::google::protobuf::int32 value);

  // optional int32 keep_top_k = 7 [default = 200];
  inline bool has_keep_top_k() const;
  inline void clear_keep_top_k();
  static const int kKeepTopKFieldNumber = 7;
  inline ::google::protobuf::int32 keep_top_k() const;
  inline void set_keep_top_k(::google::protobuf::int32 value);

  // optional float confidence_threshold = 8 [default = 0.01];
  inline bool has_confidence_threshold() const;
  inline void clear_confidence_threshold();
  static const int kConfidenceThresholdFieldNumber = 8;
  inline float confidence_threshold() const;
  inline void set_confidence_threshold(float value);

  // optional bool variance_encoded_in_target = 9 [default = false];
  inline bool has_variance_encoded_in_target() const;
  inline void clear_variance_encoded_in_target();
  static const int kVarianceEncodedInTargetFieldNumber = 9;
  inline bool variance_encoded_in_target() const;
  inline void set_variance_encoded_in_target(bool value);

  // optional float eta = 10 [default = 0];
  inline bool has_eta() const;
  inline void clear_eta();
  static const int kEtaFieldNumber = 10;
  inline float eta() const;
  inline void set_eta(float value);

  // @@protoc_insertion_point(class_scope:bmnet.TGDetectOutputParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_share_location();
  inline void clear_has_share_location();
  inline void set_has_background_label_id();
  inline void clear_has_background_label_id();
  inline void set_has_nms_threshold();
  inline void clear_has_nms_threshold();
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_code_type();
  inline void clear_has_code_type();
  inline void set_has_keep_top_k();
  inline void clear_has_keep_top_k();
  inline void set_has_confidence_threshold();
  inline void clear_has_confidence_threshold();
  inline void set_has_variance_encoded_in_target();
  inline void clear_has_variance_encoded_in_target();
  inline void set_has_eta();
  inline void clear_has_eta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::google::protobuf::int32 num_classes_;
  ::google::protobuf::int32 background_label_id_;
  float nms_threshold_;
  ::google::protobuf::int32 top_k_;
  bool share_location_;
  bool variance_encoded_in_target_;
  ::google::protobuf::int32 code_type_;
  ::google::protobuf::int32 keep_top_k_;
  float confidence_threshold_;
  float eta_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGDetectOutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGCustomizedParameter : public ::google::protobuf::Message {
 public:
  TGCustomizedParameter();
  virtual ~TGCustomizedParameter();

  TGCustomizedParameter(const TGCustomizedParameter& from);

  inline TGCustomizedParameter& operator=(const TGCustomizedParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGCustomizedParameter& default_instance();

  void Swap(TGCustomizedParameter* other);

  // implements Message ----------------------------------------------

  TGCustomizedParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGCustomizedParameter& from);
  void MergeFrom(const TGCustomizedParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional string sub_type = 1;
  inline bool has_sub_type() const;
  inline void clear_sub_type();
  static const int kSubTypeFieldNumber = 1;
  inline const ::std::string& sub_type() const;
  inline void set_sub_type(const ::std::string& value);
  inline void set_sub_type(const char* value);
  inline void set_sub_type(const char* value, size_t size);
  inline ::std::string* mutable_sub_type();
  inline ::std::string* release_sub_type();
  inline void set_allocated_sub_type(::std::string* sub_type);

  // repeated int32 i32_param = 2;
  inline int i32_param_size() const;
  inline void clear_i32_param();
  static const int kI32ParamFieldNumber = 2;
  inline ::google::protobuf::int32 i32_param(int index) const;
  inline void set_i32_param(int index, ::google::protobuf::int32 value);
  inline void add_i32_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      i32_param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_i32_param();

  // repeated float f32_param = 3;
  inline int f32_param_size() const;
  inline void clear_f32_param();
  static const int kF32ParamFieldNumber = 3;
  inline float f32_param(int index) const;
  inline void set_f32_param(int index, float value);
  inline void add_f32_param(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      f32_param() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_f32_param();

  // @@protoc_insertion_point(class_scope:bmnet.TGCustomizedParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_sub_type();
  inline void clear_has_sub_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  ::std::string* sub_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > i32_param_;
  ::google::protobuf::RepeatedField< float > f32_param_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGCustomizedParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGYoloParameter : public ::google::protobuf::Message {
 public:
  TGYoloParameter();
  virtual ~TGYoloParameter();

  TGYoloParameter(const TGYoloParameter& from);

  inline TGYoloParameter& operator=(const TGYoloParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGYoloParameter& default_instance();

  void Swap(TGYoloParameter* other);

  // implements Message ----------------------------------------------

  TGYoloParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGYoloParameter& from);
  void MergeFrom(const TGYoloParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 classes = 1 [default = 80];
  inline bool has_classes() const;
  inline void clear_classes();
  static const int kClassesFieldNumber = 1;
  inline ::google::protobuf::int32 classes() const;
  inline void set_classes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGYoloParameter)
 private:
  inline void set_has_classes();
  inline void clear_has_classes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 classes_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGYoloParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGRegionParameter : public ::google::protobuf::Message {
 public:
  TGRegionParameter();
  virtual ~TGRegionParameter();

  TGRegionParameter(const TGRegionParameter& from);

  inline TGRegionParameter& operator=(const TGRegionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGRegionParameter& default_instance();

  void Swap(TGRegionParameter* other);

  // implements Message ----------------------------------------------

  TGRegionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGRegionParameter& from);
  void MergeFrom(const TGRegionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 classes = 1 [default = 80];
  inline bool has_classes() const;
  inline void clear_classes();
  static const int kClassesFieldNumber = 1;
  inline ::google::protobuf::int32 classes() const;
  inline void set_classes(::google::protobuf::int32 value);

  // optional int32 softmax = 2 [default = 1];
  inline bool has_softmax() const;
  inline void clear_softmax();
  static const int kSoftmaxFieldNumber = 2;
  inline ::google::protobuf::int32 softmax() const;
  inline void set_softmax(::google::protobuf::int32 value);

  // optional int32 coords = 3 [default = 4];
  inline bool has_coords() const;
  inline void clear_coords();
  static const int kCoordsFieldNumber = 3;
  inline ::google::protobuf::int32 coords() const;
  inline void set_coords(::google::protobuf::int32 value);

  // optional int32 num = 4 [default = 5];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 background = 5 [default = 0];
  inline bool has_background() const;
  inline void clear_background();
  static const int kBackgroundFieldNumber = 5;
  inline ::google::protobuf::int32 background() const;
  inline void set_background(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGRegionParameter)
 private:
  inline void set_has_classes();
  inline void clear_has_classes();
  inline void set_has_softmax();
  inline void clear_has_softmax();
  inline void set_has_coords();
  inline void clear_has_coords();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_background();
  inline void clear_has_background();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 classes_;
  ::google::protobuf::int32 softmax_;
  ::google::protobuf::int32 coords_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 background_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGRegionParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGClipParameter : public ::google::protobuf::Message {
 public:
  TGClipParameter();
  virtual ~TGClipParameter();

  TGClipParameter(const TGClipParameter& from);

  inline TGClipParameter& operator=(const TGClipParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGClipParameter& default_instance();

  void Swap(TGClipParameter* other);

  // implements Message ----------------------------------------------

  TGClipParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGClipParameter& from);
  void MergeFrom(const TGClipParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bmnet.DependInfo dep_info = 999;
  inline bool has_dep_info() const;
  inline void clear_dep_info();
  static const int kDepInfoFieldNumber = 999;
  inline const ::bmnet::DependInfo& dep_info() const;
  inline ::bmnet::DependInfo* mutable_dep_info();
  inline ::bmnet::DependInfo* release_dep_info();
  inline void set_allocated_dep_info(::bmnet::DependInfo* dep_info);

  // optional float max = 1 [default = 3.4028235e+38];
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 1;
  inline float max() const;
  inline void set_max(float value);

  // optional float min = 2 [default = -3.4028235e+38];
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 2;
  inline float min() const;
  inline void set_min(float value);

  // @@protoc_insertion_point(class_scope:bmnet.TGClipParameter)
 private:
  inline void set_has_dep_info();
  inline void clear_has_dep_info();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_min();
  inline void clear_has_min();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bmnet::DependInfo* dep_info_;
  float max_;
  float min_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGClipParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGYoloPostParameter : public ::google::protobuf::Message {
 public:
  TGYoloPostParameter();
  virtual ~TGYoloPostParameter();

  TGYoloPostParameter(const TGYoloPostParameter& from);

  inline TGYoloPostParameter& operator=(const TGYoloPostParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGYoloPostParameter& default_instance();

  void Swap(TGYoloPostParameter* other);

  // implements Message ----------------------------------------------

  TGYoloPostParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGYoloPostParameter& from);
  void MergeFrom(const TGYoloPostParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 classes = 1 [default = 80];
  inline bool has_classes() const;
  inline void clear_classes();
  static const int kClassesFieldNumber = 1;
  inline ::google::protobuf::int32 classes() const;
  inline void set_classes(::google::protobuf::int32 value);

  // optional int32 netw = 2 [default = 416];
  inline bool has_netw() const;
  inline void clear_netw();
  static const int kNetwFieldNumber = 2;
  inline ::google::protobuf::int32 netw() const;
  inline void set_netw(::google::protobuf::int32 value);

  // optional int32 neth = 3 [default = 416];
  inline bool has_neth() const;
  inline void clear_neth();
  static const int kNethFieldNumber = 3;
  inline ::google::protobuf::int32 neth() const;
  inline void set_neth(::google::protobuf::int32 value);

  // optional int32 num = 4 [default = 9];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // repeated int32 mask = 5;
  inline int mask_size() const;
  inline void clear_mask();
  static const int kMaskFieldNumber = 5;
  inline ::google::protobuf::int32 mask(int index) const;
  inline void set_mask(int index, ::google::protobuf::int32 value);
  inline void add_mask(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mask() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mask();

  // repeated int32 anchor = 6;
  inline int anchor_size() const;
  inline void clear_anchor();
  static const int kAnchorFieldNumber = 6;
  inline ::google::protobuf::int32 anchor(int index) const;
  inline void set_anchor(int index, ::google::protobuf::int32 value);
  inline void add_anchor(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      anchor() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_anchor();

  // @@protoc_insertion_point(class_scope:bmnet.TGYoloPostParameter)
 private:
  inline void set_has_classes();
  inline void clear_has_classes();
  inline void set_has_netw();
  inline void clear_has_netw();
  inline void set_has_neth();
  inline void clear_has_neth();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 classes_;
  ::google::protobuf::int32 netw_;
  ::google::protobuf::int32 neth_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mask_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > anchor_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGYoloPostParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGReverseParameter : public ::google::protobuf::Message {
 public:
  TGReverseParameter();
  virtual ~TGReverseParameter();

  TGReverseParameter(const TGReverseParameter& from);

  inline TGReverseParameter& operator=(const TGReverseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGReverseParameter& default_instance();

  void Swap(TGReverseParameter* other);

  // implements Message ----------------------------------------------

  TGReverseParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGReverseParameter& from);
  void MergeFrom(const TGReverseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 0];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.TGReverseParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGReverseParameter* default_instance_;
};
// -------------------------------------------------------------------

class TGLstmUnitParameter : public ::google::protobuf::Message {
 public:
  TGLstmUnitParameter();
  virtual ~TGLstmUnitParameter();

  TGLstmUnitParameter(const TGLstmUnitParameter& from);

  inline TGLstmUnitParameter& operator=(const TGLstmUnitParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGLstmUnitParameter& default_instance();

  void Swap(TGLstmUnitParameter* other);

  // implements Message ----------------------------------------------

  TGLstmUnitParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGLstmUnitParameter& from);
  void MergeFrom(const TGLstmUnitParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TGLstmUnitParameter_LstmDataOrder LstmDataOrder;
  static const LstmDataOrder ORDER_IFGO = TGLstmUnitParameter_LstmDataOrder_ORDER_IFGO;
  static const LstmDataOrder ORDER_IFOG = TGLstmUnitParameter_LstmDataOrder_ORDER_IFOG;
  static inline bool LstmDataOrder_IsValid(int value) {
    return TGLstmUnitParameter_LstmDataOrder_IsValid(value);
  }
  static const LstmDataOrder LstmDataOrder_MIN =
    TGLstmUnitParameter_LstmDataOrder_LstmDataOrder_MIN;
  static const LstmDataOrder LstmDataOrder_MAX =
    TGLstmUnitParameter_LstmDataOrder_LstmDataOrder_MAX;
  static const int LstmDataOrder_ARRAYSIZE =
    TGLstmUnitParameter_LstmDataOrder_LstmDataOrder_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LstmDataOrder_descriptor() {
    return TGLstmUnitParameter_LstmDataOrder_descriptor();
  }
  static inline const ::std::string& LstmDataOrder_Name(LstmDataOrder value) {
    return TGLstmUnitParameter_LstmDataOrder_Name(value);
  }
  static inline bool LstmDataOrder_Parse(const ::std::string& name,
      LstmDataOrder* value) {
    return TGLstmUnitParameter_LstmDataOrder_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .bmnet.TGLstmUnitParameter.LstmDataOrder data_order = 1 [default = ORDER_IFGO];
  inline bool has_data_order() const;
  inline void clear_data_order();
  static const int kDataOrderFieldNumber = 1;
  inline ::bmnet::TGLstmUnitParameter_LstmDataOrder data_order() const;
  inline void set_data_order(::bmnet::TGLstmUnitParameter_LstmDataOrder value);

  // @@protoc_insertion_point(class_scope:bmnet.TGLstmUnitParameter)
 private:
  inline void set_has_data_order();
  inline void clear_has_data_order();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int data_order_;
  friend void  protobuf_AddDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fbmnet_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fbmnet_2eproto();

  void InitAsDefaultInstance();
  static TGLstmUnitParameter* default_instance_;
};
// ===================================================================


// ===================================================================

// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::dim_size() const {
  return dim_.size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.BlobShape.dim)
  return dim_.Get(index);
}
inline void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.BlobShape.dim)
}
inline void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.BlobShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:bmnet.BlobShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.BlobShape.dim)
  return &dim_;
}

// optional int32 data_type_size = 2 [default = 4];
inline bool BlobShape::has_data_type_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobShape::set_has_data_type_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobShape::clear_has_data_type_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobShape::clear_data_type_size() {
  data_type_size_ = 4;
  clear_has_data_type_size();
}
inline ::google::protobuf::int32 BlobShape::data_type_size() const {
  // @@protoc_insertion_point(field_get:bmnet.BlobShape.data_type_size)
  return data_type_size_;
}
inline void BlobShape::set_data_type_size(::google::protobuf::int32 value) {
  set_has_data_type_size();
  data_type_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.BlobShape.data_type_size)
}

// -------------------------------------------------------------------

// DependInfo

// optional uint32 stream_id = 1 [default = 0];
inline bool DependInfo::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DependInfo::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DependInfo::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DependInfo::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 DependInfo::stream_id() const {
  // @@protoc_insertion_point(field_get:bmnet.DependInfo.stream_id)
  return stream_id_;
}
inline void DependInfo::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.DependInfo.stream_id)
}

// optional uint32 inst_id = 2 [default = 0];
inline bool DependInfo::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DependInfo::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DependInfo::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DependInfo::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 DependInfo::inst_id() const {
  // @@protoc_insertion_point(field_get:bmnet.DependInfo.inst_id)
  return inst_id_;
}
inline void DependInfo::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.DependInfo.inst_id)
}

// repeated uint32 depends = 3;
inline int DependInfo::depends_size() const {
  return depends_.size();
}
inline void DependInfo::clear_depends() {
  depends_.Clear();
}
inline ::google::protobuf::uint32 DependInfo::depends(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.DependInfo.depends)
  return depends_.Get(index);
}
inline void DependInfo::set_depends(int index, ::google::protobuf::uint32 value) {
  depends_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.DependInfo.depends)
}
inline void DependInfo::add_depends(::google::protobuf::uint32 value) {
  depends_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.DependInfo.depends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DependInfo::depends() const {
  // @@protoc_insertion_point(field_list:bmnet.DependInfo.depends)
  return depends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DependInfo::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.DependInfo.depends)
  return &depends_;
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FillerParameter::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:bmnet.FillerParameter.type)
  return *type_;
}
inline void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  // @@protoc_insertion_point(field_mutable:bmnet.FillerParameter.type)
  return type_;
}
inline ::std::string* FillerParameter::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:bmnet.FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:bmnet.FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:bmnet.FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:bmnet.FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:bmnet.FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:bmnet.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:bmnet.FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:bmnet.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:bmnet.FillerParameter.std)
  return std_;
}
inline void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:bmnet.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:bmnet.FillerParameter.sparse)
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:bmnet.FillerParameter.sparse)
}

// optional .bmnet.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
inline bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
inline ::bmnet::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:bmnet.FillerParameter.variance_norm)
  return static_cast< ::bmnet::FillerParameter_VarianceNorm >(variance_norm_);
}
inline void FillerParameter::set_variance_norm(::bmnet::FillerParameter_VarianceNorm value) {
  assert(::bmnet::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:bmnet.FillerParameter.variance_norm)
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:bmnet.NetParameter.name)
  return *name_;
}
inline void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.NetParameter.name)
}
inline void NetParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.NetParameter.name)
}
inline ::std::string* NetParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.NetParameter.name)
  return name_;
}
inline ::std::string* NetParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.NetParameter.name)
}

// repeated int32 input_dim = 4;
inline int NetParameter::input_dim_size() const {
  return input_dim_.size();
}
inline void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.NetParameter.input_dim)
  return input_dim_.Get(index);
}
inline void NetParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.NetParameter.input_dim)
}
inline void NetParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.NetParameter.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.NetParameter.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.NetParameter.input_dim)
  return &input_dim_;
}

// repeated .bmnet.LayerParameter layer = 100;
inline int NetParameter::layer_size() const {
  return layer_.size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline const ::bmnet::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.NetParameter.layer)
  return layer_.Get(index);
}
inline ::bmnet::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet.NetParameter.layer)
  return layer_.Mutable(index);
}
inline ::bmnet::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:bmnet.NetParameter.layer)
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bmnet::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:bmnet.NetParameter.layer)
  return layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::bmnet::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.NetParameter.layer)
  return &layer_;
}

// optional uint32 weight_size = 5 [default = 0];
inline bool NetParameter::has_weight_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetParameter::set_has_weight_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetParameter::clear_has_weight_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetParameter::clear_weight_size() {
  weight_size_ = 0u;
  clear_has_weight_size();
}
inline ::google::protobuf::uint32 NetParameter::weight_size() const {
  // @@protoc_insertion_point(field_get:bmnet.NetParameter.weight_size)
  return weight_size_;
}
inline void NetParameter::set_weight_size(::google::protobuf::uint32 value) {
  set_has_weight_size();
  weight_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.NetParameter.weight_size)
}

// -------------------------------------------------------------------

// LayerParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool LayerParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& LayerParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* LayerParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* LayerParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.dep_info)
}

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.name)
  return *name_;
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.name)
  return name_;
}
inline ::std::string* LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.name)
}

// optional string type = 2;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerParameter::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.type)
  return *type_;
}
inline void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.LayerParameter.type)
}
inline ::std::string* LayerParameter::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.type)
  return type_;
}
inline ::std::string* LayerParameter::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bmnet.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.LayerParameter.bottom)
}
inline ::std::string* LayerParameter::add_bottom() {
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bmnet.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bmnet.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bmnet.LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:bmnet.LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
inline int LayerParameter::top_size() const {
  return top_.size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bmnet.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.LayerParameter.top)
}
inline ::std::string* LayerParameter::add_top() {
  return top_.Add();
}
inline void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bmnet.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bmnet.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bmnet.LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:bmnet.LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.LayerParameter.top)
  return &top_;
}

// optional bool in_place = 5 [default = false];
inline bool LayerParameter::has_in_place() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_in_place() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerParameter::clear_has_in_place() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerParameter::clear_in_place() {
  in_place_ = false;
  clear_has_in_place();
}
inline bool LayerParameter::in_place() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.in_place)
  return in_place_;
}
inline void LayerParameter::set_in_place(bool value) {
  set_has_in_place();
  in_place_ = value;
  // @@protoc_insertion_point(field_set:bmnet.LayerParameter.in_place)
}

// optional bool cpu_op = 6 [default = false];
inline bool LayerParameter::has_cpu_op() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_cpu_op() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerParameter::clear_has_cpu_op() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerParameter::clear_cpu_op() {
  cpu_op_ = false;
  clear_has_cpu_op();
}
inline bool LayerParameter::cpu_op() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.cpu_op)
  return cpu_op_;
}
inline void LayerParameter::set_cpu_op(bool value) {
  set_has_cpu_op();
  cpu_op_ = value;
  // @@protoc_insertion_point(field_set:bmnet.LayerParameter.cpu_op)
}

// repeated float threshold_x = 7;
inline int LayerParameter::threshold_x_size() const {
  return threshold_x_.size();
}
inline void LayerParameter::clear_threshold_x() {
  threshold_x_.Clear();
}
inline float LayerParameter::threshold_x(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.threshold_x)
  return threshold_x_.Get(index);
}
inline void LayerParameter::set_threshold_x(int index, float value) {
  threshold_x_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.LayerParameter.threshold_x)
}
inline void LayerParameter::add_threshold_x(float value) {
  threshold_x_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.LayerParameter.threshold_x)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::threshold_x() const {
  // @@protoc_insertion_point(field_list:bmnet.LayerParameter.threshold_x)
  return threshold_x_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_threshold_x() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.LayerParameter.threshold_x)
  return &threshold_x_;
}

// repeated float threshold_y = 8;
inline int LayerParameter::threshold_y_size() const {
  return threshold_y_.size();
}
inline void LayerParameter::clear_threshold_y() {
  threshold_y_.Clear();
}
inline float LayerParameter::threshold_y(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.threshold_y)
  return threshold_y_.Get(index);
}
inline void LayerParameter::set_threshold_y(int index, float value) {
  threshold_y_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.LayerParameter.threshold_y)
}
inline void LayerParameter::add_threshold_y(float value) {
  threshold_y_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.LayerParameter.threshold_y)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::threshold_y() const {
  // @@protoc_insertion_point(field_list:bmnet.LayerParameter.threshold_y)
  return threshold_y_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_threshold_y() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.LayerParameter.threshold_y)
  return &threshold_y_;
}

// optional string calib_id = 12;
inline bool LayerParameter::has_calib_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_calib_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerParameter::clear_has_calib_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerParameter::clear_calib_id() {
  if (calib_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calib_id_->clear();
  }
  clear_has_calib_id();
}
inline const ::std::string& LayerParameter::calib_id() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.calib_id)
  return *calib_id_;
}
inline void LayerParameter::set_calib_id(const ::std::string& value) {
  set_has_calib_id();
  if (calib_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calib_id_ = new ::std::string;
  }
  calib_id_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.LayerParameter.calib_id)
}
inline void LayerParameter::set_calib_id(const char* value) {
  set_has_calib_id();
  if (calib_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calib_id_ = new ::std::string;
  }
  calib_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.LayerParameter.calib_id)
}
inline void LayerParameter::set_calib_id(const char* value, size_t size) {
  set_has_calib_id();
  if (calib_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calib_id_ = new ::std::string;
  }
  calib_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.LayerParameter.calib_id)
}
inline ::std::string* LayerParameter::mutable_calib_id() {
  set_has_calib_id();
  if (calib_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calib_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.calib_id)
  return calib_id_;
}
inline ::std::string* LayerParameter::release_calib_id() {
  clear_has_calib_id();
  if (calib_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = calib_id_;
    calib_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_calib_id(::std::string* calib_id) {
  if (calib_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete calib_id_;
  }
  if (calib_id) {
    set_has_calib_id();
    calib_id_ = calib_id;
  } else {
    clear_has_calib_id();
    calib_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.calib_id)
}

// repeated .bmnet.BlobShape input_shape = 200;
inline int LayerParameter::input_shape_size() const {
  return input_shape_.size();
}
inline void LayerParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline const ::bmnet::BlobShape& LayerParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.input_shape)
  return input_shape_.Get(index);
}
inline ::bmnet::BlobShape* LayerParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.input_shape)
  return input_shape_.Mutable(index);
}
inline ::bmnet::BlobShape* LayerParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:bmnet.LayerParameter.input_shape)
  return input_shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bmnet::BlobShape >&
LayerParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:bmnet.LayerParameter.input_shape)
  return input_shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::bmnet::BlobShape >*
LayerParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.LayerParameter.input_shape)
  return &input_shape_;
}

// repeated .bmnet.BlobShape output_shape = 201;
inline int LayerParameter::output_shape_size() const {
  return output_shape_.size();
}
inline void LayerParameter::clear_output_shape() {
  output_shape_.Clear();
}
inline const ::bmnet::BlobShape& LayerParameter::output_shape(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.output_shape)
  return output_shape_.Get(index);
}
inline ::bmnet::BlobShape* LayerParameter::mutable_output_shape(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.output_shape)
  return output_shape_.Mutable(index);
}
inline ::bmnet::BlobShape* LayerParameter::add_output_shape() {
  // @@protoc_insertion_point(field_add:bmnet.LayerParameter.output_shape)
  return output_shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bmnet::BlobShape >&
LayerParameter::output_shape() const {
  // @@protoc_insertion_point(field_list:bmnet.LayerParameter.output_shape)
  return output_shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::bmnet::BlobShape >*
LayerParameter::mutable_output_shape() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.LayerParameter.output_shape)
  return &output_shape_;
}

// repeated uint64 global_input = 202;
inline int LayerParameter::global_input_size() const {
  return global_input_.size();
}
inline void LayerParameter::clear_global_input() {
  global_input_.Clear();
}
inline ::google::protobuf::uint64 LayerParameter::global_input(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.global_input)
  return global_input_.Get(index);
}
inline void LayerParameter::set_global_input(int index, ::google::protobuf::uint64 value) {
  global_input_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.LayerParameter.global_input)
}
inline void LayerParameter::add_global_input(::google::protobuf::uint64 value) {
  global_input_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.LayerParameter.global_input)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LayerParameter::global_input() const {
  // @@protoc_insertion_point(field_list:bmnet.LayerParameter.global_input)
  return global_input_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LayerParameter::mutable_global_input() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.LayerParameter.global_input)
  return &global_input_;
}

// repeated uint64 global_output = 203;
inline int LayerParameter::global_output_size() const {
  return global_output_.size();
}
inline void LayerParameter::clear_global_output() {
  global_output_.Clear();
}
inline ::google::protobuf::uint64 LayerParameter::global_output(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.global_output)
  return global_output_.Get(index);
}
inline void LayerParameter::set_global_output(int index, ::google::protobuf::uint64 value) {
  global_output_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.LayerParameter.global_output)
}
inline void LayerParameter::add_global_output(::google::protobuf::uint64 value) {
  global_output_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.LayerParameter.global_output)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LayerParameter::global_output() const {
  // @@protoc_insertion_point(field_list:bmnet.LayerParameter.global_output)
  return global_output_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LayerParameter::mutable_global_output() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.LayerParameter.global_output)
  return &global_output_;
}

// optional .bmnet.StartParameter start_param = 210;
inline bool LayerParameter::has_start_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_start_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerParameter::clear_has_start_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerParameter::clear_start_param() {
  if (start_param_ != NULL) start_param_->::bmnet::StartParameter::Clear();
  clear_has_start_param();
}
inline const ::bmnet::StartParameter& LayerParameter::start_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.start_param)
  return start_param_ != NULL ? *start_param_ : *default_instance_->start_param_;
}
inline ::bmnet::StartParameter* LayerParameter::mutable_start_param() {
  set_has_start_param();
  if (start_param_ == NULL) start_param_ = new ::bmnet::StartParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.start_param)
  return start_param_;
}
inline ::bmnet::StartParameter* LayerParameter::release_start_param() {
  clear_has_start_param();
  ::bmnet::StartParameter* temp = start_param_;
  start_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_start_param(::bmnet::StartParameter* start_param) {
  delete start_param_;
  start_param_ = start_param;
  if (start_param) {
    set_has_start_param();
  } else {
    clear_has_start_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.start_param)
}

// optional .bmnet.EndParameter end_param = 211;
inline bool LayerParameter::has_end_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_end_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerParameter::clear_has_end_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerParameter::clear_end_param() {
  if (end_param_ != NULL) end_param_->::bmnet::EndParameter::Clear();
  clear_has_end_param();
}
inline const ::bmnet::EndParameter& LayerParameter::end_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.end_param)
  return end_param_ != NULL ? *end_param_ : *default_instance_->end_param_;
}
inline ::bmnet::EndParameter* LayerParameter::mutable_end_param() {
  set_has_end_param();
  if (end_param_ == NULL) end_param_ = new ::bmnet::EndParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.end_param)
  return end_param_;
}
inline ::bmnet::EndParameter* LayerParameter::release_end_param() {
  clear_has_end_param();
  ::bmnet::EndParameter* temp = end_param_;
  end_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_end_param(::bmnet::EndParameter* end_param) {
  delete end_param_;
  end_param_ = end_param;
  if (end_param) {
    set_has_end_param();
  } else {
    clear_has_end_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.end_param)
}

// optional .bmnet.TLConvolutionParameter tl_convolution_param = 222;
inline bool LayerParameter::has_tl_convolution_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_tl_convolution_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerParameter::clear_has_tl_convolution_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerParameter::clear_tl_convolution_param() {
  if (tl_convolution_param_ != NULL) tl_convolution_param_->::bmnet::TLConvolutionParameter::Clear();
  clear_has_tl_convolution_param();
}
inline const ::bmnet::TLConvolutionParameter& LayerParameter::tl_convolution_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_convolution_param)
  return tl_convolution_param_ != NULL ? *tl_convolution_param_ : *default_instance_->tl_convolution_param_;
}
inline ::bmnet::TLConvolutionParameter* LayerParameter::mutable_tl_convolution_param() {
  set_has_tl_convolution_param();
  if (tl_convolution_param_ == NULL) tl_convolution_param_ = new ::bmnet::TLConvolutionParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_convolution_param)
  return tl_convolution_param_;
}
inline ::bmnet::TLConvolutionParameter* LayerParameter::release_tl_convolution_param() {
  clear_has_tl_convolution_param();
  ::bmnet::TLConvolutionParameter* temp = tl_convolution_param_;
  tl_convolution_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_convolution_param(::bmnet::TLConvolutionParameter* tl_convolution_param) {
  delete tl_convolution_param_;
  tl_convolution_param_ = tl_convolution_param;
  if (tl_convolution_param) {
    set_has_tl_convolution_param();
  } else {
    clear_has_tl_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_convolution_param)
}

// optional .bmnet.TLPoolingParameter tl_pooling_param = 223;
inline bool LayerParameter::has_tl_pooling_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_tl_pooling_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerParameter::clear_has_tl_pooling_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerParameter::clear_tl_pooling_param() {
  if (tl_pooling_param_ != NULL) tl_pooling_param_->::bmnet::TLPoolingParameter::Clear();
  clear_has_tl_pooling_param();
}
inline const ::bmnet::TLPoolingParameter& LayerParameter::tl_pooling_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_pooling_param)
  return tl_pooling_param_ != NULL ? *tl_pooling_param_ : *default_instance_->tl_pooling_param_;
}
inline ::bmnet::TLPoolingParameter* LayerParameter::mutable_tl_pooling_param() {
  set_has_tl_pooling_param();
  if (tl_pooling_param_ == NULL) tl_pooling_param_ = new ::bmnet::TLPoolingParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_pooling_param)
  return tl_pooling_param_;
}
inline ::bmnet::TLPoolingParameter* LayerParameter::release_tl_pooling_param() {
  clear_has_tl_pooling_param();
  ::bmnet::TLPoolingParameter* temp = tl_pooling_param_;
  tl_pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_pooling_param(::bmnet::TLPoolingParameter* tl_pooling_param) {
  delete tl_pooling_param_;
  tl_pooling_param_ = tl_pooling_param;
  if (tl_pooling_param) {
    set_has_tl_pooling_param();
  } else {
    clear_has_tl_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_pooling_param)
}

// optional .bmnet.TLInnerProductParameter tl_inner_product_param = 224;
inline bool LayerParameter::has_tl_inner_product_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_tl_inner_product_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerParameter::clear_has_tl_inner_product_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerParameter::clear_tl_inner_product_param() {
  if (tl_inner_product_param_ != NULL) tl_inner_product_param_->::bmnet::TLInnerProductParameter::Clear();
  clear_has_tl_inner_product_param();
}
inline const ::bmnet::TLInnerProductParameter& LayerParameter::tl_inner_product_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_inner_product_param)
  return tl_inner_product_param_ != NULL ? *tl_inner_product_param_ : *default_instance_->tl_inner_product_param_;
}
inline ::bmnet::TLInnerProductParameter* LayerParameter::mutable_tl_inner_product_param() {
  set_has_tl_inner_product_param();
  if (tl_inner_product_param_ == NULL) tl_inner_product_param_ = new ::bmnet::TLInnerProductParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_inner_product_param)
  return tl_inner_product_param_;
}
inline ::bmnet::TLInnerProductParameter* LayerParameter::release_tl_inner_product_param() {
  clear_has_tl_inner_product_param();
  ::bmnet::TLInnerProductParameter* temp = tl_inner_product_param_;
  tl_inner_product_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_inner_product_param(::bmnet::TLInnerProductParameter* tl_inner_product_param) {
  delete tl_inner_product_param_;
  tl_inner_product_param_ = tl_inner_product_param;
  if (tl_inner_product_param) {
    set_has_tl_inner_product_param();
  } else {
    clear_has_tl_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_inner_product_param)
}

// optional .bmnet.TLActivationParameter tl_activation_param = 225;
inline bool LayerParameter::has_tl_activation_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_tl_activation_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LayerParameter::clear_has_tl_activation_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LayerParameter::clear_tl_activation_param() {
  if (tl_activation_param_ != NULL) tl_activation_param_->::bmnet::TLActivationParameter::Clear();
  clear_has_tl_activation_param();
}
inline const ::bmnet::TLActivationParameter& LayerParameter::tl_activation_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_activation_param)
  return tl_activation_param_ != NULL ? *tl_activation_param_ : *default_instance_->tl_activation_param_;
}
inline ::bmnet::TLActivationParameter* LayerParameter::mutable_tl_activation_param() {
  set_has_tl_activation_param();
  if (tl_activation_param_ == NULL) tl_activation_param_ = new ::bmnet::TLActivationParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_activation_param)
  return tl_activation_param_;
}
inline ::bmnet::TLActivationParameter* LayerParameter::release_tl_activation_param() {
  clear_has_tl_activation_param();
  ::bmnet::TLActivationParameter* temp = tl_activation_param_;
  tl_activation_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_activation_param(::bmnet::TLActivationParameter* tl_activation_param) {
  delete tl_activation_param_;
  tl_activation_param_ = tl_activation_param;
  if (tl_activation_param) {
    set_has_tl_activation_param();
  } else {
    clear_has_tl_activation_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_activation_param)
}

// optional .bmnet.TLUpsampleParameter tl_upsample_param = 226;
inline bool LayerParameter::has_tl_upsample_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_tl_upsample_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LayerParameter::clear_has_tl_upsample_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LayerParameter::clear_tl_upsample_param() {
  if (tl_upsample_param_ != NULL) tl_upsample_param_->::bmnet::TLUpsampleParameter::Clear();
  clear_has_tl_upsample_param();
}
inline const ::bmnet::TLUpsampleParameter& LayerParameter::tl_upsample_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_upsample_param)
  return tl_upsample_param_ != NULL ? *tl_upsample_param_ : *default_instance_->tl_upsample_param_;
}
inline ::bmnet::TLUpsampleParameter* LayerParameter::mutable_tl_upsample_param() {
  set_has_tl_upsample_param();
  if (tl_upsample_param_ == NULL) tl_upsample_param_ = new ::bmnet::TLUpsampleParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_upsample_param)
  return tl_upsample_param_;
}
inline ::bmnet::TLUpsampleParameter* LayerParameter::release_tl_upsample_param() {
  clear_has_tl_upsample_param();
  ::bmnet::TLUpsampleParameter* temp = tl_upsample_param_;
  tl_upsample_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_upsample_param(::bmnet::TLUpsampleParameter* tl_upsample_param) {
  delete tl_upsample_param_;
  tl_upsample_param_ = tl_upsample_param;
  if (tl_upsample_param) {
    set_has_tl_upsample_param();
  } else {
    clear_has_tl_upsample_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_upsample_param)
}

// optional .bmnet.TLLrnParameter tl_lrn_param = 227;
inline bool LayerParameter::has_tl_lrn_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_tl_lrn_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LayerParameter::clear_has_tl_lrn_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LayerParameter::clear_tl_lrn_param() {
  if (tl_lrn_param_ != NULL) tl_lrn_param_->::bmnet::TLLrnParameter::Clear();
  clear_has_tl_lrn_param();
}
inline const ::bmnet::TLLrnParameter& LayerParameter::tl_lrn_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_lrn_param)
  return tl_lrn_param_ != NULL ? *tl_lrn_param_ : *default_instance_->tl_lrn_param_;
}
inline ::bmnet::TLLrnParameter* LayerParameter::mutable_tl_lrn_param() {
  set_has_tl_lrn_param();
  if (tl_lrn_param_ == NULL) tl_lrn_param_ = new ::bmnet::TLLrnParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_lrn_param)
  return tl_lrn_param_;
}
inline ::bmnet::TLLrnParameter* LayerParameter::release_tl_lrn_param() {
  clear_has_tl_lrn_param();
  ::bmnet::TLLrnParameter* temp = tl_lrn_param_;
  tl_lrn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_lrn_param(::bmnet::TLLrnParameter* tl_lrn_param) {
  delete tl_lrn_param_;
  tl_lrn_param_ = tl_lrn_param;
  if (tl_lrn_param) {
    set_has_tl_lrn_param();
  } else {
    clear_has_tl_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_lrn_param)
}

// optional .bmnet.TLScaleParameter tl_scale_param = 228;
inline bool LayerParameter::has_tl_scale_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_tl_scale_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LayerParameter::clear_has_tl_scale_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LayerParameter::clear_tl_scale_param() {
  if (tl_scale_param_ != NULL) tl_scale_param_->::bmnet::TLScaleParameter::Clear();
  clear_has_tl_scale_param();
}
inline const ::bmnet::TLScaleParameter& LayerParameter::tl_scale_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_scale_param)
  return tl_scale_param_ != NULL ? *tl_scale_param_ : *default_instance_->tl_scale_param_;
}
inline ::bmnet::TLScaleParameter* LayerParameter::mutable_tl_scale_param() {
  set_has_tl_scale_param();
  if (tl_scale_param_ == NULL) tl_scale_param_ = new ::bmnet::TLScaleParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_scale_param)
  return tl_scale_param_;
}
inline ::bmnet::TLScaleParameter* LayerParameter::release_tl_scale_param() {
  clear_has_tl_scale_param();
  ::bmnet::TLScaleParameter* temp = tl_scale_param_;
  tl_scale_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_scale_param(::bmnet::TLScaleParameter* tl_scale_param) {
  delete tl_scale_param_;
  tl_scale_param_ = tl_scale_param;
  if (tl_scale_param) {
    set_has_tl_scale_param();
  } else {
    clear_has_tl_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_scale_param)
}

// optional .bmnet.TLEltwiseParameter tl_eltwise_param = 229;
inline bool LayerParameter::has_tl_eltwise_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_tl_eltwise_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LayerParameter::clear_has_tl_eltwise_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LayerParameter::clear_tl_eltwise_param() {
  if (tl_eltwise_param_ != NULL) tl_eltwise_param_->::bmnet::TLEltwiseParameter::Clear();
  clear_has_tl_eltwise_param();
}
inline const ::bmnet::TLEltwiseParameter& LayerParameter::tl_eltwise_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_eltwise_param)
  return tl_eltwise_param_ != NULL ? *tl_eltwise_param_ : *default_instance_->tl_eltwise_param_;
}
inline ::bmnet::TLEltwiseParameter* LayerParameter::mutable_tl_eltwise_param() {
  set_has_tl_eltwise_param();
  if (tl_eltwise_param_ == NULL) tl_eltwise_param_ = new ::bmnet::TLEltwiseParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_eltwise_param)
  return tl_eltwise_param_;
}
inline ::bmnet::TLEltwiseParameter* LayerParameter::release_tl_eltwise_param() {
  clear_has_tl_eltwise_param();
  ::bmnet::TLEltwiseParameter* temp = tl_eltwise_param_;
  tl_eltwise_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_eltwise_param(::bmnet::TLEltwiseParameter* tl_eltwise_param) {
  delete tl_eltwise_param_;
  tl_eltwise_param_ = tl_eltwise_param;
  if (tl_eltwise_param) {
    set_has_tl_eltwise_param();
  } else {
    clear_has_tl_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_eltwise_param)
}

// optional .bmnet.TLBatchNormParameter tl_batchnorm_param = 230;
inline bool LayerParameter::has_tl_batchnorm_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_tl_batchnorm_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LayerParameter::clear_has_tl_batchnorm_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LayerParameter::clear_tl_batchnorm_param() {
  if (tl_batchnorm_param_ != NULL) tl_batchnorm_param_->::bmnet::TLBatchNormParameter::Clear();
  clear_has_tl_batchnorm_param();
}
inline const ::bmnet::TLBatchNormParameter& LayerParameter::tl_batchnorm_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_batchnorm_param)
  return tl_batchnorm_param_ != NULL ? *tl_batchnorm_param_ : *default_instance_->tl_batchnorm_param_;
}
inline ::bmnet::TLBatchNormParameter* LayerParameter::mutable_tl_batchnorm_param() {
  set_has_tl_batchnorm_param();
  if (tl_batchnorm_param_ == NULL) tl_batchnorm_param_ = new ::bmnet::TLBatchNormParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_batchnorm_param)
  return tl_batchnorm_param_;
}
inline ::bmnet::TLBatchNormParameter* LayerParameter::release_tl_batchnorm_param() {
  clear_has_tl_batchnorm_param();
  ::bmnet::TLBatchNormParameter* temp = tl_batchnorm_param_;
  tl_batchnorm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_batchnorm_param(::bmnet::TLBatchNormParameter* tl_batchnorm_param) {
  delete tl_batchnorm_param_;
  tl_batchnorm_param_ = tl_batchnorm_param;
  if (tl_batchnorm_param) {
    set_has_tl_batchnorm_param();
  } else {
    clear_has_tl_batchnorm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_batchnorm_param)
}

// repeated .bmnet.TLTransportParameter tl_transport_param = 231;
inline int LayerParameter::tl_transport_param_size() const {
  return tl_transport_param_.size();
}
inline void LayerParameter::clear_tl_transport_param() {
  tl_transport_param_.Clear();
}
inline const ::bmnet::TLTransportParameter& LayerParameter::tl_transport_param(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_transport_param)
  return tl_transport_param_.Get(index);
}
inline ::bmnet::TLTransportParameter* LayerParameter::mutable_tl_transport_param(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_transport_param)
  return tl_transport_param_.Mutable(index);
}
inline ::bmnet::TLTransportParameter* LayerParameter::add_tl_transport_param() {
  // @@protoc_insertion_point(field_add:bmnet.LayerParameter.tl_transport_param)
  return tl_transport_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bmnet::TLTransportParameter >&
LayerParameter::tl_transport_param() const {
  // @@protoc_insertion_point(field_list:bmnet.LayerParameter.tl_transport_param)
  return tl_transport_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::bmnet::TLTransportParameter >*
LayerParameter::mutable_tl_transport_param() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.LayerParameter.tl_transport_param)
  return &tl_transport_param_;
}

// optional .bmnet.TLDummyParameter tl_dummy_param = 232;
inline bool LayerParameter::has_tl_dummy_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_tl_dummy_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LayerParameter::clear_has_tl_dummy_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LayerParameter::clear_tl_dummy_param() {
  if (tl_dummy_param_ != NULL) tl_dummy_param_->::bmnet::TLDummyParameter::Clear();
  clear_has_tl_dummy_param();
}
inline const ::bmnet::TLDummyParameter& LayerParameter::tl_dummy_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_dummy_param)
  return tl_dummy_param_ != NULL ? *tl_dummy_param_ : *default_instance_->tl_dummy_param_;
}
inline ::bmnet::TLDummyParameter* LayerParameter::mutable_tl_dummy_param() {
  set_has_tl_dummy_param();
  if (tl_dummy_param_ == NULL) tl_dummy_param_ = new ::bmnet::TLDummyParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_dummy_param)
  return tl_dummy_param_;
}
inline ::bmnet::TLDummyParameter* LayerParameter::release_tl_dummy_param() {
  clear_has_tl_dummy_param();
  ::bmnet::TLDummyParameter* temp = tl_dummy_param_;
  tl_dummy_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_dummy_param(::bmnet::TLDummyParameter* tl_dummy_param) {
  delete tl_dummy_param_;
  tl_dummy_param_ = tl_dummy_param;
  if (tl_dummy_param) {
    set_has_tl_dummy_param();
  } else {
    clear_has_tl_dummy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_dummy_param)
}

// optional .bmnet.TLGroupParameter tl_group_param = 233;
inline bool LayerParameter::has_tl_group_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_tl_group_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LayerParameter::clear_has_tl_group_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LayerParameter::clear_tl_group_param() {
  if (tl_group_param_ != NULL) tl_group_param_->::bmnet::TLGroupParameter::Clear();
  clear_has_tl_group_param();
}
inline const ::bmnet::TLGroupParameter& LayerParameter::tl_group_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_group_param)
  return tl_group_param_ != NULL ? *tl_group_param_ : *default_instance_->tl_group_param_;
}
inline ::bmnet::TLGroupParameter* LayerParameter::mutable_tl_group_param() {
  set_has_tl_group_param();
  if (tl_group_param_ == NULL) tl_group_param_ = new ::bmnet::TLGroupParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_group_param)
  return tl_group_param_;
}
inline ::bmnet::TLGroupParameter* LayerParameter::release_tl_group_param() {
  clear_has_tl_group_param();
  ::bmnet::TLGroupParameter* temp = tl_group_param_;
  tl_group_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_group_param(::bmnet::TLGroupParameter* tl_group_param) {
  delete tl_group_param_;
  tl_group_param_ = tl_group_param;
  if (tl_group_param) {
    set_has_tl_group_param();
  } else {
    clear_has_tl_group_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_group_param)
}

// optional .bmnet.TLShuffleChannelParameter tl_shuffle_channel_param = 234;
inline bool LayerParameter::has_tl_shuffle_channel_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_tl_shuffle_channel_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LayerParameter::clear_has_tl_shuffle_channel_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LayerParameter::clear_tl_shuffle_channel_param() {
  if (tl_shuffle_channel_param_ != NULL) tl_shuffle_channel_param_->::bmnet::TLShuffleChannelParameter::Clear();
  clear_has_tl_shuffle_channel_param();
}
inline const ::bmnet::TLShuffleChannelParameter& LayerParameter::tl_shuffle_channel_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_shuffle_channel_param)
  return tl_shuffle_channel_param_ != NULL ? *tl_shuffle_channel_param_ : *default_instance_->tl_shuffle_channel_param_;
}
inline ::bmnet::TLShuffleChannelParameter* LayerParameter::mutable_tl_shuffle_channel_param() {
  set_has_tl_shuffle_channel_param();
  if (tl_shuffle_channel_param_ == NULL) tl_shuffle_channel_param_ = new ::bmnet::TLShuffleChannelParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_shuffle_channel_param)
  return tl_shuffle_channel_param_;
}
inline ::bmnet::TLShuffleChannelParameter* LayerParameter::release_tl_shuffle_channel_param() {
  clear_has_tl_shuffle_channel_param();
  ::bmnet::TLShuffleChannelParameter* temp = tl_shuffle_channel_param_;
  tl_shuffle_channel_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_shuffle_channel_param(::bmnet::TLShuffleChannelParameter* tl_shuffle_channel_param) {
  delete tl_shuffle_channel_param_;
  tl_shuffle_channel_param_ = tl_shuffle_channel_param;
  if (tl_shuffle_channel_param) {
    set_has_tl_shuffle_channel_param();
  } else {
    clear_has_tl_shuffle_channel_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_shuffle_channel_param)
}

// optional .bmnet.TLArithmeticParameter tl_arithmetic_param = 235;
inline bool LayerParameter::has_tl_arithmetic_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_tl_arithmetic_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LayerParameter::clear_has_tl_arithmetic_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LayerParameter::clear_tl_arithmetic_param() {
  if (tl_arithmetic_param_ != NULL) tl_arithmetic_param_->::bmnet::TLArithmeticParameter::Clear();
  clear_has_tl_arithmetic_param();
}
inline const ::bmnet::TLArithmeticParameter& LayerParameter::tl_arithmetic_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_arithmetic_param)
  return tl_arithmetic_param_ != NULL ? *tl_arithmetic_param_ : *default_instance_->tl_arithmetic_param_;
}
inline ::bmnet::TLArithmeticParameter* LayerParameter::mutable_tl_arithmetic_param() {
  set_has_tl_arithmetic_param();
  if (tl_arithmetic_param_ == NULL) tl_arithmetic_param_ = new ::bmnet::TLArithmeticParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_arithmetic_param)
  return tl_arithmetic_param_;
}
inline ::bmnet::TLArithmeticParameter* LayerParameter::release_tl_arithmetic_param() {
  clear_has_tl_arithmetic_param();
  ::bmnet::TLArithmeticParameter* temp = tl_arithmetic_param_;
  tl_arithmetic_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_arithmetic_param(::bmnet::TLArithmeticParameter* tl_arithmetic_param) {
  delete tl_arithmetic_param_;
  tl_arithmetic_param_ = tl_arithmetic_param;
  if (tl_arithmetic_param) {
    set_has_tl_arithmetic_param();
  } else {
    clear_has_tl_arithmetic_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_arithmetic_param)
}

// optional .bmnet.TLResizeBilinearParameter tl_resizebilinear_param = 236;
inline bool LayerParameter::has_tl_resizebilinear_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_tl_resizebilinear_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LayerParameter::clear_has_tl_resizebilinear_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LayerParameter::clear_tl_resizebilinear_param() {
  if (tl_resizebilinear_param_ != NULL) tl_resizebilinear_param_->::bmnet::TLResizeBilinearParameter::Clear();
  clear_has_tl_resizebilinear_param();
}
inline const ::bmnet::TLResizeBilinearParameter& LayerParameter::tl_resizebilinear_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tl_resizebilinear_param)
  return tl_resizebilinear_param_ != NULL ? *tl_resizebilinear_param_ : *default_instance_->tl_resizebilinear_param_;
}
inline ::bmnet::TLResizeBilinearParameter* LayerParameter::mutable_tl_resizebilinear_param() {
  set_has_tl_resizebilinear_param();
  if (tl_resizebilinear_param_ == NULL) tl_resizebilinear_param_ = new ::bmnet::TLResizeBilinearParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tl_resizebilinear_param)
  return tl_resizebilinear_param_;
}
inline ::bmnet::TLResizeBilinearParameter* LayerParameter::release_tl_resizebilinear_param() {
  clear_has_tl_resizebilinear_param();
  ::bmnet::TLResizeBilinearParameter* temp = tl_resizebilinear_param_;
  tl_resizebilinear_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tl_resizebilinear_param(::bmnet::TLResizeBilinearParameter* tl_resizebilinear_param) {
  delete tl_resizebilinear_param_;
  tl_resizebilinear_param_ = tl_resizebilinear_param;
  if (tl_resizebilinear_param) {
    set_has_tl_resizebilinear_param();
  } else {
    clear_has_tl_resizebilinear_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tl_resizebilinear_param)
}

// optional .bmnet.TGConvolutionParameter tg_convolution_param = 260;
inline bool LayerParameter::has_tg_convolution_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_tg_convolution_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void LayerParameter::clear_has_tg_convolution_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void LayerParameter::clear_tg_convolution_param() {
  if (tg_convolution_param_ != NULL) tg_convolution_param_->::bmnet::TGConvolutionParameter::Clear();
  clear_has_tg_convolution_param();
}
inline const ::bmnet::TGConvolutionParameter& LayerParameter::tg_convolution_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_convolution_param)
  return tg_convolution_param_ != NULL ? *tg_convolution_param_ : *default_instance_->tg_convolution_param_;
}
inline ::bmnet::TGConvolutionParameter* LayerParameter::mutable_tg_convolution_param() {
  set_has_tg_convolution_param();
  if (tg_convolution_param_ == NULL) tg_convolution_param_ = new ::bmnet::TGConvolutionParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_convolution_param)
  return tg_convolution_param_;
}
inline ::bmnet::TGConvolutionParameter* LayerParameter::release_tg_convolution_param() {
  clear_has_tg_convolution_param();
  ::bmnet::TGConvolutionParameter* temp = tg_convolution_param_;
  tg_convolution_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_convolution_param(::bmnet::TGConvolutionParameter* tg_convolution_param) {
  delete tg_convolution_param_;
  tg_convolution_param_ = tg_convolution_param;
  if (tg_convolution_param) {
    set_has_tg_convolution_param();
  } else {
    clear_has_tg_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_convolution_param)
}

// optional .bmnet.TGPoolingParameter tg_pooling_param = 261;
inline bool LayerParameter::has_tg_pooling_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_tg_pooling_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void LayerParameter::clear_has_tg_pooling_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void LayerParameter::clear_tg_pooling_param() {
  if (tg_pooling_param_ != NULL) tg_pooling_param_->::bmnet::TGPoolingParameter::Clear();
  clear_has_tg_pooling_param();
}
inline const ::bmnet::TGPoolingParameter& LayerParameter::tg_pooling_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_pooling_param)
  return tg_pooling_param_ != NULL ? *tg_pooling_param_ : *default_instance_->tg_pooling_param_;
}
inline ::bmnet::TGPoolingParameter* LayerParameter::mutable_tg_pooling_param() {
  set_has_tg_pooling_param();
  if (tg_pooling_param_ == NULL) tg_pooling_param_ = new ::bmnet::TGPoolingParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_pooling_param)
  return tg_pooling_param_;
}
inline ::bmnet::TGPoolingParameter* LayerParameter::release_tg_pooling_param() {
  clear_has_tg_pooling_param();
  ::bmnet::TGPoolingParameter* temp = tg_pooling_param_;
  tg_pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_pooling_param(::bmnet::TGPoolingParameter* tg_pooling_param) {
  delete tg_pooling_param_;
  tg_pooling_param_ = tg_pooling_param;
  if (tg_pooling_param) {
    set_has_tg_pooling_param();
  } else {
    clear_has_tg_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_pooling_param)
}

// optional .bmnet.TGInnerProductParameter tg_inner_product_param = 262;
inline bool LayerParameter::has_tg_inner_product_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_tg_inner_product_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void LayerParameter::clear_has_tg_inner_product_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void LayerParameter::clear_tg_inner_product_param() {
  if (tg_inner_product_param_ != NULL) tg_inner_product_param_->::bmnet::TGInnerProductParameter::Clear();
  clear_has_tg_inner_product_param();
}
inline const ::bmnet::TGInnerProductParameter& LayerParameter::tg_inner_product_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_inner_product_param)
  return tg_inner_product_param_ != NULL ? *tg_inner_product_param_ : *default_instance_->tg_inner_product_param_;
}
inline ::bmnet::TGInnerProductParameter* LayerParameter::mutable_tg_inner_product_param() {
  set_has_tg_inner_product_param();
  if (tg_inner_product_param_ == NULL) tg_inner_product_param_ = new ::bmnet::TGInnerProductParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_inner_product_param)
  return tg_inner_product_param_;
}
inline ::bmnet::TGInnerProductParameter* LayerParameter::release_tg_inner_product_param() {
  clear_has_tg_inner_product_param();
  ::bmnet::TGInnerProductParameter* temp = tg_inner_product_param_;
  tg_inner_product_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_inner_product_param(::bmnet::TGInnerProductParameter* tg_inner_product_param) {
  delete tg_inner_product_param_;
  tg_inner_product_param_ = tg_inner_product_param;
  if (tg_inner_product_param) {
    set_has_tg_inner_product_param();
  } else {
    clear_has_tg_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_inner_product_param)
}

// optional .bmnet.TGActivationParameter tg_activation_param = 263;
inline bool LayerParameter::has_tg_activation_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_tg_activation_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void LayerParameter::clear_has_tg_activation_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void LayerParameter::clear_tg_activation_param() {
  if (tg_activation_param_ != NULL) tg_activation_param_->::bmnet::TGActivationParameter::Clear();
  clear_has_tg_activation_param();
}
inline const ::bmnet::TGActivationParameter& LayerParameter::tg_activation_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_activation_param)
  return tg_activation_param_ != NULL ? *tg_activation_param_ : *default_instance_->tg_activation_param_;
}
inline ::bmnet::TGActivationParameter* LayerParameter::mutable_tg_activation_param() {
  set_has_tg_activation_param();
  if (tg_activation_param_ == NULL) tg_activation_param_ = new ::bmnet::TGActivationParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_activation_param)
  return tg_activation_param_;
}
inline ::bmnet::TGActivationParameter* LayerParameter::release_tg_activation_param() {
  clear_has_tg_activation_param();
  ::bmnet::TGActivationParameter* temp = tg_activation_param_;
  tg_activation_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_activation_param(::bmnet::TGActivationParameter* tg_activation_param) {
  delete tg_activation_param_;
  tg_activation_param_ = tg_activation_param;
  if (tg_activation_param) {
    set_has_tg_activation_param();
  } else {
    clear_has_tg_activation_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_activation_param)
}

// optional .bmnet.TGBatchNormParameter tg_batchnorm_param = 264;
inline bool LayerParameter::has_tg_batchnorm_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_tg_batchnorm_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void LayerParameter::clear_has_tg_batchnorm_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void LayerParameter::clear_tg_batchnorm_param() {
  if (tg_batchnorm_param_ != NULL) tg_batchnorm_param_->::bmnet::TGBatchNormParameter::Clear();
  clear_has_tg_batchnorm_param();
}
inline const ::bmnet::TGBatchNormParameter& LayerParameter::tg_batchnorm_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_batchnorm_param)
  return tg_batchnorm_param_ != NULL ? *tg_batchnorm_param_ : *default_instance_->tg_batchnorm_param_;
}
inline ::bmnet::TGBatchNormParameter* LayerParameter::mutable_tg_batchnorm_param() {
  set_has_tg_batchnorm_param();
  if (tg_batchnorm_param_ == NULL) tg_batchnorm_param_ = new ::bmnet::TGBatchNormParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_batchnorm_param)
  return tg_batchnorm_param_;
}
inline ::bmnet::TGBatchNormParameter* LayerParameter::release_tg_batchnorm_param() {
  clear_has_tg_batchnorm_param();
  ::bmnet::TGBatchNormParameter* temp = tg_batchnorm_param_;
  tg_batchnorm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_batchnorm_param(::bmnet::TGBatchNormParameter* tg_batchnorm_param) {
  delete tg_batchnorm_param_;
  tg_batchnorm_param_ = tg_batchnorm_param;
  if (tg_batchnorm_param) {
    set_has_tg_batchnorm_param();
  } else {
    clear_has_tg_batchnorm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_batchnorm_param)
}

// optional .bmnet.TGSoftmaxParameter tg_softmax_param = 265;
inline bool LayerParameter::has_tg_softmax_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_tg_softmax_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void LayerParameter::clear_has_tg_softmax_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void LayerParameter::clear_tg_softmax_param() {
  if (tg_softmax_param_ != NULL) tg_softmax_param_->::bmnet::TGSoftmaxParameter::Clear();
  clear_has_tg_softmax_param();
}
inline const ::bmnet::TGSoftmaxParameter& LayerParameter::tg_softmax_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_softmax_param)
  return tg_softmax_param_ != NULL ? *tg_softmax_param_ : *default_instance_->tg_softmax_param_;
}
inline ::bmnet::TGSoftmaxParameter* LayerParameter::mutable_tg_softmax_param() {
  set_has_tg_softmax_param();
  if (tg_softmax_param_ == NULL) tg_softmax_param_ = new ::bmnet::TGSoftmaxParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_softmax_param)
  return tg_softmax_param_;
}
inline ::bmnet::TGSoftmaxParameter* LayerParameter::release_tg_softmax_param() {
  clear_has_tg_softmax_param();
  ::bmnet::TGSoftmaxParameter* temp = tg_softmax_param_;
  tg_softmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_softmax_param(::bmnet::TGSoftmaxParameter* tg_softmax_param) {
  delete tg_softmax_param_;
  tg_softmax_param_ = tg_softmax_param;
  if (tg_softmax_param) {
    set_has_tg_softmax_param();
  } else {
    clear_has_tg_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_softmax_param)
}

// optional .bmnet.TGDropoutParameter tg_dropout_param = 266;
inline bool LayerParameter::has_tg_dropout_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_tg_dropout_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void LayerParameter::clear_has_tg_dropout_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void LayerParameter::clear_tg_dropout_param() {
  if (tg_dropout_param_ != NULL) tg_dropout_param_->::bmnet::TGDropoutParameter::Clear();
  clear_has_tg_dropout_param();
}
inline const ::bmnet::TGDropoutParameter& LayerParameter::tg_dropout_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_dropout_param)
  return tg_dropout_param_ != NULL ? *tg_dropout_param_ : *default_instance_->tg_dropout_param_;
}
inline ::bmnet::TGDropoutParameter* LayerParameter::mutable_tg_dropout_param() {
  set_has_tg_dropout_param();
  if (tg_dropout_param_ == NULL) tg_dropout_param_ = new ::bmnet::TGDropoutParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_dropout_param)
  return tg_dropout_param_;
}
inline ::bmnet::TGDropoutParameter* LayerParameter::release_tg_dropout_param() {
  clear_has_tg_dropout_param();
  ::bmnet::TGDropoutParameter* temp = tg_dropout_param_;
  tg_dropout_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_dropout_param(::bmnet::TGDropoutParameter* tg_dropout_param) {
  delete tg_dropout_param_;
  tg_dropout_param_ = tg_dropout_param;
  if (tg_dropout_param) {
    set_has_tg_dropout_param();
  } else {
    clear_has_tg_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_dropout_param)
}

// optional .bmnet.TGEltwiseParameter tg_eltwise_param = 267;
inline bool LayerParameter::has_tg_eltwise_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_tg_eltwise_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void LayerParameter::clear_has_tg_eltwise_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void LayerParameter::clear_tg_eltwise_param() {
  if (tg_eltwise_param_ != NULL) tg_eltwise_param_->::bmnet::TGEltwiseParameter::Clear();
  clear_has_tg_eltwise_param();
}
inline const ::bmnet::TGEltwiseParameter& LayerParameter::tg_eltwise_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_eltwise_param)
  return tg_eltwise_param_ != NULL ? *tg_eltwise_param_ : *default_instance_->tg_eltwise_param_;
}
inline ::bmnet::TGEltwiseParameter* LayerParameter::mutable_tg_eltwise_param() {
  set_has_tg_eltwise_param();
  if (tg_eltwise_param_ == NULL) tg_eltwise_param_ = new ::bmnet::TGEltwiseParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_eltwise_param)
  return tg_eltwise_param_;
}
inline ::bmnet::TGEltwiseParameter* LayerParameter::release_tg_eltwise_param() {
  clear_has_tg_eltwise_param();
  ::bmnet::TGEltwiseParameter* temp = tg_eltwise_param_;
  tg_eltwise_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_eltwise_param(::bmnet::TGEltwiseParameter* tg_eltwise_param) {
  delete tg_eltwise_param_;
  tg_eltwise_param_ = tg_eltwise_param;
  if (tg_eltwise_param) {
    set_has_tg_eltwise_param();
  } else {
    clear_has_tg_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_eltwise_param)
}

// optional .bmnet.TGLRNParameter tg_lrn_param = 268;
inline bool LayerParameter::has_tg_lrn_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_tg_lrn_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void LayerParameter::clear_has_tg_lrn_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void LayerParameter::clear_tg_lrn_param() {
  if (tg_lrn_param_ != NULL) tg_lrn_param_->::bmnet::TGLRNParameter::Clear();
  clear_has_tg_lrn_param();
}
inline const ::bmnet::TGLRNParameter& LayerParameter::tg_lrn_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_lrn_param)
  return tg_lrn_param_ != NULL ? *tg_lrn_param_ : *default_instance_->tg_lrn_param_;
}
inline ::bmnet::TGLRNParameter* LayerParameter::mutable_tg_lrn_param() {
  set_has_tg_lrn_param();
  if (tg_lrn_param_ == NULL) tg_lrn_param_ = new ::bmnet::TGLRNParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_lrn_param)
  return tg_lrn_param_;
}
inline ::bmnet::TGLRNParameter* LayerParameter::release_tg_lrn_param() {
  clear_has_tg_lrn_param();
  ::bmnet::TGLRNParameter* temp = tg_lrn_param_;
  tg_lrn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_lrn_param(::bmnet::TGLRNParameter* tg_lrn_param) {
  delete tg_lrn_param_;
  tg_lrn_param_ = tg_lrn_param;
  if (tg_lrn_param) {
    set_has_tg_lrn_param();
  } else {
    clear_has_tg_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_lrn_param)
}

// optional .bmnet.TGPowerParameter tg_power_param = 269;
inline bool LayerParameter::has_tg_power_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_tg_power_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void LayerParameter::clear_has_tg_power_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void LayerParameter::clear_tg_power_param() {
  if (tg_power_param_ != NULL) tg_power_param_->::bmnet::TGPowerParameter::Clear();
  clear_has_tg_power_param();
}
inline const ::bmnet::TGPowerParameter& LayerParameter::tg_power_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_power_param)
  return tg_power_param_ != NULL ? *tg_power_param_ : *default_instance_->tg_power_param_;
}
inline ::bmnet::TGPowerParameter* LayerParameter::mutable_tg_power_param() {
  set_has_tg_power_param();
  if (tg_power_param_ == NULL) tg_power_param_ = new ::bmnet::TGPowerParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_power_param)
  return tg_power_param_;
}
inline ::bmnet::TGPowerParameter* LayerParameter::release_tg_power_param() {
  clear_has_tg_power_param();
  ::bmnet::TGPowerParameter* temp = tg_power_param_;
  tg_power_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_power_param(::bmnet::TGPowerParameter* tg_power_param) {
  delete tg_power_param_;
  tg_power_param_ = tg_power_param;
  if (tg_power_param) {
    set_has_tg_power_param();
  } else {
    clear_has_tg_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_power_param)
}

// optional .bmnet.TGScaleParameter tg_scale_param = 270;
inline bool LayerParameter::has_tg_scale_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_tg_scale_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void LayerParameter::clear_has_tg_scale_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void LayerParameter::clear_tg_scale_param() {
  if (tg_scale_param_ != NULL) tg_scale_param_->::bmnet::TGScaleParameter::Clear();
  clear_has_tg_scale_param();
}
inline const ::bmnet::TGScaleParameter& LayerParameter::tg_scale_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_scale_param)
  return tg_scale_param_ != NULL ? *tg_scale_param_ : *default_instance_->tg_scale_param_;
}
inline ::bmnet::TGScaleParameter* LayerParameter::mutable_tg_scale_param() {
  set_has_tg_scale_param();
  if (tg_scale_param_ == NULL) tg_scale_param_ = new ::bmnet::TGScaleParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_scale_param)
  return tg_scale_param_;
}
inline ::bmnet::TGScaleParameter* LayerParameter::release_tg_scale_param() {
  clear_has_tg_scale_param();
  ::bmnet::TGScaleParameter* temp = tg_scale_param_;
  tg_scale_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_scale_param(::bmnet::TGScaleParameter* tg_scale_param) {
  delete tg_scale_param_;
  tg_scale_param_ = tg_scale_param;
  if (tg_scale_param) {
    set_has_tg_scale_param();
  } else {
    clear_has_tg_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_scale_param)
}

// optional .bmnet.TGPReLUParameter tg_prelu_param = 271;
inline bool LayerParameter::has_tg_prelu_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_tg_prelu_param() {
  _has_bits_[1] |= 0x00000400u;
}
inline void LayerParameter::clear_has_tg_prelu_param() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void LayerParameter::clear_tg_prelu_param() {
  if (tg_prelu_param_ != NULL) tg_prelu_param_->::bmnet::TGPReLUParameter::Clear();
  clear_has_tg_prelu_param();
}
inline const ::bmnet::TGPReLUParameter& LayerParameter::tg_prelu_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_prelu_param)
  return tg_prelu_param_ != NULL ? *tg_prelu_param_ : *default_instance_->tg_prelu_param_;
}
inline ::bmnet::TGPReLUParameter* LayerParameter::mutable_tg_prelu_param() {
  set_has_tg_prelu_param();
  if (tg_prelu_param_ == NULL) tg_prelu_param_ = new ::bmnet::TGPReLUParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_prelu_param)
  return tg_prelu_param_;
}
inline ::bmnet::TGPReLUParameter* LayerParameter::release_tg_prelu_param() {
  clear_has_tg_prelu_param();
  ::bmnet::TGPReLUParameter* temp = tg_prelu_param_;
  tg_prelu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_prelu_param(::bmnet::TGPReLUParameter* tg_prelu_param) {
  delete tg_prelu_param_;
  tg_prelu_param_ = tg_prelu_param;
  if (tg_prelu_param) {
    set_has_tg_prelu_param();
  } else {
    clear_has_tg_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_prelu_param)
}

// optional .bmnet.TGUpsampleParameter tg_upsample_param = 272;
inline bool LayerParameter::has_tg_upsample_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_tg_upsample_param() {
  _has_bits_[1] |= 0x00000800u;
}
inline void LayerParameter::clear_has_tg_upsample_param() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void LayerParameter::clear_tg_upsample_param() {
  if (tg_upsample_param_ != NULL) tg_upsample_param_->::bmnet::TGUpsampleParameter::Clear();
  clear_has_tg_upsample_param();
}
inline const ::bmnet::TGUpsampleParameter& LayerParameter::tg_upsample_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_upsample_param)
  return tg_upsample_param_ != NULL ? *tg_upsample_param_ : *default_instance_->tg_upsample_param_;
}
inline ::bmnet::TGUpsampleParameter* LayerParameter::mutable_tg_upsample_param() {
  set_has_tg_upsample_param();
  if (tg_upsample_param_ == NULL) tg_upsample_param_ = new ::bmnet::TGUpsampleParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_upsample_param)
  return tg_upsample_param_;
}
inline ::bmnet::TGUpsampleParameter* LayerParameter::release_tg_upsample_param() {
  clear_has_tg_upsample_param();
  ::bmnet::TGUpsampleParameter* temp = tg_upsample_param_;
  tg_upsample_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_upsample_param(::bmnet::TGUpsampleParameter* tg_upsample_param) {
  delete tg_upsample_param_;
  tg_upsample_param_ = tg_upsample_param;
  if (tg_upsample_param) {
    set_has_tg_upsample_param();
  } else {
    clear_has_tg_upsample_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_upsample_param)
}

// optional .bmnet.TGReorgParameter tg_reorg_param = 273;
inline bool LayerParameter::has_tg_reorg_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_tg_reorg_param() {
  _has_bits_[1] |= 0x00001000u;
}
inline void LayerParameter::clear_has_tg_reorg_param() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void LayerParameter::clear_tg_reorg_param() {
  if (tg_reorg_param_ != NULL) tg_reorg_param_->::bmnet::TGReorgParameter::Clear();
  clear_has_tg_reorg_param();
}
inline const ::bmnet::TGReorgParameter& LayerParameter::tg_reorg_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_reorg_param)
  return tg_reorg_param_ != NULL ? *tg_reorg_param_ : *default_instance_->tg_reorg_param_;
}
inline ::bmnet::TGReorgParameter* LayerParameter::mutable_tg_reorg_param() {
  set_has_tg_reorg_param();
  if (tg_reorg_param_ == NULL) tg_reorg_param_ = new ::bmnet::TGReorgParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_reorg_param)
  return tg_reorg_param_;
}
inline ::bmnet::TGReorgParameter* LayerParameter::release_tg_reorg_param() {
  clear_has_tg_reorg_param();
  ::bmnet::TGReorgParameter* temp = tg_reorg_param_;
  tg_reorg_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_reorg_param(::bmnet::TGReorgParameter* tg_reorg_param) {
  delete tg_reorg_param_;
  tg_reorg_param_ = tg_reorg_param;
  if (tg_reorg_param) {
    set_has_tg_reorg_param();
  } else {
    clear_has_tg_reorg_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_reorg_param)
}

// optional .bmnet.TGConcatParameter tg_concat_param = 274;
inline bool LayerParameter::has_tg_concat_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_tg_concat_param() {
  _has_bits_[1] |= 0x00002000u;
}
inline void LayerParameter::clear_has_tg_concat_param() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void LayerParameter::clear_tg_concat_param() {
  if (tg_concat_param_ != NULL) tg_concat_param_->::bmnet::TGConcatParameter::Clear();
  clear_has_tg_concat_param();
}
inline const ::bmnet::TGConcatParameter& LayerParameter::tg_concat_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_concat_param)
  return tg_concat_param_ != NULL ? *tg_concat_param_ : *default_instance_->tg_concat_param_;
}
inline ::bmnet::TGConcatParameter* LayerParameter::mutable_tg_concat_param() {
  set_has_tg_concat_param();
  if (tg_concat_param_ == NULL) tg_concat_param_ = new ::bmnet::TGConcatParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_concat_param)
  return tg_concat_param_;
}
inline ::bmnet::TGConcatParameter* LayerParameter::release_tg_concat_param() {
  clear_has_tg_concat_param();
  ::bmnet::TGConcatParameter* temp = tg_concat_param_;
  tg_concat_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_concat_param(::bmnet::TGConcatParameter* tg_concat_param) {
  delete tg_concat_param_;
  tg_concat_param_ = tg_concat_param;
  if (tg_concat_param) {
    set_has_tg_concat_param();
  } else {
    clear_has_tg_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_concat_param)
}

// optional .bmnet.TGPermuteParameter tg_permute_param = 275;
inline bool LayerParameter::has_tg_permute_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_tg_permute_param() {
  _has_bits_[1] |= 0x00004000u;
}
inline void LayerParameter::clear_has_tg_permute_param() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void LayerParameter::clear_tg_permute_param() {
  if (tg_permute_param_ != NULL) tg_permute_param_->::bmnet::TGPermuteParameter::Clear();
  clear_has_tg_permute_param();
}
inline const ::bmnet::TGPermuteParameter& LayerParameter::tg_permute_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_permute_param)
  return tg_permute_param_ != NULL ? *tg_permute_param_ : *default_instance_->tg_permute_param_;
}
inline ::bmnet::TGPermuteParameter* LayerParameter::mutable_tg_permute_param() {
  set_has_tg_permute_param();
  if (tg_permute_param_ == NULL) tg_permute_param_ = new ::bmnet::TGPermuteParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_permute_param)
  return tg_permute_param_;
}
inline ::bmnet::TGPermuteParameter* LayerParameter::release_tg_permute_param() {
  clear_has_tg_permute_param();
  ::bmnet::TGPermuteParameter* temp = tg_permute_param_;
  tg_permute_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_permute_param(::bmnet::TGPermuteParameter* tg_permute_param) {
  delete tg_permute_param_;
  tg_permute_param_ = tg_permute_param;
  if (tg_permute_param) {
    set_has_tg_permute_param();
  } else {
    clear_has_tg_permute_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_permute_param)
}

// optional .bmnet.TGNormalizeParameter tg_norm_param = 276;
inline bool LayerParameter::has_tg_norm_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_tg_norm_param() {
  _has_bits_[1] |= 0x00008000u;
}
inline void LayerParameter::clear_has_tg_norm_param() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void LayerParameter::clear_tg_norm_param() {
  if (tg_norm_param_ != NULL) tg_norm_param_->::bmnet::TGNormalizeParameter::Clear();
  clear_has_tg_norm_param();
}
inline const ::bmnet::TGNormalizeParameter& LayerParameter::tg_norm_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_norm_param)
  return tg_norm_param_ != NULL ? *tg_norm_param_ : *default_instance_->tg_norm_param_;
}
inline ::bmnet::TGNormalizeParameter* LayerParameter::mutable_tg_norm_param() {
  set_has_tg_norm_param();
  if (tg_norm_param_ == NULL) tg_norm_param_ = new ::bmnet::TGNormalizeParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_norm_param)
  return tg_norm_param_;
}
inline ::bmnet::TGNormalizeParameter* LayerParameter::release_tg_norm_param() {
  clear_has_tg_norm_param();
  ::bmnet::TGNormalizeParameter* temp = tg_norm_param_;
  tg_norm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_norm_param(::bmnet::TGNormalizeParameter* tg_norm_param) {
  delete tg_norm_param_;
  tg_norm_param_ = tg_norm_param;
  if (tg_norm_param) {
    set_has_tg_norm_param();
  } else {
    clear_has_tg_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_norm_param)
}

// optional .bmnet.TGPriorBoxParameter tg_prior_box_param = 277;
inline bool LayerParameter::has_tg_prior_box_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_tg_prior_box_param() {
  _has_bits_[1] |= 0x00010000u;
}
inline void LayerParameter::clear_has_tg_prior_box_param() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void LayerParameter::clear_tg_prior_box_param() {
  if (tg_prior_box_param_ != NULL) tg_prior_box_param_->::bmnet::TGPriorBoxParameter::Clear();
  clear_has_tg_prior_box_param();
}
inline const ::bmnet::TGPriorBoxParameter& LayerParameter::tg_prior_box_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_prior_box_param)
  return tg_prior_box_param_ != NULL ? *tg_prior_box_param_ : *default_instance_->tg_prior_box_param_;
}
inline ::bmnet::TGPriorBoxParameter* LayerParameter::mutable_tg_prior_box_param() {
  set_has_tg_prior_box_param();
  if (tg_prior_box_param_ == NULL) tg_prior_box_param_ = new ::bmnet::TGPriorBoxParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_prior_box_param)
  return tg_prior_box_param_;
}
inline ::bmnet::TGPriorBoxParameter* LayerParameter::release_tg_prior_box_param() {
  clear_has_tg_prior_box_param();
  ::bmnet::TGPriorBoxParameter* temp = tg_prior_box_param_;
  tg_prior_box_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_prior_box_param(::bmnet::TGPriorBoxParameter* tg_prior_box_param) {
  delete tg_prior_box_param_;
  tg_prior_box_param_ = tg_prior_box_param;
  if (tg_prior_box_param) {
    set_has_tg_prior_box_param();
  } else {
    clear_has_tg_prior_box_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_prior_box_param)
}

// optional .bmnet.TGCropParameter tg_crop_param = 278;
inline bool LayerParameter::has_tg_crop_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_tg_crop_param() {
  _has_bits_[1] |= 0x00020000u;
}
inline void LayerParameter::clear_has_tg_crop_param() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void LayerParameter::clear_tg_crop_param() {
  if (tg_crop_param_ != NULL) tg_crop_param_->::bmnet::TGCropParameter::Clear();
  clear_has_tg_crop_param();
}
inline const ::bmnet::TGCropParameter& LayerParameter::tg_crop_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_crop_param)
  return tg_crop_param_ != NULL ? *tg_crop_param_ : *default_instance_->tg_crop_param_;
}
inline ::bmnet::TGCropParameter* LayerParameter::mutable_tg_crop_param() {
  set_has_tg_crop_param();
  if (tg_crop_param_ == NULL) tg_crop_param_ = new ::bmnet::TGCropParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_crop_param)
  return tg_crop_param_;
}
inline ::bmnet::TGCropParameter* LayerParameter::release_tg_crop_param() {
  clear_has_tg_crop_param();
  ::bmnet::TGCropParameter* temp = tg_crop_param_;
  tg_crop_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_crop_param(::bmnet::TGCropParameter* tg_crop_param) {
  delete tg_crop_param_;
  tg_crop_param_ = tg_crop_param;
  if (tg_crop_param) {
    set_has_tg_crop_param();
  } else {
    clear_has_tg_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_crop_param)
}

// optional .bmnet.TGReductionParameter tg_reduction_param = 279;
inline bool LayerParameter::has_tg_reduction_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_tg_reduction_param() {
  _has_bits_[1] |= 0x00040000u;
}
inline void LayerParameter::clear_has_tg_reduction_param() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void LayerParameter::clear_tg_reduction_param() {
  if (tg_reduction_param_ != NULL) tg_reduction_param_->::bmnet::TGReductionParameter::Clear();
  clear_has_tg_reduction_param();
}
inline const ::bmnet::TGReductionParameter& LayerParameter::tg_reduction_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_reduction_param)
  return tg_reduction_param_ != NULL ? *tg_reduction_param_ : *default_instance_->tg_reduction_param_;
}
inline ::bmnet::TGReductionParameter* LayerParameter::mutable_tg_reduction_param() {
  set_has_tg_reduction_param();
  if (tg_reduction_param_ == NULL) tg_reduction_param_ = new ::bmnet::TGReductionParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_reduction_param)
  return tg_reduction_param_;
}
inline ::bmnet::TGReductionParameter* LayerParameter::release_tg_reduction_param() {
  clear_has_tg_reduction_param();
  ::bmnet::TGReductionParameter* temp = tg_reduction_param_;
  tg_reduction_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_reduction_param(::bmnet::TGReductionParameter* tg_reduction_param) {
  delete tg_reduction_param_;
  tg_reduction_param_ = tg_reduction_param;
  if (tg_reduction_param) {
    set_has_tg_reduction_param();
  } else {
    clear_has_tg_reduction_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_reduction_param)
}

// optional .bmnet.TGShuffleChannelParameter tg_shuffle_channel_param = 280;
inline bool LayerParameter::has_tg_shuffle_channel_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_tg_shuffle_channel_param() {
  _has_bits_[1] |= 0x00080000u;
}
inline void LayerParameter::clear_has_tg_shuffle_channel_param() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void LayerParameter::clear_tg_shuffle_channel_param() {
  if (tg_shuffle_channel_param_ != NULL) tg_shuffle_channel_param_->::bmnet::TGShuffleChannelParameter::Clear();
  clear_has_tg_shuffle_channel_param();
}
inline const ::bmnet::TGShuffleChannelParameter& LayerParameter::tg_shuffle_channel_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_shuffle_channel_param)
  return tg_shuffle_channel_param_ != NULL ? *tg_shuffle_channel_param_ : *default_instance_->tg_shuffle_channel_param_;
}
inline ::bmnet::TGShuffleChannelParameter* LayerParameter::mutable_tg_shuffle_channel_param() {
  set_has_tg_shuffle_channel_param();
  if (tg_shuffle_channel_param_ == NULL) tg_shuffle_channel_param_ = new ::bmnet::TGShuffleChannelParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_shuffle_channel_param)
  return tg_shuffle_channel_param_;
}
inline ::bmnet::TGShuffleChannelParameter* LayerParameter::release_tg_shuffle_channel_param() {
  clear_has_tg_shuffle_channel_param();
  ::bmnet::TGShuffleChannelParameter* temp = tg_shuffle_channel_param_;
  tg_shuffle_channel_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_shuffle_channel_param(::bmnet::TGShuffleChannelParameter* tg_shuffle_channel_param) {
  delete tg_shuffle_channel_param_;
  tg_shuffle_channel_param_ = tg_shuffle_channel_param;
  if (tg_shuffle_channel_param) {
    set_has_tg_shuffle_channel_param();
  } else {
    clear_has_tg_shuffle_channel_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_shuffle_channel_param)
}

// optional .bmnet.TGSliceParameter tg_slice_param = 281;
inline bool LayerParameter::has_tg_slice_param() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_tg_slice_param() {
  _has_bits_[1] |= 0x00100000u;
}
inline void LayerParameter::clear_has_tg_slice_param() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void LayerParameter::clear_tg_slice_param() {
  if (tg_slice_param_ != NULL) tg_slice_param_->::bmnet::TGSliceParameter::Clear();
  clear_has_tg_slice_param();
}
inline const ::bmnet::TGSliceParameter& LayerParameter::tg_slice_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_slice_param)
  return tg_slice_param_ != NULL ? *tg_slice_param_ : *default_instance_->tg_slice_param_;
}
inline ::bmnet::TGSliceParameter* LayerParameter::mutable_tg_slice_param() {
  set_has_tg_slice_param();
  if (tg_slice_param_ == NULL) tg_slice_param_ = new ::bmnet::TGSliceParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_slice_param)
  return tg_slice_param_;
}
inline ::bmnet::TGSliceParameter* LayerParameter::release_tg_slice_param() {
  clear_has_tg_slice_param();
  ::bmnet::TGSliceParameter* temp = tg_slice_param_;
  tg_slice_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_slice_param(::bmnet::TGSliceParameter* tg_slice_param) {
  delete tg_slice_param_;
  tg_slice_param_ = tg_slice_param;
  if (tg_slice_param) {
    set_has_tg_slice_param();
  } else {
    clear_has_tg_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_slice_param)
}

// optional .bmnet.TGArithmeticParameter tg_arithmetic_param = 282;
inline bool LayerParameter::has_tg_arithmetic_param() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_tg_arithmetic_param() {
  _has_bits_[1] |= 0x00200000u;
}
inline void LayerParameter::clear_has_tg_arithmetic_param() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void LayerParameter::clear_tg_arithmetic_param() {
  if (tg_arithmetic_param_ != NULL) tg_arithmetic_param_->::bmnet::TGArithmeticParameter::Clear();
  clear_has_tg_arithmetic_param();
}
inline const ::bmnet::TGArithmeticParameter& LayerParameter::tg_arithmetic_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_arithmetic_param)
  return tg_arithmetic_param_ != NULL ? *tg_arithmetic_param_ : *default_instance_->tg_arithmetic_param_;
}
inline ::bmnet::TGArithmeticParameter* LayerParameter::mutable_tg_arithmetic_param() {
  set_has_tg_arithmetic_param();
  if (tg_arithmetic_param_ == NULL) tg_arithmetic_param_ = new ::bmnet::TGArithmeticParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_arithmetic_param)
  return tg_arithmetic_param_;
}
inline ::bmnet::TGArithmeticParameter* LayerParameter::release_tg_arithmetic_param() {
  clear_has_tg_arithmetic_param();
  ::bmnet::TGArithmeticParameter* temp = tg_arithmetic_param_;
  tg_arithmetic_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_arithmetic_param(::bmnet::TGArithmeticParameter* tg_arithmetic_param) {
  delete tg_arithmetic_param_;
  tg_arithmetic_param_ = tg_arithmetic_param;
  if (tg_arithmetic_param) {
    set_has_tg_arithmetic_param();
  } else {
    clear_has_tg_arithmetic_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_arithmetic_param)
}

// optional .bmnet.TGResizeBilinearParameter tg_resizebilinear_param = 283;
inline bool LayerParameter::has_tg_resizebilinear_param() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_tg_resizebilinear_param() {
  _has_bits_[1] |= 0x00400000u;
}
inline void LayerParameter::clear_has_tg_resizebilinear_param() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void LayerParameter::clear_tg_resizebilinear_param() {
  if (tg_resizebilinear_param_ != NULL) tg_resizebilinear_param_->::bmnet::TGResizeBilinearParameter::Clear();
  clear_has_tg_resizebilinear_param();
}
inline const ::bmnet::TGResizeBilinearParameter& LayerParameter::tg_resizebilinear_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_resizebilinear_param)
  return tg_resizebilinear_param_ != NULL ? *tg_resizebilinear_param_ : *default_instance_->tg_resizebilinear_param_;
}
inline ::bmnet::TGResizeBilinearParameter* LayerParameter::mutable_tg_resizebilinear_param() {
  set_has_tg_resizebilinear_param();
  if (tg_resizebilinear_param_ == NULL) tg_resizebilinear_param_ = new ::bmnet::TGResizeBilinearParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_resizebilinear_param)
  return tg_resizebilinear_param_;
}
inline ::bmnet::TGResizeBilinearParameter* LayerParameter::release_tg_resizebilinear_param() {
  clear_has_tg_resizebilinear_param();
  ::bmnet::TGResizeBilinearParameter* temp = tg_resizebilinear_param_;
  tg_resizebilinear_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_resizebilinear_param(::bmnet::TGResizeBilinearParameter* tg_resizebilinear_param) {
  delete tg_resizebilinear_param_;
  tg_resizebilinear_param_ = tg_resizebilinear_param;
  if (tg_resizebilinear_param) {
    set_has_tg_resizebilinear_param();
  } else {
    clear_has_tg_resizebilinear_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_resizebilinear_param)
}

// optional .bmnet.TGInterpParameter tg_interp_param = 286;
inline bool LayerParameter::has_tg_interp_param() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_tg_interp_param() {
  _has_bits_[1] |= 0x00800000u;
}
inline void LayerParameter::clear_has_tg_interp_param() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void LayerParameter::clear_tg_interp_param() {
  if (tg_interp_param_ != NULL) tg_interp_param_->::bmnet::TGInterpParameter::Clear();
  clear_has_tg_interp_param();
}
inline const ::bmnet::TGInterpParameter& LayerParameter::tg_interp_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_interp_param)
  return tg_interp_param_ != NULL ? *tg_interp_param_ : *default_instance_->tg_interp_param_;
}
inline ::bmnet::TGInterpParameter* LayerParameter::mutable_tg_interp_param() {
  set_has_tg_interp_param();
  if (tg_interp_param_ == NULL) tg_interp_param_ = new ::bmnet::TGInterpParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_interp_param)
  return tg_interp_param_;
}
inline ::bmnet::TGInterpParameter* LayerParameter::release_tg_interp_param() {
  clear_has_tg_interp_param();
  ::bmnet::TGInterpParameter* temp = tg_interp_param_;
  tg_interp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_interp_param(::bmnet::TGInterpParameter* tg_interp_param) {
  delete tg_interp_param_;
  tg_interp_param_ = tg_interp_param;
  if (tg_interp_param) {
    set_has_tg_interp_param();
  } else {
    clear_has_tg_interp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_interp_param)
}

// optional .bmnet.TGProposalParameter tg_proposal_param = 287;
inline bool LayerParameter::has_tg_proposal_param() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_tg_proposal_param() {
  _has_bits_[1] |= 0x01000000u;
}
inline void LayerParameter::clear_has_tg_proposal_param() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void LayerParameter::clear_tg_proposal_param() {
  if (tg_proposal_param_ != NULL) tg_proposal_param_->::bmnet::TGProposalParameter::Clear();
  clear_has_tg_proposal_param();
}
inline const ::bmnet::TGProposalParameter& LayerParameter::tg_proposal_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_proposal_param)
  return tg_proposal_param_ != NULL ? *tg_proposal_param_ : *default_instance_->tg_proposal_param_;
}
inline ::bmnet::TGProposalParameter* LayerParameter::mutable_tg_proposal_param() {
  set_has_tg_proposal_param();
  if (tg_proposal_param_ == NULL) tg_proposal_param_ = new ::bmnet::TGProposalParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_proposal_param)
  return tg_proposal_param_;
}
inline ::bmnet::TGProposalParameter* LayerParameter::release_tg_proposal_param() {
  clear_has_tg_proposal_param();
  ::bmnet::TGProposalParameter* temp = tg_proposal_param_;
  tg_proposal_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_proposal_param(::bmnet::TGProposalParameter* tg_proposal_param) {
  delete tg_proposal_param_;
  tg_proposal_param_ = tg_proposal_param;
  if (tg_proposal_param) {
    set_has_tg_proposal_param();
  } else {
    clear_has_tg_proposal_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_proposal_param)
}

// optional .bmnet.TGRoiPoolingParameter tg_roi_pooling_param = 288;
inline bool LayerParameter::has_tg_roi_pooling_param() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_tg_roi_pooling_param() {
  _has_bits_[1] |= 0x02000000u;
}
inline void LayerParameter::clear_has_tg_roi_pooling_param() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void LayerParameter::clear_tg_roi_pooling_param() {
  if (tg_roi_pooling_param_ != NULL) tg_roi_pooling_param_->::bmnet::TGRoiPoolingParameter::Clear();
  clear_has_tg_roi_pooling_param();
}
inline const ::bmnet::TGRoiPoolingParameter& LayerParameter::tg_roi_pooling_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_roi_pooling_param)
  return tg_roi_pooling_param_ != NULL ? *tg_roi_pooling_param_ : *default_instance_->tg_roi_pooling_param_;
}
inline ::bmnet::TGRoiPoolingParameter* LayerParameter::mutable_tg_roi_pooling_param() {
  set_has_tg_roi_pooling_param();
  if (tg_roi_pooling_param_ == NULL) tg_roi_pooling_param_ = new ::bmnet::TGRoiPoolingParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_roi_pooling_param)
  return tg_roi_pooling_param_;
}
inline ::bmnet::TGRoiPoolingParameter* LayerParameter::release_tg_roi_pooling_param() {
  clear_has_tg_roi_pooling_param();
  ::bmnet::TGRoiPoolingParameter* temp = tg_roi_pooling_param_;
  tg_roi_pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_roi_pooling_param(::bmnet::TGRoiPoolingParameter* tg_roi_pooling_param) {
  delete tg_roi_pooling_param_;
  tg_roi_pooling_param_ = tg_roi_pooling_param;
  if (tg_roi_pooling_param) {
    set_has_tg_roi_pooling_param();
  } else {
    clear_has_tg_roi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_roi_pooling_param)
}

// optional .bmnet.TGYoloParameter tg_yolo_param = 289;
inline bool LayerParameter::has_tg_yolo_param() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_tg_yolo_param() {
  _has_bits_[1] |= 0x04000000u;
}
inline void LayerParameter::clear_has_tg_yolo_param() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void LayerParameter::clear_tg_yolo_param() {
  if (tg_yolo_param_ != NULL) tg_yolo_param_->::bmnet::TGYoloParameter::Clear();
  clear_has_tg_yolo_param();
}
inline const ::bmnet::TGYoloParameter& LayerParameter::tg_yolo_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_yolo_param)
  return tg_yolo_param_ != NULL ? *tg_yolo_param_ : *default_instance_->tg_yolo_param_;
}
inline ::bmnet::TGYoloParameter* LayerParameter::mutable_tg_yolo_param() {
  set_has_tg_yolo_param();
  if (tg_yolo_param_ == NULL) tg_yolo_param_ = new ::bmnet::TGYoloParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_yolo_param)
  return tg_yolo_param_;
}
inline ::bmnet::TGYoloParameter* LayerParameter::release_tg_yolo_param() {
  clear_has_tg_yolo_param();
  ::bmnet::TGYoloParameter* temp = tg_yolo_param_;
  tg_yolo_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_yolo_param(::bmnet::TGYoloParameter* tg_yolo_param) {
  delete tg_yolo_param_;
  tg_yolo_param_ = tg_yolo_param;
  if (tg_yolo_param) {
    set_has_tg_yolo_param();
  } else {
    clear_has_tg_yolo_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_yolo_param)
}

// optional .bmnet.TGPSRoiPoolingParameter tg_psroi_pooling_param = 290;
inline bool LayerParameter::has_tg_psroi_pooling_param() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_tg_psroi_pooling_param() {
  _has_bits_[1] |= 0x08000000u;
}
inline void LayerParameter::clear_has_tg_psroi_pooling_param() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void LayerParameter::clear_tg_psroi_pooling_param() {
  if (tg_psroi_pooling_param_ != NULL) tg_psroi_pooling_param_->::bmnet::TGPSRoiPoolingParameter::Clear();
  clear_has_tg_psroi_pooling_param();
}
inline const ::bmnet::TGPSRoiPoolingParameter& LayerParameter::tg_psroi_pooling_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_psroi_pooling_param)
  return tg_psroi_pooling_param_ != NULL ? *tg_psroi_pooling_param_ : *default_instance_->tg_psroi_pooling_param_;
}
inline ::bmnet::TGPSRoiPoolingParameter* LayerParameter::mutable_tg_psroi_pooling_param() {
  set_has_tg_psroi_pooling_param();
  if (tg_psroi_pooling_param_ == NULL) tg_psroi_pooling_param_ = new ::bmnet::TGPSRoiPoolingParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_psroi_pooling_param)
  return tg_psroi_pooling_param_;
}
inline ::bmnet::TGPSRoiPoolingParameter* LayerParameter::release_tg_psroi_pooling_param() {
  clear_has_tg_psroi_pooling_param();
  ::bmnet::TGPSRoiPoolingParameter* temp = tg_psroi_pooling_param_;
  tg_psroi_pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_psroi_pooling_param(::bmnet::TGPSRoiPoolingParameter* tg_psroi_pooling_param) {
  delete tg_psroi_pooling_param_;
  tg_psroi_pooling_param_ = tg_psroi_pooling_param;
  if (tg_psroi_pooling_param) {
    set_has_tg_psroi_pooling_param();
  } else {
    clear_has_tg_psroi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_psroi_pooling_param)
}

// optional .bmnet.TGTileParameter tg_tile_param = 291;
inline bool LayerParameter::has_tg_tile_param() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_tg_tile_param() {
  _has_bits_[1] |= 0x10000000u;
}
inline void LayerParameter::clear_has_tg_tile_param() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void LayerParameter::clear_tg_tile_param() {
  if (tg_tile_param_ != NULL) tg_tile_param_->::bmnet::TGTileParameter::Clear();
  clear_has_tg_tile_param();
}
inline const ::bmnet::TGTileParameter& LayerParameter::tg_tile_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_tile_param)
  return tg_tile_param_ != NULL ? *tg_tile_param_ : *default_instance_->tg_tile_param_;
}
inline ::bmnet::TGTileParameter* LayerParameter::mutable_tg_tile_param() {
  set_has_tg_tile_param();
  if (tg_tile_param_ == NULL) tg_tile_param_ = new ::bmnet::TGTileParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_tile_param)
  return tg_tile_param_;
}
inline ::bmnet::TGTileParameter* LayerParameter::release_tg_tile_param() {
  clear_has_tg_tile_param();
  ::bmnet::TGTileParameter* temp = tg_tile_param_;
  tg_tile_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_tile_param(::bmnet::TGTileParameter* tg_tile_param) {
  delete tg_tile_param_;
  tg_tile_param_ = tg_tile_param;
  if (tg_tile_param) {
    set_has_tg_tile_param();
  } else {
    clear_has_tg_tile_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_tile_param)
}

// optional .bmnet.TGCustomizedParameter tg_customized_param = 350;
inline bool LayerParameter::has_tg_customized_param() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_tg_customized_param() {
  _has_bits_[1] |= 0x20000000u;
}
inline void LayerParameter::clear_has_tg_customized_param() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void LayerParameter::clear_tg_customized_param() {
  if (tg_customized_param_ != NULL) tg_customized_param_->::bmnet::TGCustomizedParameter::Clear();
  clear_has_tg_customized_param();
}
inline const ::bmnet::TGCustomizedParameter& LayerParameter::tg_customized_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_customized_param)
  return tg_customized_param_ != NULL ? *tg_customized_param_ : *default_instance_->tg_customized_param_;
}
inline ::bmnet::TGCustomizedParameter* LayerParameter::mutable_tg_customized_param() {
  set_has_tg_customized_param();
  if (tg_customized_param_ == NULL) tg_customized_param_ = new ::bmnet::TGCustomizedParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_customized_param)
  return tg_customized_param_;
}
inline ::bmnet::TGCustomizedParameter* LayerParameter::release_tg_customized_param() {
  clear_has_tg_customized_param();
  ::bmnet::TGCustomizedParameter* temp = tg_customized_param_;
  tg_customized_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_customized_param(::bmnet::TGCustomizedParameter* tg_customized_param) {
  delete tg_customized_param_;
  tg_customized_param_ = tg_customized_param;
  if (tg_customized_param) {
    set_has_tg_customized_param();
  } else {
    clear_has_tg_customized_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_customized_param)
}

// optional .bmnet.TGDetectOutputParameter tg_detectoutput_param = 361;
inline bool LayerParameter::has_tg_detectoutput_param() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_tg_detectoutput_param() {
  _has_bits_[1] |= 0x40000000u;
}
inline void LayerParameter::clear_has_tg_detectoutput_param() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void LayerParameter::clear_tg_detectoutput_param() {
  if (tg_detectoutput_param_ != NULL) tg_detectoutput_param_->::bmnet::TGDetectOutputParameter::Clear();
  clear_has_tg_detectoutput_param();
}
inline const ::bmnet::TGDetectOutputParameter& LayerParameter::tg_detectoutput_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_detectoutput_param)
  return tg_detectoutput_param_ != NULL ? *tg_detectoutput_param_ : *default_instance_->tg_detectoutput_param_;
}
inline ::bmnet::TGDetectOutputParameter* LayerParameter::mutable_tg_detectoutput_param() {
  set_has_tg_detectoutput_param();
  if (tg_detectoutput_param_ == NULL) tg_detectoutput_param_ = new ::bmnet::TGDetectOutputParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_detectoutput_param)
  return tg_detectoutput_param_;
}
inline ::bmnet::TGDetectOutputParameter* LayerParameter::release_tg_detectoutput_param() {
  clear_has_tg_detectoutput_param();
  ::bmnet::TGDetectOutputParameter* temp = tg_detectoutput_param_;
  tg_detectoutput_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_detectoutput_param(::bmnet::TGDetectOutputParameter* tg_detectoutput_param) {
  delete tg_detectoutput_param_;
  tg_detectoutput_param_ = tg_detectoutput_param;
  if (tg_detectoutput_param) {
    set_has_tg_detectoutput_param();
  } else {
    clear_has_tg_detectoutput_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_detectoutput_param)
}

// optional .bmnet.TGRegionParameter tg_region_param = 362;
inline bool LayerParameter::has_tg_region_param() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_tg_region_param() {
  _has_bits_[1] |= 0x80000000u;
}
inline void LayerParameter::clear_has_tg_region_param() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void LayerParameter::clear_tg_region_param() {
  if (tg_region_param_ != NULL) tg_region_param_->::bmnet::TGRegionParameter::Clear();
  clear_has_tg_region_param();
}
inline const ::bmnet::TGRegionParameter& LayerParameter::tg_region_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_region_param)
  return tg_region_param_ != NULL ? *tg_region_param_ : *default_instance_->tg_region_param_;
}
inline ::bmnet::TGRegionParameter* LayerParameter::mutable_tg_region_param() {
  set_has_tg_region_param();
  if (tg_region_param_ == NULL) tg_region_param_ = new ::bmnet::TGRegionParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_region_param)
  return tg_region_param_;
}
inline ::bmnet::TGRegionParameter* LayerParameter::release_tg_region_param() {
  clear_has_tg_region_param();
  ::bmnet::TGRegionParameter* temp = tg_region_param_;
  tg_region_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_region_param(::bmnet::TGRegionParameter* tg_region_param) {
  delete tg_region_param_;
  tg_region_param_ = tg_region_param;
  if (tg_region_param) {
    set_has_tg_region_param();
  } else {
    clear_has_tg_region_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_region_param)
}

// optional .bmnet.TGClipParameter tg_clip_param = 363;
inline bool LayerParameter::has_tg_clip_param() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_tg_clip_param() {
  _has_bits_[2] |= 0x00000001u;
}
inline void LayerParameter::clear_has_tg_clip_param() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void LayerParameter::clear_tg_clip_param() {
  if (tg_clip_param_ != NULL) tg_clip_param_->::bmnet::TGClipParameter::Clear();
  clear_has_tg_clip_param();
}
inline const ::bmnet::TGClipParameter& LayerParameter::tg_clip_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_clip_param)
  return tg_clip_param_ != NULL ? *tg_clip_param_ : *default_instance_->tg_clip_param_;
}
inline ::bmnet::TGClipParameter* LayerParameter::mutable_tg_clip_param() {
  set_has_tg_clip_param();
  if (tg_clip_param_ == NULL) tg_clip_param_ = new ::bmnet::TGClipParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_clip_param)
  return tg_clip_param_;
}
inline ::bmnet::TGClipParameter* LayerParameter::release_tg_clip_param() {
  clear_has_tg_clip_param();
  ::bmnet::TGClipParameter* temp = tg_clip_param_;
  tg_clip_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_clip_param(::bmnet::TGClipParameter* tg_clip_param) {
  delete tg_clip_param_;
  tg_clip_param_ = tg_clip_param;
  if (tg_clip_param) {
    set_has_tg_clip_param();
  } else {
    clear_has_tg_clip_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_clip_param)
}

// optional .bmnet.TGYoloPostParameter tg_yolopost_param = 292;
inline bool LayerParameter::has_tg_yolopost_param() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_tg_yolopost_param() {
  _has_bits_[2] |= 0x00000002u;
}
inline void LayerParameter::clear_has_tg_yolopost_param() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void LayerParameter::clear_tg_yolopost_param() {
  if (tg_yolopost_param_ != NULL) tg_yolopost_param_->::bmnet::TGYoloPostParameter::Clear();
  clear_has_tg_yolopost_param();
}
inline const ::bmnet::TGYoloPostParameter& LayerParameter::tg_yolopost_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_yolopost_param)
  return tg_yolopost_param_ != NULL ? *tg_yolopost_param_ : *default_instance_->tg_yolopost_param_;
}
inline ::bmnet::TGYoloPostParameter* LayerParameter::mutable_tg_yolopost_param() {
  set_has_tg_yolopost_param();
  if (tg_yolopost_param_ == NULL) tg_yolopost_param_ = new ::bmnet::TGYoloPostParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_yolopost_param)
  return tg_yolopost_param_;
}
inline ::bmnet::TGYoloPostParameter* LayerParameter::release_tg_yolopost_param() {
  clear_has_tg_yolopost_param();
  ::bmnet::TGYoloPostParameter* temp = tg_yolopost_param_;
  tg_yolopost_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_yolopost_param(::bmnet::TGYoloPostParameter* tg_yolopost_param) {
  delete tg_yolopost_param_;
  tg_yolopost_param_ = tg_yolopost_param;
  if (tg_yolopost_param) {
    set_has_tg_yolopost_param();
  } else {
    clear_has_tg_yolopost_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_yolopost_param)
}

// optional .bmnet.TGReverseParameter tg_reverse_param = 293;
inline bool LayerParameter::has_tg_reverse_param() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_tg_reverse_param() {
  _has_bits_[2] |= 0x00000004u;
}
inline void LayerParameter::clear_has_tg_reverse_param() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void LayerParameter::clear_tg_reverse_param() {
  if (tg_reverse_param_ != NULL) tg_reverse_param_->::bmnet::TGReverseParameter::Clear();
  clear_has_tg_reverse_param();
}
inline const ::bmnet::TGReverseParameter& LayerParameter::tg_reverse_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_reverse_param)
  return tg_reverse_param_ != NULL ? *tg_reverse_param_ : *default_instance_->tg_reverse_param_;
}
inline ::bmnet::TGReverseParameter* LayerParameter::mutable_tg_reverse_param() {
  set_has_tg_reverse_param();
  if (tg_reverse_param_ == NULL) tg_reverse_param_ = new ::bmnet::TGReverseParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_reverse_param)
  return tg_reverse_param_;
}
inline ::bmnet::TGReverseParameter* LayerParameter::release_tg_reverse_param() {
  clear_has_tg_reverse_param();
  ::bmnet::TGReverseParameter* temp = tg_reverse_param_;
  tg_reverse_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_reverse_param(::bmnet::TGReverseParameter* tg_reverse_param) {
  delete tg_reverse_param_;
  tg_reverse_param_ = tg_reverse_param;
  if (tg_reverse_param) {
    set_has_tg_reverse_param();
  } else {
    clear_has_tg_reverse_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_reverse_param)
}

// optional .bmnet.TGLstmUnitParameter tg_lstm_unit_param = 294;
inline bool LayerParameter::has_tg_lstm_unit_param() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_tg_lstm_unit_param() {
  _has_bits_[2] |= 0x00000008u;
}
inline void LayerParameter::clear_has_tg_lstm_unit_param() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void LayerParameter::clear_tg_lstm_unit_param() {
  if (tg_lstm_unit_param_ != NULL) tg_lstm_unit_param_->::bmnet::TGLstmUnitParameter::Clear();
  clear_has_tg_lstm_unit_param();
}
inline const ::bmnet::TGLstmUnitParameter& LayerParameter::tg_lstm_unit_param() const {
  // @@protoc_insertion_point(field_get:bmnet.LayerParameter.tg_lstm_unit_param)
  return tg_lstm_unit_param_ != NULL ? *tg_lstm_unit_param_ : *default_instance_->tg_lstm_unit_param_;
}
inline ::bmnet::TGLstmUnitParameter* LayerParameter::mutable_tg_lstm_unit_param() {
  set_has_tg_lstm_unit_param();
  if (tg_lstm_unit_param_ == NULL) tg_lstm_unit_param_ = new ::bmnet::TGLstmUnitParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.LayerParameter.tg_lstm_unit_param)
  return tg_lstm_unit_param_;
}
inline ::bmnet::TGLstmUnitParameter* LayerParameter::release_tg_lstm_unit_param() {
  clear_has_tg_lstm_unit_param();
  ::bmnet::TGLstmUnitParameter* temp = tg_lstm_unit_param_;
  tg_lstm_unit_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tg_lstm_unit_param(::bmnet::TGLstmUnitParameter* tg_lstm_unit_param) {
  delete tg_lstm_unit_param_;
  tg_lstm_unit_param_ = tg_lstm_unit_param;
  if (tg_lstm_unit_param) {
    set_has_tg_lstm_unit_param();
  } else {
    clear_has_tg_lstm_unit_param();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.LayerParameter.tg_lstm_unit_param)
}

// -------------------------------------------------------------------

// StartParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool StartParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& StartParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.StartParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* StartParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.StartParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* StartParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void StartParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.StartParameter.dep_info)
}

// optional uint64 input_offset = 1 [default = 0];
inline bool StartParameter::has_input_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartParameter::set_has_input_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartParameter::clear_has_input_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartParameter::clear_input_offset() {
  input_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_input_offset();
}
inline ::google::protobuf::uint64 StartParameter::input_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.StartParameter.input_offset)
  return input_offset_;
}
inline void StartParameter::set_input_offset(::google::protobuf::uint64 value) {
  set_has_input_offset();
  input_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.StartParameter.input_offset)
}

// -------------------------------------------------------------------

// EndParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool EndParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EndParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EndParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& EndParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.EndParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* EndParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.EndParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* EndParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void EndParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.EndParameter.dep_info)
}

// optional uint64 output_offset = 1 [default = 281474976710655];
inline bool EndParameter::has_output_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EndParameter::set_has_output_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EndParameter::clear_has_output_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EndParameter::clear_output_offset() {
  output_offset_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_output_offset();
}
inline ::google::protobuf::uint64 EndParameter::output_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.EndParameter.output_offset)
  return output_offset_;
}
inline void EndParameter::set_output_offset(::google::protobuf::uint64 value) {
  set_has_output_offset();
  output_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.EndParameter.output_offset)
}

// optional uint64 output_size = 2 [default = 0];
inline bool EndParameter::has_output_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EndParameter::set_has_output_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EndParameter::clear_has_output_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EndParameter::clear_output_size() {
  output_size_ = GOOGLE_ULONGLONG(0);
  clear_has_output_size();
}
inline ::google::protobuf::uint64 EndParameter::output_size() const {
  // @@protoc_insertion_point(field_get:bmnet.EndParameter.output_size)
  return output_size_;
}
inline void EndParameter::set_output_size(::google::protobuf::uint64 value) {
  set_has_output_size();
  output_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.EndParameter.output_size)
}

// optional uint64 total_neuron_size = 3 [default = 0];
inline bool EndParameter::has_total_neuron_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EndParameter::set_has_total_neuron_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EndParameter::clear_has_total_neuron_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EndParameter::clear_total_neuron_size() {
  total_neuron_size_ = GOOGLE_ULONGLONG(0);
  clear_has_total_neuron_size();
}
inline ::google::protobuf::uint64 EndParameter::total_neuron_size() const {
  // @@protoc_insertion_point(field_get:bmnet.EndParameter.total_neuron_size)
  return total_neuron_size_;
}
inline void EndParameter::set_total_neuron_size(::google::protobuf::uint64 value) {
  set_has_total_neuron_size();
  total_neuron_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.EndParameter.total_neuron_size)
}

// -------------------------------------------------------------------

// TLGroupParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TLGroupParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLGroupParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLGroupParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLGroupParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TLGroupParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TLGroupParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TLGroupParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TLGroupParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TLGroupParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TLGroupParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLGroupParameter.dep_info)
}

// repeated string from_layer = 1;
inline int TLGroupParameter::from_layer_size() const {
  return from_layer_.size();
}
inline void TLGroupParameter::clear_from_layer() {
  from_layer_.Clear();
}
inline const ::std::string& TLGroupParameter::from_layer(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLGroupParameter.from_layer)
  return from_layer_.Get(index);
}
inline ::std::string* TLGroupParameter::mutable_from_layer(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet.TLGroupParameter.from_layer)
  return from_layer_.Mutable(index);
}
inline void TLGroupParameter::set_from_layer(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bmnet.TLGroupParameter.from_layer)
  from_layer_.Mutable(index)->assign(value);
}
inline void TLGroupParameter::set_from_layer(int index, const char* value) {
  from_layer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.TLGroupParameter.from_layer)
}
inline void TLGroupParameter::set_from_layer(int index, const char* value, size_t size) {
  from_layer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.TLGroupParameter.from_layer)
}
inline ::std::string* TLGroupParameter::add_from_layer() {
  return from_layer_.Add();
}
inline void TLGroupParameter::add_from_layer(const ::std::string& value) {
  from_layer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bmnet.TLGroupParameter.from_layer)
}
inline void TLGroupParameter::add_from_layer(const char* value) {
  from_layer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bmnet.TLGroupParameter.from_layer)
}
inline void TLGroupParameter::add_from_layer(const char* value, size_t size) {
  from_layer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bmnet.TLGroupParameter.from_layer)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TLGroupParameter::from_layer() const {
  // @@protoc_insertion_point(field_list:bmnet.TLGroupParameter.from_layer)
  return from_layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TLGroupParameter::mutable_from_layer() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLGroupParameter.from_layer)
  return &from_layer_;
}

// -------------------------------------------------------------------

// TLInnerProductParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TLInnerProductParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLInnerProductParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLInnerProductParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLInnerProductParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TLInnerProductParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TLInnerProductParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TLInnerProductParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TLInnerProductParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TLInnerProductParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TLInnerProductParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLInnerProductParameter.dep_info)
}

// optional uint32 input = 3 [default = 4294967295];
inline bool TLInnerProductParameter::has_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLInnerProductParameter::set_has_input() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLInnerProductParameter::clear_has_input() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLInnerProductParameter::clear_input() {
  input_ = 4294967295u;
  clear_has_input();
}
inline ::google::protobuf::uint32 TLInnerProductParameter::input() const {
  // @@protoc_insertion_point(field_get:bmnet.TLInnerProductParameter.input)
  return input_;
}
inline void TLInnerProductParameter::set_input(::google::protobuf::uint32 value) {
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLInnerProductParameter.input)
}

// optional uint32 output = 4 [default = 4294967295];
inline bool TLInnerProductParameter::has_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLInnerProductParameter::set_has_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLInnerProductParameter::clear_has_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLInnerProductParameter::clear_output() {
  output_ = 4294967295u;
  clear_has_output();
}
inline ::google::protobuf::uint32 TLInnerProductParameter::output() const {
  // @@protoc_insertion_point(field_get:bmnet.TLInnerProductParameter.output)
  return output_;
}
inline void TLInnerProductParameter::set_output(::google::protobuf::uint32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLInnerProductParameter.output)
}

// optional uint32 weight = 5 [default = 4294967295];
inline bool TLInnerProductParameter::has_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLInnerProductParameter::set_has_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLInnerProductParameter::clear_has_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLInnerProductParameter::clear_weight() {
  weight_ = 4294967295u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 TLInnerProductParameter::weight() const {
  // @@protoc_insertion_point(field_get:bmnet.TLInnerProductParameter.weight)
  return weight_;
}
inline void TLInnerProductParameter::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLInnerProductParameter.weight)
}

// optional uint32 bias = 6 [default = 4294967295];
inline bool TLInnerProductParameter::has_bias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLInnerProductParameter::set_has_bias() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLInnerProductParameter::clear_has_bias() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLInnerProductParameter::clear_bias() {
  bias_ = 4294967295u;
  clear_has_bias();
}
inline ::google::protobuf::uint32 TLInnerProductParameter::bias() const {
  // @@protoc_insertion_point(field_get:bmnet.TLInnerProductParameter.bias)
  return bias_;
}
inline void TLInnerProductParameter::set_bias(::google::protobuf::uint32 value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLInnerProductParameter.bias)
}

// optional bool bias_term = 7 [default = false];
inline bool TLInnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TLInnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TLInnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TLInnerProductParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
inline bool TLInnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:bmnet.TLInnerProductParameter.bias_term)
  return bias_term_;
}
inline void TLInnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLInnerProductParameter.bias_term)
}

// optional bool transpose = 8 [default = false];
inline bool TLInnerProductParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TLInnerProductParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TLInnerProductParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TLInnerProductParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
inline bool TLInnerProductParameter::transpose() const {
  // @@protoc_insertion_point(field_get:bmnet.TLInnerProductParameter.transpose)
  return transpose_;
}
inline void TLInnerProductParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLInnerProductParameter.transpose)
}

// optional bool result_add = 9 [default = false];
inline bool TLInnerProductParameter::has_result_add() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TLInnerProductParameter::set_has_result_add() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TLInnerProductParameter::clear_has_result_add() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TLInnerProductParameter::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool TLInnerProductParameter::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.TLInnerProductParameter.result_add)
  return result_add_;
}
inline void TLInnerProductParameter::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLInnerProductParameter.result_add)
}

// optional bool do_activation = 10 [default = false];
inline bool TLInnerProductParameter::has_do_activation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TLInnerProductParameter::set_has_do_activation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TLInnerProductParameter::clear_has_do_activation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TLInnerProductParameter::clear_do_activation() {
  do_activation_ = false;
  clear_has_do_activation();
}
inline bool TLInnerProductParameter::do_activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TLInnerProductParameter.do_activation)
  return do_activation_;
}
inline void TLInnerProductParameter::set_do_activation(bool value) {
  set_has_do_activation();
  do_activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLInnerProductParameter.do_activation)
}

// optional .bmnet.ActivationMethod activation = 11 [default = RELU];
inline bool TLInnerProductParameter::has_activation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TLInnerProductParameter::set_has_activation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TLInnerProductParameter::clear_has_activation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TLInnerProductParameter::clear_activation() {
  activation_ = 0;
  clear_has_activation();
}
inline ::bmnet::ActivationMethod TLInnerProductParameter::activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TLInnerProductParameter.activation)
  return static_cast< ::bmnet::ActivationMethod >(activation_);
}
inline void TLInnerProductParameter::set_activation(::bmnet::ActivationMethod value) {
  assert(::bmnet::ActivationMethod_IsValid(value));
  set_has_activation();
  activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLInnerProductParameter.activation)
}

// -------------------------------------------------------------------

// TLConvolutionParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TLConvolutionParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLConvolutionParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLConvolutionParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLConvolutionParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TLConvolutionParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TLConvolutionParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TLConvolutionParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TLConvolutionParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TLConvolutionParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLConvolutionParameter.dep_info)
}

// optional uint32 input = 3 [default = 4294967295];
inline bool TLConvolutionParameter::has_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLConvolutionParameter::set_has_input() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLConvolutionParameter::clear_has_input() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLConvolutionParameter::clear_input() {
  input_ = 4294967295u;
  clear_has_input();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::input() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.input)
  return input_;
}
inline void TLConvolutionParameter::set_input(::google::protobuf::uint32 value) {
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.input)
}

// optional uint32 output = 4 [default = 4294967295];
inline bool TLConvolutionParameter::has_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLConvolutionParameter::set_has_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLConvolutionParameter::clear_has_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLConvolutionParameter::clear_output() {
  output_ = 4294967295u;
  clear_has_output();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::output() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.output)
  return output_;
}
inline void TLConvolutionParameter::set_output(::google::protobuf::uint32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.output)
}

// optional uint32 weight = 5 [default = 4294967295];
inline bool TLConvolutionParameter::has_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLConvolutionParameter::set_has_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLConvolutionParameter::clear_has_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLConvolutionParameter::clear_weight() {
  weight_ = 4294967295u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::weight() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.weight)
  return weight_;
}
inline void TLConvolutionParameter::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.weight)
}

// optional uint32 bias = 6 [default = 4294967295];
inline bool TLConvolutionParameter::has_bias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLConvolutionParameter::set_has_bias() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLConvolutionParameter::clear_has_bias() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLConvolutionParameter::clear_bias() {
  bias_ = 4294967295u;
  clear_has_bias();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::bias() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.bias)
  return bias_;
}
inline void TLConvolutionParameter::set_bias(::google::protobuf::uint32 value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.bias)
}

// optional uint32 working = 7 [default = 4294967295];
inline bool TLConvolutionParameter::has_working() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TLConvolutionParameter::set_has_working() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TLConvolutionParameter::clear_has_working() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TLConvolutionParameter::clear_working() {
  working_ = 4294967295u;
  clear_has_working();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::working() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.working)
  return working_;
}
inline void TLConvolutionParameter::set_working(::google::protobuf::uint32 value) {
  set_has_working();
  working_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.working)
}

// optional uint32 group = 8 [default = 1];
inline bool TLConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TLConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TLConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TLConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.group)
  return group_;
}
inline void TLConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.group)
}

// optional bool bias_term = 11 [default = false];
inline bool TLConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TLConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TLConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TLConvolutionParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
inline bool TLConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.bias_term)
  return bias_term_;
}
inline void TLConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.bias_term)
}

// repeated uint32 kernel_size = 12;
inline int TLConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
inline void TLConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
inline void TLConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.kernel_size)
}
inline void TLConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLConvolutionParameter.kernel_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:bmnet.TLConvolutionParameter.kernel_size)
  return kernel_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 13;
inline int TLConvolutionParameter::stride_size() const {
  return stride_.size();
}
inline void TLConvolutionParameter::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.stride)
  return stride_.Get(index);
}
inline void TLConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.stride)
}
inline void TLConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLConvolutionParameter.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:bmnet.TLConvolutionParameter.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 14;
inline int TLConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
inline void TLConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.dilation)
  return dilation_.Get(index);
}
inline void TLConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.dilation)
}
inline void TLConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLConvolutionParameter.dilation)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:bmnet.TLConvolutionParameter.dilation)
  return dilation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLConvolutionParameter.dilation)
  return &dilation_;
}

// repeated uint32 pad = 15;
inline int TLConvolutionParameter::pad_size() const {
  return pad_.size();
}
inline void TLConvolutionParameter::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.pad)
  return pad_.Get(index);
}
inline void TLConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.pad)
}
inline void TLConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLConvolutionParameter.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:bmnet.TLConvolutionParameter.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 ins = 16;
inline int TLConvolutionParameter::ins_size() const {
  return ins_.size();
}
inline void TLConvolutionParameter::clear_ins() {
  ins_.Clear();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::ins(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.ins)
  return ins_.Get(index);
}
inline void TLConvolutionParameter::set_ins(int index, ::google::protobuf::uint32 value) {
  ins_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.ins)
}
inline void TLConvolutionParameter::add_ins(::google::protobuf::uint32 value) {
  ins_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLConvolutionParameter.ins)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLConvolutionParameter::ins() const {
  // @@protoc_insertion_point(field_list:bmnet.TLConvolutionParameter.ins)
  return ins_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLConvolutionParameter::mutable_ins() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLConvolutionParameter.ins)
  return &ins_;
}

// optional bool result_add = 17 [default = false];
inline bool TLConvolutionParameter::has_result_add() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TLConvolutionParameter::set_has_result_add() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TLConvolutionParameter::clear_has_result_add() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TLConvolutionParameter::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool TLConvolutionParameter::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.result_add)
  return result_add_;
}
inline void TLConvolutionParameter::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.result_add)
}

// optional bool if_relu = 18 [default = false];
inline bool TLConvolutionParameter::has_if_relu() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TLConvolutionParameter::set_has_if_relu() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TLConvolutionParameter::clear_has_if_relu() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TLConvolutionParameter::clear_if_relu() {
  if_relu_ = false;
  clear_has_if_relu();
}
inline bool TLConvolutionParameter::if_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.if_relu)
  return if_relu_;
}
inline void TLConvolutionParameter::set_if_relu(bool value) {
  set_has_if_relu();
  if_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.if_relu)
}

// optional float relu_slope = 19 [default = 0];
inline bool TLConvolutionParameter::has_relu_slope() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TLConvolutionParameter::set_has_relu_slope() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TLConvolutionParameter::clear_has_relu_slope() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TLConvolutionParameter::clear_relu_slope() {
  relu_slope_ = 0;
  clear_has_relu_slope();
}
inline float TLConvolutionParameter::relu_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.relu_slope)
  return relu_slope_;
}
inline void TLConvolutionParameter::set_relu_slope(float value) {
  set_has_relu_slope();
  relu_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.relu_slope)
}

// optional uint32 global_bn_mean = 20;
inline bool TLConvolutionParameter::has_global_bn_mean() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TLConvolutionParameter::set_has_global_bn_mean() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TLConvolutionParameter::clear_has_global_bn_mean() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TLConvolutionParameter::clear_global_bn_mean() {
  global_bn_mean_ = 0u;
  clear_has_global_bn_mean();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::global_bn_mean() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.global_bn_mean)
  return global_bn_mean_;
}
inline void TLConvolutionParameter::set_global_bn_mean(::google::protobuf::uint32 value) {
  set_has_global_bn_mean();
  global_bn_mean_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.global_bn_mean)
}

// optional uint32 global_bn_variance = 21;
inline bool TLConvolutionParameter::has_global_bn_variance() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TLConvolutionParameter::set_has_global_bn_variance() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TLConvolutionParameter::clear_has_global_bn_variance() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TLConvolutionParameter::clear_global_bn_variance() {
  global_bn_variance_ = 0u;
  clear_has_global_bn_variance();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::global_bn_variance() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.global_bn_variance)
  return global_bn_variance_;
}
inline void TLConvolutionParameter::set_global_bn_variance(::google::protobuf::uint32 value) {
  set_has_global_bn_variance();
  global_bn_variance_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.global_bn_variance)
}

// repeated uint32 group_bias = 22;
inline int TLConvolutionParameter::group_bias_size() const {
  return group_bias_.size();
}
inline void TLConvolutionParameter::clear_group_bias() {
  group_bias_.Clear();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::group_bias(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.group_bias)
  return group_bias_.Get(index);
}
inline void TLConvolutionParameter::set_group_bias(int index, ::google::protobuf::uint32 value) {
  group_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.group_bias)
}
inline void TLConvolutionParameter::add_group_bias(::google::protobuf::uint32 value) {
  group_bias_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLConvolutionParameter.group_bias)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLConvolutionParameter::group_bias() const {
  // @@protoc_insertion_point(field_list:bmnet.TLConvolutionParameter.group_bias)
  return group_bias_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLConvolutionParameter::mutable_group_bias() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLConvolutionParameter.group_bias)
  return &group_bias_;
}

// optional bool use_winograd = 23 [default = false];
inline bool TLConvolutionParameter::has_use_winograd() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TLConvolutionParameter::set_has_use_winograd() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TLConvolutionParameter::clear_has_use_winograd() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TLConvolutionParameter::clear_use_winograd() {
  use_winograd_ = false;
  clear_has_use_winograd();
}
inline bool TLConvolutionParameter::use_winograd() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.use_winograd)
  return use_winograd_;
}
inline void TLConvolutionParameter::set_use_winograd(bool value) {
  set_has_use_winograd();
  use_winograd_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.use_winograd)
}

// repeated uint32 group_weight = 24;
inline int TLConvolutionParameter::group_weight_size() const {
  return group_weight_.size();
}
inline void TLConvolutionParameter::clear_group_weight() {
  group_weight_.Clear();
}
inline ::google::protobuf::uint32 TLConvolutionParameter::group_weight(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.group_weight)
  return group_weight_.Get(index);
}
inline void TLConvolutionParameter::set_group_weight(int index, ::google::protobuf::uint32 value) {
  group_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.group_weight)
}
inline void TLConvolutionParameter::add_group_weight(::google::protobuf::uint32 value) {
  group_weight_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLConvolutionParameter.group_weight)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLConvolutionParameter::group_weight() const {
  // @@protoc_insertion_point(field_list:bmnet.TLConvolutionParameter.group_weight)
  return group_weight_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLConvolutionParameter::mutable_group_weight() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLConvolutionParameter.group_weight)
  return &group_weight_;
}

// optional bool h_slice_skip_first = 25 [default = false];
inline bool TLConvolutionParameter::has_h_slice_skip_first() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TLConvolutionParameter::set_has_h_slice_skip_first() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TLConvolutionParameter::clear_has_h_slice_skip_first() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TLConvolutionParameter::clear_h_slice_skip_first() {
  h_slice_skip_first_ = false;
  clear_has_h_slice_skip_first();
}
inline bool TLConvolutionParameter::h_slice_skip_first() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.h_slice_skip_first)
  return h_slice_skip_first_;
}
inline void TLConvolutionParameter::set_h_slice_skip_first(bool value) {
  set_has_h_slice_skip_first();
  h_slice_skip_first_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.h_slice_skip_first)
}

// optional bool h_slice_skip_last = 26 [default = false];
inline bool TLConvolutionParameter::has_h_slice_skip_last() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TLConvolutionParameter::set_has_h_slice_skip_last() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TLConvolutionParameter::clear_has_h_slice_skip_last() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TLConvolutionParameter::clear_h_slice_skip_last() {
  h_slice_skip_last_ = false;
  clear_has_h_slice_skip_last();
}
inline bool TLConvolutionParameter::h_slice_skip_last() const {
  // @@protoc_insertion_point(field_get:bmnet.TLConvolutionParameter.h_slice_skip_last)
  return h_slice_skip_last_;
}
inline void TLConvolutionParameter::set_h_slice_skip_last(bool value) {
  set_has_h_slice_skip_last();
  h_slice_skip_last_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLConvolutionParameter.h_slice_skip_last)
}

// -------------------------------------------------------------------

// TLShuffleChannelParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TLShuffleChannelParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLShuffleChannelParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLShuffleChannelParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLShuffleChannelParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TLShuffleChannelParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TLShuffleChannelParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TLShuffleChannelParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TLShuffleChannelParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TLShuffleChannelParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TLShuffleChannelParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLShuffleChannelParameter.dep_info)
}

// optional uint32 input = 3;
inline bool TLShuffleChannelParameter::has_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLShuffleChannelParameter::set_has_input() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLShuffleChannelParameter::clear_has_input() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLShuffleChannelParameter::clear_input() {
  input_ = 0u;
  clear_has_input();
}
inline ::google::protobuf::uint32 TLShuffleChannelParameter::input() const {
  // @@protoc_insertion_point(field_get:bmnet.TLShuffleChannelParameter.input)
  return input_;
}
inline void TLShuffleChannelParameter::set_input(::google::protobuf::uint32 value) {
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLShuffleChannelParameter.input)
}

// optional uint32 output = 4 [default = 4294967295];
inline bool TLShuffleChannelParameter::has_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLShuffleChannelParameter::set_has_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLShuffleChannelParameter::clear_has_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLShuffleChannelParameter::clear_output() {
  output_ = 4294967295u;
  clear_has_output();
}
inline ::google::protobuf::uint32 TLShuffleChannelParameter::output() const {
  // @@protoc_insertion_point(field_get:bmnet.TLShuffleChannelParameter.output)
  return output_;
}
inline void TLShuffleChannelParameter::set_output(::google::protobuf::uint32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLShuffleChannelParameter.output)
}

// optional uint32 group = 5 [default = 1];
inline bool TLShuffleChannelParameter::has_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLShuffleChannelParameter::set_has_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLShuffleChannelParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLShuffleChannelParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 TLShuffleChannelParameter::group() const {
  // @@protoc_insertion_point(field_get:bmnet.TLShuffleChannelParameter.group)
  return group_;
}
inline void TLShuffleChannelParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLShuffleChannelParameter.group)
}

// -------------------------------------------------------------------

// TLPoolingParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TLPoolingParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLPoolingParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLPoolingParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLPoolingParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TLPoolingParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TLPoolingParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TLPoolingParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TLPoolingParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TLPoolingParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TLPoolingParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLPoolingParameter.dep_info)
}

// optional uint32 input = 3 [default = 4294967295];
inline bool TLPoolingParameter::has_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLPoolingParameter::set_has_input() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLPoolingParameter::clear_has_input() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLPoolingParameter::clear_input() {
  input_ = 4294967295u;
  clear_has_input();
}
inline ::google::protobuf::uint32 TLPoolingParameter::input() const {
  // @@protoc_insertion_point(field_get:bmnet.TLPoolingParameter.input)
  return input_;
}
inline void TLPoolingParameter::set_input(::google::protobuf::uint32 value) {
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLPoolingParameter.input)
}

// optional uint32 output = 4 [default = 4294967295];
inline bool TLPoolingParameter::has_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLPoolingParameter::set_has_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLPoolingParameter::clear_has_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLPoolingParameter::clear_output() {
  output_ = 4294967295u;
  clear_has_output();
}
inline ::google::protobuf::uint32 TLPoolingParameter::output() const {
  // @@protoc_insertion_point(field_get:bmnet.TLPoolingParameter.output)
  return output_;
}
inline void TLPoolingParameter::set_output(::google::protobuf::uint32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLPoolingParameter.output)
}

// optional uint32 working = 5 [default = 4294967295];
inline bool TLPoolingParameter::has_working() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLPoolingParameter::set_has_working() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLPoolingParameter::clear_has_working() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLPoolingParameter::clear_working() {
  working_ = 4294967295u;
  clear_has_working();
}
inline ::google::protobuf::uint32 TLPoolingParameter::working() const {
  // @@protoc_insertion_point(field_get:bmnet.TLPoolingParameter.working)
  return working_;
}
inline void TLPoolingParameter::set_working(::google::protobuf::uint32 value) {
  set_has_working();
  working_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLPoolingParameter.working)
}

// optional bool avg_pool = 6 [default = true];
inline bool TLPoolingParameter::has_avg_pool() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLPoolingParameter::set_has_avg_pool() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLPoolingParameter::clear_has_avg_pool() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLPoolingParameter::clear_avg_pool() {
  avg_pool_ = true;
  clear_has_avg_pool();
}
inline bool TLPoolingParameter::avg_pool() const {
  // @@protoc_insertion_point(field_get:bmnet.TLPoolingParameter.avg_pool)
  return avg_pool_;
}
inline void TLPoolingParameter::set_avg_pool(bool value) {
  set_has_avg_pool();
  avg_pool_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLPoolingParameter.avg_pool)
}

// repeated uint32 kernel_size = 7;
inline int TLPoolingParameter::kernel_size_size() const {
  return kernel_size_.size();
}
inline void TLPoolingParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::google::protobuf::uint32 TLPoolingParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLPoolingParameter.kernel_size)
  return kernel_size_.Get(index);
}
inline void TLPoolingParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLPoolingParameter.kernel_size)
}
inline void TLPoolingParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLPoolingParameter.kernel_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLPoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:bmnet.TLPoolingParameter.kernel_size)
  return kernel_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLPoolingParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLPoolingParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 8;
inline int TLPoolingParameter::stride_size() const {
  return stride_.size();
}
inline void TLPoolingParameter::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 TLPoolingParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLPoolingParameter.stride)
  return stride_.Get(index);
}
inline void TLPoolingParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLPoolingParameter.stride)
}
inline void TLPoolingParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLPoolingParameter.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLPoolingParameter::stride() const {
  // @@protoc_insertion_point(field_list:bmnet.TLPoolingParameter.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLPoolingParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLPoolingParameter.stride)
  return &stride_;
}

// repeated uint32 pad = 9;
inline int TLPoolingParameter::pad_size() const {
  return pad_.size();
}
inline void TLPoolingParameter::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 TLPoolingParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLPoolingParameter.pad)
  return pad_.Get(index);
}
inline void TLPoolingParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLPoolingParameter.pad)
}
inline void TLPoolingParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLPoolingParameter.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLPoolingParameter::pad() const {
  // @@protoc_insertion_point(field_list:bmnet.TLPoolingParameter.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLPoolingParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLPoolingParameter.pad)
  return &pad_;
}

// optional bool if_relu = 10 [default = false];
inline bool TLPoolingParameter::has_if_relu() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TLPoolingParameter::set_has_if_relu() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TLPoolingParameter::clear_has_if_relu() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TLPoolingParameter::clear_if_relu() {
  if_relu_ = false;
  clear_has_if_relu();
}
inline bool TLPoolingParameter::if_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.TLPoolingParameter.if_relu)
  return if_relu_;
}
inline void TLPoolingParameter::set_if_relu(bool value) {
  set_has_if_relu();
  if_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLPoolingParameter.if_relu)
}

// -------------------------------------------------------------------

// TLUpsampleParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TLUpsampleParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLUpsampleParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLUpsampleParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLUpsampleParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TLUpsampleParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TLUpsampleParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TLUpsampleParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TLUpsampleParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TLUpsampleParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TLUpsampleParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLUpsampleParameter.dep_info)
}

// optional uint32 input = 3 [default = 4294967295];
inline bool TLUpsampleParameter::has_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLUpsampleParameter::set_has_input() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLUpsampleParameter::clear_has_input() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLUpsampleParameter::clear_input() {
  input_ = 4294967295u;
  clear_has_input();
}
inline ::google::protobuf::uint32 TLUpsampleParameter::input() const {
  // @@protoc_insertion_point(field_get:bmnet.TLUpsampleParameter.input)
  return input_;
}
inline void TLUpsampleParameter::set_input(::google::protobuf::uint32 value) {
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLUpsampleParameter.input)
}

// optional uint32 output = 4 [default = 4294967295];
inline bool TLUpsampleParameter::has_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLUpsampleParameter::set_has_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLUpsampleParameter::clear_has_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLUpsampleParameter::clear_output() {
  output_ = 4294967295u;
  clear_has_output();
}
inline ::google::protobuf::uint32 TLUpsampleParameter::output() const {
  // @@protoc_insertion_point(field_get:bmnet.TLUpsampleParameter.output)
  return output_;
}
inline void TLUpsampleParameter::set_output(::google::protobuf::uint32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLUpsampleParameter.output)
}

// optional uint32 working = 5 [default = 4294967295];
inline bool TLUpsampleParameter::has_working() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLUpsampleParameter::set_has_working() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLUpsampleParameter::clear_has_working() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLUpsampleParameter::clear_working() {
  working_ = 4294967295u;
  clear_has_working();
}
inline ::google::protobuf::uint32 TLUpsampleParameter::working() const {
  // @@protoc_insertion_point(field_get:bmnet.TLUpsampleParameter.working)
  return working_;
}
inline void TLUpsampleParameter::set_working(::google::protobuf::uint32 value) {
  set_has_working();
  working_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLUpsampleParameter.working)
}

// repeated uint32 size = 6;
inline int TLUpsampleParameter::size_size() const {
  return size_.size();
}
inline void TLUpsampleParameter::clear_size() {
  size_.Clear();
}
inline ::google::protobuf::uint32 TLUpsampleParameter::size(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLUpsampleParameter.size)
  return size_.Get(index);
}
inline void TLUpsampleParameter::set_size(int index, ::google::protobuf::uint32 value) {
  size_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLUpsampleParameter.size)
}
inline void TLUpsampleParameter::add_size(::google::protobuf::uint32 value) {
  size_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLUpsampleParameter.size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLUpsampleParameter::size() const {
  // @@protoc_insertion_point(field_list:bmnet.TLUpsampleParameter.size)
  return size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLUpsampleParameter::mutable_size() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLUpsampleParameter.size)
  return &size_;
}

// -------------------------------------------------------------------

// TLLrnParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TLLrnParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLLrnParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLLrnParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLLrnParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TLLrnParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TLLrnParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TLLrnParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TLLrnParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TLLrnParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TLLrnParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLLrnParameter.dep_info)
}

// optional uint32 input = 3 [default = 4294967295];
inline bool TLLrnParameter::has_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLLrnParameter::set_has_input() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLLrnParameter::clear_has_input() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLLrnParameter::clear_input() {
  input_ = 4294967295u;
  clear_has_input();
}
inline ::google::protobuf::uint32 TLLrnParameter::input() const {
  // @@protoc_insertion_point(field_get:bmnet.TLLrnParameter.input)
  return input_;
}
inline void TLLrnParameter::set_input(::google::protobuf::uint32 value) {
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLLrnParameter.input)
}

// optional uint32 output = 4 [default = 4294967295];
inline bool TLLrnParameter::has_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLLrnParameter::set_has_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLLrnParameter::clear_has_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLLrnParameter::clear_output() {
  output_ = 4294967295u;
  clear_has_output();
}
inline ::google::protobuf::uint32 TLLrnParameter::output() const {
  // @@protoc_insertion_point(field_get:bmnet.TLLrnParameter.output)
  return output_;
}
inline void TLLrnParameter::set_output(::google::protobuf::uint32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLLrnParameter.output)
}

// optional uint32 working = 5 [default = 4294967295];
inline bool TLLrnParameter::has_working() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLLrnParameter::set_has_working() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLLrnParameter::clear_has_working() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLLrnParameter::clear_working() {
  working_ = 4294967295u;
  clear_has_working();
}
inline ::google::protobuf::uint32 TLLrnParameter::working() const {
  // @@protoc_insertion_point(field_get:bmnet.TLLrnParameter.working)
  return working_;
}
inline void TLLrnParameter::set_working(::google::protobuf::uint32 value) {
  set_has_working();
  working_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLLrnParameter.working)
}

// optional uint32 local_size = 8 [default = 5];
inline bool TLLrnParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLLrnParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLLrnParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLLrnParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 TLLrnParameter::local_size() const {
  // @@protoc_insertion_point(field_get:bmnet.TLLrnParameter.local_size)
  return local_size_;
}
inline void TLLrnParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLLrnParameter.local_size)
}

// optional float alpha = 9 [default = 1];
inline bool TLLrnParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TLLrnParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TLLrnParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TLLrnParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float TLLrnParameter::alpha() const {
  // @@protoc_insertion_point(field_get:bmnet.TLLrnParameter.alpha)
  return alpha_;
}
inline void TLLrnParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLLrnParameter.alpha)
}

// optional float beta = 10 [default = 0.75];
inline bool TLLrnParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TLLrnParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TLLrnParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TLLrnParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float TLLrnParameter::beta() const {
  // @@protoc_insertion_point(field_get:bmnet.TLLrnParameter.beta)
  return beta_;
}
inline void TLLrnParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLLrnParameter.beta)
}

// optional float k = 11 [default = 1];
inline bool TLLrnParameter::has_k() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TLLrnParameter::set_has_k() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TLLrnParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TLLrnParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float TLLrnParameter::k() const {
  // @@protoc_insertion_point(field_get:bmnet.TLLrnParameter.k)
  return k_;
}
inline void TLLrnParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLLrnParameter.k)
}

// optional .bmnet.TLLrnParameter.NormRegion norm_region = 12 [default = ACROSS_CHANNELS];
inline bool TLLrnParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TLLrnParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TLLrnParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TLLrnParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::bmnet::TLLrnParameter_NormRegion TLLrnParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:bmnet.TLLrnParameter.norm_region)
  return static_cast< ::bmnet::TLLrnParameter_NormRegion >(norm_region_);
}
inline void TLLrnParameter::set_norm_region(::bmnet::TLLrnParameter_NormRegion value) {
  assert(::bmnet::TLLrnParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLLrnParameter.norm_region)
}

// optional uint32 sqr_lut_weight = 13 [default = 4294967295];
inline bool TLLrnParameter::has_sqr_lut_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TLLrnParameter::set_has_sqr_lut_weight() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TLLrnParameter::clear_has_sqr_lut_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TLLrnParameter::clear_sqr_lut_weight() {
  sqr_lut_weight_ = 4294967295u;
  clear_has_sqr_lut_weight();
}
inline ::google::protobuf::uint32 TLLrnParameter::sqr_lut_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.TLLrnParameter.sqr_lut_weight)
  return sqr_lut_weight_;
}
inline void TLLrnParameter::set_sqr_lut_weight(::google::protobuf::uint32 value) {
  set_has_sqr_lut_weight();
  sqr_lut_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLLrnParameter.sqr_lut_weight)
}

// optional uint32 power_lut_weight = 14 [default = 4294967295];
inline bool TLLrnParameter::has_power_lut_weight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TLLrnParameter::set_has_power_lut_weight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TLLrnParameter::clear_has_power_lut_weight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TLLrnParameter::clear_power_lut_weight() {
  power_lut_weight_ = 4294967295u;
  clear_has_power_lut_weight();
}
inline ::google::protobuf::uint32 TLLrnParameter::power_lut_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.TLLrnParameter.power_lut_weight)
  return power_lut_weight_;
}
inline void TLLrnParameter::set_power_lut_weight(::google::protobuf::uint32 value) {
  set_has_power_lut_weight();
  power_lut_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLLrnParameter.power_lut_weight)
}

// -------------------------------------------------------------------

// TLBatchNormParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TLBatchNormParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLBatchNormParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLBatchNormParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLBatchNormParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TLBatchNormParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TLBatchNormParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TLBatchNormParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TLBatchNormParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TLBatchNormParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TLBatchNormParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLBatchNormParameter.dep_info)
}

// optional uint32 input = 3 [default = 4294967295];
inline bool TLBatchNormParameter::has_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLBatchNormParameter::set_has_input() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLBatchNormParameter::clear_has_input() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLBatchNormParameter::clear_input() {
  input_ = 4294967295u;
  clear_has_input();
}
inline ::google::protobuf::uint32 TLBatchNormParameter::input() const {
  // @@protoc_insertion_point(field_get:bmnet.TLBatchNormParameter.input)
  return input_;
}
inline void TLBatchNormParameter::set_input(::google::protobuf::uint32 value) {
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLBatchNormParameter.input)
}

// optional uint32 mean = 5 [default = 4294967295];
inline bool TLBatchNormParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLBatchNormParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLBatchNormParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLBatchNormParameter::clear_mean() {
  mean_ = 4294967295u;
  clear_has_mean();
}
inline ::google::protobuf::uint32 TLBatchNormParameter::mean() const {
  // @@protoc_insertion_point(field_get:bmnet.TLBatchNormParameter.mean)
  return mean_;
}
inline void TLBatchNormParameter::set_mean(::google::protobuf::uint32 value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLBatchNormParameter.mean)
}

// optional uint32 variance = 6 [default = 4294967295];
inline bool TLBatchNormParameter::has_variance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLBatchNormParameter::set_has_variance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLBatchNormParameter::clear_has_variance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLBatchNormParameter::clear_variance() {
  variance_ = 4294967295u;
  clear_has_variance();
}
inline ::google::protobuf::uint32 TLBatchNormParameter::variance() const {
  // @@protoc_insertion_point(field_get:bmnet.TLBatchNormParameter.variance)
  return variance_;
}
inline void TLBatchNormParameter::set_variance(::google::protobuf::uint32 value) {
  set_has_variance();
  variance_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLBatchNormParameter.variance)
}

// optional uint32 output = 8 [default = 4294967295];
inline bool TLBatchNormParameter::has_output() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLBatchNormParameter::set_has_output() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLBatchNormParameter::clear_has_output() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLBatchNormParameter::clear_output() {
  output_ = 4294967295u;
  clear_has_output();
}
inline ::google::protobuf::uint32 TLBatchNormParameter::output() const {
  // @@protoc_insertion_point(field_get:bmnet.TLBatchNormParameter.output)
  return output_;
}
inline void TLBatchNormParameter::set_output(::google::protobuf::uint32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLBatchNormParameter.output)
}

// optional uint32 working = 9 [default = 4294967295];
inline bool TLBatchNormParameter::has_working() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TLBatchNormParameter::set_has_working() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TLBatchNormParameter::clear_has_working() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TLBatchNormParameter::clear_working() {
  working_ = 4294967295u;
  clear_has_working();
}
inline ::google::protobuf::uint32 TLBatchNormParameter::working() const {
  // @@protoc_insertion_point(field_get:bmnet.TLBatchNormParameter.working)
  return working_;
}
inline void TLBatchNormParameter::set_working(::google::protobuf::uint32 value) {
  set_has_working();
  working_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLBatchNormParameter.working)
}

// optional uint64 scale_ma = 10 [default = 18446744073709551615];
inline bool TLBatchNormParameter::has_scale_ma() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TLBatchNormParameter::set_has_scale_ma() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TLBatchNormParameter::clear_has_scale_ma() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TLBatchNormParameter::clear_scale_ma() {
  scale_ma_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_scale_ma();
}
inline ::google::protobuf::uint64 TLBatchNormParameter::scale_ma() const {
  // @@protoc_insertion_point(field_get:bmnet.TLBatchNormParameter.scale_ma)
  return scale_ma_;
}
inline void TLBatchNormParameter::set_scale_ma(::google::protobuf::uint64 value) {
  set_has_scale_ma();
  scale_ma_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLBatchNormParameter.scale_ma)
}

// optional float eps = 11 [default = 1e-05];
inline bool TLBatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TLBatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TLBatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TLBatchNormParameter::clear_eps() {
  eps_ = 1e-05f;
  clear_has_eps();
}
inline float TLBatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:bmnet.TLBatchNormParameter.eps)
  return eps_;
}
inline void TLBatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLBatchNormParameter.eps)
}

// optional bool if_relu = 12 [default = false];
inline bool TLBatchNormParameter::has_if_relu() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TLBatchNormParameter::set_has_if_relu() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TLBatchNormParameter::clear_has_if_relu() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TLBatchNormParameter::clear_if_relu() {
  if_relu_ = false;
  clear_has_if_relu();
}
inline bool TLBatchNormParameter::if_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.TLBatchNormParameter.if_relu)
  return if_relu_;
}
inline void TLBatchNormParameter::set_if_relu(bool value) {
  set_has_if_relu();
  if_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLBatchNormParameter.if_relu)
}

// -------------------------------------------------------------------

// TLScaleParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TLScaleParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLScaleParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLScaleParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLScaleParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TLScaleParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TLScaleParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TLScaleParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TLScaleParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TLScaleParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TLScaleParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLScaleParameter.dep_info)
}

// optional uint32 input = 3;
inline bool TLScaleParameter::has_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLScaleParameter::set_has_input() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLScaleParameter::clear_has_input() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLScaleParameter::clear_input() {
  input_ = 0u;
  clear_has_input();
}
inline ::google::protobuf::uint32 TLScaleParameter::input() const {
  // @@protoc_insertion_point(field_get:bmnet.TLScaleParameter.input)
  return input_;
}
inline void TLScaleParameter::set_input(::google::protobuf::uint32 value) {
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLScaleParameter.input)
}

// optional uint32 output = 4 [default = 4294967295];
inline bool TLScaleParameter::has_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLScaleParameter::set_has_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLScaleParameter::clear_has_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLScaleParameter::clear_output() {
  output_ = 4294967295u;
  clear_has_output();
}
inline ::google::protobuf::uint32 TLScaleParameter::output() const {
  // @@protoc_insertion_point(field_get:bmnet.TLScaleParameter.output)
  return output_;
}
inline void TLScaleParameter::set_output(::google::protobuf::uint32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLScaleParameter.output)
}

// optional uint32 scale = 5 [default = 4294967295];
inline bool TLScaleParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLScaleParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLScaleParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLScaleParameter::clear_scale() {
  scale_ = 4294967295u;
  clear_has_scale();
}
inline ::google::protobuf::uint32 TLScaleParameter::scale() const {
  // @@protoc_insertion_point(field_get:bmnet.TLScaleParameter.scale)
  return scale_;
}
inline void TLScaleParameter::set_scale(::google::protobuf::uint32 value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLScaleParameter.scale)
}

// optional uint32 bias = 6 [default = 4294967295];
inline bool TLScaleParameter::has_bias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLScaleParameter::set_has_bias() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLScaleParameter::clear_has_bias() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLScaleParameter::clear_bias() {
  bias_ = 4294967295u;
  clear_has_bias();
}
inline ::google::protobuf::uint32 TLScaleParameter::bias() const {
  // @@protoc_insertion_point(field_get:bmnet.TLScaleParameter.bias)
  return bias_;
}
inline void TLScaleParameter::set_bias(::google::protobuf::uint32 value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLScaleParameter.bias)
}

// optional uint32 working = 7 [default = 4294967295];
inline bool TLScaleParameter::has_working() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TLScaleParameter::set_has_working() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TLScaleParameter::clear_has_working() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TLScaleParameter::clear_working() {
  working_ = 4294967295u;
  clear_has_working();
}
inline ::google::protobuf::uint32 TLScaleParameter::working() const {
  // @@protoc_insertion_point(field_get:bmnet.TLScaleParameter.working)
  return working_;
}
inline void TLScaleParameter::set_working(::google::protobuf::uint32 value) {
  set_has_working();
  working_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLScaleParameter.working)
}

// optional uint32 scale_dim = 8;
inline bool TLScaleParameter::has_scale_dim() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TLScaleParameter::set_has_scale_dim() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TLScaleParameter::clear_has_scale_dim() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TLScaleParameter::clear_scale_dim() {
  scale_dim_ = 0u;
  clear_has_scale_dim();
}
inline ::google::protobuf::uint32 TLScaleParameter::scale_dim() const {
  // @@protoc_insertion_point(field_get:bmnet.TLScaleParameter.scale_dim)
  return scale_dim_;
}
inline void TLScaleParameter::set_scale_dim(::google::protobuf::uint32 value) {
  set_has_scale_dim();
  scale_dim_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLScaleParameter.scale_dim)
}

// optional bool bias_term = 9 [default = false];
inline bool TLScaleParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TLScaleParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TLScaleParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TLScaleParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
inline bool TLScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:bmnet.TLScaleParameter.bias_term)
  return bias_term_;
}
inline void TLScaleParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLScaleParameter.bias_term)
}

// optional bool if_relu = 10 [default = false];
inline bool TLScaleParameter::has_if_relu() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TLScaleParameter::set_has_if_relu() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TLScaleParameter::clear_has_if_relu() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TLScaleParameter::clear_if_relu() {
  if_relu_ = false;
  clear_has_if_relu();
}
inline bool TLScaleParameter::if_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.TLScaleParameter.if_relu)
  return if_relu_;
}
inline void TLScaleParameter::set_if_relu(bool value) {
  set_has_if_relu();
  if_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLScaleParameter.if_relu)
}

// optional float relu_slope = 19 [default = 0];
inline bool TLScaleParameter::has_relu_slope() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TLScaleParameter::set_has_relu_slope() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TLScaleParameter::clear_has_relu_slope() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TLScaleParameter::clear_relu_slope() {
  relu_slope_ = 0;
  clear_has_relu_slope();
}
inline float TLScaleParameter::relu_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.TLScaleParameter.relu_slope)
  return relu_slope_;
}
inline void TLScaleParameter::set_relu_slope(float value) {
  set_has_relu_slope();
  relu_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLScaleParameter.relu_slope)
}

// -------------------------------------------------------------------

// TLEltwiseParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TLEltwiseParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLEltwiseParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLEltwiseParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLEltwiseParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TLEltwiseParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TLEltwiseParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TLEltwiseParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TLEltwiseParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TLEltwiseParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TLEltwiseParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLEltwiseParameter.dep_info)
}

// repeated uint32 input = 3;
inline int TLEltwiseParameter::input_size() const {
  return input_.size();
}
inline void TLEltwiseParameter::clear_input() {
  input_.Clear();
}
inline ::google::protobuf::uint32 TLEltwiseParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLEltwiseParameter.input)
  return input_.Get(index);
}
inline void TLEltwiseParameter::set_input(int index, ::google::protobuf::uint32 value) {
  input_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLEltwiseParameter.input)
}
inline void TLEltwiseParameter::add_input(::google::protobuf::uint32 value) {
  input_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLEltwiseParameter.input)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLEltwiseParameter::input() const {
  // @@protoc_insertion_point(field_list:bmnet.TLEltwiseParameter.input)
  return input_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLEltwiseParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLEltwiseParameter.input)
  return &input_;
}

// optional uint32 output = 4 [default = 4294967295];
inline bool TLEltwiseParameter::has_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLEltwiseParameter::set_has_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLEltwiseParameter::clear_has_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLEltwiseParameter::clear_output() {
  output_ = 4294967295u;
  clear_has_output();
}
inline ::google::protobuf::uint32 TLEltwiseParameter::output() const {
  // @@protoc_insertion_point(field_get:bmnet.TLEltwiseParameter.output)
  return output_;
}
inline void TLEltwiseParameter::set_output(::google::protobuf::uint32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLEltwiseParameter.output)
}

// optional uint32 working = 5 [default = 4294967295];
inline bool TLEltwiseParameter::has_working() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLEltwiseParameter::set_has_working() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLEltwiseParameter::clear_has_working() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLEltwiseParameter::clear_working() {
  working_ = 4294967295u;
  clear_has_working();
}
inline ::google::protobuf::uint32 TLEltwiseParameter::working() const {
  // @@protoc_insertion_point(field_get:bmnet.TLEltwiseParameter.working)
  return working_;
}
inline void TLEltwiseParameter::set_working(::google::protobuf::uint32 value) {
  set_has_working();
  working_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLEltwiseParameter.working)
}

// optional int32 op_code = 7 [default = 1];
inline bool TLEltwiseParameter::has_op_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLEltwiseParameter::set_has_op_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLEltwiseParameter::clear_has_op_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLEltwiseParameter::clear_op_code() {
  op_code_ = 1;
  clear_has_op_code();
}
inline ::google::protobuf::int32 TLEltwiseParameter::op_code() const {
  // @@protoc_insertion_point(field_get:bmnet.TLEltwiseParameter.op_code)
  return op_code_;
}
inline void TLEltwiseParameter::set_op_code(::google::protobuf::int32 value) {
  set_has_op_code();
  op_code_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLEltwiseParameter.op_code)
}

// repeated float coeff = 8;
inline int TLEltwiseParameter::coeff_size() const {
  return coeff_.size();
}
inline void TLEltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float TLEltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLEltwiseParameter.coeff)
  return coeff_.Get(index);
}
inline void TLEltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLEltwiseParameter.coeff)
}
inline void TLEltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLEltwiseParameter.coeff)
}
inline const ::google::protobuf::RepeatedField< float >&
TLEltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:bmnet.TLEltwiseParameter.coeff)
  return coeff_;
}
inline ::google::protobuf::RepeatedField< float >*
TLEltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLEltwiseParameter.coeff)
  return &coeff_;
}

// optional bool if_relu = 9 [default = false];
inline bool TLEltwiseParameter::has_if_relu() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TLEltwiseParameter::set_has_if_relu() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TLEltwiseParameter::clear_has_if_relu() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TLEltwiseParameter::clear_if_relu() {
  if_relu_ = false;
  clear_has_if_relu();
}
inline bool TLEltwiseParameter::if_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.TLEltwiseParameter.if_relu)
  return if_relu_;
}
inline void TLEltwiseParameter::set_if_relu(bool value) {
  set_has_if_relu();
  if_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLEltwiseParameter.if_relu)
}

// optional float relu_slope = 19 [default = 0];
inline bool TLEltwiseParameter::has_relu_slope() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TLEltwiseParameter::set_has_relu_slope() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TLEltwiseParameter::clear_has_relu_slope() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TLEltwiseParameter::clear_relu_slope() {
  relu_slope_ = 0;
  clear_has_relu_slope();
}
inline float TLEltwiseParameter::relu_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.TLEltwiseParameter.relu_slope)
  return relu_slope_;
}
inline void TLEltwiseParameter::set_relu_slope(float value) {
  set_has_relu_slope();
  relu_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLEltwiseParameter.relu_slope)
}

// -------------------------------------------------------------------

// TLActivationParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TLActivationParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLActivationParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLActivationParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLActivationParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TLActivationParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TLActivationParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TLActivationParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TLActivationParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TLActivationParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TLActivationParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLActivationParameter.dep_info)
}

// optional uint32 input = 3 [default = 4294967295];
inline bool TLActivationParameter::has_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLActivationParameter::set_has_input() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLActivationParameter::clear_has_input() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLActivationParameter::clear_input() {
  input_ = 4294967295u;
  clear_has_input();
}
inline ::google::protobuf::uint32 TLActivationParameter::input() const {
  // @@protoc_insertion_point(field_get:bmnet.TLActivationParameter.input)
  return input_;
}
inline void TLActivationParameter::set_input(::google::protobuf::uint32 value) {
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLActivationParameter.input)
}

// optional uint32 output = 4 [default = 4294967295];
inline bool TLActivationParameter::has_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLActivationParameter::set_has_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLActivationParameter::clear_has_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLActivationParameter::clear_output() {
  output_ = 4294967295u;
  clear_has_output();
}
inline ::google::protobuf::uint32 TLActivationParameter::output() const {
  // @@protoc_insertion_point(field_get:bmnet.TLActivationParameter.output)
  return output_;
}
inline void TLActivationParameter::set_output(::google::protobuf::uint32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLActivationParameter.output)
}

// optional uint32 weight = 5 [default = 4294967295];
inline bool TLActivationParameter::has_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLActivationParameter::set_has_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLActivationParameter::clear_has_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLActivationParameter::clear_weight() {
  weight_ = 4294967295u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 TLActivationParameter::weight() const {
  // @@protoc_insertion_point(field_get:bmnet.TLActivationParameter.weight)
  return weight_;
}
inline void TLActivationParameter::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLActivationParameter.weight)
}

// optional .bmnet.ActivationMethod activation = 6 [default = RELU];
inline bool TLActivationParameter::has_activation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLActivationParameter::set_has_activation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLActivationParameter::clear_has_activation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLActivationParameter::clear_activation() {
  activation_ = 0;
  clear_has_activation();
}
inline ::bmnet::ActivationMethod TLActivationParameter::activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TLActivationParameter.activation)
  return static_cast< ::bmnet::ActivationMethod >(activation_);
}
inline void TLActivationParameter::set_activation(::bmnet::ActivationMethod value) {
  assert(::bmnet::ActivationMethod_IsValid(value));
  set_has_activation();
  activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLActivationParameter.activation)
}

// repeated float activation_arg = 7;
inline int TLActivationParameter::activation_arg_size() const {
  return activation_arg_.size();
}
inline void TLActivationParameter::clear_activation_arg() {
  activation_arg_.Clear();
}
inline float TLActivationParameter::activation_arg(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TLActivationParameter.activation_arg)
  return activation_arg_.Get(index);
}
inline void TLActivationParameter::set_activation_arg(int index, float value) {
  activation_arg_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TLActivationParameter.activation_arg)
}
inline void TLActivationParameter::add_activation_arg(float value) {
  activation_arg_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TLActivationParameter.activation_arg)
}
inline const ::google::protobuf::RepeatedField< float >&
TLActivationParameter::activation_arg() const {
  // @@protoc_insertion_point(field_list:bmnet.TLActivationParameter.activation_arg)
  return activation_arg_;
}
inline ::google::protobuf::RepeatedField< float >*
TLActivationParameter::mutable_activation_arg() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TLActivationParameter.activation_arg)
  return &activation_arg_;
}

// optional uint64 global_slope = 31 [default = 281474976710655];
inline bool TLActivationParameter::has_global_slope() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TLActivationParameter::set_has_global_slope() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TLActivationParameter::clear_has_global_slope() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TLActivationParameter::clear_global_slope() {
  global_slope_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_slope();
}
inline ::google::protobuf::uint64 TLActivationParameter::global_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.TLActivationParameter.global_slope)
  return global_slope_;
}
inline void TLActivationParameter::set_global_slope(::google::protobuf::uint64 value) {
  set_has_global_slope();
  global_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLActivationParameter.global_slope)
}

// optional bool channel_shared = 32 [default = false];
inline bool TLActivationParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TLActivationParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TLActivationParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TLActivationParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool TLActivationParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.TLActivationParameter.channel_shared)
  return channel_shared_;
}
inline void TLActivationParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLActivationParameter.channel_shared)
}

// -------------------------------------------------------------------

// TLDummyParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TLDummyParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLDummyParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLDummyParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLDummyParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TLDummyParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TLDummyParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TLDummyParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TLDummyParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TLDummyParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TLDummyParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLDummyParameter.dep_info)
}

// optional uint32 input = 3 [default = 4294967295];
inline bool TLDummyParameter::has_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLDummyParameter::set_has_input() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLDummyParameter::clear_has_input() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLDummyParameter::clear_input() {
  input_ = 4294967295u;
  clear_has_input();
}
inline ::google::protobuf::uint32 TLDummyParameter::input() const {
  // @@protoc_insertion_point(field_get:bmnet.TLDummyParameter.input)
  return input_;
}
inline void TLDummyParameter::set_input(::google::protobuf::uint32 value) {
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLDummyParameter.input)
}

// optional uint32 output = 4 [default = 4294967295];
inline bool TLDummyParameter::has_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLDummyParameter::set_has_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLDummyParameter::clear_has_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLDummyParameter::clear_output() {
  output_ = 4294967295u;
  clear_has_output();
}
inline ::google::protobuf::uint32 TLDummyParameter::output() const {
  // @@protoc_insertion_point(field_get:bmnet.TLDummyParameter.output)
  return output_;
}
inline void TLDummyParameter::set_output(::google::protobuf::uint32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLDummyParameter.output)
}

// -------------------------------------------------------------------

// TLTransportParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TLTransportParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLTransportParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLTransportParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLTransportParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TLTransportParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TLTransportParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TLTransportParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TLTransportParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TLTransportParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLTransportParameter.dep_info)
}

// optional string name = 1;
inline bool TLTransportParameter::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLTransportParameter::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLTransportParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLTransportParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TLTransportParameter::name() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.name)
  return *name_;
}
inline void TLTransportParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.TLTransportParameter.name)
}
inline void TLTransportParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.TLTransportParameter.name)
}
inline void TLTransportParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.TLTransportParameter.name)
}
inline ::std::string* TLTransportParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.TLTransportParameter.name)
  return name_;
}
inline ::std::string* TLTransportParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLTransportParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLTransportParameter.name)
}

// optional .bmnet.BlobShape global_shape = 2;
inline bool TLTransportParameter::has_global_shape() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLTransportParameter::set_has_global_shape() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLTransportParameter::clear_has_global_shape() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLTransportParameter::clear_global_shape() {
  if (global_shape_ != NULL) global_shape_->::bmnet::BlobShape::Clear();
  clear_has_global_shape();
}
inline const ::bmnet::BlobShape& TLTransportParameter::global_shape() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.global_shape)
  return global_shape_ != NULL ? *global_shape_ : *default_instance_->global_shape_;
}
inline ::bmnet::BlobShape* TLTransportParameter::mutable_global_shape() {
  set_has_global_shape();
  if (global_shape_ == NULL) global_shape_ = new ::bmnet::BlobShape;
  // @@protoc_insertion_point(field_mutable:bmnet.TLTransportParameter.global_shape)
  return global_shape_;
}
inline ::bmnet::BlobShape* TLTransportParameter::release_global_shape() {
  clear_has_global_shape();
  ::bmnet::BlobShape* temp = global_shape_;
  global_shape_ = NULL;
  return temp;
}
inline void TLTransportParameter::set_allocated_global_shape(::bmnet::BlobShape* global_shape) {
  delete global_shape_;
  global_shape_ = global_shape;
  if (global_shape) {
    set_has_global_shape();
  } else {
    clear_has_global_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLTransportParameter.global_shape)
}

// optional .bmnet.BlobShape local_shape = 3;
inline bool TLTransportParameter::has_local_shape() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLTransportParameter::set_has_local_shape() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLTransportParameter::clear_has_local_shape() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLTransportParameter::clear_local_shape() {
  if (local_shape_ != NULL) local_shape_->::bmnet::BlobShape::Clear();
  clear_has_local_shape();
}
inline const ::bmnet::BlobShape& TLTransportParameter::local_shape() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.local_shape)
  return local_shape_ != NULL ? *local_shape_ : *default_instance_->local_shape_;
}
inline ::bmnet::BlobShape* TLTransportParameter::mutable_local_shape() {
  set_has_local_shape();
  if (local_shape_ == NULL) local_shape_ = new ::bmnet::BlobShape;
  // @@protoc_insertion_point(field_mutable:bmnet.TLTransportParameter.local_shape)
  return local_shape_;
}
inline ::bmnet::BlobShape* TLTransportParameter::release_local_shape() {
  clear_has_local_shape();
  ::bmnet::BlobShape* temp = local_shape_;
  local_shape_ = NULL;
  return temp;
}
inline void TLTransportParameter::set_allocated_local_shape(::bmnet::BlobShape* local_shape) {
  delete local_shape_;
  local_shape_ = local_shape;
  if (local_shape) {
    set_has_local_shape();
  } else {
    clear_has_local_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLTransportParameter.local_shape)
}

// optional uint64 global_offset = 4 [default = 281474976710655];
inline bool TLTransportParameter::has_global_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLTransportParameter::set_has_global_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLTransportParameter::clear_has_global_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLTransportParameter::clear_global_offset() {
  global_offset_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_offset();
}
inline ::google::protobuf::uint64 TLTransportParameter::global_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.global_offset)
  return global_offset_;
}
inline void TLTransportParameter::set_global_offset(::google::protobuf::uint64 value) {
  set_has_global_offset();
  global_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLTransportParameter.global_offset)
}

// optional uint32 local_address = 5 [default = 4294967295];
inline bool TLTransportParameter::has_local_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TLTransportParameter::set_has_local_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TLTransportParameter::clear_has_local_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TLTransportParameter::clear_local_address() {
  local_address_ = 4294967295u;
  clear_has_local_address();
}
inline ::google::protobuf::uint32 TLTransportParameter::local_address() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.local_address)
  return local_address_;
}
inline void TLTransportParameter::set_local_address(::google::protobuf::uint32 value) {
  set_has_local_address();
  local_address_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLTransportParameter.local_address)
}

// optional int32 direction = 6 [default = 0];
inline bool TLTransportParameter::has_direction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TLTransportParameter::set_has_direction() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TLTransportParameter::clear_has_direction() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TLTransportParameter::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::google::protobuf::int32 TLTransportParameter::direction() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.direction)
  return direction_;
}
inline void TLTransportParameter::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLTransportParameter.direction)
}

// optional bool transpose = 7 [default = false];
inline bool TLTransportParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TLTransportParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TLTransportParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TLTransportParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
inline bool TLTransportParameter::transpose() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.transpose)
  return transpose_;
}
inline void TLTransportParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLTransportParameter.transpose)
}

// optional bool aligned = 8 [default = true];
inline bool TLTransportParameter::has_aligned() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TLTransportParameter::set_has_aligned() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TLTransportParameter::clear_has_aligned() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TLTransportParameter::clear_aligned() {
  aligned_ = true;
  clear_has_aligned();
}
inline bool TLTransportParameter::aligned() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.aligned)
  return aligned_;
}
inline void TLTransportParameter::set_aligned(bool value) {
  set_has_aligned();
  aligned_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLTransportParameter.aligned)
}

// optional .bmnet.TLTransportParameter.TransportStage stage = 9 [default = CUR];
inline bool TLTransportParameter::has_stage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TLTransportParameter::set_has_stage() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TLTransportParameter::clear_has_stage() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TLTransportParameter::clear_stage() {
  stage_ = 1;
  clear_has_stage();
}
inline ::bmnet::TLTransportParameter_TransportStage TLTransportParameter::stage() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.stage)
  return static_cast< ::bmnet::TLTransportParameter_TransportStage >(stage_);
}
inline void TLTransportParameter::set_stage(::bmnet::TLTransportParameter_TransportStage value) {
  assert(::bmnet::TLTransportParameter_TransportStage_IsValid(value));
  set_has_stage();
  stage_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLTransportParameter.stage)
}

// optional .bmnet.TLTransportParameter.TransportDataType data_type = 10 [default = NEURON];
inline bool TLTransportParameter::has_data_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TLTransportParameter::set_has_data_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TLTransportParameter::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TLTransportParameter::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::bmnet::TLTransportParameter_TransportDataType TLTransportParameter::data_type() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.data_type)
  return static_cast< ::bmnet::TLTransportParameter_TransportDataType >(data_type_);
}
inline void TLTransportParameter::set_data_type(::bmnet::TLTransportParameter_TransportDataType value) {
  assert(::bmnet::TLTransportParameter_TransportDataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLTransportParameter.data_type)
}

// optional uint64 src_addr = 11 [default = 281474976710655];
inline bool TLTransportParameter::has_src_addr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TLTransportParameter::set_has_src_addr() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TLTransportParameter::clear_has_src_addr() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TLTransportParameter::clear_src_addr() {
  src_addr_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_src_addr();
}
inline ::google::protobuf::uint64 TLTransportParameter::src_addr() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.src_addr)
  return src_addr_;
}
inline void TLTransportParameter::set_src_addr(::google::protobuf::uint64 value) {
  set_has_src_addr();
  src_addr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLTransportParameter.src_addr)
}

// optional uint64 dst_addr = 12 [default = 281474976710655];
inline bool TLTransportParameter::has_dst_addr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TLTransportParameter::set_has_dst_addr() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TLTransportParameter::clear_has_dst_addr() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TLTransportParameter::clear_dst_addr() {
  dst_addr_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_dst_addr();
}
inline ::google::protobuf::uint64 TLTransportParameter::dst_addr() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.dst_addr)
  return dst_addr_;
}
inline void TLTransportParameter::set_dst_addr(::google::protobuf::uint64 value) {
  set_has_dst_addr();
  dst_addr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLTransportParameter.dst_addr)
}

// optional .bmnet.BlobShape src_shape = 13;
inline bool TLTransportParameter::has_src_shape() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TLTransportParameter::set_has_src_shape() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TLTransportParameter::clear_has_src_shape() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TLTransportParameter::clear_src_shape() {
  if (src_shape_ != NULL) src_shape_->::bmnet::BlobShape::Clear();
  clear_has_src_shape();
}
inline const ::bmnet::BlobShape& TLTransportParameter::src_shape() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.src_shape)
  return src_shape_ != NULL ? *src_shape_ : *default_instance_->src_shape_;
}
inline ::bmnet::BlobShape* TLTransportParameter::mutable_src_shape() {
  set_has_src_shape();
  if (src_shape_ == NULL) src_shape_ = new ::bmnet::BlobShape;
  // @@protoc_insertion_point(field_mutable:bmnet.TLTransportParameter.src_shape)
  return src_shape_;
}
inline ::bmnet::BlobShape* TLTransportParameter::release_src_shape() {
  clear_has_src_shape();
  ::bmnet::BlobShape* temp = src_shape_;
  src_shape_ = NULL;
  return temp;
}
inline void TLTransportParameter::set_allocated_src_shape(::bmnet::BlobShape* src_shape) {
  delete src_shape_;
  src_shape_ = src_shape;
  if (src_shape) {
    set_has_src_shape();
  } else {
    clear_has_src_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLTransportParameter.src_shape)
}

// optional .bmnet.BlobShape dst_shape = 14;
inline bool TLTransportParameter::has_dst_shape() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TLTransportParameter::set_has_dst_shape() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TLTransportParameter::clear_has_dst_shape() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TLTransportParameter::clear_dst_shape() {
  if (dst_shape_ != NULL) dst_shape_->::bmnet::BlobShape::Clear();
  clear_has_dst_shape();
}
inline const ::bmnet::BlobShape& TLTransportParameter::dst_shape() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.dst_shape)
  return dst_shape_ != NULL ? *dst_shape_ : *default_instance_->dst_shape_;
}
inline ::bmnet::BlobShape* TLTransportParameter::mutable_dst_shape() {
  set_has_dst_shape();
  if (dst_shape_ == NULL) dst_shape_ = new ::bmnet::BlobShape;
  // @@protoc_insertion_point(field_mutable:bmnet.TLTransportParameter.dst_shape)
  return dst_shape_;
}
inline ::bmnet::BlobShape* TLTransportParameter::release_dst_shape() {
  clear_has_dst_shape();
  ::bmnet::BlobShape* temp = dst_shape_;
  dst_shape_ = NULL;
  return temp;
}
inline void TLTransportParameter::set_allocated_dst_shape(::bmnet::BlobShape* dst_shape) {
  delete dst_shape_;
  dst_shape_ = dst_shape;
  if (dst_shape) {
    set_has_dst_shape();
  } else {
    clear_has_dst_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLTransportParameter.dst_shape)
}

// optional string parent_name = 15;
inline bool TLTransportParameter::has_parent_name() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TLTransportParameter::set_has_parent_name() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TLTransportParameter::clear_has_parent_name() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TLTransportParameter::clear_parent_name() {
  if (parent_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parent_name_->clear();
  }
  clear_has_parent_name();
}
inline const ::std::string& TLTransportParameter::parent_name() const {
  // @@protoc_insertion_point(field_get:bmnet.TLTransportParameter.parent_name)
  return *parent_name_;
}
inline void TLTransportParameter::set_parent_name(const ::std::string& value) {
  set_has_parent_name();
  if (parent_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parent_name_ = new ::std::string;
  }
  parent_name_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.TLTransportParameter.parent_name)
}
inline void TLTransportParameter::set_parent_name(const char* value) {
  set_has_parent_name();
  if (parent_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parent_name_ = new ::std::string;
  }
  parent_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.TLTransportParameter.parent_name)
}
inline void TLTransportParameter::set_parent_name(const char* value, size_t size) {
  set_has_parent_name();
  if (parent_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parent_name_ = new ::std::string;
  }
  parent_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.TLTransportParameter.parent_name)
}
inline ::std::string* TLTransportParameter::mutable_parent_name() {
  set_has_parent_name();
  if (parent_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parent_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.TLTransportParameter.parent_name)
  return parent_name_;
}
inline ::std::string* TLTransportParameter::release_parent_name() {
  clear_has_parent_name();
  if (parent_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parent_name_;
    parent_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLTransportParameter::set_allocated_parent_name(::std::string* parent_name) {
  if (parent_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parent_name_;
  }
  if (parent_name) {
    set_has_parent_name();
    parent_name_ = parent_name;
  } else {
    clear_has_parent_name();
    parent_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLTransportParameter.parent_name)
}

// -------------------------------------------------------------------

// TLArithmeticParameter

// optional .bmnet.TLArithmeticParameter.ArithmeticOp operation = 1 [default = ADD];
inline bool TLArithmeticParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLArithmeticParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLArithmeticParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLArithmeticParameter::clear_operation() {
  operation_ = 0;
  clear_has_operation();
}
inline ::bmnet::TLArithmeticParameter_ArithmeticOp TLArithmeticParameter::operation() const {
  // @@protoc_insertion_point(field_get:bmnet.TLArithmeticParameter.operation)
  return static_cast< ::bmnet::TLArithmeticParameter_ArithmeticOp >(operation_);
}
inline void TLArithmeticParameter::set_operation(::bmnet::TLArithmeticParameter_ArithmeticOp value) {
  assert(::bmnet::TLArithmeticParameter_ArithmeticOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLArithmeticParameter.operation)
}

// optional bool is_b_const = 2 [default = false];
inline bool TLArithmeticParameter::has_is_b_const() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLArithmeticParameter::set_has_is_b_const() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLArithmeticParameter::clear_has_is_b_const() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLArithmeticParameter::clear_is_b_const() {
  is_b_const_ = false;
  clear_has_is_b_const();
}
inline bool TLArithmeticParameter::is_b_const() const {
  // @@protoc_insertion_point(field_get:bmnet.TLArithmeticParameter.is_b_const)
  return is_b_const_;
}
inline void TLArithmeticParameter::set_is_b_const(bool value) {
  set_has_is_b_const();
  is_b_const_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLArithmeticParameter.is_b_const)
}

// optional uint64 global_b = 3;
inline bool TLArithmeticParameter::has_global_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLArithmeticParameter::set_has_global_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLArithmeticParameter::clear_has_global_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLArithmeticParameter::clear_global_b() {
  global_b_ = GOOGLE_ULONGLONG(0);
  clear_has_global_b();
}
inline ::google::protobuf::uint64 TLArithmeticParameter::global_b() const {
  // @@protoc_insertion_point(field_get:bmnet.TLArithmeticParameter.global_b)
  return global_b_;
}
inline void TLArithmeticParameter::set_global_b(::google::protobuf::uint64 value) {
  set_has_global_b();
  global_b_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLArithmeticParameter.global_b)
}

// optional .bmnet.BlobShape b_shape = 4;
inline bool TLArithmeticParameter::has_b_shape() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLArithmeticParameter::set_has_b_shape() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLArithmeticParameter::clear_has_b_shape() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLArithmeticParameter::clear_b_shape() {
  if (b_shape_ != NULL) b_shape_->::bmnet::BlobShape::Clear();
  clear_has_b_shape();
}
inline const ::bmnet::BlobShape& TLArithmeticParameter::b_shape() const {
  // @@protoc_insertion_point(field_get:bmnet.TLArithmeticParameter.b_shape)
  return b_shape_ != NULL ? *b_shape_ : *default_instance_->b_shape_;
}
inline ::bmnet::BlobShape* TLArithmeticParameter::mutable_b_shape() {
  set_has_b_shape();
  if (b_shape_ == NULL) b_shape_ = new ::bmnet::BlobShape;
  // @@protoc_insertion_point(field_mutable:bmnet.TLArithmeticParameter.b_shape)
  return b_shape_;
}
inline ::bmnet::BlobShape* TLArithmeticParameter::release_b_shape() {
  clear_has_b_shape();
  ::bmnet::BlobShape* temp = b_shape_;
  b_shape_ = NULL;
  return temp;
}
inline void TLArithmeticParameter::set_allocated_b_shape(::bmnet::BlobShape* b_shape) {
  delete b_shape_;
  b_shape_ = b_shape;
  if (b_shape) {
    set_has_b_shape();
  } else {
    clear_has_b_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLArithmeticParameter.b_shape)
}

// optional uint32 input = 7 [default = 4294967295];
inline bool TLArithmeticParameter::has_input() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLArithmeticParameter::set_has_input() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLArithmeticParameter::clear_has_input() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLArithmeticParameter::clear_input() {
  input_ = 4294967295u;
  clear_has_input();
}
inline ::google::protobuf::uint32 TLArithmeticParameter::input() const {
  // @@protoc_insertion_point(field_get:bmnet.TLArithmeticParameter.input)
  return input_;
}
inline void TLArithmeticParameter::set_input(::google::protobuf::uint32 value) {
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLArithmeticParameter.input)
}

// optional uint32 output = 8 [default = 4294967295];
inline bool TLArithmeticParameter::has_output() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TLArithmeticParameter::set_has_output() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TLArithmeticParameter::clear_has_output() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TLArithmeticParameter::clear_output() {
  output_ = 4294967295u;
  clear_has_output();
}
inline ::google::protobuf::uint32 TLArithmeticParameter::output() const {
  // @@protoc_insertion_point(field_get:bmnet.TLArithmeticParameter.output)
  return output_;
}
inline void TLArithmeticParameter::set_output(::google::protobuf::uint32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLArithmeticParameter.output)
}

// -------------------------------------------------------------------

// TLResizeBilinearParameter

// optional uint32 resize_h = 1;
inline bool TLResizeBilinearParameter::has_resize_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLResizeBilinearParameter::set_has_resize_h() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLResizeBilinearParameter::clear_has_resize_h() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLResizeBilinearParameter::clear_resize_h() {
  resize_h_ = 0u;
  clear_has_resize_h();
}
inline ::google::protobuf::uint32 TLResizeBilinearParameter::resize_h() const {
  // @@protoc_insertion_point(field_get:bmnet.TLResizeBilinearParameter.resize_h)
  return resize_h_;
}
inline void TLResizeBilinearParameter::set_resize_h(::google::protobuf::uint32 value) {
  set_has_resize_h();
  resize_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLResizeBilinearParameter.resize_h)
}

// optional uint32 resize_w = 2;
inline bool TLResizeBilinearParameter::has_resize_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLResizeBilinearParameter::set_has_resize_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLResizeBilinearParameter::clear_has_resize_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLResizeBilinearParameter::clear_resize_w() {
  resize_w_ = 0u;
  clear_has_resize_w();
}
inline ::google::protobuf::uint32 TLResizeBilinearParameter::resize_w() const {
  // @@protoc_insertion_point(field_get:bmnet.TLResizeBilinearParameter.resize_w)
  return resize_w_;
}
inline void TLResizeBilinearParameter::set_resize_w(::google::protobuf::uint32 value) {
  set_has_resize_w();
  resize_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLResizeBilinearParameter.resize_w)
}

// optional uint32 global_weight = 3 [default = 4294967295];
inline bool TLResizeBilinearParameter::has_global_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLResizeBilinearParameter::set_has_global_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLResizeBilinearParameter::clear_has_global_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLResizeBilinearParameter::clear_global_weight() {
  global_weight_ = 4294967295u;
  clear_has_global_weight();
}
inline ::google::protobuf::uint32 TLResizeBilinearParameter::global_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.TLResizeBilinearParameter.global_weight)
  return global_weight_;
}
inline void TLResizeBilinearParameter::set_global_weight(::google::protobuf::uint32 value) {
  set_has_global_weight();
  global_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLResizeBilinearParameter.global_weight)
}

// optional .bmnet.BlobShape weight_shape = 4;
inline bool TLResizeBilinearParameter::has_weight_shape() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLResizeBilinearParameter::set_has_weight_shape() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLResizeBilinearParameter::clear_has_weight_shape() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLResizeBilinearParameter::clear_weight_shape() {
  if (weight_shape_ != NULL) weight_shape_->::bmnet::BlobShape::Clear();
  clear_has_weight_shape();
}
inline const ::bmnet::BlobShape& TLResizeBilinearParameter::weight_shape() const {
  // @@protoc_insertion_point(field_get:bmnet.TLResizeBilinearParameter.weight_shape)
  return weight_shape_ != NULL ? *weight_shape_ : *default_instance_->weight_shape_;
}
inline ::bmnet::BlobShape* TLResizeBilinearParameter::mutable_weight_shape() {
  set_has_weight_shape();
  if (weight_shape_ == NULL) weight_shape_ = new ::bmnet::BlobShape;
  // @@protoc_insertion_point(field_mutable:bmnet.TLResizeBilinearParameter.weight_shape)
  return weight_shape_;
}
inline ::bmnet::BlobShape* TLResizeBilinearParameter::release_weight_shape() {
  clear_has_weight_shape();
  ::bmnet::BlobShape* temp = weight_shape_;
  weight_shape_ = NULL;
  return temp;
}
inline void TLResizeBilinearParameter::set_allocated_weight_shape(::bmnet::BlobShape* weight_shape) {
  delete weight_shape_;
  weight_shape_ = weight_shape;
  if (weight_shape) {
    set_has_weight_shape();
  } else {
    clear_has_weight_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TLResizeBilinearParameter.weight_shape)
}

// optional uint32 input = 7 [default = 4294967295];
inline bool TLResizeBilinearParameter::has_input() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLResizeBilinearParameter::set_has_input() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLResizeBilinearParameter::clear_has_input() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLResizeBilinearParameter::clear_input() {
  input_ = 4294967295u;
  clear_has_input();
}
inline ::google::protobuf::uint32 TLResizeBilinearParameter::input() const {
  // @@protoc_insertion_point(field_get:bmnet.TLResizeBilinearParameter.input)
  return input_;
}
inline void TLResizeBilinearParameter::set_input(::google::protobuf::uint32 value) {
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLResizeBilinearParameter.input)
}

// optional uint32 output = 8 [default = 4294967295];
inline bool TLResizeBilinearParameter::has_output() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TLResizeBilinearParameter::set_has_output() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TLResizeBilinearParameter::clear_has_output() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TLResizeBilinearParameter::clear_output() {
  output_ = 4294967295u;
  clear_has_output();
}
inline ::google::protobuf::uint32 TLResizeBilinearParameter::output() const {
  // @@protoc_insertion_point(field_get:bmnet.TLResizeBilinearParameter.output)
  return output_;
}
inline void TLResizeBilinearParameter::set_output(::google::protobuf::uint32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TLResizeBilinearParameter.output)
}

// -------------------------------------------------------------------

// TGConvolutionParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGConvolutionParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGConvolutionParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGConvolutionParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGConvolutionParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGConvolutionParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGConvolutionParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGConvolutionParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGConvolutionParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGConvolutionParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGConvolutionParameter.dep_info)
}

// optional string weight_name = 1;
inline bool TGConvolutionParameter::has_weight_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGConvolutionParameter::set_has_weight_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGConvolutionParameter::clear_has_weight_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGConvolutionParameter::clear_weight_name() {
  if (weight_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weight_name_->clear();
  }
  clear_has_weight_name();
}
inline const ::std::string& TGConvolutionParameter::weight_name() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.weight_name)
  return *weight_name_;
}
inline void TGConvolutionParameter::set_weight_name(const ::std::string& value) {
  set_has_weight_name();
  if (weight_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weight_name_ = new ::std::string;
  }
  weight_name_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.weight_name)
}
inline void TGConvolutionParameter::set_weight_name(const char* value) {
  set_has_weight_name();
  if (weight_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weight_name_ = new ::std::string;
  }
  weight_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.TGConvolutionParameter.weight_name)
}
inline void TGConvolutionParameter::set_weight_name(const char* value, size_t size) {
  set_has_weight_name();
  if (weight_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weight_name_ = new ::std::string;
  }
  weight_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.TGConvolutionParameter.weight_name)
}
inline ::std::string* TGConvolutionParameter::mutable_weight_name() {
  set_has_weight_name();
  if (weight_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weight_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.TGConvolutionParameter.weight_name)
  return weight_name_;
}
inline ::std::string* TGConvolutionParameter::release_weight_name() {
  clear_has_weight_name();
  if (weight_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = weight_name_;
    weight_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGConvolutionParameter::set_allocated_weight_name(::std::string* weight_name) {
  if (weight_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete weight_name_;
  }
  if (weight_name) {
    set_has_weight_name();
    weight_name_ = weight_name;
  } else {
    clear_has_weight_name();
    weight_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGConvolutionParameter.weight_name)
}

// optional string bias_name = 2;
inline bool TGConvolutionParameter::has_bias_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGConvolutionParameter::set_has_bias_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGConvolutionParameter::clear_has_bias_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGConvolutionParameter::clear_bias_name() {
  if (bias_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bias_name_->clear();
  }
  clear_has_bias_name();
}
inline const ::std::string& TGConvolutionParameter::bias_name() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.bias_name)
  return *bias_name_;
}
inline void TGConvolutionParameter::set_bias_name(const ::std::string& value) {
  set_has_bias_name();
  if (bias_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bias_name_ = new ::std::string;
  }
  bias_name_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.bias_name)
}
inline void TGConvolutionParameter::set_bias_name(const char* value) {
  set_has_bias_name();
  if (bias_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bias_name_ = new ::std::string;
  }
  bias_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.TGConvolutionParameter.bias_name)
}
inline void TGConvolutionParameter::set_bias_name(const char* value, size_t size) {
  set_has_bias_name();
  if (bias_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bias_name_ = new ::std::string;
  }
  bias_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.TGConvolutionParameter.bias_name)
}
inline ::std::string* TGConvolutionParameter::mutable_bias_name() {
  set_has_bias_name();
  if (bias_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bias_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.TGConvolutionParameter.bias_name)
  return bias_name_;
}
inline ::std::string* TGConvolutionParameter::release_bias_name() {
  clear_has_bias_name();
  if (bias_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bias_name_;
    bias_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGConvolutionParameter::set_allocated_bias_name(::std::string* bias_name) {
  if (bias_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bias_name_;
  }
  if (bias_name) {
    set_has_bias_name();
    bias_name_ = bias_name;
  } else {
    clear_has_bias_name();
    bias_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGConvolutionParameter.bias_name)
}

// optional uint64 global_weight = 5 [default = 281474976710655];
inline bool TGConvolutionParameter::has_global_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGConvolutionParameter::set_has_global_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGConvolutionParameter::clear_has_global_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGConvolutionParameter::clear_global_weight() {
  global_weight_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_weight();
}
inline ::google::protobuf::uint64 TGConvolutionParameter::global_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.global_weight)
  return global_weight_;
}
inline void TGConvolutionParameter::set_global_weight(::google::protobuf::uint64 value) {
  set_has_global_weight();
  global_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.global_weight)
}

// optional uint64 global_bias = 6 [default = 281474976710655];
inline bool TGConvolutionParameter::has_global_bias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGConvolutionParameter::set_has_global_bias() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGConvolutionParameter::clear_has_global_bias() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGConvolutionParameter::clear_global_bias() {
  global_bias_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_bias();
}
inline ::google::protobuf::uint64 TGConvolutionParameter::global_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.global_bias)
  return global_bias_;
}
inline void TGConvolutionParameter::set_global_bias(::google::protobuf::uint64 value) {
  set_has_global_bias();
  global_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.global_bias)
}

// optional uint64 global_bn_mean = 7 [default = 281474976710655];
inline bool TGConvolutionParameter::has_global_bn_mean() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGConvolutionParameter::set_has_global_bn_mean() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGConvolutionParameter::clear_has_global_bn_mean() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGConvolutionParameter::clear_global_bn_mean() {
  global_bn_mean_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_bn_mean();
}
inline ::google::protobuf::uint64 TGConvolutionParameter::global_bn_mean() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.global_bn_mean)
  return global_bn_mean_;
}
inline void TGConvolutionParameter::set_global_bn_mean(::google::protobuf::uint64 value) {
  set_has_global_bn_mean();
  global_bn_mean_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.global_bn_mean)
}

// optional uint64 global_bn_variance = 8 [default = 281474976710655];
inline bool TGConvolutionParameter::has_global_bn_variance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGConvolutionParameter::set_has_global_bn_variance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGConvolutionParameter::clear_has_global_bn_variance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGConvolutionParameter::clear_global_bn_variance() {
  global_bn_variance_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_bn_variance();
}
inline ::google::protobuf::uint64 TGConvolutionParameter::global_bn_variance() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.global_bn_variance)
  return global_bn_variance_;
}
inline void TGConvolutionParameter::set_global_bn_variance(::google::protobuf::uint64 value) {
  set_has_global_bn_variance();
  global_bn_variance_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.global_bn_variance)
}

// optional uint64 global_scale = 9 [default = 281474976710655];
inline bool TGConvolutionParameter::has_global_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGConvolutionParameter::set_has_global_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGConvolutionParameter::clear_has_global_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGConvolutionParameter::clear_global_scale() {
  global_scale_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_scale();
}
inline ::google::protobuf::uint64 TGConvolutionParameter::global_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.global_scale)
  return global_scale_;
}
inline void TGConvolutionParameter::set_global_scale(::google::protobuf::uint64 value) {
  set_has_global_scale();
  global_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.global_scale)
}

// optional uint64 global_scale_bias = 10 [default = 281474976710655];
inline bool TGConvolutionParameter::has_global_scale_bias() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TGConvolutionParameter::set_has_global_scale_bias() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TGConvolutionParameter::clear_has_global_scale_bias() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TGConvolutionParameter::clear_global_scale_bias() {
  global_scale_bias_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_scale_bias();
}
inline ::google::protobuf::uint64 TGConvolutionParameter::global_scale_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.global_scale_bias)
  return global_scale_bias_;
}
inline void TGConvolutionParameter::set_global_scale_bias(::google::protobuf::uint64 value) {
  set_has_global_scale_bias();
  global_scale_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.global_scale_bias)
}

// optional bool bias_term = 11 [default = false];
inline bool TGConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TGConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TGConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TGConvolutionParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
inline bool TGConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.bias_term)
  return bias_term_;
}
inline void TGConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.bias_term)
}

// repeated uint32 kernel_size = 12;
inline int TGConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
inline void TGConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::google::protobuf::uint32 TGConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
inline void TGConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.kernel_size)
}
inline void TGConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGConvolutionParameter.kernel_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:bmnet.TGConvolutionParameter.kernel_size)
  return kernel_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 13;
inline int TGConvolutionParameter::stride_size() const {
  return stride_.size();
}
inline void TGConvolutionParameter::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 TGConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.stride)
  return stride_.Get(index);
}
inline void TGConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.stride)
}
inline void TGConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGConvolutionParameter.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:bmnet.TGConvolutionParameter.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 14;
inline int TGConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
inline void TGConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
inline ::google::protobuf::uint32 TGConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.dilation)
  return dilation_.Get(index);
}
inline void TGConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.dilation)
}
inline void TGConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGConvolutionParameter.dilation)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:bmnet.TGConvolutionParameter.dilation)
  return dilation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGConvolutionParameter.dilation)
  return &dilation_;
}

// repeated uint32 pad = 15;
inline int TGConvolutionParameter::pad_size() const {
  return pad_.size();
}
inline void TGConvolutionParameter::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 TGConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.pad)
  return pad_.Get(index);
}
inline void TGConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.pad)
}
inline void TGConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGConvolutionParameter.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:bmnet.TGConvolutionParameter.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 ins = 16;
inline int TGConvolutionParameter::ins_size() const {
  return ins_.size();
}
inline void TGConvolutionParameter::clear_ins() {
  ins_.Clear();
}
inline ::google::protobuf::uint32 TGConvolutionParameter::ins(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.ins)
  return ins_.Get(index);
}
inline void TGConvolutionParameter::set_ins(int index, ::google::protobuf::uint32 value) {
  ins_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.ins)
}
inline void TGConvolutionParameter::add_ins(::google::protobuf::uint32 value) {
  ins_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGConvolutionParameter.ins)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGConvolutionParameter::ins() const {
  // @@protoc_insertion_point(field_list:bmnet.TGConvolutionParameter.ins)
  return ins_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGConvolutionParameter::mutable_ins() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGConvolutionParameter.ins)
  return &ins_;
}

// optional uint32 group = 17 [default = 1];
inline bool TGConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TGConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TGConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TGConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 TGConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.group)
  return group_;
}
inline void TGConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.group)
}

// optional bool result_add = 18 [default = false];
inline bool TGConvolutionParameter::has_result_add() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TGConvolutionParameter::set_has_result_add() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TGConvolutionParameter::clear_has_result_add() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TGConvolutionParameter::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool TGConvolutionParameter::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.result_add)
  return result_add_;
}
inline void TGConvolutionParameter::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.result_add)
}

// optional bool do_bn = 19 [default = false];
inline bool TGConvolutionParameter::has_do_bn() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TGConvolutionParameter::set_has_do_bn() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TGConvolutionParameter::clear_has_do_bn() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TGConvolutionParameter::clear_do_bn() {
  do_bn_ = false;
  clear_has_do_bn();
}
inline bool TGConvolutionParameter::do_bn() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.do_bn)
  return do_bn_;
}
inline void TGConvolutionParameter::set_do_bn(bool value) {
  set_has_do_bn();
  do_bn_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.do_bn)
}

// optional bool do_scale = 20 [default = false];
inline bool TGConvolutionParameter::has_do_scale() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TGConvolutionParameter::set_has_do_scale() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TGConvolutionParameter::clear_has_do_scale() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TGConvolutionParameter::clear_do_scale() {
  do_scale_ = false;
  clear_has_do_scale();
}
inline bool TGConvolutionParameter::do_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.do_scale)
  return do_scale_;
}
inline void TGConvolutionParameter::set_do_scale(bool value) {
  set_has_do_scale();
  do_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.do_scale)
}

// optional bool do_scale_bias = 21 [default = false];
inline bool TGConvolutionParameter::has_do_scale_bias() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TGConvolutionParameter::set_has_do_scale_bias() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TGConvolutionParameter::clear_has_do_scale_bias() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TGConvolutionParameter::clear_do_scale_bias() {
  do_scale_bias_ = false;
  clear_has_do_scale_bias();
}
inline bool TGConvolutionParameter::do_scale_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.do_scale_bias)
  return do_scale_bias_;
}
inline void TGConvolutionParameter::set_do_scale_bias(bool value) {
  set_has_do_scale_bias();
  do_scale_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.do_scale_bias)
}

// optional bool do_activation = 22 [default = false];
inline bool TGConvolutionParameter::has_do_activation() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TGConvolutionParameter::set_has_do_activation() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TGConvolutionParameter::clear_has_do_activation() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TGConvolutionParameter::clear_do_activation() {
  do_activation_ = false;
  clear_has_do_activation();
}
inline bool TGConvolutionParameter::do_activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.do_activation)
  return do_activation_;
}
inline void TGConvolutionParameter::set_do_activation(bool value) {
  set_has_do_activation();
  do_activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.do_activation)
}

// optional bool do_pooling = 23 [default = false];
inline bool TGConvolutionParameter::has_do_pooling() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TGConvolutionParameter::set_has_do_pooling() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TGConvolutionParameter::clear_has_do_pooling() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TGConvolutionParameter::clear_do_pooling() {
  do_pooling_ = false;
  clear_has_do_pooling();
}
inline bool TGConvolutionParameter::do_pooling() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.do_pooling)
  return do_pooling_;
}
inline void TGConvolutionParameter::set_do_pooling(bool value) {
  set_has_do_pooling();
  do_pooling_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.do_pooling)
}

// repeated uint32 pooling_kernel_size = 24;
inline int TGConvolutionParameter::pooling_kernel_size_size() const {
  return pooling_kernel_size_.size();
}
inline void TGConvolutionParameter::clear_pooling_kernel_size() {
  pooling_kernel_size_.Clear();
}
inline ::google::protobuf::uint32 TGConvolutionParameter::pooling_kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.pooling_kernel_size)
  return pooling_kernel_size_.Get(index);
}
inline void TGConvolutionParameter::set_pooling_kernel_size(int index, ::google::protobuf::uint32 value) {
  pooling_kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.pooling_kernel_size)
}
inline void TGConvolutionParameter::add_pooling_kernel_size(::google::protobuf::uint32 value) {
  pooling_kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGConvolutionParameter.pooling_kernel_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGConvolutionParameter::pooling_kernel_size() const {
  // @@protoc_insertion_point(field_list:bmnet.TGConvolutionParameter.pooling_kernel_size)
  return pooling_kernel_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGConvolutionParameter::mutable_pooling_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGConvolutionParameter.pooling_kernel_size)
  return &pooling_kernel_size_;
}

// repeated uint32 pooling_stride = 25;
inline int TGConvolutionParameter::pooling_stride_size() const {
  return pooling_stride_.size();
}
inline void TGConvolutionParameter::clear_pooling_stride() {
  pooling_stride_.Clear();
}
inline ::google::protobuf::uint32 TGConvolutionParameter::pooling_stride(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.pooling_stride)
  return pooling_stride_.Get(index);
}
inline void TGConvolutionParameter::set_pooling_stride(int index, ::google::protobuf::uint32 value) {
  pooling_stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.pooling_stride)
}
inline void TGConvolutionParameter::add_pooling_stride(::google::protobuf::uint32 value) {
  pooling_stride_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGConvolutionParameter.pooling_stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGConvolutionParameter::pooling_stride() const {
  // @@protoc_insertion_point(field_list:bmnet.TGConvolutionParameter.pooling_stride)
  return pooling_stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGConvolutionParameter::mutable_pooling_stride() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGConvolutionParameter.pooling_stride)
  return &pooling_stride_;
}

// repeated uint32 pooling_pad = 26;
inline int TGConvolutionParameter::pooling_pad_size() const {
  return pooling_pad_.size();
}
inline void TGConvolutionParameter::clear_pooling_pad() {
  pooling_pad_.Clear();
}
inline ::google::protobuf::uint32 TGConvolutionParameter::pooling_pad(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.pooling_pad)
  return pooling_pad_.Get(index);
}
inline void TGConvolutionParameter::set_pooling_pad(int index, ::google::protobuf::uint32 value) {
  pooling_pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.pooling_pad)
}
inline void TGConvolutionParameter::add_pooling_pad(::google::protobuf::uint32 value) {
  pooling_pad_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGConvolutionParameter.pooling_pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGConvolutionParameter::pooling_pad() const {
  // @@protoc_insertion_point(field_list:bmnet.TGConvolutionParameter.pooling_pad)
  return pooling_pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGConvolutionParameter::mutable_pooling_pad() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGConvolutionParameter.pooling_pad)
  return &pooling_pad_;
}

// optional .bmnet.ActivationMethod activation = 27 [default = RELU];
inline bool TGConvolutionParameter::has_activation() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TGConvolutionParameter::set_has_activation() {
  _has_bits_[0] |= 0x02000000u;
}
inline void TGConvolutionParameter::clear_has_activation() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void TGConvolutionParameter::clear_activation() {
  activation_ = 0;
  clear_has_activation();
}
inline ::bmnet::ActivationMethod TGConvolutionParameter::activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.activation)
  return static_cast< ::bmnet::ActivationMethod >(activation_);
}
inline void TGConvolutionParameter::set_activation(::bmnet::ActivationMethod value) {
  assert(::bmnet::ActivationMethod_IsValid(value));
  set_has_activation();
  activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.activation)
}

// repeated float activation_arg = 28;
inline int TGConvolutionParameter::activation_arg_size() const {
  return activation_arg_.size();
}
inline void TGConvolutionParameter::clear_activation_arg() {
  activation_arg_.Clear();
}
inline float TGConvolutionParameter::activation_arg(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.activation_arg)
  return activation_arg_.Get(index);
}
inline void TGConvolutionParameter::set_activation_arg(int index, float value) {
  activation_arg_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.activation_arg)
}
inline void TGConvolutionParameter::add_activation_arg(float value) {
  activation_arg_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGConvolutionParameter.activation_arg)
}
inline const ::google::protobuf::RepeatedField< float >&
TGConvolutionParameter::activation_arg() const {
  // @@protoc_insertion_point(field_list:bmnet.TGConvolutionParameter.activation_arg)
  return activation_arg_;
}
inline ::google::protobuf::RepeatedField< float >*
TGConvolutionParameter::mutable_activation_arg() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGConvolutionParameter.activation_arg)
  return &activation_arg_;
}

// optional uint64 global_bn_fraction = 29 [default = 281474976710655];
inline bool TGConvolutionParameter::has_global_bn_fraction() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void TGConvolutionParameter::set_has_global_bn_fraction() {
  _has_bits_[0] |= 0x08000000u;
}
inline void TGConvolutionParameter::clear_has_global_bn_fraction() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void TGConvolutionParameter::clear_global_bn_fraction() {
  global_bn_fraction_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_bn_fraction();
}
inline ::google::protobuf::uint64 TGConvolutionParameter::global_bn_fraction() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.global_bn_fraction)
  return global_bn_fraction_;
}
inline void TGConvolutionParameter::set_global_bn_fraction(::google::protobuf::uint64 value) {
  set_has_global_bn_fraction();
  global_bn_fraction_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.global_bn_fraction)
}

// optional float bn_eps = 30 [default = 1e-06];
inline bool TGConvolutionParameter::has_bn_eps() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void TGConvolutionParameter::set_has_bn_eps() {
  _has_bits_[0] |= 0x10000000u;
}
inline void TGConvolutionParameter::clear_has_bn_eps() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void TGConvolutionParameter::clear_bn_eps() {
  bn_eps_ = 1e-06f;
  clear_has_bn_eps();
}
inline float TGConvolutionParameter::bn_eps() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.bn_eps)
  return bn_eps_;
}
inline void TGConvolutionParameter::set_bn_eps(float value) {
  set_has_bn_eps();
  bn_eps_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.bn_eps)
}

// optional uint64 activation_global_slope = 31 [default = 281474976710655];
inline bool TGConvolutionParameter::has_activation_global_slope() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TGConvolutionParameter::set_has_activation_global_slope() {
  _has_bits_[0] |= 0x20000000u;
}
inline void TGConvolutionParameter::clear_has_activation_global_slope() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void TGConvolutionParameter::clear_activation_global_slope() {
  activation_global_slope_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_activation_global_slope();
}
inline ::google::protobuf::uint64 TGConvolutionParameter::activation_global_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.activation_global_slope)
  return activation_global_slope_;
}
inline void TGConvolutionParameter::set_activation_global_slope(::google::protobuf::uint64 value) {
  set_has_activation_global_slope();
  activation_global_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.activation_global_slope)
}

// optional bool activation_channel_shared = 32 [default = false];
inline bool TGConvolutionParameter::has_activation_channel_shared() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void TGConvolutionParameter::set_has_activation_channel_shared() {
  _has_bits_[0] |= 0x40000000u;
}
inline void TGConvolutionParameter::clear_has_activation_channel_shared() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void TGConvolutionParameter::clear_activation_channel_shared() {
  activation_channel_shared_ = false;
  clear_has_activation_channel_shared();
}
inline bool TGConvolutionParameter::activation_channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.activation_channel_shared)
  return activation_channel_shared_;
}
inline void TGConvolutionParameter::set_activation_channel_shared(bool value) {
  set_has_activation_channel_shared();
  activation_channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.activation_channel_shared)
}

// optional bool use_winograd = 33 [default = false];
inline bool TGConvolutionParameter::has_use_winograd() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void TGConvolutionParameter::set_has_use_winograd() {
  _has_bits_[0] |= 0x80000000u;
}
inline void TGConvolutionParameter::clear_has_use_winograd() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void TGConvolutionParameter::clear_use_winograd() {
  use_winograd_ = false;
  clear_has_use_winograd();
}
inline bool TGConvolutionParameter::use_winograd() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConvolutionParameter.use_winograd)
  return use_winograd_;
}
inline void TGConvolutionParameter::set_use_winograd(bool value) {
  set_has_use_winograd();
  use_winograd_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConvolutionParameter.use_winograd)
}

// -------------------------------------------------------------------

// TGPoolingParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGPoolingParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGPoolingParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGPoolingParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGPoolingParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGPoolingParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPoolingParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGPoolingParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGPoolingParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGPoolingParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGPoolingParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGPoolingParameter.dep_info)
}

// optional .bmnet.TGPoolingParameter.PoolMethod pool = 6 [default = MAX];
inline bool TGPoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGPoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGPoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGPoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::bmnet::TGPoolingParameter_PoolMethod TGPoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPoolingParameter.pool)
  return static_cast< ::bmnet::TGPoolingParameter_PoolMethod >(pool_);
}
inline void TGPoolingParameter::set_pool(::bmnet::TGPoolingParameter_PoolMethod value) {
  assert(::bmnet::TGPoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPoolingParameter.pool)
}

// repeated uint32 kernel_size = 7;
inline int TGPoolingParameter::kernel_size_size() const {
  return kernel_size_.size();
}
inline void TGPoolingParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::google::protobuf::uint32 TGPoolingParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGPoolingParameter.kernel_size)
  return kernel_size_.Get(index);
}
inline void TGPoolingParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGPoolingParameter.kernel_size)
}
inline void TGPoolingParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGPoolingParameter.kernel_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGPoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:bmnet.TGPoolingParameter.kernel_size)
  return kernel_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGPoolingParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGPoolingParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 8;
inline int TGPoolingParameter::stride_size() const {
  return stride_.size();
}
inline void TGPoolingParameter::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 TGPoolingParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGPoolingParameter.stride)
  return stride_.Get(index);
}
inline void TGPoolingParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGPoolingParameter.stride)
}
inline void TGPoolingParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGPoolingParameter.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGPoolingParameter::stride() const {
  // @@protoc_insertion_point(field_list:bmnet.TGPoolingParameter.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGPoolingParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGPoolingParameter.stride)
  return &stride_;
}

// repeated uint32 pad = 9;
inline int TGPoolingParameter::pad_size() const {
  return pad_.size();
}
inline void TGPoolingParameter::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 TGPoolingParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGPoolingParameter.pad)
  return pad_.Get(index);
}
inline void TGPoolingParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGPoolingParameter.pad)
}
inline void TGPoolingParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGPoolingParameter.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGPoolingParameter::pad() const {
  // @@protoc_insertion_point(field_list:bmnet.TGPoolingParameter.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGPoolingParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGPoolingParameter.pad)
  return &pad_;
}

// repeated uint32 ins = 10;
inline int TGPoolingParameter::ins_size() const {
  return ins_.size();
}
inline void TGPoolingParameter::clear_ins() {
  ins_.Clear();
}
inline ::google::protobuf::uint32 TGPoolingParameter::ins(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGPoolingParameter.ins)
  return ins_.Get(index);
}
inline void TGPoolingParameter::set_ins(int index, ::google::protobuf::uint32 value) {
  ins_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGPoolingParameter.ins)
}
inline void TGPoolingParameter::add_ins(::google::protobuf::uint32 value) {
  ins_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGPoolingParameter.ins)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGPoolingParameter::ins() const {
  // @@protoc_insertion_point(field_list:bmnet.TGPoolingParameter.ins)
  return ins_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGPoolingParameter::mutable_ins() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGPoolingParameter.ins)
  return &ins_;
}

// optional bool do_activation = 11 [default = false];
inline bool TGPoolingParameter::has_do_activation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGPoolingParameter::set_has_do_activation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGPoolingParameter::clear_has_do_activation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGPoolingParameter::clear_do_activation() {
  do_activation_ = false;
  clear_has_do_activation();
}
inline bool TGPoolingParameter::do_activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPoolingParameter.do_activation)
  return do_activation_;
}
inline void TGPoolingParameter::set_do_activation(bool value) {
  set_has_do_activation();
  do_activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPoolingParameter.do_activation)
}

// optional .bmnet.ActivationMethod activation = 12 [default = RELU];
inline bool TGPoolingParameter::has_activation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGPoolingParameter::set_has_activation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGPoolingParameter::clear_has_activation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGPoolingParameter::clear_activation() {
  activation_ = 0;
  clear_has_activation();
}
inline ::bmnet::ActivationMethod TGPoolingParameter::activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPoolingParameter.activation)
  return static_cast< ::bmnet::ActivationMethod >(activation_);
}
inline void TGPoolingParameter::set_activation(::bmnet::ActivationMethod value) {
  assert(::bmnet::ActivationMethod_IsValid(value));
  set_has_activation();
  activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPoolingParameter.activation)
}

// repeated float activation_arg = 13;
inline int TGPoolingParameter::activation_arg_size() const {
  return activation_arg_.size();
}
inline void TGPoolingParameter::clear_activation_arg() {
  activation_arg_.Clear();
}
inline float TGPoolingParameter::activation_arg(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGPoolingParameter.activation_arg)
  return activation_arg_.Get(index);
}
inline void TGPoolingParameter::set_activation_arg(int index, float value) {
  activation_arg_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGPoolingParameter.activation_arg)
}
inline void TGPoolingParameter::add_activation_arg(float value) {
  activation_arg_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGPoolingParameter.activation_arg)
}
inline const ::google::protobuf::RepeatedField< float >&
TGPoolingParameter::activation_arg() const {
  // @@protoc_insertion_point(field_list:bmnet.TGPoolingParameter.activation_arg)
  return activation_arg_;
}
inline ::google::protobuf::RepeatedField< float >*
TGPoolingParameter::mutable_activation_arg() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGPoolingParameter.activation_arg)
  return &activation_arg_;
}

// optional bool ceil_mode = 14 [default = true];
inline bool TGPoolingParameter::has_ceil_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TGPoolingParameter::set_has_ceil_mode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TGPoolingParameter::clear_has_ceil_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TGPoolingParameter::clear_ceil_mode() {
  ceil_mode_ = true;
  clear_has_ceil_mode();
}
inline bool TGPoolingParameter::ceil_mode() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPoolingParameter.ceil_mode)
  return ceil_mode_;
}
inline void TGPoolingParameter::set_ceil_mode(bool value) {
  set_has_ceil_mode();
  ceil_mode_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPoolingParameter.ceil_mode)
}

// -------------------------------------------------------------------

// TGInnerProductParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGInnerProductParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGInnerProductParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGInnerProductParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGInnerProductParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGInnerProductParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGInnerProductParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGInnerProductParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGInnerProductParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGInnerProductParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGInnerProductParameter.dep_info)
}

// optional string weight_name = 1;
inline bool TGInnerProductParameter::has_weight_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGInnerProductParameter::set_has_weight_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGInnerProductParameter::clear_has_weight_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGInnerProductParameter::clear_weight_name() {
  if (weight_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weight_name_->clear();
  }
  clear_has_weight_name();
}
inline const ::std::string& TGInnerProductParameter::weight_name() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.weight_name)
  return *weight_name_;
}
inline void TGInnerProductParameter::set_weight_name(const ::std::string& value) {
  set_has_weight_name();
  if (weight_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weight_name_ = new ::std::string;
  }
  weight_name_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.TGInnerProductParameter.weight_name)
}
inline void TGInnerProductParameter::set_weight_name(const char* value) {
  set_has_weight_name();
  if (weight_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weight_name_ = new ::std::string;
  }
  weight_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.TGInnerProductParameter.weight_name)
}
inline void TGInnerProductParameter::set_weight_name(const char* value, size_t size) {
  set_has_weight_name();
  if (weight_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weight_name_ = new ::std::string;
  }
  weight_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.TGInnerProductParameter.weight_name)
}
inline ::std::string* TGInnerProductParameter::mutable_weight_name() {
  set_has_weight_name();
  if (weight_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weight_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.TGInnerProductParameter.weight_name)
  return weight_name_;
}
inline ::std::string* TGInnerProductParameter::release_weight_name() {
  clear_has_weight_name();
  if (weight_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = weight_name_;
    weight_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGInnerProductParameter::set_allocated_weight_name(::std::string* weight_name) {
  if (weight_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete weight_name_;
  }
  if (weight_name) {
    set_has_weight_name();
    weight_name_ = weight_name;
  } else {
    clear_has_weight_name();
    weight_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGInnerProductParameter.weight_name)
}

// optional string bias_name = 2;
inline bool TGInnerProductParameter::has_bias_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGInnerProductParameter::set_has_bias_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGInnerProductParameter::clear_has_bias_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGInnerProductParameter::clear_bias_name() {
  if (bias_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bias_name_->clear();
  }
  clear_has_bias_name();
}
inline const ::std::string& TGInnerProductParameter::bias_name() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.bias_name)
  return *bias_name_;
}
inline void TGInnerProductParameter::set_bias_name(const ::std::string& value) {
  set_has_bias_name();
  if (bias_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bias_name_ = new ::std::string;
  }
  bias_name_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.TGInnerProductParameter.bias_name)
}
inline void TGInnerProductParameter::set_bias_name(const char* value) {
  set_has_bias_name();
  if (bias_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bias_name_ = new ::std::string;
  }
  bias_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.TGInnerProductParameter.bias_name)
}
inline void TGInnerProductParameter::set_bias_name(const char* value, size_t size) {
  set_has_bias_name();
  if (bias_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bias_name_ = new ::std::string;
  }
  bias_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.TGInnerProductParameter.bias_name)
}
inline ::std::string* TGInnerProductParameter::mutable_bias_name() {
  set_has_bias_name();
  if (bias_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bias_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.TGInnerProductParameter.bias_name)
  return bias_name_;
}
inline ::std::string* TGInnerProductParameter::release_bias_name() {
  clear_has_bias_name();
  if (bias_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bias_name_;
    bias_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGInnerProductParameter::set_allocated_bias_name(::std::string* bias_name) {
  if (bias_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bias_name_;
  }
  if (bias_name) {
    set_has_bias_name();
    bias_name_ = bias_name;
  } else {
    clear_has_bias_name();
    bias_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGInnerProductParameter.bias_name)
}

// optional uint64 global_weight = 5 [default = 281474976710655];
inline bool TGInnerProductParameter::has_global_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGInnerProductParameter::set_has_global_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGInnerProductParameter::clear_has_global_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGInnerProductParameter::clear_global_weight() {
  global_weight_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_weight();
}
inline ::google::protobuf::uint64 TGInnerProductParameter::global_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.global_weight)
  return global_weight_;
}
inline void TGInnerProductParameter::set_global_weight(::google::protobuf::uint64 value) {
  set_has_global_weight();
  global_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGInnerProductParameter.global_weight)
}

// optional uint64 global_bias = 6 [default = 281474976710655];
inline bool TGInnerProductParameter::has_global_bias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGInnerProductParameter::set_has_global_bias() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGInnerProductParameter::clear_has_global_bias() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGInnerProductParameter::clear_global_bias() {
  global_bias_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_bias();
}
inline ::google::protobuf::uint64 TGInnerProductParameter::global_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.global_bias)
  return global_bias_;
}
inline void TGInnerProductParameter::set_global_bias(::google::protobuf::uint64 value) {
  set_has_global_bias();
  global_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGInnerProductParameter.global_bias)
}

// optional bool bias_term = 7 [default = true];
inline bool TGInnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGInnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGInnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGInnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool TGInnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.bias_term)
  return bias_term_;
}
inline void TGInnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGInnerProductParameter.bias_term)
}

// optional bool result_add = 9 [default = false];
inline bool TGInnerProductParameter::has_result_add() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGInnerProductParameter::set_has_result_add() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGInnerProductParameter::clear_has_result_add() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGInnerProductParameter::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool TGInnerProductParameter::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.result_add)
  return result_add_;
}
inline void TGInnerProductParameter::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGInnerProductParameter.result_add)
}

// optional uint32 num_output = 10;
inline bool TGInnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGInnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGInnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGInnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 TGInnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.num_output)
  return num_output_;
}
inline void TGInnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGInnerProductParameter.num_output)
}

// optional bool do_activation = 11 [default = false];
inline bool TGInnerProductParameter::has_do_activation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TGInnerProductParameter::set_has_do_activation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TGInnerProductParameter::clear_has_do_activation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TGInnerProductParameter::clear_do_activation() {
  do_activation_ = false;
  clear_has_do_activation();
}
inline bool TGInnerProductParameter::do_activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.do_activation)
  return do_activation_;
}
inline void TGInnerProductParameter::set_do_activation(bool value) {
  set_has_do_activation();
  do_activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGInnerProductParameter.do_activation)
}

// optional .bmnet.ActivationMethod activation = 12 [default = RELU];
inline bool TGInnerProductParameter::has_activation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TGInnerProductParameter::set_has_activation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TGInnerProductParameter::clear_has_activation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TGInnerProductParameter::clear_activation() {
  activation_ = 0;
  clear_has_activation();
}
inline ::bmnet::ActivationMethod TGInnerProductParameter::activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.activation)
  return static_cast< ::bmnet::ActivationMethod >(activation_);
}
inline void TGInnerProductParameter::set_activation(::bmnet::ActivationMethod value) {
  assert(::bmnet::ActivationMethod_IsValid(value));
  set_has_activation();
  activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGInnerProductParameter.activation)
}

// repeated float activation_arg = 13;
inline int TGInnerProductParameter::activation_arg_size() const {
  return activation_arg_.size();
}
inline void TGInnerProductParameter::clear_activation_arg() {
  activation_arg_.Clear();
}
inline float TGInnerProductParameter::activation_arg(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.activation_arg)
  return activation_arg_.Get(index);
}
inline void TGInnerProductParameter::set_activation_arg(int index, float value) {
  activation_arg_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGInnerProductParameter.activation_arg)
}
inline void TGInnerProductParameter::add_activation_arg(float value) {
  activation_arg_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGInnerProductParameter.activation_arg)
}
inline const ::google::protobuf::RepeatedField< float >&
TGInnerProductParameter::activation_arg() const {
  // @@protoc_insertion_point(field_list:bmnet.TGInnerProductParameter.activation_arg)
  return activation_arg_;
}
inline ::google::protobuf::RepeatedField< float >*
TGInnerProductParameter::mutable_activation_arg() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGInnerProductParameter.activation_arg)
  return &activation_arg_;
}

// optional bool weight_transpose = 14 [default = true];
inline bool TGInnerProductParameter::has_weight_transpose() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TGInnerProductParameter::set_has_weight_transpose() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TGInnerProductParameter::clear_has_weight_transpose() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TGInnerProductParameter::clear_weight_transpose() {
  weight_transpose_ = true;
  clear_has_weight_transpose();
}
inline bool TGInnerProductParameter::weight_transpose() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.weight_transpose)
  return weight_transpose_;
}
inline void TGInnerProductParameter::set_weight_transpose(bool value) {
  set_has_weight_transpose();
  weight_transpose_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGInnerProductParameter.weight_transpose)
}

// optional uint64 activation_global_slope = 31 [default = 281474976710655];
inline bool TGInnerProductParameter::has_activation_global_slope() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TGInnerProductParameter::set_has_activation_global_slope() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TGInnerProductParameter::clear_has_activation_global_slope() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TGInnerProductParameter::clear_activation_global_slope() {
  activation_global_slope_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_activation_global_slope();
}
inline ::google::protobuf::uint64 TGInnerProductParameter::activation_global_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.activation_global_slope)
  return activation_global_slope_;
}
inline void TGInnerProductParameter::set_activation_global_slope(::google::protobuf::uint64 value) {
  set_has_activation_global_slope();
  activation_global_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGInnerProductParameter.activation_global_slope)
}

// optional bool activation_channel_shared = 32 [default = false];
inline bool TGInnerProductParameter::has_activation_channel_shared() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TGInnerProductParameter::set_has_activation_channel_shared() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TGInnerProductParameter::clear_has_activation_channel_shared() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TGInnerProductParameter::clear_activation_channel_shared() {
  activation_channel_shared_ = false;
  clear_has_activation_channel_shared();
}
inline bool TGInnerProductParameter::activation_channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInnerProductParameter.activation_channel_shared)
  return activation_channel_shared_;
}
inline void TGInnerProductParameter::set_activation_channel_shared(bool value) {
  set_has_activation_channel_shared();
  activation_channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGInnerProductParameter.activation_channel_shared)
}

// -------------------------------------------------------------------

// TGActivationParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGActivationParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGActivationParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGActivationParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGActivationParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGActivationParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGActivationParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGActivationParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGActivationParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGActivationParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGActivationParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGActivationParameter.dep_info)
}

// optional .bmnet.ActivationMethod activation = 5 [default = RELU];
inline bool TGActivationParameter::has_activation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGActivationParameter::set_has_activation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGActivationParameter::clear_has_activation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGActivationParameter::clear_activation() {
  activation_ = 0;
  clear_has_activation();
}
inline ::bmnet::ActivationMethod TGActivationParameter::activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGActivationParameter.activation)
  return static_cast< ::bmnet::ActivationMethod >(activation_);
}
inline void TGActivationParameter::set_activation(::bmnet::ActivationMethod value) {
  assert(::bmnet::ActivationMethod_IsValid(value));
  set_has_activation();
  activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGActivationParameter.activation)
}

// repeated float activation_arg = 6;
inline int TGActivationParameter::activation_arg_size() const {
  return activation_arg_.size();
}
inline void TGActivationParameter::clear_activation_arg() {
  activation_arg_.Clear();
}
inline float TGActivationParameter::activation_arg(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGActivationParameter.activation_arg)
  return activation_arg_.Get(index);
}
inline void TGActivationParameter::set_activation_arg(int index, float value) {
  activation_arg_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGActivationParameter.activation_arg)
}
inline void TGActivationParameter::add_activation_arg(float value) {
  activation_arg_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGActivationParameter.activation_arg)
}
inline const ::google::protobuf::RepeatedField< float >&
TGActivationParameter::activation_arg() const {
  // @@protoc_insertion_point(field_list:bmnet.TGActivationParameter.activation_arg)
  return activation_arg_;
}
inline ::google::protobuf::RepeatedField< float >*
TGActivationParameter::mutable_activation_arg() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGActivationParameter.activation_arg)
  return &activation_arg_;
}

// optional .bmnet.FillerParameter filler = 7;
inline bool TGActivationParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGActivationParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGActivationParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGActivationParameter::clear_filler() {
  if (filler_ != NULL) filler_->::bmnet::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::bmnet::FillerParameter& TGActivationParameter::filler() const {
  // @@protoc_insertion_point(field_get:bmnet.TGActivationParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::bmnet::FillerParameter* TGActivationParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) filler_ = new ::bmnet::FillerParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.TGActivationParameter.filler)
  return filler_;
}
inline ::bmnet::FillerParameter* TGActivationParameter::release_filler() {
  clear_has_filler();
  ::bmnet::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void TGActivationParameter::set_allocated_filler(::bmnet::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGActivationParameter.filler)
}

// optional bool channel_shared = 8 [default = false];
inline bool TGActivationParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGActivationParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGActivationParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGActivationParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool TGActivationParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.TGActivationParameter.channel_shared)
  return channel_shared_;
}
inline void TGActivationParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGActivationParameter.channel_shared)
}

// optional uint64 global_slope = 9 [default = 281474976710655];
inline bool TGActivationParameter::has_global_slope() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGActivationParameter::set_has_global_slope() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGActivationParameter::clear_has_global_slope() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGActivationParameter::clear_global_slope() {
  global_slope_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_slope();
}
inline ::google::protobuf::uint64 TGActivationParameter::global_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.TGActivationParameter.global_slope)
  return global_slope_;
}
inline void TGActivationParameter::set_global_slope(::google::protobuf::uint64 value) {
  set_has_global_slope();
  global_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGActivationParameter.global_slope)
}

// -------------------------------------------------------------------

// TGBatchNormParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGBatchNormParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGBatchNormParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGBatchNormParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGBatchNormParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGBatchNormParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGBatchNormParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGBatchNormParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGBatchNormParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGBatchNormParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGBatchNormParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGBatchNormParameter.dep_info)
}

// optional uint64 global_mean = 5 [default = 281474976710655];
inline bool TGBatchNormParameter::has_global_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGBatchNormParameter::set_has_global_mean() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGBatchNormParameter::clear_has_global_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGBatchNormParameter::clear_global_mean() {
  global_mean_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_mean();
}
inline ::google::protobuf::uint64 TGBatchNormParameter::global_mean() const {
  // @@protoc_insertion_point(field_get:bmnet.TGBatchNormParameter.global_mean)
  return global_mean_;
}
inline void TGBatchNormParameter::set_global_mean(::google::protobuf::uint64 value) {
  set_has_global_mean();
  global_mean_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGBatchNormParameter.global_mean)
}

// optional uint64 global_variance = 6 [default = 281474976710655];
inline bool TGBatchNormParameter::has_global_variance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGBatchNormParameter::set_has_global_variance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGBatchNormParameter::clear_has_global_variance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGBatchNormParameter::clear_global_variance() {
  global_variance_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_variance();
}
inline ::google::protobuf::uint64 TGBatchNormParameter::global_variance() const {
  // @@protoc_insertion_point(field_get:bmnet.TGBatchNormParameter.global_variance)
  return global_variance_;
}
inline void TGBatchNormParameter::set_global_variance(::google::protobuf::uint64 value) {
  set_has_global_variance();
  global_variance_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGBatchNormParameter.global_variance)
}

// optional uint64 global_fraction = 7 [default = 281474976710655];
inline bool TGBatchNormParameter::has_global_fraction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGBatchNormParameter::set_has_global_fraction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGBatchNormParameter::clear_has_global_fraction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGBatchNormParameter::clear_global_fraction() {
  global_fraction_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_fraction();
}
inline ::google::protobuf::uint64 TGBatchNormParameter::global_fraction() const {
  // @@protoc_insertion_point(field_get:bmnet.TGBatchNormParameter.global_fraction)
  return global_fraction_;
}
inline void TGBatchNormParameter::set_global_fraction(::google::protobuf::uint64 value) {
  set_has_global_fraction();
  global_fraction_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGBatchNormParameter.global_fraction)
}

// optional float eps = 8 [default = 1e-05];
inline bool TGBatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGBatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGBatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGBatchNormParameter::clear_eps() {
  eps_ = 1e-05f;
  clear_has_eps();
}
inline float TGBatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:bmnet.TGBatchNormParameter.eps)
  return eps_;
}
inline void TGBatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGBatchNormParameter.eps)
}

// optional bool fusion_skipped = 9 [default = false];
inline bool TGBatchNormParameter::has_fusion_skipped() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGBatchNormParameter::set_has_fusion_skipped() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGBatchNormParameter::clear_has_fusion_skipped() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGBatchNormParameter::clear_fusion_skipped() {
  fusion_skipped_ = false;
  clear_has_fusion_skipped();
}
inline bool TGBatchNormParameter::fusion_skipped() const {
  // @@protoc_insertion_point(field_get:bmnet.TGBatchNormParameter.fusion_skipped)
  return fusion_skipped_;
}
inline void TGBatchNormParameter::set_fusion_skipped(bool value) {
  set_has_fusion_skipped();
  fusion_skipped_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGBatchNormParameter.fusion_skipped)
}

// -------------------------------------------------------------------

// TGSoftmaxParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGSoftmaxParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGSoftmaxParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGSoftmaxParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGSoftmaxParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGSoftmaxParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGSoftmaxParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGSoftmaxParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGSoftmaxParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGSoftmaxParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGSoftmaxParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGSoftmaxParameter.dep_info)
}

// optional int32 axis = 5 [default = 1];
inline bool TGSoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGSoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGSoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGSoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 TGSoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:bmnet.TGSoftmaxParameter.axis)
  return axis_;
}
inline void TGSoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGSoftmaxParameter.axis)
}

// -------------------------------------------------------------------

// TGDropoutParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGDropoutParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGDropoutParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGDropoutParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGDropoutParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGDropoutParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDropoutParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGDropoutParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGDropoutParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGDropoutParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGDropoutParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGDropoutParameter.dep_info)
}

// optional float dropout_ratio = 1 [default = 0.5];
inline bool TGDropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGDropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGDropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGDropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float TGDropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void TGDropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGDropoutParameter.dropout_ratio)
}

// optional uint64 global_mask = 3 [default = 281474976710655];
inline bool TGDropoutParameter::has_global_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGDropoutParameter::set_has_global_mask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGDropoutParameter::clear_has_global_mask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGDropoutParameter::clear_global_mask() {
  global_mask_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_mask();
}
inline ::google::protobuf::uint64 TGDropoutParameter::global_mask() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDropoutParameter.global_mask)
  return global_mask_;
}
inline void TGDropoutParameter::set_global_mask(::google::protobuf::uint64 value) {
  set_has_global_mask();
  global_mask_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGDropoutParameter.global_mask)
}

// -------------------------------------------------------------------

// TGEltwiseParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGEltwiseParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGEltwiseParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGEltwiseParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGEltwiseParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGEltwiseParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGEltwiseParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGEltwiseParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGEltwiseParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGEltwiseParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGEltwiseParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGEltwiseParameter.dep_info)
}

// optional .bmnet.TGEltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool TGEltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGEltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGEltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGEltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::bmnet::TGEltwiseParameter_EltwiseOp TGEltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGEltwiseParameter.operation)
  return static_cast< ::bmnet::TGEltwiseParameter_EltwiseOp >(operation_);
}
inline void TGEltwiseParameter::set_operation(::bmnet::TGEltwiseParameter_EltwiseOp value) {
  assert(::bmnet::TGEltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGEltwiseParameter.operation)
}

// repeated float coeff = 2;
inline int TGEltwiseParameter::coeff_size() const {
  return coeff_.size();
}
inline void TGEltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float TGEltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGEltwiseParameter.coeff)
  return coeff_.Get(index);
}
inline void TGEltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGEltwiseParameter.coeff)
}
inline void TGEltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGEltwiseParameter.coeff)
}
inline const ::google::protobuf::RepeatedField< float >&
TGEltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:bmnet.TGEltwiseParameter.coeff)
  return coeff_;
}
inline ::google::protobuf::RepeatedField< float >*
TGEltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGEltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool TGEltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGEltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGEltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGEltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
inline bool TGEltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:bmnet.TGEltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
inline void TGEltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGEltwiseParameter.stable_prod_grad)
}

// optional bool do_activation = 4 [default = false];
inline bool TGEltwiseParameter::has_do_activation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGEltwiseParameter::set_has_do_activation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGEltwiseParameter::clear_has_do_activation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGEltwiseParameter::clear_do_activation() {
  do_activation_ = false;
  clear_has_do_activation();
}
inline bool TGEltwiseParameter::do_activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGEltwiseParameter.do_activation)
  return do_activation_;
}
inline void TGEltwiseParameter::set_do_activation(bool value) {
  set_has_do_activation();
  do_activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGEltwiseParameter.do_activation)
}

// optional .bmnet.ActivationMethod activation = 5 [default = RELU];
inline bool TGEltwiseParameter::has_activation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGEltwiseParameter::set_has_activation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGEltwiseParameter::clear_has_activation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGEltwiseParameter::clear_activation() {
  activation_ = 0;
  clear_has_activation();
}
inline ::bmnet::ActivationMethod TGEltwiseParameter::activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGEltwiseParameter.activation)
  return static_cast< ::bmnet::ActivationMethod >(activation_);
}
inline void TGEltwiseParameter::set_activation(::bmnet::ActivationMethod value) {
  assert(::bmnet::ActivationMethod_IsValid(value));
  set_has_activation();
  activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGEltwiseParameter.activation)
}

// repeated float activation_arg = 6;
inline int TGEltwiseParameter::activation_arg_size() const {
  return activation_arg_.size();
}
inline void TGEltwiseParameter::clear_activation_arg() {
  activation_arg_.Clear();
}
inline float TGEltwiseParameter::activation_arg(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGEltwiseParameter.activation_arg)
  return activation_arg_.Get(index);
}
inline void TGEltwiseParameter::set_activation_arg(int index, float value) {
  activation_arg_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGEltwiseParameter.activation_arg)
}
inline void TGEltwiseParameter::add_activation_arg(float value) {
  activation_arg_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGEltwiseParameter.activation_arg)
}
inline const ::google::protobuf::RepeatedField< float >&
TGEltwiseParameter::activation_arg() const {
  // @@protoc_insertion_point(field_list:bmnet.TGEltwiseParameter.activation_arg)
  return activation_arg_;
}
inline ::google::protobuf::RepeatedField< float >*
TGEltwiseParameter::mutable_activation_arg() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGEltwiseParameter.activation_arg)
  return &activation_arg_;
}

// -------------------------------------------------------------------

// TGLRNParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGLRNParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGLRNParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGLRNParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGLRNParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGLRNParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGLRNParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGLRNParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGLRNParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGLRNParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGLRNParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGLRNParameter.dep_info)
}

// optional uint32 local_size = 5 [default = 5];
inline bool TGLRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGLRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGLRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGLRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 TGLRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:bmnet.TGLRNParameter.local_size)
  return local_size_;
}
inline void TGLRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGLRNParameter.local_size)
}

// optional float alpha = 6 [default = 1];
inline bool TGLRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGLRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGLRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGLRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float TGLRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:bmnet.TGLRNParameter.alpha)
  return alpha_;
}
inline void TGLRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGLRNParameter.alpha)
}

// optional float beta = 7 [default = 0.75];
inline bool TGLRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGLRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGLRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGLRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float TGLRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:bmnet.TGLRNParameter.beta)
  return beta_;
}
inline void TGLRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGLRNParameter.beta)
}

// optional .bmnet.TGLRNParameter.NormRegion norm_region = 8 [default = ACROSS_CHANNELS];
inline bool TGLRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGLRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGLRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGLRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::bmnet::TGLRNParameter_NormRegion TGLRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:bmnet.TGLRNParameter.norm_region)
  return static_cast< ::bmnet::TGLRNParameter_NormRegion >(norm_region_);
}
inline void TGLRNParameter::set_norm_region(::bmnet::TGLRNParameter_NormRegion value) {
  assert(::bmnet::TGLRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGLRNParameter.norm_region)
}

// optional float k = 9 [default = 1];
inline bool TGLRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGLRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGLRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGLRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float TGLRNParameter::k() const {
  // @@protoc_insertion_point(field_get:bmnet.TGLRNParameter.k)
  return k_;
}
inline void TGLRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGLRNParameter.k)
}

// optional uint64 sqr_lut_weight = 10 [default = 281474976710655];
inline bool TGLRNParameter::has_sqr_lut_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGLRNParameter::set_has_sqr_lut_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGLRNParameter::clear_has_sqr_lut_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGLRNParameter::clear_sqr_lut_weight() {
  sqr_lut_weight_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_sqr_lut_weight();
}
inline ::google::protobuf::uint64 TGLRNParameter::sqr_lut_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.TGLRNParameter.sqr_lut_weight)
  return sqr_lut_weight_;
}
inline void TGLRNParameter::set_sqr_lut_weight(::google::protobuf::uint64 value) {
  set_has_sqr_lut_weight();
  sqr_lut_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGLRNParameter.sqr_lut_weight)
}

// optional uint64 power_lut_weight = 11 [default = 281474976710655];
inline bool TGLRNParameter::has_power_lut_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGLRNParameter::set_has_power_lut_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGLRNParameter::clear_has_power_lut_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGLRNParameter::clear_power_lut_weight() {
  power_lut_weight_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_power_lut_weight();
}
inline ::google::protobuf::uint64 TGLRNParameter::power_lut_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.TGLRNParameter.power_lut_weight)
  return power_lut_weight_;
}
inline void TGLRNParameter::set_power_lut_weight(::google::protobuf::uint64 value) {
  set_has_power_lut_weight();
  power_lut_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGLRNParameter.power_lut_weight)
}

// -------------------------------------------------------------------

// TGPowerParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGPowerParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGPowerParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGPowerParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGPowerParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGPowerParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPowerParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGPowerParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGPowerParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGPowerParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGPowerParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGPowerParameter.dep_info)
}

// optional float power = 1 [default = 1];
inline bool TGPowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGPowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGPowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGPowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float TGPowerParameter::power() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPowerParameter.power)
  return power_;
}
inline void TGPowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPowerParameter.power)
}

// optional float scale = 2 [default = 1];
inline bool TGPowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGPowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGPowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGPowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float TGPowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPowerParameter.scale)
  return scale_;
}
inline void TGPowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPowerParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool TGPowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGPowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGPowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGPowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float TGPowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPowerParameter.shift)
  return shift_;
}
inline void TGPowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPowerParameter.shift)
}

// -------------------------------------------------------------------

// TGScaleParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGScaleParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGScaleParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGScaleParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGScaleParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGScaleParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGScaleParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGScaleParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGScaleParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGScaleParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGScaleParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGScaleParameter.dep_info)
}

// optional bool bias_term = 4 [default = false];
inline bool TGScaleParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGScaleParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGScaleParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGScaleParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
inline bool TGScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:bmnet.TGScaleParameter.bias_term)
  return bias_term_;
}
inline void TGScaleParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGScaleParameter.bias_term)
}

// optional .bmnet.FillerParameter bias_filler = 5;
inline bool TGScaleParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGScaleParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGScaleParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGScaleParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::bmnet::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::bmnet::FillerParameter& TGScaleParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:bmnet.TGScaleParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::bmnet::FillerParameter* TGScaleParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::bmnet::FillerParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.TGScaleParameter.bias_filler)
  return bias_filler_;
}
inline ::bmnet::FillerParameter* TGScaleParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::bmnet::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void TGScaleParameter::set_allocated_bias_filler(::bmnet::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGScaleParameter.bias_filler)
}

// optional uint32 scale_dim = 6;
inline bool TGScaleParameter::has_scale_dim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGScaleParameter::set_has_scale_dim() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGScaleParameter::clear_has_scale_dim() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGScaleParameter::clear_scale_dim() {
  scale_dim_ = 0u;
  clear_has_scale_dim();
}
inline ::google::protobuf::uint32 TGScaleParameter::scale_dim() const {
  // @@protoc_insertion_point(field_get:bmnet.TGScaleParameter.scale_dim)
  return scale_dim_;
}
inline void TGScaleParameter::set_scale_dim(::google::protobuf::uint32 value) {
  set_has_scale_dim();
  scale_dim_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGScaleParameter.scale_dim)
}

// optional uint32 inner_dim = 7;
inline bool TGScaleParameter::has_inner_dim() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGScaleParameter::set_has_inner_dim() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGScaleParameter::clear_has_inner_dim() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGScaleParameter::clear_inner_dim() {
  inner_dim_ = 0u;
  clear_has_inner_dim();
}
inline ::google::protobuf::uint32 TGScaleParameter::inner_dim() const {
  // @@protoc_insertion_point(field_get:bmnet.TGScaleParameter.inner_dim)
  return inner_dim_;
}
inline void TGScaleParameter::set_inner_dim(::google::protobuf::uint32 value) {
  set_has_inner_dim();
  inner_dim_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGScaleParameter.inner_dim)
}

// optional uint64 global_scale = 8 [default = 281474976710655];
inline bool TGScaleParameter::has_global_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGScaleParameter::set_has_global_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGScaleParameter::clear_has_global_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGScaleParameter::clear_global_scale() {
  global_scale_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_scale();
}
inline ::google::protobuf::uint64 TGScaleParameter::global_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.TGScaleParameter.global_scale)
  return global_scale_;
}
inline void TGScaleParameter::set_global_scale(::google::protobuf::uint64 value) {
  set_has_global_scale();
  global_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGScaleParameter.global_scale)
}

// optional uint64 global_bias = 9 [default = 281474976710655];
inline bool TGScaleParameter::has_global_bias() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGScaleParameter::set_has_global_bias() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGScaleParameter::clear_has_global_bias() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGScaleParameter::clear_global_bias() {
  global_bias_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_bias();
}
inline ::google::protobuf::uint64 TGScaleParameter::global_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.TGScaleParameter.global_bias)
  return global_bias_;
}
inline void TGScaleParameter::set_global_bias(::google::protobuf::uint64 value) {
  set_has_global_bias();
  global_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGScaleParameter.global_bias)
}

// optional int32 axis = 10 [default = 1];
inline bool TGScaleParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGScaleParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGScaleParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGScaleParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 TGScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:bmnet.TGScaleParameter.axis)
  return axis_;
}
inline void TGScaleParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGScaleParameter.axis)
}

// optional int32 num_axes = 11 [default = 1];
inline bool TGScaleParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TGScaleParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TGScaleParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TGScaleParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 TGScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:bmnet.TGScaleParameter.num_axes)
  return num_axes_;
}
inline void TGScaleParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGScaleParameter.num_axes)
}

// optional bool do_activation = 12 [default = false];
inline bool TGScaleParameter::has_do_activation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TGScaleParameter::set_has_do_activation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TGScaleParameter::clear_has_do_activation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TGScaleParameter::clear_do_activation() {
  do_activation_ = false;
  clear_has_do_activation();
}
inline bool TGScaleParameter::do_activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGScaleParameter.do_activation)
  return do_activation_;
}
inline void TGScaleParameter::set_do_activation(bool value) {
  set_has_do_activation();
  do_activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGScaleParameter.do_activation)
}

// optional .bmnet.ActivationMethod activation = 13 [default = RELU];
inline bool TGScaleParameter::has_activation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TGScaleParameter::set_has_activation() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TGScaleParameter::clear_has_activation() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TGScaleParameter::clear_activation() {
  activation_ = 0;
  clear_has_activation();
}
inline ::bmnet::ActivationMethod TGScaleParameter::activation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGScaleParameter.activation)
  return static_cast< ::bmnet::ActivationMethod >(activation_);
}
inline void TGScaleParameter::set_activation(::bmnet::ActivationMethod value) {
  assert(::bmnet::ActivationMethod_IsValid(value));
  set_has_activation();
  activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGScaleParameter.activation)
}

// repeated float activation_arg = 14;
inline int TGScaleParameter::activation_arg_size() const {
  return activation_arg_.size();
}
inline void TGScaleParameter::clear_activation_arg() {
  activation_arg_.Clear();
}
inline float TGScaleParameter::activation_arg(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGScaleParameter.activation_arg)
  return activation_arg_.Get(index);
}
inline void TGScaleParameter::set_activation_arg(int index, float value) {
  activation_arg_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGScaleParameter.activation_arg)
}
inline void TGScaleParameter::add_activation_arg(float value) {
  activation_arg_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGScaleParameter.activation_arg)
}
inline const ::google::protobuf::RepeatedField< float >&
TGScaleParameter::activation_arg() const {
  // @@protoc_insertion_point(field_list:bmnet.TGScaleParameter.activation_arg)
  return activation_arg_;
}
inline ::google::protobuf::RepeatedField< float >*
TGScaleParameter::mutable_activation_arg() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGScaleParameter.activation_arg)
  return &activation_arg_;
}

// optional bool fusion_skipped = 15 [default = true];
inline bool TGScaleParameter::has_fusion_skipped() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TGScaleParameter::set_has_fusion_skipped() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TGScaleParameter::clear_has_fusion_skipped() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TGScaleParameter::clear_fusion_skipped() {
  fusion_skipped_ = true;
  clear_has_fusion_skipped();
}
inline bool TGScaleParameter::fusion_skipped() const {
  // @@protoc_insertion_point(field_get:bmnet.TGScaleParameter.fusion_skipped)
  return fusion_skipped_;
}
inline void TGScaleParameter::set_fusion_skipped(bool value) {
  set_has_fusion_skipped();
  fusion_skipped_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGScaleParameter.fusion_skipped)
}

// -------------------------------------------------------------------

// TGPReLUParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGPReLUParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGPReLUParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGPReLUParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGPReLUParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGPReLUParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPReLUParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGPReLUParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGPReLUParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGPReLUParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGPReLUParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGPReLUParameter.dep_info)
}

// optional .bmnet.FillerParameter filler = 1;
inline bool TGPReLUParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGPReLUParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGPReLUParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGPReLUParameter::clear_filler() {
  if (filler_ != NULL) filler_->::bmnet::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::bmnet::FillerParameter& TGPReLUParameter::filler() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPReLUParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::bmnet::FillerParameter* TGPReLUParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) filler_ = new ::bmnet::FillerParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.TGPReLUParameter.filler)
  return filler_;
}
inline ::bmnet::FillerParameter* TGPReLUParameter::release_filler() {
  clear_has_filler();
  ::bmnet::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void TGPReLUParameter::set_allocated_filler(::bmnet::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGPReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
inline bool TGPReLUParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGPReLUParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGPReLUParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGPReLUParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool TGPReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPReLUParameter.channel_shared)
  return channel_shared_;
}
inline void TGPReLUParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPReLUParameter.channel_shared)
}

// optional uint64 global_slope = 8 [default = 281474976710655];
inline bool TGPReLUParameter::has_global_slope() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGPReLUParameter::set_has_global_slope() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGPReLUParameter::clear_has_global_slope() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGPReLUParameter::clear_global_slope() {
  global_slope_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_slope();
}
inline ::google::protobuf::uint64 TGPReLUParameter::global_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPReLUParameter.global_slope)
  return global_slope_;
}
inline void TGPReLUParameter::set_global_slope(::google::protobuf::uint64 value) {
  set_has_global_slope();
  global_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPReLUParameter.global_slope)
}

// -------------------------------------------------------------------

// TGPermuteParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGPermuteParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGPermuteParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGPermuteParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGPermuteParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGPermuteParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPermuteParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGPermuteParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGPermuteParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGPermuteParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGPermuteParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGPermuteParameter.dep_info)
}

// repeated uint32 order = 1;
inline int TGPermuteParameter::order_size() const {
  return order_.size();
}
inline void TGPermuteParameter::clear_order() {
  order_.Clear();
}
inline ::google::protobuf::uint32 TGPermuteParameter::order(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGPermuteParameter.order)
  return order_.Get(index);
}
inline void TGPermuteParameter::set_order(int index, ::google::protobuf::uint32 value) {
  order_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGPermuteParameter.order)
}
inline void TGPermuteParameter::add_order(::google::protobuf::uint32 value) {
  order_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGPermuteParameter.order)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGPermuteParameter::order() const {
  // @@protoc_insertion_point(field_list:bmnet.TGPermuteParameter.order)
  return order_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGPermuteParameter::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGPermuteParameter.order)
  return &order_;
}

// -------------------------------------------------------------------

// TGNormalizeParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGNormalizeParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGNormalizeParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGNormalizeParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGNormalizeParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGNormalizeParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGNormalizeParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGNormalizeParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGNormalizeParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGNormalizeParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGNormalizeParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGNormalizeParameter.dep_info)
}

// optional bool across_spatial = 5 [default = true];
inline bool TGNormalizeParameter::has_across_spatial() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGNormalizeParameter::set_has_across_spatial() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGNormalizeParameter::clear_has_across_spatial() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGNormalizeParameter::clear_across_spatial() {
  across_spatial_ = true;
  clear_has_across_spatial();
}
inline bool TGNormalizeParameter::across_spatial() const {
  // @@protoc_insertion_point(field_get:bmnet.TGNormalizeParameter.across_spatial)
  return across_spatial_;
}
inline void TGNormalizeParameter::set_across_spatial(bool value) {
  set_has_across_spatial();
  across_spatial_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGNormalizeParameter.across_spatial)
}

// repeated float scale = 6;
inline int TGNormalizeParameter::scale_size() const {
  return scale_.size();
}
inline void TGNormalizeParameter::clear_scale() {
  scale_.Clear();
}
inline float TGNormalizeParameter::scale(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGNormalizeParameter.scale)
  return scale_.Get(index);
}
inline void TGNormalizeParameter::set_scale(int index, float value) {
  scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGNormalizeParameter.scale)
}
inline void TGNormalizeParameter::add_scale(float value) {
  scale_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGNormalizeParameter.scale)
}
inline const ::google::protobuf::RepeatedField< float >&
TGNormalizeParameter::scale() const {
  // @@protoc_insertion_point(field_list:bmnet.TGNormalizeParameter.scale)
  return scale_;
}
inline ::google::protobuf::RepeatedField< float >*
TGNormalizeParameter::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGNormalizeParameter.scale)
  return &scale_;
}

// optional bool channel_shared = 7 [default = true];
inline bool TGNormalizeParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGNormalizeParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGNormalizeParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGNormalizeParameter::clear_channel_shared() {
  channel_shared_ = true;
  clear_has_channel_shared();
}
inline bool TGNormalizeParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.TGNormalizeParameter.channel_shared)
  return channel_shared_;
}
inline void TGNormalizeParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGNormalizeParameter.channel_shared)
}

// optional float eps = 8 [default = 1e-10];
inline bool TGNormalizeParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGNormalizeParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGNormalizeParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGNormalizeParameter::clear_eps() {
  eps_ = 1e-10f;
  clear_has_eps();
}
inline float TGNormalizeParameter::eps() const {
  // @@protoc_insertion_point(field_get:bmnet.TGNormalizeParameter.eps)
  return eps_;
}
inline void TGNormalizeParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGNormalizeParameter.eps)
}

// optional .bmnet.FillerParameter bias_filler = 9;
inline bool TGNormalizeParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGNormalizeParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGNormalizeParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGNormalizeParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::bmnet::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::bmnet::FillerParameter& TGNormalizeParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:bmnet.TGNormalizeParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::bmnet::FillerParameter* TGNormalizeParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::bmnet::FillerParameter;
  // @@protoc_insertion_point(field_mutable:bmnet.TGNormalizeParameter.bias_filler)
  return bias_filler_;
}
inline ::bmnet::FillerParameter* TGNormalizeParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::bmnet::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void TGNormalizeParameter::set_allocated_bias_filler(::bmnet::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGNormalizeParameter.bias_filler)
}

// optional uint64 global_scale = 10 [default = 281474976710655];
inline bool TGNormalizeParameter::has_global_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGNormalizeParameter::set_has_global_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGNormalizeParameter::clear_has_global_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGNormalizeParameter::clear_global_scale() {
  global_scale_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_scale();
}
inline ::google::protobuf::uint64 TGNormalizeParameter::global_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.TGNormalizeParameter.global_scale)
  return global_scale_;
}
inline void TGNormalizeParameter::set_global_scale(::google::protobuf::uint64 value) {
  set_has_global_scale();
  global_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGNormalizeParameter.global_scale)
}

// optional uint64 global_sqr_lut = 11 [default = 281474976710655];
inline bool TGNormalizeParameter::has_global_sqr_lut() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGNormalizeParameter::set_has_global_sqr_lut() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGNormalizeParameter::clear_has_global_sqr_lut() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGNormalizeParameter::clear_global_sqr_lut() {
  global_sqr_lut_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_sqr_lut();
}
inline ::google::protobuf::uint64 TGNormalizeParameter::global_sqr_lut() const {
  // @@protoc_insertion_point(field_get:bmnet.TGNormalizeParameter.global_sqr_lut)
  return global_sqr_lut_;
}
inline void TGNormalizeParameter::set_global_sqr_lut(::google::protobuf::uint64 value) {
  set_has_global_sqr_lut();
  global_sqr_lut_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGNormalizeParameter.global_sqr_lut)
}

// optional uint64 global_sqrt_lut = 12 [default = 281474976710655];
inline bool TGNormalizeParameter::has_global_sqrt_lut() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TGNormalizeParameter::set_has_global_sqrt_lut() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TGNormalizeParameter::clear_has_global_sqrt_lut() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TGNormalizeParameter::clear_global_sqrt_lut() {
  global_sqrt_lut_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_sqrt_lut();
}
inline ::google::protobuf::uint64 TGNormalizeParameter::global_sqrt_lut() const {
  // @@protoc_insertion_point(field_get:bmnet.TGNormalizeParameter.global_sqrt_lut)
  return global_sqrt_lut_;
}
inline void TGNormalizeParameter::set_global_sqrt_lut(::google::protobuf::uint64 value) {
  set_has_global_sqrt_lut();
  global_sqrt_lut_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGNormalizeParameter.global_sqrt_lut)
}

// -------------------------------------------------------------------

// TGCropParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGCropParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGCropParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGCropParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGCropParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGCropParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGCropParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGCropParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGCropParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGCropParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGCropParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGCropParameter.dep_info)
}

// repeated uint32 offset = 1;
inline int TGCropParameter::offset_size() const {
  return offset_.size();
}
inline void TGCropParameter::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::uint32 TGCropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGCropParameter.offset)
  return offset_.Get(index);
}
inline void TGCropParameter::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGCropParameter.offset)
}
inline void TGCropParameter::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGCropParameter.offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGCropParameter::offset() const {
  // @@protoc_insertion_point(field_list:bmnet.TGCropParameter.offset)
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGCropParameter::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGCropParameter.offset)
  return &offset_;
}

// -------------------------------------------------------------------

// TGSliceParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGSliceParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGSliceParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGSliceParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGSliceParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGSliceParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGSliceParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGSliceParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGSliceParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGSliceParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGSliceParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGSliceParameter.dep_info)
}

// optional int32 axis = 1;
inline bool TGSliceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGSliceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGSliceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGSliceParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 TGSliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:bmnet.TGSliceParameter.axis)
  return axis_;
}
inline void TGSliceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGSliceParameter.axis)
}

// -------------------------------------------------------------------

// TGReductionParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGReductionParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGReductionParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGReductionParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGReductionParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGReductionParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGReductionParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGReductionParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGReductionParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGReductionParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGReductionParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGReductionParameter.dep_info)
}

// optional .bmnet.TGReductionParameter.ReductionOp operation = 1 [default = SUM];
inline bool TGReductionParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGReductionParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGReductionParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGReductionParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::bmnet::TGReductionParameter_ReductionOp TGReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGReductionParameter.operation)
  return static_cast< ::bmnet::TGReductionParameter_ReductionOp >(operation_);
}
inline void TGReductionParameter::set_operation(::bmnet::TGReductionParameter_ReductionOp value) {
  assert(::bmnet::TGReductionParameter_ReductionOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGReductionParameter.operation)
}

// optional int32 axis = 2 [default = 0];
inline bool TGReductionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGReductionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGReductionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGReductionParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 TGReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:bmnet.TGReductionParameter.axis)
  return axis_;
}
inline void TGReductionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGReductionParameter.axis)
}

// optional float coeff = 3 [default = 1];
inline bool TGReductionParameter::has_coeff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGReductionParameter::set_has_coeff() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGReductionParameter::clear_has_coeff() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGReductionParameter::clear_coeff() {
  coeff_ = 1;
  clear_has_coeff();
}
inline float TGReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:bmnet.TGReductionParameter.coeff)
  return coeff_;
}
inline void TGReductionParameter::set_coeff(float value) {
  set_has_coeff();
  coeff_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGReductionParameter.coeff)
}

// -------------------------------------------------------------------

// TGUpsampleParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGUpsampleParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGUpsampleParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGUpsampleParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGUpsampleParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGUpsampleParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGUpsampleParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGUpsampleParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGUpsampleParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGUpsampleParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGUpsampleParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGUpsampleParameter.dep_info)
}

// repeated uint32 size = 1;
inline int TGUpsampleParameter::size_size() const {
  return size_.size();
}
inline void TGUpsampleParameter::clear_size() {
  size_.Clear();
}
inline ::google::protobuf::uint32 TGUpsampleParameter::size(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGUpsampleParameter.size)
  return size_.Get(index);
}
inline void TGUpsampleParameter::set_size(int index, ::google::protobuf::uint32 value) {
  size_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGUpsampleParameter.size)
}
inline void TGUpsampleParameter::add_size(::google::protobuf::uint32 value) {
  size_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGUpsampleParameter.size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGUpsampleParameter::size() const {
  // @@protoc_insertion_point(field_list:bmnet.TGUpsampleParameter.size)
  return size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGUpsampleParameter::mutable_size() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGUpsampleParameter.size)
  return &size_;
}

// -------------------------------------------------------------------

// TGReorgParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGReorgParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGReorgParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGReorgParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGReorgParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGReorgParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGReorgParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGReorgParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGReorgParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGReorgParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGReorgParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGReorgParameter.dep_info)
}

// repeated uint32 size = 1;
inline int TGReorgParameter::size_size() const {
  return size_.size();
}
inline void TGReorgParameter::clear_size() {
  size_.Clear();
}
inline ::google::protobuf::uint32 TGReorgParameter::size(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGReorgParameter.size)
  return size_.Get(index);
}
inline void TGReorgParameter::set_size(int index, ::google::protobuf::uint32 value) {
  size_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGReorgParameter.size)
}
inline void TGReorgParameter::add_size(::google::protobuf::uint32 value) {
  size_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGReorgParameter.size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGReorgParameter::size() const {
  // @@protoc_insertion_point(field_list:bmnet.TGReorgParameter.size)
  return size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGReorgParameter::mutable_size() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGReorgParameter.size)
  return &size_;
}

// optional uint32 stride = 2;
inline bool TGReorgParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGReorgParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGReorgParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGReorgParameter::clear_stride() {
  stride_ = 0u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 TGReorgParameter::stride() const {
  // @@protoc_insertion_point(field_get:bmnet.TGReorgParameter.stride)
  return stride_;
}
inline void TGReorgParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGReorgParameter.stride)
}

// optional bool reverse = 3 [default = false];
inline bool TGReorgParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGReorgParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGReorgParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGReorgParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
inline bool TGReorgParameter::reverse() const {
  // @@protoc_insertion_point(field_get:bmnet.TGReorgParameter.reverse)
  return reverse_;
}
inline void TGReorgParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGReorgParameter.reverse)
}

// -------------------------------------------------------------------

// TGConcatParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGConcatParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGConcatParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGConcatParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGConcatParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGConcatParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConcatParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGConcatParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGConcatParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGConcatParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGConcatParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGConcatParameter.dep_info)
}

// optional int32 axis = 2 [default = 1];
inline bool TGConcatParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGConcatParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGConcatParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGConcatParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 TGConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:bmnet.TGConcatParameter.axis)
  return axis_;
}
inline void TGConcatParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGConcatParameter.axis)
}

// repeated int32 ignored_bottom = 3;
inline int TGConcatParameter::ignored_bottom_size() const {
  return ignored_bottom_.size();
}
inline void TGConcatParameter::clear_ignored_bottom() {
  ignored_bottom_.Clear();
}
inline ::google::protobuf::int32 TGConcatParameter::ignored_bottom(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGConcatParameter.ignored_bottom)
  return ignored_bottom_.Get(index);
}
inline void TGConcatParameter::set_ignored_bottom(int index, ::google::protobuf::int32 value) {
  ignored_bottom_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGConcatParameter.ignored_bottom)
}
inline void TGConcatParameter::add_ignored_bottom(::google::protobuf::int32 value) {
  ignored_bottom_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGConcatParameter.ignored_bottom)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TGConcatParameter::ignored_bottom() const {
  // @@protoc_insertion_point(field_list:bmnet.TGConcatParameter.ignored_bottom)
  return ignored_bottom_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TGConcatParameter::mutable_ignored_bottom() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGConcatParameter.ignored_bottom)
  return &ignored_bottom_;
}

// -------------------------------------------------------------------

// TGPriorBoxParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGPriorBoxParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGPriorBoxParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGPriorBoxParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGPriorBoxParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGPriorBoxParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGPriorBoxParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGPriorBoxParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGPriorBoxParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGPriorBoxParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGPriorBoxParameter.dep_info)
}

// repeated float min_size = 1;
inline int TGPriorBoxParameter::min_size_size() const {
  return min_size_.size();
}
inline void TGPriorBoxParameter::clear_min_size() {
  min_size_.Clear();
}
inline float TGPriorBoxParameter::min_size(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.min_size)
  return min_size_.Get(index);
}
inline void TGPriorBoxParameter::set_min_size(int index, float value) {
  min_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGPriorBoxParameter.min_size)
}
inline void TGPriorBoxParameter::add_min_size(float value) {
  min_size_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGPriorBoxParameter.min_size)
}
inline const ::google::protobuf::RepeatedField< float >&
TGPriorBoxParameter::min_size() const {
  // @@protoc_insertion_point(field_list:bmnet.TGPriorBoxParameter.min_size)
  return min_size_;
}
inline ::google::protobuf::RepeatedField< float >*
TGPriorBoxParameter::mutable_min_size() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGPriorBoxParameter.min_size)
  return &min_size_;
}

// repeated float max_size = 2;
inline int TGPriorBoxParameter::max_size_size() const {
  return max_size_.size();
}
inline void TGPriorBoxParameter::clear_max_size() {
  max_size_.Clear();
}
inline float TGPriorBoxParameter::max_size(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.max_size)
  return max_size_.Get(index);
}
inline void TGPriorBoxParameter::set_max_size(int index, float value) {
  max_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGPriorBoxParameter.max_size)
}
inline void TGPriorBoxParameter::add_max_size(float value) {
  max_size_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGPriorBoxParameter.max_size)
}
inline const ::google::protobuf::RepeatedField< float >&
TGPriorBoxParameter::max_size() const {
  // @@protoc_insertion_point(field_list:bmnet.TGPriorBoxParameter.max_size)
  return max_size_;
}
inline ::google::protobuf::RepeatedField< float >*
TGPriorBoxParameter::mutable_max_size() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGPriorBoxParameter.max_size)
  return &max_size_;
}

// repeated float aspect_ratio = 3;
inline int TGPriorBoxParameter::aspect_ratio_size() const {
  return aspect_ratio_.size();
}
inline void TGPriorBoxParameter::clear_aspect_ratio() {
  aspect_ratio_.Clear();
}
inline float TGPriorBoxParameter::aspect_ratio(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.aspect_ratio)
  return aspect_ratio_.Get(index);
}
inline void TGPriorBoxParameter::set_aspect_ratio(int index, float value) {
  aspect_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGPriorBoxParameter.aspect_ratio)
}
inline void TGPriorBoxParameter::add_aspect_ratio(float value) {
  aspect_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGPriorBoxParameter.aspect_ratio)
}
inline const ::google::protobuf::RepeatedField< float >&
TGPriorBoxParameter::aspect_ratio() const {
  // @@protoc_insertion_point(field_list:bmnet.TGPriorBoxParameter.aspect_ratio)
  return aspect_ratio_;
}
inline ::google::protobuf::RepeatedField< float >*
TGPriorBoxParameter::mutable_aspect_ratio() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGPriorBoxParameter.aspect_ratio)
  return &aspect_ratio_;
}

// optional int32 num_priors = 4 [default = 0];
inline bool TGPriorBoxParameter::has_num_priors() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGPriorBoxParameter::set_has_num_priors() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGPriorBoxParameter::clear_has_num_priors() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGPriorBoxParameter::clear_num_priors() {
  num_priors_ = 0;
  clear_has_num_priors();
}
inline ::google::protobuf::int32 TGPriorBoxParameter::num_priors() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.num_priors)
  return num_priors_;
}
inline void TGPriorBoxParameter::set_num_priors(::google::protobuf::int32 value) {
  set_has_num_priors();
  num_priors_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPriorBoxParameter.num_priors)
}

// optional bool clip = 5 [default = false];
inline bool TGPriorBoxParameter::has_clip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGPriorBoxParameter::set_has_clip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGPriorBoxParameter::clear_has_clip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGPriorBoxParameter::clear_clip() {
  clip_ = false;
  clear_has_clip();
}
inline bool TGPriorBoxParameter::clip() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.clip)
  return clip_;
}
inline void TGPriorBoxParameter::set_clip(bool value) {
  set_has_clip();
  clip_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPriorBoxParameter.clip)
}

// repeated float variance = 6;
inline int TGPriorBoxParameter::variance_size() const {
  return variance_.size();
}
inline void TGPriorBoxParameter::clear_variance() {
  variance_.Clear();
}
inline float TGPriorBoxParameter::variance(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.variance)
  return variance_.Get(index);
}
inline void TGPriorBoxParameter::set_variance(int index, float value) {
  variance_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGPriorBoxParameter.variance)
}
inline void TGPriorBoxParameter::add_variance(float value) {
  variance_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGPriorBoxParameter.variance)
}
inline const ::google::protobuf::RepeatedField< float >&
TGPriorBoxParameter::variance() const {
  // @@protoc_insertion_point(field_list:bmnet.TGPriorBoxParameter.variance)
  return variance_;
}
inline ::google::protobuf::RepeatedField< float >*
TGPriorBoxParameter::mutable_variance() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGPriorBoxParameter.variance)
  return &variance_;
}

// optional uint32 img_h = 7;
inline bool TGPriorBoxParameter::has_img_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGPriorBoxParameter::set_has_img_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGPriorBoxParameter::clear_has_img_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGPriorBoxParameter::clear_img_h() {
  img_h_ = 0u;
  clear_has_img_h();
}
inline ::google::protobuf::uint32 TGPriorBoxParameter::img_h() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.img_h)
  return img_h_;
}
inline void TGPriorBoxParameter::set_img_h(::google::protobuf::uint32 value) {
  set_has_img_h();
  img_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPriorBoxParameter.img_h)
}

// optional uint32 img_w = 8;
inline bool TGPriorBoxParameter::has_img_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TGPriorBoxParameter::set_has_img_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TGPriorBoxParameter::clear_has_img_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TGPriorBoxParameter::clear_img_w() {
  img_w_ = 0u;
  clear_has_img_w();
}
inline ::google::protobuf::uint32 TGPriorBoxParameter::img_w() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.img_w)
  return img_w_;
}
inline void TGPriorBoxParameter::set_img_w(::google::protobuf::uint32 value) {
  set_has_img_w();
  img_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPriorBoxParameter.img_w)
}

// optional float step_h = 9;
inline bool TGPriorBoxParameter::has_step_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TGPriorBoxParameter::set_has_step_h() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TGPriorBoxParameter::clear_has_step_h() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TGPriorBoxParameter::clear_step_h() {
  step_h_ = 0;
  clear_has_step_h();
}
inline float TGPriorBoxParameter::step_h() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.step_h)
  return step_h_;
}
inline void TGPriorBoxParameter::set_step_h(float value) {
  set_has_step_h();
  step_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPriorBoxParameter.step_h)
}

// optional float step_w = 10;
inline bool TGPriorBoxParameter::has_step_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TGPriorBoxParameter::set_has_step_w() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TGPriorBoxParameter::clear_has_step_w() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TGPriorBoxParameter::clear_step_w() {
  step_w_ = 0;
  clear_has_step_w();
}
inline float TGPriorBoxParameter::step_w() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.step_w)
  return step_w_;
}
inline void TGPriorBoxParameter::set_step_w(float value) {
  set_has_step_w();
  step_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPriorBoxParameter.step_w)
}

// optional float offset = 13 [default = 0.5];
inline bool TGPriorBoxParameter::has_offset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TGPriorBoxParameter::set_has_offset() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TGPriorBoxParameter::clear_has_offset() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TGPriorBoxParameter::clear_offset() {
  offset_ = 0.5f;
  clear_has_offset();
}
inline float TGPriorBoxParameter::offset() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.offset)
  return offset_;
}
inline void TGPriorBoxParameter::set_offset(float value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPriorBoxParameter.offset)
}

// optional bool reduce_boxes = 14 [default = false];
inline bool TGPriorBoxParameter::has_reduce_boxes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TGPriorBoxParameter::set_has_reduce_boxes() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TGPriorBoxParameter::clear_has_reduce_boxes() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TGPriorBoxParameter::clear_reduce_boxes() {
  reduce_boxes_ = false;
  clear_has_reduce_boxes();
}
inline bool TGPriorBoxParameter::reduce_boxes() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.reduce_boxes)
  return reduce_boxes_;
}
inline void TGPriorBoxParameter::set_reduce_boxes(bool value) {
  set_has_reduce_boxes();
  reduce_boxes_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPriorBoxParameter.reduce_boxes)
}

// optional uint64 global_weight = 15 [default = 281474976710655];
inline bool TGPriorBoxParameter::has_global_weight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TGPriorBoxParameter::set_has_global_weight() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TGPriorBoxParameter::clear_has_global_weight() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TGPriorBoxParameter::clear_global_weight() {
  global_weight_ = GOOGLE_ULONGLONG(281474976710655);
  clear_has_global_weight();
}
inline ::google::protobuf::uint64 TGPriorBoxParameter::global_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPriorBoxParameter.global_weight)
  return global_weight_;
}
inline void TGPriorBoxParameter::set_global_weight(::google::protobuf::uint64 value) {
  set_has_global_weight();
  global_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPriorBoxParameter.global_weight)
}

// -------------------------------------------------------------------

// TGArithmeticParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGArithmeticParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGArithmeticParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGArithmeticParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGArithmeticParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGArithmeticParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGArithmeticParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGArithmeticParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGArithmeticParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGArithmeticParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGArithmeticParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGArithmeticParameter.dep_info)
}

// optional .bmnet.TGArithmeticParameter.ArithmeticOp operation = 1 [default = ADD];
inline bool TGArithmeticParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGArithmeticParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGArithmeticParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGArithmeticParameter::clear_operation() {
  operation_ = 0;
  clear_has_operation();
}
inline ::bmnet::TGArithmeticParameter_ArithmeticOp TGArithmeticParameter::operation() const {
  // @@protoc_insertion_point(field_get:bmnet.TGArithmeticParameter.operation)
  return static_cast< ::bmnet::TGArithmeticParameter_ArithmeticOp >(operation_);
}
inline void TGArithmeticParameter::set_operation(::bmnet::TGArithmeticParameter_ArithmeticOp value) {
  assert(::bmnet::TGArithmeticParameter_ArithmeticOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGArithmeticParameter.operation)
}

// optional bool is_b_const = 2 [default = false];
inline bool TGArithmeticParameter::has_is_b_const() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGArithmeticParameter::set_has_is_b_const() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGArithmeticParameter::clear_has_is_b_const() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGArithmeticParameter::clear_is_b_const() {
  is_b_const_ = false;
  clear_has_is_b_const();
}
inline bool TGArithmeticParameter::is_b_const() const {
  // @@protoc_insertion_point(field_get:bmnet.TGArithmeticParameter.is_b_const)
  return is_b_const_;
}
inline void TGArithmeticParameter::set_is_b_const(bool value) {
  set_has_is_b_const();
  is_b_const_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGArithmeticParameter.is_b_const)
}

// optional uint64 global_b = 3;
inline bool TGArithmeticParameter::has_global_b() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGArithmeticParameter::set_has_global_b() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGArithmeticParameter::clear_has_global_b() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGArithmeticParameter::clear_global_b() {
  global_b_ = GOOGLE_ULONGLONG(0);
  clear_has_global_b();
}
inline ::google::protobuf::uint64 TGArithmeticParameter::global_b() const {
  // @@protoc_insertion_point(field_get:bmnet.TGArithmeticParameter.global_b)
  return global_b_;
}
inline void TGArithmeticParameter::set_global_b(::google::protobuf::uint64 value) {
  set_has_global_b();
  global_b_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGArithmeticParameter.global_b)
}

// optional .bmnet.BlobShape b_shape = 4;
inline bool TGArithmeticParameter::has_b_shape() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGArithmeticParameter::set_has_b_shape() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGArithmeticParameter::clear_has_b_shape() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGArithmeticParameter::clear_b_shape() {
  if (b_shape_ != NULL) b_shape_->::bmnet::BlobShape::Clear();
  clear_has_b_shape();
}
inline const ::bmnet::BlobShape& TGArithmeticParameter::b_shape() const {
  // @@protoc_insertion_point(field_get:bmnet.TGArithmeticParameter.b_shape)
  return b_shape_ != NULL ? *b_shape_ : *default_instance_->b_shape_;
}
inline ::bmnet::BlobShape* TGArithmeticParameter::mutable_b_shape() {
  set_has_b_shape();
  if (b_shape_ == NULL) b_shape_ = new ::bmnet::BlobShape;
  // @@protoc_insertion_point(field_mutable:bmnet.TGArithmeticParameter.b_shape)
  return b_shape_;
}
inline ::bmnet::BlobShape* TGArithmeticParameter::release_b_shape() {
  clear_has_b_shape();
  ::bmnet::BlobShape* temp = b_shape_;
  b_shape_ = NULL;
  return temp;
}
inline void TGArithmeticParameter::set_allocated_b_shape(::bmnet::BlobShape* b_shape) {
  delete b_shape_;
  b_shape_ = b_shape;
  if (b_shape) {
    set_has_b_shape();
  } else {
    clear_has_b_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGArithmeticParameter.b_shape)
}

// -------------------------------------------------------------------

// TGResizeBilinearParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGResizeBilinearParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGResizeBilinearParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGResizeBilinearParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGResizeBilinearParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGResizeBilinearParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGResizeBilinearParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGResizeBilinearParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGResizeBilinearParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGResizeBilinearParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGResizeBilinearParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGResizeBilinearParameter.dep_info)
}

// optional uint32 resize_h = 1;
inline bool TGResizeBilinearParameter::has_resize_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGResizeBilinearParameter::set_has_resize_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGResizeBilinearParameter::clear_has_resize_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGResizeBilinearParameter::clear_resize_h() {
  resize_h_ = 0u;
  clear_has_resize_h();
}
inline ::google::protobuf::uint32 TGResizeBilinearParameter::resize_h() const {
  // @@protoc_insertion_point(field_get:bmnet.TGResizeBilinearParameter.resize_h)
  return resize_h_;
}
inline void TGResizeBilinearParameter::set_resize_h(::google::protobuf::uint32 value) {
  set_has_resize_h();
  resize_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGResizeBilinearParameter.resize_h)
}

// optional uint32 resize_w = 2;
inline bool TGResizeBilinearParameter::has_resize_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGResizeBilinearParameter::set_has_resize_w() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGResizeBilinearParameter::clear_has_resize_w() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGResizeBilinearParameter::clear_resize_w() {
  resize_w_ = 0u;
  clear_has_resize_w();
}
inline ::google::protobuf::uint32 TGResizeBilinearParameter::resize_w() const {
  // @@protoc_insertion_point(field_get:bmnet.TGResizeBilinearParameter.resize_w)
  return resize_w_;
}
inline void TGResizeBilinearParameter::set_resize_w(::google::protobuf::uint32 value) {
  set_has_resize_w();
  resize_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGResizeBilinearParameter.resize_w)
}

// optional uint32 global_weight = 3 [default = 4294967295];
inline bool TGResizeBilinearParameter::has_global_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGResizeBilinearParameter::set_has_global_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGResizeBilinearParameter::clear_has_global_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGResizeBilinearParameter::clear_global_weight() {
  global_weight_ = 4294967295u;
  clear_has_global_weight();
}
inline ::google::protobuf::uint32 TGResizeBilinearParameter::global_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.TGResizeBilinearParameter.global_weight)
  return global_weight_;
}
inline void TGResizeBilinearParameter::set_global_weight(::google::protobuf::uint32 value) {
  set_has_global_weight();
  global_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGResizeBilinearParameter.global_weight)
}

// -------------------------------------------------------------------

// TGShuffleChannelParameter

// optional uint32 group = 1 [default = 1];
inline bool TGShuffleChannelParameter::has_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGShuffleChannelParameter::set_has_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGShuffleChannelParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGShuffleChannelParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 TGShuffleChannelParameter::group() const {
  // @@protoc_insertion_point(field_get:bmnet.TGShuffleChannelParameter.group)
  return group_;
}
inline void TGShuffleChannelParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGShuffleChannelParameter.group)
}

// -------------------------------------------------------------------

// TGInterpParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGInterpParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGInterpParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGInterpParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGInterpParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGInterpParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInterpParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGInterpParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGInterpParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGInterpParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGInterpParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGInterpParameter.dep_info)
}

// optional uint32 pad_beg = 1;
inline bool TGInterpParameter::has_pad_beg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGInterpParameter::set_has_pad_beg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGInterpParameter::clear_has_pad_beg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGInterpParameter::clear_pad_beg() {
  pad_beg_ = 0u;
  clear_has_pad_beg();
}
inline ::google::protobuf::uint32 TGInterpParameter::pad_beg() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInterpParameter.pad_beg)
  return pad_beg_;
}
inline void TGInterpParameter::set_pad_beg(::google::protobuf::uint32 value) {
  set_has_pad_beg();
  pad_beg_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGInterpParameter.pad_beg)
}

// optional uint32 pad_end = 2;
inline bool TGInterpParameter::has_pad_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGInterpParameter::set_has_pad_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGInterpParameter::clear_has_pad_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGInterpParameter::clear_pad_end() {
  pad_end_ = 0u;
  clear_has_pad_end();
}
inline ::google::protobuf::uint32 TGInterpParameter::pad_end() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInterpParameter.pad_end)
  return pad_end_;
}
inline void TGInterpParameter::set_pad_end(::google::protobuf::uint32 value) {
  set_has_pad_end();
  pad_end_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGInterpParameter.pad_end)
}

// optional uint32 global_weight = 3 [default = 4294967295];
inline bool TGInterpParameter::has_global_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGInterpParameter::set_has_global_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGInterpParameter::clear_has_global_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGInterpParameter::clear_global_weight() {
  global_weight_ = 4294967295u;
  clear_has_global_weight();
}
inline ::google::protobuf::uint32 TGInterpParameter::global_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.TGInterpParameter.global_weight)
  return global_weight_;
}
inline void TGInterpParameter::set_global_weight(::google::protobuf::uint32 value) {
  set_has_global_weight();
  global_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGInterpParameter.global_weight)
}

// -------------------------------------------------------------------

// TGProposalParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGProposalParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGProposalParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGProposalParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGProposalParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGProposalParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGProposalParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGProposalParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGProposalParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGProposalParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGProposalParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGProposalParameter.dep_info)
}

// optional int32 feat_stride = 1 [default = 16];
inline bool TGProposalParameter::has_feat_stride() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGProposalParameter::set_has_feat_stride() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGProposalParameter::clear_has_feat_stride() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGProposalParameter::clear_feat_stride() {
  feat_stride_ = 16;
  clear_has_feat_stride();
}
inline ::google::protobuf::int32 TGProposalParameter::feat_stride() const {
  // @@protoc_insertion_point(field_get:bmnet.TGProposalParameter.feat_stride)
  return feat_stride_;
}
inline void TGProposalParameter::set_feat_stride(::google::protobuf::int32 value) {
  set_has_feat_stride();
  feat_stride_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGProposalParameter.feat_stride)
}

// optional uint32 pre_nms_topN = 2 [default = 6000];
inline bool TGProposalParameter::has_pre_nms_topn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGProposalParameter::set_has_pre_nms_topn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGProposalParameter::clear_has_pre_nms_topn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGProposalParameter::clear_pre_nms_topn() {
  pre_nms_topn_ = 6000u;
  clear_has_pre_nms_topn();
}
inline ::google::protobuf::uint32 TGProposalParameter::pre_nms_topn() const {
  // @@protoc_insertion_point(field_get:bmnet.TGProposalParameter.pre_nms_topN)
  return pre_nms_topn_;
}
inline void TGProposalParameter::set_pre_nms_topn(::google::protobuf::uint32 value) {
  set_has_pre_nms_topn();
  pre_nms_topn_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGProposalParameter.pre_nms_topN)
}

// optional uint32 post_nms_topN = 3 [default = 300];
inline bool TGProposalParameter::has_post_nms_topn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGProposalParameter::set_has_post_nms_topn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGProposalParameter::clear_has_post_nms_topn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGProposalParameter::clear_post_nms_topn() {
  post_nms_topn_ = 300u;
  clear_has_post_nms_topn();
}
inline ::google::protobuf::uint32 TGProposalParameter::post_nms_topn() const {
  // @@protoc_insertion_point(field_get:bmnet.TGProposalParameter.post_nms_topN)
  return post_nms_topn_;
}
inline void TGProposalParameter::set_post_nms_topn(::google::protobuf::uint32 value) {
  set_has_post_nms_topn();
  post_nms_topn_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGProposalParameter.post_nms_topN)
}

// optional float nms_thresh = 4 [default = 0.7];
inline bool TGProposalParameter::has_nms_thresh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGProposalParameter::set_has_nms_thresh() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGProposalParameter::clear_has_nms_thresh() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGProposalParameter::clear_nms_thresh() {
  nms_thresh_ = 0.7f;
  clear_has_nms_thresh();
}
inline float TGProposalParameter::nms_thresh() const {
  // @@protoc_insertion_point(field_get:bmnet.TGProposalParameter.nms_thresh)
  return nms_thresh_;
}
inline void TGProposalParameter::set_nms_thresh(float value) {
  set_has_nms_thresh();
  nms_thresh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGProposalParameter.nms_thresh)
}

// optional uint32 min_size = 5 [default = 16];
inline bool TGProposalParameter::has_min_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGProposalParameter::set_has_min_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGProposalParameter::clear_has_min_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGProposalParameter::clear_min_size() {
  min_size_ = 16u;
  clear_has_min_size();
}
inline ::google::protobuf::uint32 TGProposalParameter::min_size() const {
  // @@protoc_insertion_point(field_get:bmnet.TGProposalParameter.min_size)
  return min_size_;
}
inline void TGProposalParameter::set_min_size(::google::protobuf::uint32 value) {
  set_has_min_size();
  min_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGProposalParameter.min_size)
}

// optional uint32 base_size = 6 [default = 16];
inline bool TGProposalParameter::has_base_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGProposalParameter::set_has_base_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGProposalParameter::clear_has_base_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGProposalParameter::clear_base_size() {
  base_size_ = 16u;
  clear_has_base_size();
}
inline ::google::protobuf::uint32 TGProposalParameter::base_size() const {
  // @@protoc_insertion_point(field_get:bmnet.TGProposalParameter.base_size)
  return base_size_;
}
inline void TGProposalParameter::set_base_size(::google::protobuf::uint32 value) {
  set_has_base_size();
  base_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGProposalParameter.base_size)
}

// optional uint32 version = 7 [default = 2];
inline bool TGProposalParameter::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGProposalParameter::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGProposalParameter::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGProposalParameter::clear_version() {
  version_ = 2u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TGProposalParameter::version() const {
  // @@protoc_insertion_point(field_get:bmnet.TGProposalParameter.version)
  return version_;
}
inline void TGProposalParameter::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGProposalParameter.version)
}

// repeated float scale = 8 [packed = true];
inline int TGProposalParameter::scale_size() const {
  return scale_.size();
}
inline void TGProposalParameter::clear_scale() {
  scale_.Clear();
}
inline float TGProposalParameter::scale(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGProposalParameter.scale)
  return scale_.Get(index);
}
inline void TGProposalParameter::set_scale(int index, float value) {
  scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGProposalParameter.scale)
}
inline void TGProposalParameter::add_scale(float value) {
  scale_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGProposalParameter.scale)
}
inline const ::google::protobuf::RepeatedField< float >&
TGProposalParameter::scale() const {
  // @@protoc_insertion_point(field_list:bmnet.TGProposalParameter.scale)
  return scale_;
}
inline ::google::protobuf::RepeatedField< float >*
TGProposalParameter::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGProposalParameter.scale)
  return &scale_;
}

// repeated float ratio = 9 [packed = true];
inline int TGProposalParameter::ratio_size() const {
  return ratio_.size();
}
inline void TGProposalParameter::clear_ratio() {
  ratio_.Clear();
}
inline float TGProposalParameter::ratio(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGProposalParameter.ratio)
  return ratio_.Get(index);
}
inline void TGProposalParameter::set_ratio(int index, float value) {
  ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGProposalParameter.ratio)
}
inline void TGProposalParameter::add_ratio(float value) {
  ratio_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGProposalParameter.ratio)
}
inline const ::google::protobuf::RepeatedField< float >&
TGProposalParameter::ratio() const {
  // @@protoc_insertion_point(field_list:bmnet.TGProposalParameter.ratio)
  return ratio_;
}
inline ::google::protobuf::RepeatedField< float >*
TGProposalParameter::mutable_ratio() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGProposalParameter.ratio)
  return &ratio_;
}

// -------------------------------------------------------------------

// TGRoiPoolingParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGRoiPoolingParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGRoiPoolingParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGRoiPoolingParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGRoiPoolingParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGRoiPoolingParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGRoiPoolingParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGRoiPoolingParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGRoiPoolingParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGRoiPoolingParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGRoiPoolingParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGRoiPoolingParameter.dep_info)
}

// optional uint32 pooled_h = 1 [default = 0];
inline bool TGRoiPoolingParameter::has_pooled_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGRoiPoolingParameter::set_has_pooled_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGRoiPoolingParameter::clear_has_pooled_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGRoiPoolingParameter::clear_pooled_h() {
  pooled_h_ = 0u;
  clear_has_pooled_h();
}
inline ::google::protobuf::uint32 TGRoiPoolingParameter::pooled_h() const {
  // @@protoc_insertion_point(field_get:bmnet.TGRoiPoolingParameter.pooled_h)
  return pooled_h_;
}
inline void TGRoiPoolingParameter::set_pooled_h(::google::protobuf::uint32 value) {
  set_has_pooled_h();
  pooled_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGRoiPoolingParameter.pooled_h)
}

// optional uint32 pooled_w = 2 [default = 0];
inline bool TGRoiPoolingParameter::has_pooled_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGRoiPoolingParameter::set_has_pooled_w() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGRoiPoolingParameter::clear_has_pooled_w() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGRoiPoolingParameter::clear_pooled_w() {
  pooled_w_ = 0u;
  clear_has_pooled_w();
}
inline ::google::protobuf::uint32 TGRoiPoolingParameter::pooled_w() const {
  // @@protoc_insertion_point(field_get:bmnet.TGRoiPoolingParameter.pooled_w)
  return pooled_w_;
}
inline void TGRoiPoolingParameter::set_pooled_w(::google::protobuf::uint32 value) {
  set_has_pooled_w();
  pooled_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGRoiPoolingParameter.pooled_w)
}

// optional float spatial_scale = 3 [default = 1];
inline bool TGRoiPoolingParameter::has_spatial_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGRoiPoolingParameter::set_has_spatial_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGRoiPoolingParameter::clear_has_spatial_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGRoiPoolingParameter::clear_spatial_scale() {
  spatial_scale_ = 1;
  clear_has_spatial_scale();
}
inline float TGRoiPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.TGRoiPoolingParameter.spatial_scale)
  return spatial_scale_;
}
inline void TGRoiPoolingParameter::set_spatial_scale(float value) {
  set_has_spatial_scale();
  spatial_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGRoiPoolingParameter.spatial_scale)
}

// -------------------------------------------------------------------

// TGPSRoiPoolingParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGPSRoiPoolingParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGPSRoiPoolingParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGPSRoiPoolingParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGPSRoiPoolingParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGPSRoiPoolingParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPSRoiPoolingParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGPSRoiPoolingParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGPSRoiPoolingParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGPSRoiPoolingParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGPSRoiPoolingParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGPSRoiPoolingParameter.dep_info)
}

// required float spatial_scale = 1;
inline bool TGPSRoiPoolingParameter::has_spatial_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGPSRoiPoolingParameter::set_has_spatial_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGPSRoiPoolingParameter::clear_has_spatial_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGPSRoiPoolingParameter::clear_spatial_scale() {
  spatial_scale_ = 0;
  clear_has_spatial_scale();
}
inline float TGPSRoiPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPSRoiPoolingParameter.spatial_scale)
  return spatial_scale_;
}
inline void TGPSRoiPoolingParameter::set_spatial_scale(float value) {
  set_has_spatial_scale();
  spatial_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPSRoiPoolingParameter.spatial_scale)
}

// required int32 output_dim = 2;
inline bool TGPSRoiPoolingParameter::has_output_dim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGPSRoiPoolingParameter::set_has_output_dim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGPSRoiPoolingParameter::clear_has_output_dim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGPSRoiPoolingParameter::clear_output_dim() {
  output_dim_ = 0;
  clear_has_output_dim();
}
inline ::google::protobuf::int32 TGPSRoiPoolingParameter::output_dim() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPSRoiPoolingParameter.output_dim)
  return output_dim_;
}
inline void TGPSRoiPoolingParameter::set_output_dim(::google::protobuf::int32 value) {
  set_has_output_dim();
  output_dim_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPSRoiPoolingParameter.output_dim)
}

// required int32 group_size = 3;
inline bool TGPSRoiPoolingParameter::has_group_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGPSRoiPoolingParameter::set_has_group_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGPSRoiPoolingParameter::clear_has_group_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGPSRoiPoolingParameter::clear_group_size() {
  group_size_ = 0;
  clear_has_group_size();
}
inline ::google::protobuf::int32 TGPSRoiPoolingParameter::group_size() const {
  // @@protoc_insertion_point(field_get:bmnet.TGPSRoiPoolingParameter.group_size)
  return group_size_;
}
inline void TGPSRoiPoolingParameter::set_group_size(::google::protobuf::int32 value) {
  set_has_group_size();
  group_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGPSRoiPoolingParameter.group_size)
}

// -------------------------------------------------------------------

// TGTileParameter

// optional int32 axis = 1 [default = 1];
inline bool TGTileParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGTileParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGTileParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGTileParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 TGTileParameter::axis() const {
  // @@protoc_insertion_point(field_get:bmnet.TGTileParameter.axis)
  return axis_;
}
inline void TGTileParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGTileParameter.axis)
}

// optional int32 tiles = 2;
inline bool TGTileParameter::has_tiles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGTileParameter::set_has_tiles() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGTileParameter::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGTileParameter::clear_tiles() {
  tiles_ = 0;
  clear_has_tiles();
}
inline ::google::protobuf::int32 TGTileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:bmnet.TGTileParameter.tiles)
  return tiles_;
}
inline void TGTileParameter::set_tiles(::google::protobuf::int32 value) {
  set_has_tiles();
  tiles_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGTileParameter.tiles)
}

// -------------------------------------------------------------------

// TGDetectOutputParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGDetectOutputParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGDetectOutputParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGDetectOutputParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGDetectOutputParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGDetectOutputParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDetectOutputParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGDetectOutputParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGDetectOutputParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGDetectOutputParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGDetectOutputParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGDetectOutputParameter.dep_info)
}

// optional int32 num_classes = 1 [default = 21];
inline bool TGDetectOutputParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGDetectOutputParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGDetectOutputParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGDetectOutputParameter::clear_num_classes() {
  num_classes_ = 21;
  clear_has_num_classes();
}
inline ::google::protobuf::int32 TGDetectOutputParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDetectOutputParameter.num_classes)
  return num_classes_;
}
inline void TGDetectOutputParameter::set_num_classes(::google::protobuf::int32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGDetectOutputParameter.num_classes)
}

// optional bool share_location = 2 [default = true];
inline bool TGDetectOutputParameter::has_share_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGDetectOutputParameter::set_has_share_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGDetectOutputParameter::clear_has_share_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGDetectOutputParameter::clear_share_location() {
  share_location_ = true;
  clear_has_share_location();
}
inline bool TGDetectOutputParameter::share_location() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDetectOutputParameter.share_location)
  return share_location_;
}
inline void TGDetectOutputParameter::set_share_location(bool value) {
  set_has_share_location();
  share_location_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGDetectOutputParameter.share_location)
}

// optional int32 background_label_id = 3 [default = 0];
inline bool TGDetectOutputParameter::has_background_label_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGDetectOutputParameter::set_has_background_label_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGDetectOutputParameter::clear_has_background_label_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGDetectOutputParameter::clear_background_label_id() {
  background_label_id_ = 0;
  clear_has_background_label_id();
}
inline ::google::protobuf::int32 TGDetectOutputParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDetectOutputParameter.background_label_id)
  return background_label_id_;
}
inline void TGDetectOutputParameter::set_background_label_id(::google::protobuf::int32 value) {
  set_has_background_label_id();
  background_label_id_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGDetectOutputParameter.background_label_id)
}

// optional float nms_threshold = 4 [default = 0.45];
inline bool TGDetectOutputParameter::has_nms_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGDetectOutputParameter::set_has_nms_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGDetectOutputParameter::clear_has_nms_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGDetectOutputParameter::clear_nms_threshold() {
  nms_threshold_ = 0.45f;
  clear_has_nms_threshold();
}
inline float TGDetectOutputParameter::nms_threshold() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDetectOutputParameter.nms_threshold)
  return nms_threshold_;
}
inline void TGDetectOutputParameter::set_nms_threshold(float value) {
  set_has_nms_threshold();
  nms_threshold_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGDetectOutputParameter.nms_threshold)
}

// optional int32 top_k = 5 [default = 400];
inline bool TGDetectOutputParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGDetectOutputParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGDetectOutputParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGDetectOutputParameter::clear_top_k() {
  top_k_ = 400;
  clear_has_top_k();
}
inline ::google::protobuf::int32 TGDetectOutputParameter::top_k() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDetectOutputParameter.top_k)
  return top_k_;
}
inline void TGDetectOutputParameter::set_top_k(::google::protobuf::int32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGDetectOutputParameter.top_k)
}

// optional int32 code_type = 6 [default = 1];
inline bool TGDetectOutputParameter::has_code_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGDetectOutputParameter::set_has_code_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGDetectOutputParameter::clear_has_code_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGDetectOutputParameter::clear_code_type() {
  code_type_ = 1;
  clear_has_code_type();
}
inline ::google::protobuf::int32 TGDetectOutputParameter::code_type() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDetectOutputParameter.code_type)
  return code_type_;
}
inline void TGDetectOutputParameter::set_code_type(::google::protobuf::int32 value) {
  set_has_code_type();
  code_type_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGDetectOutputParameter.code_type)
}

// optional int32 keep_top_k = 7 [default = 200];
inline bool TGDetectOutputParameter::has_keep_top_k() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGDetectOutputParameter::set_has_keep_top_k() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGDetectOutputParameter::clear_has_keep_top_k() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGDetectOutputParameter::clear_keep_top_k() {
  keep_top_k_ = 200;
  clear_has_keep_top_k();
}
inline ::google::protobuf::int32 TGDetectOutputParameter::keep_top_k() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDetectOutputParameter.keep_top_k)
  return keep_top_k_;
}
inline void TGDetectOutputParameter::set_keep_top_k(::google::protobuf::int32 value) {
  set_has_keep_top_k();
  keep_top_k_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGDetectOutputParameter.keep_top_k)
}

// optional float confidence_threshold = 8 [default = 0.01];
inline bool TGDetectOutputParameter::has_confidence_threshold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TGDetectOutputParameter::set_has_confidence_threshold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TGDetectOutputParameter::clear_has_confidence_threshold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TGDetectOutputParameter::clear_confidence_threshold() {
  confidence_threshold_ = 0.01f;
  clear_has_confidence_threshold();
}
inline float TGDetectOutputParameter::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDetectOutputParameter.confidence_threshold)
  return confidence_threshold_;
}
inline void TGDetectOutputParameter::set_confidence_threshold(float value) {
  set_has_confidence_threshold();
  confidence_threshold_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGDetectOutputParameter.confidence_threshold)
}

// optional bool variance_encoded_in_target = 9 [default = false];
inline bool TGDetectOutputParameter::has_variance_encoded_in_target() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TGDetectOutputParameter::set_has_variance_encoded_in_target() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TGDetectOutputParameter::clear_has_variance_encoded_in_target() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TGDetectOutputParameter::clear_variance_encoded_in_target() {
  variance_encoded_in_target_ = false;
  clear_has_variance_encoded_in_target();
}
inline bool TGDetectOutputParameter::variance_encoded_in_target() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDetectOutputParameter.variance_encoded_in_target)
  return variance_encoded_in_target_;
}
inline void TGDetectOutputParameter::set_variance_encoded_in_target(bool value) {
  set_has_variance_encoded_in_target();
  variance_encoded_in_target_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGDetectOutputParameter.variance_encoded_in_target)
}

// optional float eta = 10 [default = 0];
inline bool TGDetectOutputParameter::has_eta() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TGDetectOutputParameter::set_has_eta() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TGDetectOutputParameter::clear_has_eta() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TGDetectOutputParameter::clear_eta() {
  eta_ = 0;
  clear_has_eta();
}
inline float TGDetectOutputParameter::eta() const {
  // @@protoc_insertion_point(field_get:bmnet.TGDetectOutputParameter.eta)
  return eta_;
}
inline void TGDetectOutputParameter::set_eta(float value) {
  set_has_eta();
  eta_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGDetectOutputParameter.eta)
}

// -------------------------------------------------------------------

// TGCustomizedParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGCustomizedParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGCustomizedParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGCustomizedParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGCustomizedParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGCustomizedParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGCustomizedParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGCustomizedParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGCustomizedParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGCustomizedParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGCustomizedParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGCustomizedParameter.dep_info)
}

// optional string sub_type = 1;
inline bool TGCustomizedParameter::has_sub_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGCustomizedParameter::set_has_sub_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGCustomizedParameter::clear_has_sub_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGCustomizedParameter::clear_sub_type() {
  if (sub_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_type_->clear();
  }
  clear_has_sub_type();
}
inline const ::std::string& TGCustomizedParameter::sub_type() const {
  // @@protoc_insertion_point(field_get:bmnet.TGCustomizedParameter.sub_type)
  return *sub_type_;
}
inline void TGCustomizedParameter::set_sub_type(const ::std::string& value) {
  set_has_sub_type();
  if (sub_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_type_ = new ::std::string;
  }
  sub_type_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.TGCustomizedParameter.sub_type)
}
inline void TGCustomizedParameter::set_sub_type(const char* value) {
  set_has_sub_type();
  if (sub_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_type_ = new ::std::string;
  }
  sub_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.TGCustomizedParameter.sub_type)
}
inline void TGCustomizedParameter::set_sub_type(const char* value, size_t size) {
  set_has_sub_type();
  if (sub_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_type_ = new ::std::string;
  }
  sub_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.TGCustomizedParameter.sub_type)
}
inline ::std::string* TGCustomizedParameter::mutable_sub_type() {
  set_has_sub_type();
  if (sub_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.TGCustomizedParameter.sub_type)
  return sub_type_;
}
inline ::std::string* TGCustomizedParameter::release_sub_type() {
  clear_has_sub_type();
  if (sub_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sub_type_;
    sub_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGCustomizedParameter::set_allocated_sub_type(::std::string* sub_type) {
  if (sub_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sub_type_;
  }
  if (sub_type) {
    set_has_sub_type();
    sub_type_ = sub_type;
  } else {
    clear_has_sub_type();
    sub_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGCustomizedParameter.sub_type)
}

// repeated int32 i32_param = 2;
inline int TGCustomizedParameter::i32_param_size() const {
  return i32_param_.size();
}
inline void TGCustomizedParameter::clear_i32_param() {
  i32_param_.Clear();
}
inline ::google::protobuf::int32 TGCustomizedParameter::i32_param(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGCustomizedParameter.i32_param)
  return i32_param_.Get(index);
}
inline void TGCustomizedParameter::set_i32_param(int index, ::google::protobuf::int32 value) {
  i32_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGCustomizedParameter.i32_param)
}
inline void TGCustomizedParameter::add_i32_param(::google::protobuf::int32 value) {
  i32_param_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGCustomizedParameter.i32_param)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TGCustomizedParameter::i32_param() const {
  // @@protoc_insertion_point(field_list:bmnet.TGCustomizedParameter.i32_param)
  return i32_param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TGCustomizedParameter::mutable_i32_param() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGCustomizedParameter.i32_param)
  return &i32_param_;
}

// repeated float f32_param = 3;
inline int TGCustomizedParameter::f32_param_size() const {
  return f32_param_.size();
}
inline void TGCustomizedParameter::clear_f32_param() {
  f32_param_.Clear();
}
inline float TGCustomizedParameter::f32_param(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGCustomizedParameter.f32_param)
  return f32_param_.Get(index);
}
inline void TGCustomizedParameter::set_f32_param(int index, float value) {
  f32_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGCustomizedParameter.f32_param)
}
inline void TGCustomizedParameter::add_f32_param(float value) {
  f32_param_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGCustomizedParameter.f32_param)
}
inline const ::google::protobuf::RepeatedField< float >&
TGCustomizedParameter::f32_param() const {
  // @@protoc_insertion_point(field_list:bmnet.TGCustomizedParameter.f32_param)
  return f32_param_;
}
inline ::google::protobuf::RepeatedField< float >*
TGCustomizedParameter::mutable_f32_param() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGCustomizedParameter.f32_param)
  return &f32_param_;
}

// -------------------------------------------------------------------

// TGYoloParameter

// optional int32 classes = 1 [default = 80];
inline bool TGYoloParameter::has_classes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGYoloParameter::set_has_classes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGYoloParameter::clear_has_classes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGYoloParameter::clear_classes() {
  classes_ = 80;
  clear_has_classes();
}
inline ::google::protobuf::int32 TGYoloParameter::classes() const {
  // @@protoc_insertion_point(field_get:bmnet.TGYoloParameter.classes)
  return classes_;
}
inline void TGYoloParameter::set_classes(::google::protobuf::int32 value) {
  set_has_classes();
  classes_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGYoloParameter.classes)
}

// -------------------------------------------------------------------

// TGRegionParameter

// optional int32 classes = 1 [default = 80];
inline bool TGRegionParameter::has_classes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGRegionParameter::set_has_classes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGRegionParameter::clear_has_classes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGRegionParameter::clear_classes() {
  classes_ = 80;
  clear_has_classes();
}
inline ::google::protobuf::int32 TGRegionParameter::classes() const {
  // @@protoc_insertion_point(field_get:bmnet.TGRegionParameter.classes)
  return classes_;
}
inline void TGRegionParameter::set_classes(::google::protobuf::int32 value) {
  set_has_classes();
  classes_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGRegionParameter.classes)
}

// optional int32 softmax = 2 [default = 1];
inline bool TGRegionParameter::has_softmax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGRegionParameter::set_has_softmax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGRegionParameter::clear_has_softmax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGRegionParameter::clear_softmax() {
  softmax_ = 1;
  clear_has_softmax();
}
inline ::google::protobuf::int32 TGRegionParameter::softmax() const {
  // @@protoc_insertion_point(field_get:bmnet.TGRegionParameter.softmax)
  return softmax_;
}
inline void TGRegionParameter::set_softmax(::google::protobuf::int32 value) {
  set_has_softmax();
  softmax_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGRegionParameter.softmax)
}

// optional int32 coords = 3 [default = 4];
inline bool TGRegionParameter::has_coords() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGRegionParameter::set_has_coords() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGRegionParameter::clear_has_coords() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGRegionParameter::clear_coords() {
  coords_ = 4;
  clear_has_coords();
}
inline ::google::protobuf::int32 TGRegionParameter::coords() const {
  // @@protoc_insertion_point(field_get:bmnet.TGRegionParameter.coords)
  return coords_;
}
inline void TGRegionParameter::set_coords(::google::protobuf::int32 value) {
  set_has_coords();
  coords_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGRegionParameter.coords)
}

// optional int32 num = 4 [default = 5];
inline bool TGRegionParameter::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGRegionParameter::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGRegionParameter::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGRegionParameter::clear_num() {
  num_ = 5;
  clear_has_num();
}
inline ::google::protobuf::int32 TGRegionParameter::num() const {
  // @@protoc_insertion_point(field_get:bmnet.TGRegionParameter.num)
  return num_;
}
inline void TGRegionParameter::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGRegionParameter.num)
}

// optional int32 background = 5 [default = 0];
inline bool TGRegionParameter::has_background() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGRegionParameter::set_has_background() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGRegionParameter::clear_has_background() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGRegionParameter::clear_background() {
  background_ = 0;
  clear_has_background();
}
inline ::google::protobuf::int32 TGRegionParameter::background() const {
  // @@protoc_insertion_point(field_get:bmnet.TGRegionParameter.background)
  return background_;
}
inline void TGRegionParameter::set_background(::google::protobuf::int32 value) {
  set_has_background();
  background_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGRegionParameter.background)
}

// -------------------------------------------------------------------

// TGClipParameter

// optional .bmnet.DependInfo dep_info = 999;
inline bool TGClipParameter::has_dep_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGClipParameter::set_has_dep_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGClipParameter::clear_has_dep_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGClipParameter::clear_dep_info() {
  if (dep_info_ != NULL) dep_info_->::bmnet::DependInfo::Clear();
  clear_has_dep_info();
}
inline const ::bmnet::DependInfo& TGClipParameter::dep_info() const {
  // @@protoc_insertion_point(field_get:bmnet.TGClipParameter.dep_info)
  return dep_info_ != NULL ? *dep_info_ : *default_instance_->dep_info_;
}
inline ::bmnet::DependInfo* TGClipParameter::mutable_dep_info() {
  set_has_dep_info();
  if (dep_info_ == NULL) dep_info_ = new ::bmnet::DependInfo;
  // @@protoc_insertion_point(field_mutable:bmnet.TGClipParameter.dep_info)
  return dep_info_;
}
inline ::bmnet::DependInfo* TGClipParameter::release_dep_info() {
  clear_has_dep_info();
  ::bmnet::DependInfo* temp = dep_info_;
  dep_info_ = NULL;
  return temp;
}
inline void TGClipParameter::set_allocated_dep_info(::bmnet::DependInfo* dep_info) {
  delete dep_info_;
  dep_info_ = dep_info;
  if (dep_info) {
    set_has_dep_info();
  } else {
    clear_has_dep_info();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.TGClipParameter.dep_info)
}

// optional float max = 1 [default = 3.4028235e+38];
inline bool TGClipParameter::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGClipParameter::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGClipParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGClipParameter::clear_max() {
  max_ = 3.4028235e+38f;
  clear_has_max();
}
inline float TGClipParameter::max() const {
  // @@protoc_insertion_point(field_get:bmnet.TGClipParameter.max)
  return max_;
}
inline void TGClipParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGClipParameter.max)
}

// optional float min = 2 [default = -3.4028235e+38];
inline bool TGClipParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGClipParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGClipParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGClipParameter::clear_min() {
  min_ = -3.4028235e+38f;
  clear_has_min();
}
inline float TGClipParameter::min() const {
  // @@protoc_insertion_point(field_get:bmnet.TGClipParameter.min)
  return min_;
}
inline void TGClipParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGClipParameter.min)
}

// -------------------------------------------------------------------

// TGYoloPostParameter

// optional int32 classes = 1 [default = 80];
inline bool TGYoloPostParameter::has_classes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGYoloPostParameter::set_has_classes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGYoloPostParameter::clear_has_classes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGYoloPostParameter::clear_classes() {
  classes_ = 80;
  clear_has_classes();
}
inline ::google::protobuf::int32 TGYoloPostParameter::classes() const {
  // @@protoc_insertion_point(field_get:bmnet.TGYoloPostParameter.classes)
  return classes_;
}
inline void TGYoloPostParameter::set_classes(::google::protobuf::int32 value) {
  set_has_classes();
  classes_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGYoloPostParameter.classes)
}

// optional int32 netw = 2 [default = 416];
inline bool TGYoloPostParameter::has_netw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGYoloPostParameter::set_has_netw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGYoloPostParameter::clear_has_netw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGYoloPostParameter::clear_netw() {
  netw_ = 416;
  clear_has_netw();
}
inline ::google::protobuf::int32 TGYoloPostParameter::netw() const {
  // @@protoc_insertion_point(field_get:bmnet.TGYoloPostParameter.netw)
  return netw_;
}
inline void TGYoloPostParameter::set_netw(::google::protobuf::int32 value) {
  set_has_netw();
  netw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGYoloPostParameter.netw)
}

// optional int32 neth = 3 [default = 416];
inline bool TGYoloPostParameter::has_neth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGYoloPostParameter::set_has_neth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGYoloPostParameter::clear_has_neth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGYoloPostParameter::clear_neth() {
  neth_ = 416;
  clear_has_neth();
}
inline ::google::protobuf::int32 TGYoloPostParameter::neth() const {
  // @@protoc_insertion_point(field_get:bmnet.TGYoloPostParameter.neth)
  return neth_;
}
inline void TGYoloPostParameter::set_neth(::google::protobuf::int32 value) {
  set_has_neth();
  neth_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGYoloPostParameter.neth)
}

// optional int32 num = 4 [default = 9];
inline bool TGYoloPostParameter::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGYoloPostParameter::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGYoloPostParameter::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGYoloPostParameter::clear_num() {
  num_ = 9;
  clear_has_num();
}
inline ::google::protobuf::int32 TGYoloPostParameter::num() const {
  // @@protoc_insertion_point(field_get:bmnet.TGYoloPostParameter.num)
  return num_;
}
inline void TGYoloPostParameter::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGYoloPostParameter.num)
}

// repeated int32 mask = 5;
inline int TGYoloPostParameter::mask_size() const {
  return mask_.size();
}
inline void TGYoloPostParameter::clear_mask() {
  mask_.Clear();
}
inline ::google::protobuf::int32 TGYoloPostParameter::mask(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGYoloPostParameter.mask)
  return mask_.Get(index);
}
inline void TGYoloPostParameter::set_mask(int index, ::google::protobuf::int32 value) {
  mask_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGYoloPostParameter.mask)
}
inline void TGYoloPostParameter::add_mask(::google::protobuf::int32 value) {
  mask_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGYoloPostParameter.mask)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TGYoloPostParameter::mask() const {
  // @@protoc_insertion_point(field_list:bmnet.TGYoloPostParameter.mask)
  return mask_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TGYoloPostParameter::mutable_mask() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGYoloPostParameter.mask)
  return &mask_;
}

// repeated int32 anchor = 6;
inline int TGYoloPostParameter::anchor_size() const {
  return anchor_.size();
}
inline void TGYoloPostParameter::clear_anchor() {
  anchor_.Clear();
}
inline ::google::protobuf::int32 TGYoloPostParameter::anchor(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.TGYoloPostParameter.anchor)
  return anchor_.Get(index);
}
inline void TGYoloPostParameter::set_anchor(int index, ::google::protobuf::int32 value) {
  anchor_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.TGYoloPostParameter.anchor)
}
inline void TGYoloPostParameter::add_anchor(::google::protobuf::int32 value) {
  anchor_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.TGYoloPostParameter.anchor)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TGYoloPostParameter::anchor() const {
  // @@protoc_insertion_point(field_list:bmnet.TGYoloPostParameter.anchor)
  return anchor_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TGYoloPostParameter::mutable_anchor() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.TGYoloPostParameter.anchor)
  return &anchor_;
}

// -------------------------------------------------------------------

// TGReverseParameter

// optional int32 axis = 1 [default = 0];
inline bool TGReverseParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGReverseParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGReverseParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGReverseParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 TGReverseParameter::axis() const {
  // @@protoc_insertion_point(field_get:bmnet.TGReverseParameter.axis)
  return axis_;
}
inline void TGReverseParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGReverseParameter.axis)
}

// -------------------------------------------------------------------

// TGLstmUnitParameter

// optional .bmnet.TGLstmUnitParameter.LstmDataOrder data_order = 1 [default = ORDER_IFGO];
inline bool TGLstmUnitParameter::has_data_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGLstmUnitParameter::set_has_data_order() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGLstmUnitParameter::clear_has_data_order() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGLstmUnitParameter::clear_data_order() {
  data_order_ = 0;
  clear_has_data_order();
}
inline ::bmnet::TGLstmUnitParameter_LstmDataOrder TGLstmUnitParameter::data_order() const {
  // @@protoc_insertion_point(field_get:bmnet.TGLstmUnitParameter.data_order)
  return static_cast< ::bmnet::TGLstmUnitParameter_LstmDataOrder >(data_order_);
}
inline void TGLstmUnitParameter::set_data_order(::bmnet::TGLstmUnitParameter_LstmDataOrder value) {
  assert(::bmnet::TGLstmUnitParameter_LstmDataOrder_IsValid(value));
  set_has_data_order();
  data_order_ = value;
  // @@protoc_insertion_point(field_set:bmnet.TGLstmUnitParameter.data_order)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bmnet

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bmnet::FillerParameter_VarianceNorm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::FillerParameter_VarianceNorm>() {
  return ::bmnet::FillerParameter_VarianceNorm_descriptor();
}
template <> struct is_proto_enum< ::bmnet::TLLrnParameter_NormRegion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::TLLrnParameter_NormRegion>() {
  return ::bmnet::TLLrnParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::bmnet::TLTransportParameter_TransportDataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::TLTransportParameter_TransportDataType>() {
  return ::bmnet::TLTransportParameter_TransportDataType_descriptor();
}
template <> struct is_proto_enum< ::bmnet::TLTransportParameter_TransportStage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::TLTransportParameter_TransportStage>() {
  return ::bmnet::TLTransportParameter_TransportStage_descriptor();
}
template <> struct is_proto_enum< ::bmnet::TLTransportParameter_TransportDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::TLTransportParameter_TransportDirection>() {
  return ::bmnet::TLTransportParameter_TransportDirection_descriptor();
}
template <> struct is_proto_enum< ::bmnet::TLArithmeticParameter_ArithmeticOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::TLArithmeticParameter_ArithmeticOp>() {
  return ::bmnet::TLArithmeticParameter_ArithmeticOp_descriptor();
}
template <> struct is_proto_enum< ::bmnet::TGPoolingParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::TGPoolingParameter_PoolMethod>() {
  return ::bmnet::TGPoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::bmnet::TGEltwiseParameter_EltwiseOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::TGEltwiseParameter_EltwiseOp>() {
  return ::bmnet::TGEltwiseParameter_EltwiseOp_descriptor();
}
template <> struct is_proto_enum< ::bmnet::TGLRNParameter_NormRegion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::TGLRNParameter_NormRegion>() {
  return ::bmnet::TGLRNParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::bmnet::TGReductionParameter_ReductionOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::TGReductionParameter_ReductionOp>() {
  return ::bmnet::TGReductionParameter_ReductionOp_descriptor();
}
template <> struct is_proto_enum< ::bmnet::TGArithmeticParameter_ArithmeticOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::TGArithmeticParameter_ArithmeticOp>() {
  return ::bmnet::TGArithmeticParameter_ArithmeticOp_descriptor();
}
template <> struct is_proto_enum< ::bmnet::TGLstmUnitParameter_LstmDataOrder> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::TGLstmUnitParameter_LstmDataOrder>() {
  return ::bmnet::TGLstmUnitParameter_LstmDataOrder_descriptor();
}
template <> struct is_proto_enum< ::bmnet::ActivationMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::ActivationMethod>() {
  return ::bmnet::ActivationMethod_descriptor();
}
template <> struct is_proto_enum< ::bmnet::TGDataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::TGDataType>() {
  return ::bmnet::TGDataType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bmnet_2fbmnet_2eproto__INCLUDED
