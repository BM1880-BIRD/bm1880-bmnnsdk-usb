// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bmnet/common_calibration.proto

#ifndef PROTOBUF_bmnet_2fcommon_5fcalibration_2eproto__INCLUDED
#define PROTOBUF_bmnet_2fcommon_5fcalibration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bmnet_2fcommon_5fcalibration_2eproto();
void protobuf_AssignDesc_bmnet_2fcommon_5fcalibration_2eproto();
void protobuf_ShutdownFile_bmnet_2fcommon_5fcalibration_2eproto();

class ConvolutionCalibrationCalibrationParameter;
class InnerProductCalibrationParameter;
class PoolingCalibrationParameter;
class ReLUCalibrationParameter;
class PReLUCalibrationParameter;
class ConcatCalibrationParameter;
class LayerCalibrationParameter;
class BlobParameter;
class NetCalibrationParameter;

// ===================================================================

class ConvolutionCalibrationCalibrationParameter : public ::google::protobuf::Message {
 public:
  ConvolutionCalibrationCalibrationParameter();
  virtual ~ConvolutionCalibrationCalibrationParameter();

  ConvolutionCalibrationCalibrationParameter(const ConvolutionCalibrationCalibrationParameter& from);

  inline ConvolutionCalibrationCalibrationParameter& operator=(const ConvolutionCalibrationCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionCalibrationCalibrationParameter& default_instance();

  void Swap(ConvolutionCalibrationCalibrationParameter* other);

  // implements Message ----------------------------------------------

  ConvolutionCalibrationCalibrationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvolutionCalibrationCalibrationParameter& from);
  void MergeFrom(const ConvolutionCalibrationCalibrationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bn_right_shift_width = 1;
  inline bool has_bn_right_shift_width() const;
  inline void clear_bn_right_shift_width();
  static const int kBnRightShiftWidthFieldNumber = 1;
  inline ::google::protobuf::int32 bn_right_shift_width() const;
  inline void set_bn_right_shift_width(::google::protobuf::int32 value);

  // optional int32 scale_right_shift_width = 2;
  inline bool has_scale_right_shift_width() const;
  inline void clear_scale_right_shift_width();
  static const int kScaleRightShiftWidthFieldNumber = 2;
  inline ::google::protobuf::int32 scale_right_shift_width() const;
  inline void set_scale_right_shift_width(::google::protobuf::int32 value);

  // optional .PReLUCalibrationParameter prelu_param = 3;
  inline bool has_prelu_param() const;
  inline void clear_prelu_param();
  static const int kPreluParamFieldNumber = 3;
  inline const ::PReLUCalibrationParameter& prelu_param() const;
  inline ::PReLUCalibrationParameter* mutable_prelu_param();
  inline ::PReLUCalibrationParameter* release_prelu_param();
  inline void set_allocated_prelu_param(::PReLUCalibrationParameter* prelu_param);

  // optional .ReLUCalibrationParameter relu_param = 4;
  inline bool has_relu_param() const;
  inline void clear_relu_param();
  static const int kReluParamFieldNumber = 4;
  inline const ::ReLUCalibrationParameter& relu_param() const;
  inline ::ReLUCalibrationParameter* mutable_relu_param();
  inline ::ReLUCalibrationParameter* release_relu_param();
  inline void set_allocated_relu_param(::ReLUCalibrationParameter* relu_param);

  // @@protoc_insertion_point(class_scope:ConvolutionCalibrationCalibrationParameter)
 private:
  inline void set_has_bn_right_shift_width();
  inline void clear_has_bn_right_shift_width();
  inline void set_has_scale_right_shift_width();
  inline void clear_has_scale_right_shift_width();
  inline void set_has_prelu_param();
  inline void clear_has_prelu_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 bn_right_shift_width_;
  ::google::protobuf::int32 scale_right_shift_width_;
  ::PReLUCalibrationParameter* prelu_param_;
  ::ReLUCalibrationParameter* relu_param_;
  friend void  protobuf_AddDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fcommon_5fcalibration_2eproto();

  void InitAsDefaultInstance();
  static ConvolutionCalibrationCalibrationParameter* default_instance_;
};
// -------------------------------------------------------------------

class InnerProductCalibrationParameter : public ::google::protobuf::Message {
 public:
  InnerProductCalibrationParameter();
  virtual ~InnerProductCalibrationParameter();

  InnerProductCalibrationParameter(const InnerProductCalibrationParameter& from);

  inline InnerProductCalibrationParameter& operator=(const InnerProductCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductCalibrationParameter& default_instance();

  void Swap(InnerProductCalibrationParameter* other);

  // implements Message ----------------------------------------------

  InnerProductCalibrationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerProductCalibrationParameter& from);
  void MergeFrom(const InnerProductCalibrationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PReLUCalibrationParameter prelu_param = 3;
  inline bool has_prelu_param() const;
  inline void clear_prelu_param();
  static const int kPreluParamFieldNumber = 3;
  inline const ::PReLUCalibrationParameter& prelu_param() const;
  inline ::PReLUCalibrationParameter* mutable_prelu_param();
  inline ::PReLUCalibrationParameter* release_prelu_param();
  inline void set_allocated_prelu_param(::PReLUCalibrationParameter* prelu_param);

  // @@protoc_insertion_point(class_scope:InnerProductCalibrationParameter)
 private:
  inline void set_has_prelu_param();
  inline void clear_has_prelu_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PReLUCalibrationParameter* prelu_param_;
  friend void  protobuf_AddDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fcommon_5fcalibration_2eproto();

  void InitAsDefaultInstance();
  static InnerProductCalibrationParameter* default_instance_;
};
// -------------------------------------------------------------------

class PoolingCalibrationParameter : public ::google::protobuf::Message {
 public:
  PoolingCalibrationParameter();
  virtual ~PoolingCalibrationParameter();

  PoolingCalibrationParameter(const PoolingCalibrationParameter& from);

  inline PoolingCalibrationParameter& operator=(const PoolingCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingCalibrationParameter& default_instance();

  void Swap(PoolingCalibrationParameter* other);

  // implements Message ----------------------------------------------

  PoolingCalibrationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolingCalibrationParameter& from);
  void MergeFrom(const PoolingCalibrationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PoolingCalibrationParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fcommon_5fcalibration_2eproto();

  void InitAsDefaultInstance();
  static PoolingCalibrationParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReLUCalibrationParameter : public ::google::protobuf::Message {
 public:
  ReLUCalibrationParameter();
  virtual ~ReLUCalibrationParameter();

  ReLUCalibrationParameter(const ReLUCalibrationParameter& from);

  inline ReLUCalibrationParameter& operator=(const ReLUCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUCalibrationParameter& default_instance();

  void Swap(ReLUCalibrationParameter* other);

  // implements Message ----------------------------------------------

  ReLUCalibrationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReLUCalibrationParameter& from);
  void MergeFrom(const ReLUCalibrationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gt_scale = 1;
  inline bool has_gt_scale() const;
  inline void clear_gt_scale();
  static const int kGtScaleFieldNumber = 1;
  inline ::google::protobuf::int32 gt_scale() const;
  inline void set_gt_scale(::google::protobuf::int32 value);

  // required int32 le_scale = 2;
  inline bool has_le_scale() const;
  inline void clear_le_scale();
  static const int kLeScaleFieldNumber = 2;
  inline ::google::protobuf::int32 le_scale() const;
  inline void set_le_scale(::google::protobuf::int32 value);

  // required int32 gt_right_shift_width = 3;
  inline bool has_gt_right_shift_width() const;
  inline void clear_gt_right_shift_width();
  static const int kGtRightShiftWidthFieldNumber = 3;
  inline ::google::protobuf::int32 gt_right_shift_width() const;
  inline void set_gt_right_shift_width(::google::protobuf::int32 value);

  // required int32 le_right_shift_width = 4;
  inline bool has_le_right_shift_width() const;
  inline void clear_le_right_shift_width();
  static const int kLeRightShiftWidthFieldNumber = 4;
  inline ::google::protobuf::int32 le_right_shift_width() const;
  inline void set_le_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReLUCalibrationParameter)
 private:
  inline void set_has_gt_scale();
  inline void clear_has_gt_scale();
  inline void set_has_le_scale();
  inline void clear_has_le_scale();
  inline void set_has_gt_right_shift_width();
  inline void clear_has_gt_right_shift_width();
  inline void set_has_le_right_shift_width();
  inline void clear_has_le_right_shift_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 gt_scale_;
  ::google::protobuf::int32 le_scale_;
  ::google::protobuf::int32 gt_right_shift_width_;
  ::google::protobuf::int32 le_right_shift_width_;
  friend void  protobuf_AddDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fcommon_5fcalibration_2eproto();

  void InitAsDefaultInstance();
  static ReLUCalibrationParameter* default_instance_;
};
// -------------------------------------------------------------------

class PReLUCalibrationParameter : public ::google::protobuf::Message {
 public:
  PReLUCalibrationParameter();
  virtual ~PReLUCalibrationParameter();

  PReLUCalibrationParameter(const PReLUCalibrationParameter& from);

  inline PReLUCalibrationParameter& operator=(const PReLUCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PReLUCalibrationParameter& default_instance();

  void Swap(PReLUCalibrationParameter* other);

  // implements Message ----------------------------------------------

  PReLUCalibrationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PReLUCalibrationParameter& from);
  void MergeFrom(const PReLUCalibrationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gt_scale = 1;
  inline bool has_gt_scale() const;
  inline void clear_gt_scale();
  static const int kGtScaleFieldNumber = 1;
  inline ::google::protobuf::int32 gt_scale() const;
  inline void set_gt_scale(::google::protobuf::int32 value);

  // required int32 gt_right_shift_width = 2;
  inline bool has_gt_right_shift_width() const;
  inline void clear_gt_right_shift_width();
  static const int kGtRightShiftWidthFieldNumber = 2;
  inline ::google::protobuf::int32 gt_right_shift_width() const;
  inline void set_gt_right_shift_width(::google::protobuf::int32 value);

  // required int32 le_right_shift_width = 3;
  inline bool has_le_right_shift_width() const;
  inline void clear_le_right_shift_width();
  static const int kLeRightShiftWidthFieldNumber = 3;
  inline ::google::protobuf::int32 le_right_shift_width() const;
  inline void set_le_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PReLUCalibrationParameter)
 private:
  inline void set_has_gt_scale();
  inline void clear_has_gt_scale();
  inline void set_has_gt_right_shift_width();
  inline void clear_has_gt_right_shift_width();
  inline void set_has_le_right_shift_width();
  inline void clear_has_le_right_shift_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 gt_scale_;
  ::google::protobuf::int32 gt_right_shift_width_;
  ::google::protobuf::int32 le_right_shift_width_;
  friend void  protobuf_AddDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fcommon_5fcalibration_2eproto();

  void InitAsDefaultInstance();
  static PReLUCalibrationParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConcatCalibrationParameter : public ::google::protobuf::Message {
 public:
  ConcatCalibrationParameter();
  virtual ~ConcatCalibrationParameter();

  ConcatCalibrationParameter(const ConcatCalibrationParameter& from);

  inline ConcatCalibrationParameter& operator=(const ConcatCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatCalibrationParameter& default_instance();

  void Swap(ConcatCalibrationParameter* other);

  // implements Message ----------------------------------------------

  ConcatCalibrationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConcatCalibrationParameter& from);
  void MergeFrom(const ConcatCalibrationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 right_shift_width = 1;
  inline int right_shift_width_size() const;
  inline void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 1;
  inline ::google::protobuf::int32 right_shift_width(int index) const;
  inline void set_right_shift_width(int index, ::google::protobuf::int32 value);
  inline void add_right_shift_width(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      right_shift_width() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_right_shift_width();

  // repeated int32 threshold_x_quantized = 2;
  inline int threshold_x_quantized_size() const;
  inline void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 2;
  inline ::google::protobuf::int32 threshold_x_quantized(int index) const;
  inline void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  inline void add_threshold_x_quantized(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // required int32 need_quantize_num = 3 [default = 0];
  inline bool has_need_quantize_num() const;
  inline void clear_need_quantize_num();
  static const int kNeedQuantizeNumFieldNumber = 3;
  inline ::google::protobuf::int32 need_quantize_num() const;
  inline void set_need_quantize_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ConcatCalibrationParameter)
 private:
  inline void set_has_need_quantize_num();
  inline void clear_has_need_quantize_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > right_shift_width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::int32 need_quantize_num_;
  friend void  protobuf_AddDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fcommon_5fcalibration_2eproto();

  void InitAsDefaultInstance();
  static ConcatCalibrationParameter* default_instance_;
};
// -------------------------------------------------------------------

class LayerCalibrationParameter : public ::google::protobuf::Message {
 public:
  LayerCalibrationParameter();
  virtual ~LayerCalibrationParameter();

  LayerCalibrationParameter(const LayerCalibrationParameter& from);

  inline LayerCalibrationParameter& operator=(const LayerCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerCalibrationParameter& default_instance();

  void Swap(LayerCalibrationParameter* other);

  // implements Message ----------------------------------------------

  LayerCalibrationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerCalibrationParameter& from);
  void MergeFrom(const LayerCalibrationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated float threshold_y = 2;
  inline int threshold_y_size() const;
  inline void clear_threshold_y();
  static const int kThresholdYFieldNumber = 2;
  inline float threshold_y(int index) const;
  inline void set_threshold_y(int index, float value);
  inline void add_threshold_y(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      threshold_y() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_threshold_y();

  // optional int32 right_shift_width = 3;
  inline bool has_right_shift_width() const;
  inline void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 3;
  inline ::google::protobuf::int32 right_shift_width() const;
  inline void set_right_shift_width(::google::protobuf::int32 value);

  // repeated int32 threshold_x_quantized = 4;
  inline int threshold_x_quantized_size() const;
  inline void clear_threshold_x_quantized();
  static const int kThresholdXQuantizedFieldNumber = 4;
  inline ::google::protobuf::int32 threshold_x_quantized(int index) const;
  inline void set_threshold_x_quantized(int index, ::google::protobuf::int32 value);
  inline void add_threshold_x_quantized(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold_x_quantized() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold_x_quantized();

  // repeated .BlobParameter blob_param = 5;
  inline int blob_param_size() const;
  inline void clear_blob_param();
  static const int kBlobParamFieldNumber = 5;
  inline const ::BlobParameter& blob_param(int index) const;
  inline ::BlobParameter* mutable_blob_param(int index);
  inline ::BlobParameter* add_blob_param();
  inline const ::google::protobuf::RepeatedPtrField< ::BlobParameter >&
      blob_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::BlobParameter >*
      mutable_blob_param();

  // optional int32 fusion_skipped = 6;
  inline bool has_fusion_skipped() const;
  inline void clear_fusion_skipped();
  static const int kFusionSkippedFieldNumber = 6;
  inline ::google::protobuf::int32 fusion_skipped() const;
  inline void set_fusion_skipped(::google::protobuf::int32 value);

  // repeated bool bottom_unsigned = 7;
  inline int bottom_unsigned_size() const;
  inline void clear_bottom_unsigned();
  static const int kBottomUnsignedFieldNumber = 7;
  inline bool bottom_unsigned(int index) const;
  inline void set_bottom_unsigned(int index, bool value);
  inline void add_bottom_unsigned(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      bottom_unsigned() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_bottom_unsigned();

  // repeated bool top_unsigned = 8;
  inline int top_unsigned_size() const;
  inline void clear_top_unsigned();
  static const int kTopUnsignedFieldNumber = 8;
  inline bool top_unsigned(int index) const;
  inline void set_top_unsigned(int index, bool value);
  inline void add_top_unsigned(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      top_unsigned() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_top_unsigned();

  // optional .ConvolutionCalibrationCalibrationParameter convolution_param = 106;
  inline bool has_convolution_param() const;
  inline void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 106;
  inline const ::ConvolutionCalibrationCalibrationParameter& convolution_param() const;
  inline ::ConvolutionCalibrationCalibrationParameter* mutable_convolution_param();
  inline ::ConvolutionCalibrationCalibrationParameter* release_convolution_param();
  inline void set_allocated_convolution_param(::ConvolutionCalibrationCalibrationParameter* convolution_param);

  // optional .InnerProductCalibrationParameter inner_product_param = 117;
  inline bool has_inner_product_param() const;
  inline void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 117;
  inline const ::InnerProductCalibrationParameter& inner_product_param() const;
  inline ::InnerProductCalibrationParameter* mutable_inner_product_param();
  inline ::InnerProductCalibrationParameter* release_inner_product_param();
  inline void set_allocated_inner_product_param(::InnerProductCalibrationParameter* inner_product_param);

  // optional .PoolingCalibrationParameter pooling_param = 121;
  inline bool has_pooling_param() const;
  inline void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 121;
  inline const ::PoolingCalibrationParameter& pooling_param() const;
  inline ::PoolingCalibrationParameter* mutable_pooling_param();
  inline ::PoolingCalibrationParameter* release_pooling_param();
  inline void set_allocated_pooling_param(::PoolingCalibrationParameter* pooling_param);

  // optional .ReLUCalibrationParameter relu_param = 123;
  inline bool has_relu_param() const;
  inline void clear_relu_param();
  static const int kReluParamFieldNumber = 123;
  inline const ::ReLUCalibrationParameter& relu_param() const;
  inline ::ReLUCalibrationParameter* mutable_relu_param();
  inline ::ReLUCalibrationParameter* release_relu_param();
  inline void set_allocated_relu_param(::ReLUCalibrationParameter* relu_param);

  // optional .PReLUCalibrationParameter prelu_param = 124;
  inline bool has_prelu_param() const;
  inline void clear_prelu_param();
  static const int kPreluParamFieldNumber = 124;
  inline const ::PReLUCalibrationParameter& prelu_param() const;
  inline ::PReLUCalibrationParameter* mutable_prelu_param();
  inline ::PReLUCalibrationParameter* release_prelu_param();
  inline void set_allocated_prelu_param(::PReLUCalibrationParameter* prelu_param);

  // optional .ConcatCalibrationParameter concat_param = 125;
  inline bool has_concat_param() const;
  inline void clear_concat_param();
  static const int kConcatParamFieldNumber = 125;
  inline const ::ConcatCalibrationParameter& concat_param() const;
  inline ::ConcatCalibrationParameter* mutable_concat_param();
  inline ::ConcatCalibrationParameter* release_concat_param();
  inline void set_allocated_concat_param(::ConcatCalibrationParameter* concat_param);

  // @@protoc_insertion_point(class_scope:LayerCalibrationParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_right_shift_width();
  inline void clear_has_right_shift_width();
  inline void set_has_fusion_skipped();
  inline void clear_has_fusion_skipped();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_prelu_param();
  inline void clear_has_prelu_param();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< float > threshold_y_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_x_quantized_;
  ::google::protobuf::int32 right_shift_width_;
  ::google::protobuf::int32 fusion_skipped_;
  ::google::protobuf::RepeatedPtrField< ::BlobParameter > blob_param_;
  ::google::protobuf::RepeatedField< bool > bottom_unsigned_;
  ::google::protobuf::RepeatedField< bool > top_unsigned_;
  ::ConvolutionCalibrationCalibrationParameter* convolution_param_;
  ::InnerProductCalibrationParameter* inner_product_param_;
  ::PoolingCalibrationParameter* pooling_param_;
  ::ReLUCalibrationParameter* relu_param_;
  ::PReLUCalibrationParameter* prelu_param_;
  ::ConcatCalibrationParameter* concat_param_;
  friend void  protobuf_AddDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fcommon_5fcalibration_2eproto();

  void InitAsDefaultInstance();
  static LayerCalibrationParameter* default_instance_;
};
// -------------------------------------------------------------------

class BlobParameter : public ::google::protobuf::Message {
 public:
  BlobParameter();
  virtual ~BlobParameter();

  BlobParameter(const BlobParameter& from);

  inline BlobParameter& operator=(const BlobParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobParameter& default_instance();

  void Swap(BlobParameter* other);

  // implements Message ----------------------------------------------

  BlobParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobParameter& from);
  void MergeFrom(const BlobParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required float threshold_y = 2;
  inline bool has_threshold_y() const;
  inline void clear_threshold_y();
  static const int kThresholdYFieldNumber = 2;
  inline float threshold_y() const;
  inline void set_threshold_y(float value);

  // optional int32 right_shift_width = 3;
  inline bool has_right_shift_width() const;
  inline void clear_right_shift_width();
  static const int kRightShiftWidthFieldNumber = 3;
  inline ::google::protobuf::int32 right_shift_width() const;
  inline void set_right_shift_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BlobParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_threshold_y();
  inline void clear_has_threshold_y();
  inline void set_has_right_shift_width();
  inline void clear_has_right_shift_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  float threshold_y_;
  ::google::protobuf::int32 right_shift_width_;
  friend void  protobuf_AddDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fcommon_5fcalibration_2eproto();

  void InitAsDefaultInstance();
  static BlobParameter* default_instance_;
};
// -------------------------------------------------------------------

class NetCalibrationParameter : public ::google::protobuf::Message {
 public:
  NetCalibrationParameter();
  virtual ~NetCalibrationParameter();

  NetCalibrationParameter(const NetCalibrationParameter& from);

  inline NetCalibrationParameter& operator=(const NetCalibrationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetCalibrationParameter& default_instance();

  void Swap(NetCalibrationParameter* other);

  // implements Message ----------------------------------------------

  NetCalibrationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetCalibrationParameter& from);
  void MergeFrom(const NetCalibrationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .LayerCalibrationParameter layer = 100;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 100;
  inline const ::LayerCalibrationParameter& layer(int index) const;
  inline ::LayerCalibrationParameter* mutable_layer(int index);
  inline ::LayerCalibrationParameter* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::LayerCalibrationParameter >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::LayerCalibrationParameter >*
      mutable_layer();

  // @@protoc_insertion_point(class_scope:NetCalibrationParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::LayerCalibrationParameter > layer_;
  friend void  protobuf_AddDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_AssignDesc_bmnet_2fcommon_5fcalibration_2eproto();
  friend void protobuf_ShutdownFile_bmnet_2fcommon_5fcalibration_2eproto();

  void InitAsDefaultInstance();
  static NetCalibrationParameter* default_instance_;
};
// ===================================================================


// ===================================================================

// ConvolutionCalibrationCalibrationParameter

// optional int32 bn_right_shift_width = 1;
inline bool ConvolutionCalibrationCalibrationParameter::has_bn_right_shift_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionCalibrationCalibrationParameter::set_has_bn_right_shift_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_has_bn_right_shift_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_bn_right_shift_width() {
  bn_right_shift_width_ = 0;
  clear_has_bn_right_shift_width();
}
inline ::google::protobuf::int32 ConvolutionCalibrationCalibrationParameter::bn_right_shift_width() const {
  // @@protoc_insertion_point(field_get:ConvolutionCalibrationCalibrationParameter.bn_right_shift_width)
  return bn_right_shift_width_;
}
inline void ConvolutionCalibrationCalibrationParameter::set_bn_right_shift_width(::google::protobuf::int32 value) {
  set_has_bn_right_shift_width();
  bn_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionCalibrationCalibrationParameter.bn_right_shift_width)
}

// optional int32 scale_right_shift_width = 2;
inline bool ConvolutionCalibrationCalibrationParameter::has_scale_right_shift_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionCalibrationCalibrationParameter::set_has_scale_right_shift_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_has_scale_right_shift_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_scale_right_shift_width() {
  scale_right_shift_width_ = 0;
  clear_has_scale_right_shift_width();
}
inline ::google::protobuf::int32 ConvolutionCalibrationCalibrationParameter::scale_right_shift_width() const {
  // @@protoc_insertion_point(field_get:ConvolutionCalibrationCalibrationParameter.scale_right_shift_width)
  return scale_right_shift_width_;
}
inline void ConvolutionCalibrationCalibrationParameter::set_scale_right_shift_width(::google::protobuf::int32 value) {
  set_has_scale_right_shift_width();
  scale_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionCalibrationCalibrationParameter.scale_right_shift_width)
}

// optional .PReLUCalibrationParameter prelu_param = 3;
inline bool ConvolutionCalibrationCalibrationParameter::has_prelu_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvolutionCalibrationCalibrationParameter::set_has_prelu_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_has_prelu_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::PReLUCalibrationParameter::Clear();
  clear_has_prelu_param();
}
inline const ::PReLUCalibrationParameter& ConvolutionCalibrationCalibrationParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:ConvolutionCalibrationCalibrationParameter.prelu_param)
  return prelu_param_ != NULL ? *prelu_param_ : *default_instance_->prelu_param_;
}
inline ::PReLUCalibrationParameter* ConvolutionCalibrationCalibrationParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) prelu_param_ = new ::PReLUCalibrationParameter;
  // @@protoc_insertion_point(field_mutable:ConvolutionCalibrationCalibrationParameter.prelu_param)
  return prelu_param_;
}
inline ::PReLUCalibrationParameter* ConvolutionCalibrationCalibrationParameter::release_prelu_param() {
  clear_has_prelu_param();
  ::PReLUCalibrationParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline void ConvolutionCalibrationCalibrationParameter::set_allocated_prelu_param(::PReLUCalibrationParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:ConvolutionCalibrationCalibrationParameter.prelu_param)
}

// optional .ReLUCalibrationParameter relu_param = 4;
inline bool ConvolutionCalibrationCalibrationParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvolutionCalibrationCalibrationParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvolutionCalibrationCalibrationParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::ReLUCalibrationParameter::Clear();
  clear_has_relu_param();
}
inline const ::ReLUCalibrationParameter& ConvolutionCalibrationCalibrationParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:ConvolutionCalibrationCalibrationParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::ReLUCalibrationParameter* ConvolutionCalibrationCalibrationParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) relu_param_ = new ::ReLUCalibrationParameter;
  // @@protoc_insertion_point(field_mutable:ConvolutionCalibrationCalibrationParameter.relu_param)
  return relu_param_;
}
inline ::ReLUCalibrationParameter* ConvolutionCalibrationCalibrationParameter::release_relu_param() {
  clear_has_relu_param();
  ::ReLUCalibrationParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void ConvolutionCalibrationCalibrationParameter::set_allocated_relu_param(::ReLUCalibrationParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:ConvolutionCalibrationCalibrationParameter.relu_param)
}

// -------------------------------------------------------------------

// InnerProductCalibrationParameter

// optional .PReLUCalibrationParameter prelu_param = 3;
inline bool InnerProductCalibrationParameter::has_prelu_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductCalibrationParameter::set_has_prelu_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductCalibrationParameter::clear_has_prelu_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductCalibrationParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::PReLUCalibrationParameter::Clear();
  clear_has_prelu_param();
}
inline const ::PReLUCalibrationParameter& InnerProductCalibrationParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:InnerProductCalibrationParameter.prelu_param)
  return prelu_param_ != NULL ? *prelu_param_ : *default_instance_->prelu_param_;
}
inline ::PReLUCalibrationParameter* InnerProductCalibrationParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) prelu_param_ = new ::PReLUCalibrationParameter;
  // @@protoc_insertion_point(field_mutable:InnerProductCalibrationParameter.prelu_param)
  return prelu_param_;
}
inline ::PReLUCalibrationParameter* InnerProductCalibrationParameter::release_prelu_param() {
  clear_has_prelu_param();
  ::PReLUCalibrationParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline void InnerProductCalibrationParameter::set_allocated_prelu_param(::PReLUCalibrationParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:InnerProductCalibrationParameter.prelu_param)
}

// -------------------------------------------------------------------

// PoolingCalibrationParameter

// -------------------------------------------------------------------

// ReLUCalibrationParameter

// required int32 gt_scale = 1;
inline bool ReLUCalibrationParameter::has_gt_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReLUCalibrationParameter::set_has_gt_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReLUCalibrationParameter::clear_has_gt_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReLUCalibrationParameter::clear_gt_scale() {
  gt_scale_ = 0;
  clear_has_gt_scale();
}
inline ::google::protobuf::int32 ReLUCalibrationParameter::gt_scale() const {
  // @@protoc_insertion_point(field_get:ReLUCalibrationParameter.gt_scale)
  return gt_scale_;
}
inline void ReLUCalibrationParameter::set_gt_scale(::google::protobuf::int32 value) {
  set_has_gt_scale();
  gt_scale_ = value;
  // @@protoc_insertion_point(field_set:ReLUCalibrationParameter.gt_scale)
}

// required int32 le_scale = 2;
inline bool ReLUCalibrationParameter::has_le_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReLUCalibrationParameter::set_has_le_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReLUCalibrationParameter::clear_has_le_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReLUCalibrationParameter::clear_le_scale() {
  le_scale_ = 0;
  clear_has_le_scale();
}
inline ::google::protobuf::int32 ReLUCalibrationParameter::le_scale() const {
  // @@protoc_insertion_point(field_get:ReLUCalibrationParameter.le_scale)
  return le_scale_;
}
inline void ReLUCalibrationParameter::set_le_scale(::google::protobuf::int32 value) {
  set_has_le_scale();
  le_scale_ = value;
  // @@protoc_insertion_point(field_set:ReLUCalibrationParameter.le_scale)
}

// required int32 gt_right_shift_width = 3;
inline bool ReLUCalibrationParameter::has_gt_right_shift_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReLUCalibrationParameter::set_has_gt_right_shift_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReLUCalibrationParameter::clear_has_gt_right_shift_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReLUCalibrationParameter::clear_gt_right_shift_width() {
  gt_right_shift_width_ = 0;
  clear_has_gt_right_shift_width();
}
inline ::google::protobuf::int32 ReLUCalibrationParameter::gt_right_shift_width() const {
  // @@protoc_insertion_point(field_get:ReLUCalibrationParameter.gt_right_shift_width)
  return gt_right_shift_width_;
}
inline void ReLUCalibrationParameter::set_gt_right_shift_width(::google::protobuf::int32 value) {
  set_has_gt_right_shift_width();
  gt_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:ReLUCalibrationParameter.gt_right_shift_width)
}

// required int32 le_right_shift_width = 4;
inline bool ReLUCalibrationParameter::has_le_right_shift_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReLUCalibrationParameter::set_has_le_right_shift_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReLUCalibrationParameter::clear_has_le_right_shift_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReLUCalibrationParameter::clear_le_right_shift_width() {
  le_right_shift_width_ = 0;
  clear_has_le_right_shift_width();
}
inline ::google::protobuf::int32 ReLUCalibrationParameter::le_right_shift_width() const {
  // @@protoc_insertion_point(field_get:ReLUCalibrationParameter.le_right_shift_width)
  return le_right_shift_width_;
}
inline void ReLUCalibrationParameter::set_le_right_shift_width(::google::protobuf::int32 value) {
  set_has_le_right_shift_width();
  le_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:ReLUCalibrationParameter.le_right_shift_width)
}

// -------------------------------------------------------------------

// PReLUCalibrationParameter

// required int32 gt_scale = 1;
inline bool PReLUCalibrationParameter::has_gt_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PReLUCalibrationParameter::set_has_gt_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PReLUCalibrationParameter::clear_has_gt_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PReLUCalibrationParameter::clear_gt_scale() {
  gt_scale_ = 0;
  clear_has_gt_scale();
}
inline ::google::protobuf::int32 PReLUCalibrationParameter::gt_scale() const {
  // @@protoc_insertion_point(field_get:PReLUCalibrationParameter.gt_scale)
  return gt_scale_;
}
inline void PReLUCalibrationParameter::set_gt_scale(::google::protobuf::int32 value) {
  set_has_gt_scale();
  gt_scale_ = value;
  // @@protoc_insertion_point(field_set:PReLUCalibrationParameter.gt_scale)
}

// required int32 gt_right_shift_width = 2;
inline bool PReLUCalibrationParameter::has_gt_right_shift_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PReLUCalibrationParameter::set_has_gt_right_shift_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PReLUCalibrationParameter::clear_has_gt_right_shift_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PReLUCalibrationParameter::clear_gt_right_shift_width() {
  gt_right_shift_width_ = 0;
  clear_has_gt_right_shift_width();
}
inline ::google::protobuf::int32 PReLUCalibrationParameter::gt_right_shift_width() const {
  // @@protoc_insertion_point(field_get:PReLUCalibrationParameter.gt_right_shift_width)
  return gt_right_shift_width_;
}
inline void PReLUCalibrationParameter::set_gt_right_shift_width(::google::protobuf::int32 value) {
  set_has_gt_right_shift_width();
  gt_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:PReLUCalibrationParameter.gt_right_shift_width)
}

// required int32 le_right_shift_width = 3;
inline bool PReLUCalibrationParameter::has_le_right_shift_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PReLUCalibrationParameter::set_has_le_right_shift_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PReLUCalibrationParameter::clear_has_le_right_shift_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PReLUCalibrationParameter::clear_le_right_shift_width() {
  le_right_shift_width_ = 0;
  clear_has_le_right_shift_width();
}
inline ::google::protobuf::int32 PReLUCalibrationParameter::le_right_shift_width() const {
  // @@protoc_insertion_point(field_get:PReLUCalibrationParameter.le_right_shift_width)
  return le_right_shift_width_;
}
inline void PReLUCalibrationParameter::set_le_right_shift_width(::google::protobuf::int32 value) {
  set_has_le_right_shift_width();
  le_right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:PReLUCalibrationParameter.le_right_shift_width)
}

// -------------------------------------------------------------------

// ConcatCalibrationParameter

// repeated int32 right_shift_width = 1;
inline int ConcatCalibrationParameter::right_shift_width_size() const {
  return right_shift_width_.size();
}
inline void ConcatCalibrationParameter::clear_right_shift_width() {
  right_shift_width_.Clear();
}
inline ::google::protobuf::int32 ConcatCalibrationParameter::right_shift_width(int index) const {
  // @@protoc_insertion_point(field_get:ConcatCalibrationParameter.right_shift_width)
  return right_shift_width_.Get(index);
}
inline void ConcatCalibrationParameter::set_right_shift_width(int index, ::google::protobuf::int32 value) {
  right_shift_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConcatCalibrationParameter.right_shift_width)
}
inline void ConcatCalibrationParameter::add_right_shift_width(::google::protobuf::int32 value) {
  right_shift_width_.Add(value);
  // @@protoc_insertion_point(field_add:ConcatCalibrationParameter.right_shift_width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ConcatCalibrationParameter::right_shift_width() const {
  // @@protoc_insertion_point(field_list:ConcatCalibrationParameter.right_shift_width)
  return right_shift_width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ConcatCalibrationParameter::mutable_right_shift_width() {
  // @@protoc_insertion_point(field_mutable_list:ConcatCalibrationParameter.right_shift_width)
  return &right_shift_width_;
}

// repeated int32 threshold_x_quantized = 2;
inline int ConcatCalibrationParameter::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void ConcatCalibrationParameter::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 ConcatCalibrationParameter::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:ConcatCalibrationParameter.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void ConcatCalibrationParameter::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConcatCalibrationParameter.threshold_x_quantized)
}
inline void ConcatCalibrationParameter::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:ConcatCalibrationParameter.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ConcatCalibrationParameter::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:ConcatCalibrationParameter.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ConcatCalibrationParameter::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:ConcatCalibrationParameter.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// required int32 need_quantize_num = 3 [default = 0];
inline bool ConcatCalibrationParameter::has_need_quantize_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConcatCalibrationParameter::set_has_need_quantize_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConcatCalibrationParameter::clear_has_need_quantize_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConcatCalibrationParameter::clear_need_quantize_num() {
  need_quantize_num_ = 0;
  clear_has_need_quantize_num();
}
inline ::google::protobuf::int32 ConcatCalibrationParameter::need_quantize_num() const {
  // @@protoc_insertion_point(field_get:ConcatCalibrationParameter.need_quantize_num)
  return need_quantize_num_;
}
inline void ConcatCalibrationParameter::set_need_quantize_num(::google::protobuf::int32 value) {
  set_has_need_quantize_num();
  need_quantize_num_ = value;
  // @@protoc_insertion_point(field_set:ConcatCalibrationParameter.need_quantize_num)
}

// -------------------------------------------------------------------

// LayerCalibrationParameter

// required string name = 1;
inline bool LayerCalibrationParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerCalibrationParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerCalibrationParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerCalibrationParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerCalibrationParameter::name() const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.name)
  return *name_;
}
inline void LayerCalibrationParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.name)
}
inline void LayerCalibrationParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:LayerCalibrationParameter.name)
}
inline void LayerCalibrationParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LayerCalibrationParameter.name)
}
inline ::std::string* LayerCalibrationParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.name)
  return name_;
}
inline ::std::string* LayerCalibrationParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerCalibrationParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.name)
}

// repeated float threshold_y = 2;
inline int LayerCalibrationParameter::threshold_y_size() const {
  return threshold_y_.size();
}
inline void LayerCalibrationParameter::clear_threshold_y() {
  threshold_y_.Clear();
}
inline float LayerCalibrationParameter::threshold_y(int index) const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.threshold_y)
  return threshold_y_.Get(index);
}
inline void LayerCalibrationParameter::set_threshold_y(int index, float value) {
  threshold_y_.Set(index, value);
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.threshold_y)
}
inline void LayerCalibrationParameter::add_threshold_y(float value) {
  threshold_y_.Add(value);
  // @@protoc_insertion_point(field_add:LayerCalibrationParameter.threshold_y)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerCalibrationParameter::threshold_y() const {
  // @@protoc_insertion_point(field_list:LayerCalibrationParameter.threshold_y)
  return threshold_y_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerCalibrationParameter::mutable_threshold_y() {
  // @@protoc_insertion_point(field_mutable_list:LayerCalibrationParameter.threshold_y)
  return &threshold_y_;
}

// optional int32 right_shift_width = 3;
inline bool LayerCalibrationParameter::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerCalibrationParameter::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerCalibrationParameter::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerCalibrationParameter::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 LayerCalibrationParameter::right_shift_width() const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.right_shift_width)
  return right_shift_width_;
}
inline void LayerCalibrationParameter::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.right_shift_width)
}

// repeated int32 threshold_x_quantized = 4;
inline int LayerCalibrationParameter::threshold_x_quantized_size() const {
  return threshold_x_quantized_.size();
}
inline void LayerCalibrationParameter::clear_threshold_x_quantized() {
  threshold_x_quantized_.Clear();
}
inline ::google::protobuf::int32 LayerCalibrationParameter::threshold_x_quantized(int index) const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.threshold_x_quantized)
  return threshold_x_quantized_.Get(index);
}
inline void LayerCalibrationParameter::set_threshold_x_quantized(int index, ::google::protobuf::int32 value) {
  threshold_x_quantized_.Set(index, value);
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.threshold_x_quantized)
}
inline void LayerCalibrationParameter::add_threshold_x_quantized(::google::protobuf::int32 value) {
  threshold_x_quantized_.Add(value);
  // @@protoc_insertion_point(field_add:LayerCalibrationParameter.threshold_x_quantized)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LayerCalibrationParameter::threshold_x_quantized() const {
  // @@protoc_insertion_point(field_list:LayerCalibrationParameter.threshold_x_quantized)
  return threshold_x_quantized_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LayerCalibrationParameter::mutable_threshold_x_quantized() {
  // @@protoc_insertion_point(field_mutable_list:LayerCalibrationParameter.threshold_x_quantized)
  return &threshold_x_quantized_;
}

// repeated .BlobParameter blob_param = 5;
inline int LayerCalibrationParameter::blob_param_size() const {
  return blob_param_.size();
}
inline void LayerCalibrationParameter::clear_blob_param() {
  blob_param_.Clear();
}
inline const ::BlobParameter& LayerCalibrationParameter::blob_param(int index) const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.blob_param)
  return blob_param_.Get(index);
}
inline ::BlobParameter* LayerCalibrationParameter::mutable_blob_param(int index) {
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.blob_param)
  return blob_param_.Mutable(index);
}
inline ::BlobParameter* LayerCalibrationParameter::add_blob_param() {
  // @@protoc_insertion_point(field_add:LayerCalibrationParameter.blob_param)
  return blob_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BlobParameter >&
LayerCalibrationParameter::blob_param() const {
  // @@protoc_insertion_point(field_list:LayerCalibrationParameter.blob_param)
  return blob_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::BlobParameter >*
LayerCalibrationParameter::mutable_blob_param() {
  // @@protoc_insertion_point(field_mutable_list:LayerCalibrationParameter.blob_param)
  return &blob_param_;
}

// optional int32 fusion_skipped = 6;
inline bool LayerCalibrationParameter::has_fusion_skipped() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerCalibrationParameter::set_has_fusion_skipped() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerCalibrationParameter::clear_has_fusion_skipped() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerCalibrationParameter::clear_fusion_skipped() {
  fusion_skipped_ = 0;
  clear_has_fusion_skipped();
}
inline ::google::protobuf::int32 LayerCalibrationParameter::fusion_skipped() const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.fusion_skipped)
  return fusion_skipped_;
}
inline void LayerCalibrationParameter::set_fusion_skipped(::google::protobuf::int32 value) {
  set_has_fusion_skipped();
  fusion_skipped_ = value;
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.fusion_skipped)
}

// repeated bool bottom_unsigned = 7;
inline int LayerCalibrationParameter::bottom_unsigned_size() const {
  return bottom_unsigned_.size();
}
inline void LayerCalibrationParameter::clear_bottom_unsigned() {
  bottom_unsigned_.Clear();
}
inline bool LayerCalibrationParameter::bottom_unsigned(int index) const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.bottom_unsigned)
  return bottom_unsigned_.Get(index);
}
inline void LayerCalibrationParameter::set_bottom_unsigned(int index, bool value) {
  bottom_unsigned_.Set(index, value);
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.bottom_unsigned)
}
inline void LayerCalibrationParameter::add_bottom_unsigned(bool value) {
  bottom_unsigned_.Add(value);
  // @@protoc_insertion_point(field_add:LayerCalibrationParameter.bottom_unsigned)
}
inline const ::google::protobuf::RepeatedField< bool >&
LayerCalibrationParameter::bottom_unsigned() const {
  // @@protoc_insertion_point(field_list:LayerCalibrationParameter.bottom_unsigned)
  return bottom_unsigned_;
}
inline ::google::protobuf::RepeatedField< bool >*
LayerCalibrationParameter::mutable_bottom_unsigned() {
  // @@protoc_insertion_point(field_mutable_list:LayerCalibrationParameter.bottom_unsigned)
  return &bottom_unsigned_;
}

// repeated bool top_unsigned = 8;
inline int LayerCalibrationParameter::top_unsigned_size() const {
  return top_unsigned_.size();
}
inline void LayerCalibrationParameter::clear_top_unsigned() {
  top_unsigned_.Clear();
}
inline bool LayerCalibrationParameter::top_unsigned(int index) const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.top_unsigned)
  return top_unsigned_.Get(index);
}
inline void LayerCalibrationParameter::set_top_unsigned(int index, bool value) {
  top_unsigned_.Set(index, value);
  // @@protoc_insertion_point(field_set:LayerCalibrationParameter.top_unsigned)
}
inline void LayerCalibrationParameter::add_top_unsigned(bool value) {
  top_unsigned_.Add(value);
  // @@protoc_insertion_point(field_add:LayerCalibrationParameter.top_unsigned)
}
inline const ::google::protobuf::RepeatedField< bool >&
LayerCalibrationParameter::top_unsigned() const {
  // @@protoc_insertion_point(field_list:LayerCalibrationParameter.top_unsigned)
  return top_unsigned_;
}
inline ::google::protobuf::RepeatedField< bool >*
LayerCalibrationParameter::mutable_top_unsigned() {
  // @@protoc_insertion_point(field_mutable_list:LayerCalibrationParameter.top_unsigned)
  return &top_unsigned_;
}

// optional .ConvolutionCalibrationCalibrationParameter convolution_param = 106;
inline bool LayerCalibrationParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerCalibrationParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerCalibrationParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerCalibrationParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::ConvolutionCalibrationCalibrationParameter::Clear();
  clear_has_convolution_param();
}
inline const ::ConvolutionCalibrationCalibrationParameter& LayerCalibrationParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
inline ::ConvolutionCalibrationCalibrationParameter* LayerCalibrationParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) convolution_param_ = new ::ConvolutionCalibrationCalibrationParameter;
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.convolution_param)
  return convolution_param_;
}
inline ::ConvolutionCalibrationCalibrationParameter* LayerCalibrationParameter::release_convolution_param() {
  clear_has_convolution_param();
  ::ConvolutionCalibrationCalibrationParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void LayerCalibrationParameter::set_allocated_convolution_param(::ConvolutionCalibrationCalibrationParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.convolution_param)
}

// optional .InnerProductCalibrationParameter inner_product_param = 117;
inline bool LayerCalibrationParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerCalibrationParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerCalibrationParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerCalibrationParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::InnerProductCalibrationParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::InnerProductCalibrationParameter& LayerCalibrationParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
inline ::InnerProductCalibrationParameter* LayerCalibrationParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) inner_product_param_ = new ::InnerProductCalibrationParameter;
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.inner_product_param)
  return inner_product_param_;
}
inline ::InnerProductCalibrationParameter* LayerCalibrationParameter::release_inner_product_param() {
  clear_has_inner_product_param();
  ::InnerProductCalibrationParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void LayerCalibrationParameter::set_allocated_inner_product_param(::InnerProductCalibrationParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.inner_product_param)
}

// optional .PoolingCalibrationParameter pooling_param = 121;
inline bool LayerCalibrationParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LayerCalibrationParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LayerCalibrationParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LayerCalibrationParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::PoolingCalibrationParameter::Clear();
  clear_has_pooling_param();
}
inline const ::PoolingCalibrationParameter& LayerCalibrationParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::PoolingCalibrationParameter* LayerCalibrationParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) pooling_param_ = new ::PoolingCalibrationParameter;
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.pooling_param)
  return pooling_param_;
}
inline ::PoolingCalibrationParameter* LayerCalibrationParameter::release_pooling_param() {
  clear_has_pooling_param();
  ::PoolingCalibrationParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void LayerCalibrationParameter::set_allocated_pooling_param(::PoolingCalibrationParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.pooling_param)
}

// optional .ReLUCalibrationParameter relu_param = 123;
inline bool LayerCalibrationParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerCalibrationParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerCalibrationParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerCalibrationParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::ReLUCalibrationParameter::Clear();
  clear_has_relu_param();
}
inline const ::ReLUCalibrationParameter& LayerCalibrationParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::ReLUCalibrationParameter* LayerCalibrationParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) relu_param_ = new ::ReLUCalibrationParameter;
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.relu_param)
  return relu_param_;
}
inline ::ReLUCalibrationParameter* LayerCalibrationParameter::release_relu_param() {
  clear_has_relu_param();
  ::ReLUCalibrationParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void LayerCalibrationParameter::set_allocated_relu_param(::ReLUCalibrationParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.relu_param)
}

// optional .PReLUCalibrationParameter prelu_param = 124;
inline bool LayerCalibrationParameter::has_prelu_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerCalibrationParameter::set_has_prelu_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerCalibrationParameter::clear_has_prelu_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerCalibrationParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::PReLUCalibrationParameter::Clear();
  clear_has_prelu_param();
}
inline const ::PReLUCalibrationParameter& LayerCalibrationParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.prelu_param)
  return prelu_param_ != NULL ? *prelu_param_ : *default_instance_->prelu_param_;
}
inline ::PReLUCalibrationParameter* LayerCalibrationParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) prelu_param_ = new ::PReLUCalibrationParameter;
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.prelu_param)
  return prelu_param_;
}
inline ::PReLUCalibrationParameter* LayerCalibrationParameter::release_prelu_param() {
  clear_has_prelu_param();
  ::PReLUCalibrationParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline void LayerCalibrationParameter::set_allocated_prelu_param(::PReLUCalibrationParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.prelu_param)
}

// optional .ConcatCalibrationParameter concat_param = 125;
inline bool LayerCalibrationParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerCalibrationParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerCalibrationParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerCalibrationParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::ConcatCalibrationParameter::Clear();
  clear_has_concat_param();
}
inline const ::ConcatCalibrationParameter& LayerCalibrationParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:LayerCalibrationParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_ : *default_instance_->concat_param_;
}
inline ::ConcatCalibrationParameter* LayerCalibrationParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) concat_param_ = new ::ConcatCalibrationParameter;
  // @@protoc_insertion_point(field_mutable:LayerCalibrationParameter.concat_param)
  return concat_param_;
}
inline ::ConcatCalibrationParameter* LayerCalibrationParameter::release_concat_param() {
  clear_has_concat_param();
  ::ConcatCalibrationParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void LayerCalibrationParameter::set_allocated_concat_param(::ConcatCalibrationParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerCalibrationParameter.concat_param)
}

// -------------------------------------------------------------------

// BlobParameter

// required string name = 1;
inline bool BlobParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BlobParameter::name() const {
  // @@protoc_insertion_point(field_get:BlobParameter.name)
  return *name_;
}
inline void BlobParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:BlobParameter.name)
}
inline void BlobParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:BlobParameter.name)
}
inline void BlobParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BlobParameter.name)
}
inline ::std::string* BlobParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BlobParameter.name)
  return name_;
}
inline ::std::string* BlobParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlobParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BlobParameter.name)
}

// required float threshold_y = 2;
inline bool BlobParameter::has_threshold_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobParameter::set_has_threshold_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobParameter::clear_has_threshold_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobParameter::clear_threshold_y() {
  threshold_y_ = 0;
  clear_has_threshold_y();
}
inline float BlobParameter::threshold_y() const {
  // @@protoc_insertion_point(field_get:BlobParameter.threshold_y)
  return threshold_y_;
}
inline void BlobParameter::set_threshold_y(float value) {
  set_has_threshold_y();
  threshold_y_ = value;
  // @@protoc_insertion_point(field_set:BlobParameter.threshold_y)
}

// optional int32 right_shift_width = 3;
inline bool BlobParameter::has_right_shift_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobParameter::set_has_right_shift_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobParameter::clear_has_right_shift_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobParameter::clear_right_shift_width() {
  right_shift_width_ = 0;
  clear_has_right_shift_width();
}
inline ::google::protobuf::int32 BlobParameter::right_shift_width() const {
  // @@protoc_insertion_point(field_get:BlobParameter.right_shift_width)
  return right_shift_width_;
}
inline void BlobParameter::set_right_shift_width(::google::protobuf::int32 value) {
  set_has_right_shift_width();
  right_shift_width_ = value;
  // @@protoc_insertion_point(field_set:BlobParameter.right_shift_width)
}

// -------------------------------------------------------------------

// NetCalibrationParameter

// optional string name = 1;
inline bool NetCalibrationParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetCalibrationParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetCalibrationParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetCalibrationParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetCalibrationParameter::name() const {
  // @@protoc_insertion_point(field_get:NetCalibrationParameter.name)
  return *name_;
}
inline void NetCalibrationParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:NetCalibrationParameter.name)
}
inline void NetCalibrationParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:NetCalibrationParameter.name)
}
inline void NetCalibrationParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetCalibrationParameter.name)
}
inline ::std::string* NetCalibrationParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NetCalibrationParameter.name)
  return name_;
}
inline ::std::string* NetCalibrationParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NetCalibrationParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NetCalibrationParameter.name)
}

// repeated .LayerCalibrationParameter layer = 100;
inline int NetCalibrationParameter::layer_size() const {
  return layer_.size();
}
inline void NetCalibrationParameter::clear_layer() {
  layer_.Clear();
}
inline const ::LayerCalibrationParameter& NetCalibrationParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:NetCalibrationParameter.layer)
  return layer_.Get(index);
}
inline ::LayerCalibrationParameter* NetCalibrationParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:NetCalibrationParameter.layer)
  return layer_.Mutable(index);
}
inline ::LayerCalibrationParameter* NetCalibrationParameter::add_layer() {
  // @@protoc_insertion_point(field_add:NetCalibrationParameter.layer)
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LayerCalibrationParameter >&
NetCalibrationParameter::layer() const {
  // @@protoc_insertion_point(field_list:NetCalibrationParameter.layer)
  return layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::LayerCalibrationParameter >*
NetCalibrationParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:NetCalibrationParameter.layer)
  return &layer_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bmnet_2fcommon_5fcalibration_2eproto__INCLUDED
