// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx/onnx-operators_bmnet_onnx.proto

#ifndef PROTOBUF_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto__INCLUDED
#define PROTOBUF_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "onnx/onnx_bmnet_onnx.pb.h"
// @@protoc_insertion_point(includes)

namespace bmnet_onnx {

// Internal implementation detail -- do not call these.
void ONNX_API protobuf_AddDesc_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto();
void protobuf_AssignDesc_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto();
void protobuf_ShutdownFile_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto();

class FunctionProto;
class OperatorProto;
class OperatorSetProto;

enum OperatorStatus {
  EXPERIMENTAL = 0,
  STABLE = 1
};
ONNX_API bool OperatorStatus_IsValid(int value);
const OperatorStatus OperatorStatus_MIN = EXPERIMENTAL;
const OperatorStatus OperatorStatus_MAX = STABLE;
const int OperatorStatus_ARRAYSIZE = OperatorStatus_MAX + 1;

ONNX_API const ::google::protobuf::EnumDescriptor* OperatorStatus_descriptor();
inline const ::std::string& OperatorStatus_Name(OperatorStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    OperatorStatus_descriptor(), value);
}
inline bool OperatorStatus_Parse(
    const ::std::string& name, OperatorStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OperatorStatus>(
    OperatorStatus_descriptor(), name, value);
}
// ===================================================================

class ONNX_API FunctionProto : public ::google::protobuf::Message {
 public:
  FunctionProto();
  virtual ~FunctionProto();

  FunctionProto(const FunctionProto& from);

  inline FunctionProto& operator=(const FunctionProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionProto& default_instance();

  void Swap(FunctionProto* other);

  // implements Message ----------------------------------------------

  FunctionProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunctionProto& from);
  void MergeFrom(const FunctionProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 since_version = 2;
  inline bool has_since_version() const;
  inline void clear_since_version();
  static const int kSinceVersionFieldNumber = 2;
  inline ::google::protobuf::int64 since_version() const;
  inline void set_since_version(::google::protobuf::int64 value);

  // optional .bmnet_onnx.OperatorStatus status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::bmnet_onnx::OperatorStatus status() const;
  inline void set_status(::bmnet_onnx::OperatorStatus value);

  // repeated string input = 4;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 4;
  inline const ::std::string& input(int index) const;
  inline ::std::string* mutable_input(int index);
  inline void set_input(int index, const ::std::string& value);
  inline void set_input(int index, const char* value);
  inline void set_input(int index, const char* value, size_t size);
  inline ::std::string* add_input();
  inline void add_input(const ::std::string& value);
  inline void add_input(const char* value);
  inline void add_input(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated string output = 5;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 5;
  inline const ::std::string& output(int index) const;
  inline ::std::string* mutable_output(int index);
  inline void set_output(int index, const ::std::string& value);
  inline void set_output(int index, const char* value);
  inline void set_output(int index, const char* value, size_t size);
  inline ::std::string* add_output();
  inline void add_output(const ::std::string& value);
  inline void add_output(const char* value);
  inline void add_output(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& output() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output();

  // repeated string attribute = 6;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 6;
  inline const ::std::string& attribute(int index) const;
  inline ::std::string* mutable_attribute(int index);
  inline void set_attribute(int index, const ::std::string& value);
  inline void set_attribute(int index, const char* value);
  inline void set_attribute(int index, const char* value, size_t size);
  inline ::std::string* add_attribute();
  inline void add_attribute(const ::std::string& value);
  inline void add_attribute(const char* value);
  inline void add_attribute(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attribute();

  // repeated .bmnet_onnx.NodeProto node = 7;
  inline int node_size() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 7;
  inline const ::bmnet_onnx::NodeProto& node(int index) const;
  inline ::bmnet_onnx::NodeProto* mutable_node(int index);
  inline ::bmnet_onnx::NodeProto* add_node();
  inline const ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::NodeProto >&
      node() const;
  inline ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::NodeProto >*
      mutable_node();

  // optional string doc_string = 8;
  inline bool has_doc_string() const;
  inline void clear_doc_string();
  static const int kDocStringFieldNumber = 8;
  inline const ::std::string& doc_string() const;
  inline void set_doc_string(const ::std::string& value);
  inline void set_doc_string(const char* value);
  inline void set_doc_string(const char* value, size_t size);
  inline ::std::string* mutable_doc_string();
  inline ::std::string* release_doc_string();
  inline void set_allocated_doc_string(::std::string* doc_string);

  // @@protoc_insertion_point(class_scope:bmnet_onnx.FunctionProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_since_version();
  inline void clear_has_since_version();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_doc_string();
  inline void clear_has_doc_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int64 since_version_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attribute_;
  ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::NodeProto > node_;
  ::std::string* doc_string_;
  int status_;
  friend void ONNX_API protobuf_AddDesc_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto();

  void InitAsDefaultInstance();
  static FunctionProto* default_instance_;
};
// -------------------------------------------------------------------

class ONNX_API OperatorProto : public ::google::protobuf::Message {
 public:
  OperatorProto();
  virtual ~OperatorProto();

  OperatorProto(const OperatorProto& from);

  inline OperatorProto& operator=(const OperatorProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperatorProto& default_instance();

  void Swap(OperatorProto* other);

  // implements Message ----------------------------------------------

  OperatorProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperatorProto& from);
  void MergeFrom(const OperatorProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline const ::std::string& op_type() const;
  inline void set_op_type(const ::std::string& value);
  inline void set_op_type(const char* value);
  inline void set_op_type(const char* value, size_t size);
  inline ::std::string* mutable_op_type();
  inline ::std::string* release_op_type();
  inline void set_allocated_op_type(::std::string* op_type);

  // optional int64 since_version = 2;
  inline bool has_since_version() const;
  inline void clear_since_version();
  static const int kSinceVersionFieldNumber = 2;
  inline ::google::protobuf::int64 since_version() const;
  inline void set_since_version(::google::protobuf::int64 value);

  // optional .bmnet_onnx.OperatorStatus status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::bmnet_onnx::OperatorStatus status() const;
  inline void set_status(::bmnet_onnx::OperatorStatus value);

  // optional string doc_string = 10;
  inline bool has_doc_string() const;
  inline void clear_doc_string();
  static const int kDocStringFieldNumber = 10;
  inline const ::std::string& doc_string() const;
  inline void set_doc_string(const ::std::string& value);
  inline void set_doc_string(const char* value);
  inline void set_doc_string(const char* value, size_t size);
  inline ::std::string* mutable_doc_string();
  inline ::std::string* release_doc_string();
  inline void set_allocated_doc_string(::std::string* doc_string);

  // @@protoc_insertion_point(class_scope:bmnet_onnx.OperatorProto)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_since_version();
  inline void clear_has_since_version();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_doc_string();
  inline void clear_has_doc_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* op_type_;
  ::google::protobuf::int64 since_version_;
  ::std::string* doc_string_;
  int status_;
  friend void ONNX_API protobuf_AddDesc_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto();

  void InitAsDefaultInstance();
  static OperatorProto* default_instance_;
};
// -------------------------------------------------------------------

class ONNX_API OperatorSetProto : public ::google::protobuf::Message {
 public:
  OperatorSetProto();
  virtual ~OperatorSetProto();

  OperatorSetProto(const OperatorSetProto& from);

  inline OperatorSetProto& operator=(const OperatorSetProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperatorSetProto& default_instance();

  void Swap(OperatorSetProto* other);

  // implements Message ----------------------------------------------

  OperatorSetProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperatorSetProto& from);
  void MergeFrom(const OperatorSetProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string magic = 1;
  inline bool has_magic() const;
  inline void clear_magic();
  static const int kMagicFieldNumber = 1;
  inline const ::std::string& magic() const;
  inline void set_magic(const ::std::string& value);
  inline void set_magic(const char* value);
  inline void set_magic(const char* value, size_t size);
  inline ::std::string* mutable_magic();
  inline ::std::string* release_magic();
  inline void set_allocated_magic(::std::string* magic);

  // optional int32 ir_version = 2;
  inline bool has_ir_version() const;
  inline void clear_ir_version();
  static const int kIrVersionFieldNumber = 2;
  inline ::google::protobuf::int32 ir_version() const;
  inline void set_ir_version(::google::protobuf::int32 value);

  // optional string ir_version_prerelease = 3;
  inline bool has_ir_version_prerelease() const;
  inline void clear_ir_version_prerelease();
  static const int kIrVersionPrereleaseFieldNumber = 3;
  inline const ::std::string& ir_version_prerelease() const;
  inline void set_ir_version_prerelease(const ::std::string& value);
  inline void set_ir_version_prerelease(const char* value);
  inline void set_ir_version_prerelease(const char* value, size_t size);
  inline ::std::string* mutable_ir_version_prerelease();
  inline ::std::string* release_ir_version_prerelease();
  inline void set_allocated_ir_version_prerelease(::std::string* ir_version_prerelease);

  // optional string ir_build_metadata = 7;
  inline bool has_ir_build_metadata() const;
  inline void clear_ir_build_metadata();
  static const int kIrBuildMetadataFieldNumber = 7;
  inline const ::std::string& ir_build_metadata() const;
  inline void set_ir_build_metadata(const ::std::string& value);
  inline void set_ir_build_metadata(const char* value);
  inline void set_ir_build_metadata(const char* value, size_t size);
  inline ::std::string* mutable_ir_build_metadata();
  inline ::std::string* release_ir_build_metadata();
  inline void set_allocated_ir_build_metadata(::std::string* ir_build_metadata);

  // optional string domain = 4;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 4;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // optional int64 opset_version = 5;
  inline bool has_opset_version() const;
  inline void clear_opset_version();
  static const int kOpsetVersionFieldNumber = 5;
  inline ::google::protobuf::int64 opset_version() const;
  inline void set_opset_version(::google::protobuf::int64 value);

  // optional string doc_string = 6;
  inline bool has_doc_string() const;
  inline void clear_doc_string();
  static const int kDocStringFieldNumber = 6;
  inline const ::std::string& doc_string() const;
  inline void set_doc_string(const ::std::string& value);
  inline void set_doc_string(const char* value);
  inline void set_doc_string(const char* value, size_t size);
  inline ::std::string* mutable_doc_string();
  inline ::std::string* release_doc_string();
  inline void set_allocated_doc_string(::std::string* doc_string);

  // repeated .bmnet_onnx.OperatorProto operator = 8;
  inline int operator__size() const;
  inline void clear_operator_();
  static const int kOperatorFieldNumber = 8;
  inline const ::bmnet_onnx::OperatorProto& operator_(int index) const;
  inline ::bmnet_onnx::OperatorProto* mutable_operator_(int index);
  inline ::bmnet_onnx::OperatorProto* add_operator_();
  inline const ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::OperatorProto >&
      operator_() const;
  inline ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::OperatorProto >*
      mutable_operator_();

  // repeated .bmnet_onnx.FunctionProto functions = 9;
  inline int functions_size() const;
  inline void clear_functions();
  static const int kFunctionsFieldNumber = 9;
  inline const ::bmnet_onnx::FunctionProto& functions(int index) const;
  inline ::bmnet_onnx::FunctionProto* mutable_functions(int index);
  inline ::bmnet_onnx::FunctionProto* add_functions();
  inline const ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::FunctionProto >&
      functions() const;
  inline ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::FunctionProto >*
      mutable_functions();

  // @@protoc_insertion_point(class_scope:bmnet_onnx.OperatorSetProto)
 private:
  inline void set_has_magic();
  inline void clear_has_magic();
  inline void set_has_ir_version();
  inline void clear_has_ir_version();
  inline void set_has_ir_version_prerelease();
  inline void clear_has_ir_version_prerelease();
  inline void set_has_ir_build_metadata();
  inline void clear_has_ir_build_metadata();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_opset_version();
  inline void clear_has_opset_version();
  inline void set_has_doc_string();
  inline void clear_has_doc_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* magic_;
  ::std::string* ir_version_prerelease_;
  ::std::string* ir_build_metadata_;
  ::std::string* domain_;
  ::google::protobuf::int64 opset_version_;
  ::std::string* doc_string_;
  ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::OperatorProto > operator__;
  ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::FunctionProto > functions_;
  ::google::protobuf::int32 ir_version_;
  friend void ONNX_API protobuf_AddDesc_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto();
  friend void protobuf_AssignDesc_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto();
  friend void protobuf_ShutdownFile_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto();

  void InitAsDefaultInstance();
  static OperatorSetProto* default_instance_;
};
// ===================================================================


// ===================================================================

// FunctionProto

// optional string name = 1;
inline bool FunctionProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunctionProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunctionProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunctionProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FunctionProto::name() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.FunctionProto.name)
  return *name_;
}
inline void FunctionProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet_onnx.FunctionProto.name)
}
inline void FunctionProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet_onnx.FunctionProto.name)
}
inline void FunctionProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet_onnx.FunctionProto.name)
}
inline ::std::string* FunctionProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.FunctionProto.name)
  return name_;
}
inline ::std::string* FunctionProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FunctionProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet_onnx.FunctionProto.name)
}

// optional int64 since_version = 2;
inline bool FunctionProto::has_since_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FunctionProto::set_has_since_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FunctionProto::clear_has_since_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FunctionProto::clear_since_version() {
  since_version_ = GOOGLE_LONGLONG(0);
  clear_has_since_version();
}
inline ::google::protobuf::int64 FunctionProto::since_version() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.FunctionProto.since_version)
  return since_version_;
}
inline void FunctionProto::set_since_version(::google::protobuf::int64 value) {
  set_has_since_version();
  since_version_ = value;
  // @@protoc_insertion_point(field_set:bmnet_onnx.FunctionProto.since_version)
}

// optional .bmnet_onnx.OperatorStatus status = 3;
inline bool FunctionProto::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FunctionProto::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FunctionProto::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FunctionProto::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::bmnet_onnx::OperatorStatus FunctionProto::status() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.FunctionProto.status)
  return static_cast< ::bmnet_onnx::OperatorStatus >(status_);
}
inline void FunctionProto::set_status(::bmnet_onnx::OperatorStatus value) {
  assert(::bmnet_onnx::OperatorStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:bmnet_onnx.FunctionProto.status)
}

// repeated string input = 4;
inline int FunctionProto::input_size() const {
  return input_.size();
}
inline void FunctionProto::clear_input() {
  input_.Clear();
}
inline const ::std::string& FunctionProto::input(int index) const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.FunctionProto.input)
  return input_.Get(index);
}
inline ::std::string* FunctionProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.FunctionProto.input)
  return input_.Mutable(index);
}
inline void FunctionProto::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bmnet_onnx.FunctionProto.input)
  input_.Mutable(index)->assign(value);
}
inline void FunctionProto::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet_onnx.FunctionProto.input)
}
inline void FunctionProto::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet_onnx.FunctionProto.input)
}
inline ::std::string* FunctionProto::add_input() {
  return input_.Add();
}
inline void FunctionProto::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bmnet_onnx.FunctionProto.input)
}
inline void FunctionProto::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bmnet_onnx.FunctionProto.input)
}
inline void FunctionProto::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bmnet_onnx.FunctionProto.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FunctionProto::input() const {
  // @@protoc_insertion_point(field_list:bmnet_onnx.FunctionProto.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FunctionProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:bmnet_onnx.FunctionProto.input)
  return &input_;
}

// repeated string output = 5;
inline int FunctionProto::output_size() const {
  return output_.size();
}
inline void FunctionProto::clear_output() {
  output_.Clear();
}
inline const ::std::string& FunctionProto::output(int index) const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.FunctionProto.output)
  return output_.Get(index);
}
inline ::std::string* FunctionProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.FunctionProto.output)
  return output_.Mutable(index);
}
inline void FunctionProto::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bmnet_onnx.FunctionProto.output)
  output_.Mutable(index)->assign(value);
}
inline void FunctionProto::set_output(int index, const char* value) {
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet_onnx.FunctionProto.output)
}
inline void FunctionProto::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet_onnx.FunctionProto.output)
}
inline ::std::string* FunctionProto::add_output() {
  return output_.Add();
}
inline void FunctionProto::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bmnet_onnx.FunctionProto.output)
}
inline void FunctionProto::add_output(const char* value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bmnet_onnx.FunctionProto.output)
}
inline void FunctionProto::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bmnet_onnx.FunctionProto.output)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FunctionProto::output() const {
  // @@protoc_insertion_point(field_list:bmnet_onnx.FunctionProto.output)
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FunctionProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:bmnet_onnx.FunctionProto.output)
  return &output_;
}

// repeated string attribute = 6;
inline int FunctionProto::attribute_size() const {
  return attribute_.size();
}
inline void FunctionProto::clear_attribute() {
  attribute_.Clear();
}
inline const ::std::string& FunctionProto::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.FunctionProto.attribute)
  return attribute_.Get(index);
}
inline ::std::string* FunctionProto::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.FunctionProto.attribute)
  return attribute_.Mutable(index);
}
inline void FunctionProto::set_attribute(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bmnet_onnx.FunctionProto.attribute)
  attribute_.Mutable(index)->assign(value);
}
inline void FunctionProto::set_attribute(int index, const char* value) {
  attribute_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet_onnx.FunctionProto.attribute)
}
inline void FunctionProto::set_attribute(int index, const char* value, size_t size) {
  attribute_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet_onnx.FunctionProto.attribute)
}
inline ::std::string* FunctionProto::add_attribute() {
  return attribute_.Add();
}
inline void FunctionProto::add_attribute(const ::std::string& value) {
  attribute_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bmnet_onnx.FunctionProto.attribute)
}
inline void FunctionProto::add_attribute(const char* value) {
  attribute_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bmnet_onnx.FunctionProto.attribute)
}
inline void FunctionProto::add_attribute(const char* value, size_t size) {
  attribute_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bmnet_onnx.FunctionProto.attribute)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FunctionProto::attribute() const {
  // @@protoc_insertion_point(field_list:bmnet_onnx.FunctionProto.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FunctionProto::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bmnet_onnx.FunctionProto.attribute)
  return &attribute_;
}

// repeated .bmnet_onnx.NodeProto node = 7;
inline int FunctionProto::node_size() const {
  return node_.size();
}
inline void FunctionProto::clear_node() {
  node_.Clear();
}
inline const ::bmnet_onnx::NodeProto& FunctionProto::node(int index) const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.FunctionProto.node)
  return node_.Get(index);
}
inline ::bmnet_onnx::NodeProto* FunctionProto::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.FunctionProto.node)
  return node_.Mutable(index);
}
inline ::bmnet_onnx::NodeProto* FunctionProto::add_node() {
  // @@protoc_insertion_point(field_add:bmnet_onnx.FunctionProto.node)
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::NodeProto >&
FunctionProto::node() const {
  // @@protoc_insertion_point(field_list:bmnet_onnx.FunctionProto.node)
  return node_;
}
inline ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::NodeProto >*
FunctionProto::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:bmnet_onnx.FunctionProto.node)
  return &node_;
}

// optional string doc_string = 8;
inline bool FunctionProto::has_doc_string() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FunctionProto::set_has_doc_string() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FunctionProto::clear_has_doc_string() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FunctionProto::clear_doc_string() {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_->clear();
  }
  clear_has_doc_string();
}
inline const ::std::string& FunctionProto::doc_string() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.FunctionProto.doc_string)
  return *doc_string_;
}
inline void FunctionProto::set_doc_string(const ::std::string& value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet_onnx.FunctionProto.doc_string)
}
inline void FunctionProto::set_doc_string(const char* value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet_onnx.FunctionProto.doc_string)
}
inline void FunctionProto::set_doc_string(const char* value, size_t size) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet_onnx.FunctionProto.doc_string)
}
inline ::std::string* FunctionProto::mutable_doc_string() {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.FunctionProto.doc_string)
  return doc_string_;
}
inline ::std::string* FunctionProto::release_doc_string() {
  clear_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = doc_string_;
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FunctionProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete doc_string_;
  }
  if (doc_string) {
    set_has_doc_string();
    doc_string_ = doc_string;
  } else {
    clear_has_doc_string();
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet_onnx.FunctionProto.doc_string)
}

// -------------------------------------------------------------------

// OperatorProto

// optional string op_type = 1;
inline bool OperatorProto::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperatorProto::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperatorProto::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperatorProto::clear_op_type() {
  if (op_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_type_->clear();
  }
  clear_has_op_type();
}
inline const ::std::string& OperatorProto::op_type() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.OperatorProto.op_type)
  return *op_type_;
}
inline void OperatorProto::set_op_type(const ::std::string& value) {
  set_has_op_type();
  if (op_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_type_ = new ::std::string;
  }
  op_type_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet_onnx.OperatorProto.op_type)
}
inline void OperatorProto::set_op_type(const char* value) {
  set_has_op_type();
  if (op_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_type_ = new ::std::string;
  }
  op_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet_onnx.OperatorProto.op_type)
}
inline void OperatorProto::set_op_type(const char* value, size_t size) {
  set_has_op_type();
  if (op_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_type_ = new ::std::string;
  }
  op_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet_onnx.OperatorProto.op_type)
}
inline ::std::string* OperatorProto::mutable_op_type() {
  set_has_op_type();
  if (op_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.OperatorProto.op_type)
  return op_type_;
}
inline ::std::string* OperatorProto::release_op_type() {
  clear_has_op_type();
  if (op_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = op_type_;
    op_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperatorProto::set_allocated_op_type(::std::string* op_type) {
  if (op_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete op_type_;
  }
  if (op_type) {
    set_has_op_type();
    op_type_ = op_type;
  } else {
    clear_has_op_type();
    op_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet_onnx.OperatorProto.op_type)
}

// optional int64 since_version = 2;
inline bool OperatorProto::has_since_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperatorProto::set_has_since_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperatorProto::clear_has_since_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperatorProto::clear_since_version() {
  since_version_ = GOOGLE_LONGLONG(0);
  clear_has_since_version();
}
inline ::google::protobuf::int64 OperatorProto::since_version() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.OperatorProto.since_version)
  return since_version_;
}
inline void OperatorProto::set_since_version(::google::protobuf::int64 value) {
  set_has_since_version();
  since_version_ = value;
  // @@protoc_insertion_point(field_set:bmnet_onnx.OperatorProto.since_version)
}

// optional .bmnet_onnx.OperatorStatus status = 3;
inline bool OperatorProto::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OperatorProto::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OperatorProto::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OperatorProto::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::bmnet_onnx::OperatorStatus OperatorProto::status() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.OperatorProto.status)
  return static_cast< ::bmnet_onnx::OperatorStatus >(status_);
}
inline void OperatorProto::set_status(::bmnet_onnx::OperatorStatus value) {
  assert(::bmnet_onnx::OperatorStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:bmnet_onnx.OperatorProto.status)
}

// optional string doc_string = 10;
inline bool OperatorProto::has_doc_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OperatorProto::set_has_doc_string() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OperatorProto::clear_has_doc_string() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OperatorProto::clear_doc_string() {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_->clear();
  }
  clear_has_doc_string();
}
inline const ::std::string& OperatorProto::doc_string() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.OperatorProto.doc_string)
  return *doc_string_;
}
inline void OperatorProto::set_doc_string(const ::std::string& value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet_onnx.OperatorProto.doc_string)
}
inline void OperatorProto::set_doc_string(const char* value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet_onnx.OperatorProto.doc_string)
}
inline void OperatorProto::set_doc_string(const char* value, size_t size) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet_onnx.OperatorProto.doc_string)
}
inline ::std::string* OperatorProto::mutable_doc_string() {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.OperatorProto.doc_string)
  return doc_string_;
}
inline ::std::string* OperatorProto::release_doc_string() {
  clear_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = doc_string_;
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperatorProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete doc_string_;
  }
  if (doc_string) {
    set_has_doc_string();
    doc_string_ = doc_string;
  } else {
    clear_has_doc_string();
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet_onnx.OperatorProto.doc_string)
}

// -------------------------------------------------------------------

// OperatorSetProto

// optional string magic = 1;
inline bool OperatorSetProto::has_magic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperatorSetProto::set_has_magic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperatorSetProto::clear_has_magic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperatorSetProto::clear_magic() {
  if (magic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    magic_->clear();
  }
  clear_has_magic();
}
inline const ::std::string& OperatorSetProto::magic() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.OperatorSetProto.magic)
  return *magic_;
}
inline void OperatorSetProto::set_magic(const ::std::string& value) {
  set_has_magic();
  if (magic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    magic_ = new ::std::string;
  }
  magic_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet_onnx.OperatorSetProto.magic)
}
inline void OperatorSetProto::set_magic(const char* value) {
  set_has_magic();
  if (magic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    magic_ = new ::std::string;
  }
  magic_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet_onnx.OperatorSetProto.magic)
}
inline void OperatorSetProto::set_magic(const char* value, size_t size) {
  set_has_magic();
  if (magic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    magic_ = new ::std::string;
  }
  magic_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet_onnx.OperatorSetProto.magic)
}
inline ::std::string* OperatorSetProto::mutable_magic() {
  set_has_magic();
  if (magic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    magic_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.OperatorSetProto.magic)
  return magic_;
}
inline ::std::string* OperatorSetProto::release_magic() {
  clear_has_magic();
  if (magic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = magic_;
    magic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperatorSetProto::set_allocated_magic(::std::string* magic) {
  if (magic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete magic_;
  }
  if (magic) {
    set_has_magic();
    magic_ = magic;
  } else {
    clear_has_magic();
    magic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet_onnx.OperatorSetProto.magic)
}

// optional int32 ir_version = 2;
inline bool OperatorSetProto::has_ir_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperatorSetProto::set_has_ir_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperatorSetProto::clear_has_ir_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperatorSetProto::clear_ir_version() {
  ir_version_ = 0;
  clear_has_ir_version();
}
inline ::google::protobuf::int32 OperatorSetProto::ir_version() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.OperatorSetProto.ir_version)
  return ir_version_;
}
inline void OperatorSetProto::set_ir_version(::google::protobuf::int32 value) {
  set_has_ir_version();
  ir_version_ = value;
  // @@protoc_insertion_point(field_set:bmnet_onnx.OperatorSetProto.ir_version)
}

// optional string ir_version_prerelease = 3;
inline bool OperatorSetProto::has_ir_version_prerelease() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OperatorSetProto::set_has_ir_version_prerelease() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OperatorSetProto::clear_has_ir_version_prerelease() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OperatorSetProto::clear_ir_version_prerelease() {
  if (ir_version_prerelease_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ir_version_prerelease_->clear();
  }
  clear_has_ir_version_prerelease();
}
inline const ::std::string& OperatorSetProto::ir_version_prerelease() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.OperatorSetProto.ir_version_prerelease)
  return *ir_version_prerelease_;
}
inline void OperatorSetProto::set_ir_version_prerelease(const ::std::string& value) {
  set_has_ir_version_prerelease();
  if (ir_version_prerelease_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ir_version_prerelease_ = new ::std::string;
  }
  ir_version_prerelease_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet_onnx.OperatorSetProto.ir_version_prerelease)
}
inline void OperatorSetProto::set_ir_version_prerelease(const char* value) {
  set_has_ir_version_prerelease();
  if (ir_version_prerelease_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ir_version_prerelease_ = new ::std::string;
  }
  ir_version_prerelease_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet_onnx.OperatorSetProto.ir_version_prerelease)
}
inline void OperatorSetProto::set_ir_version_prerelease(const char* value, size_t size) {
  set_has_ir_version_prerelease();
  if (ir_version_prerelease_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ir_version_prerelease_ = new ::std::string;
  }
  ir_version_prerelease_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet_onnx.OperatorSetProto.ir_version_prerelease)
}
inline ::std::string* OperatorSetProto::mutable_ir_version_prerelease() {
  set_has_ir_version_prerelease();
  if (ir_version_prerelease_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ir_version_prerelease_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.OperatorSetProto.ir_version_prerelease)
  return ir_version_prerelease_;
}
inline ::std::string* OperatorSetProto::release_ir_version_prerelease() {
  clear_has_ir_version_prerelease();
  if (ir_version_prerelease_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ir_version_prerelease_;
    ir_version_prerelease_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperatorSetProto::set_allocated_ir_version_prerelease(::std::string* ir_version_prerelease) {
  if (ir_version_prerelease_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ir_version_prerelease_;
  }
  if (ir_version_prerelease) {
    set_has_ir_version_prerelease();
    ir_version_prerelease_ = ir_version_prerelease;
  } else {
    clear_has_ir_version_prerelease();
    ir_version_prerelease_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet_onnx.OperatorSetProto.ir_version_prerelease)
}

// optional string ir_build_metadata = 7;
inline bool OperatorSetProto::has_ir_build_metadata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OperatorSetProto::set_has_ir_build_metadata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OperatorSetProto::clear_has_ir_build_metadata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OperatorSetProto::clear_ir_build_metadata() {
  if (ir_build_metadata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ir_build_metadata_->clear();
  }
  clear_has_ir_build_metadata();
}
inline const ::std::string& OperatorSetProto::ir_build_metadata() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.OperatorSetProto.ir_build_metadata)
  return *ir_build_metadata_;
}
inline void OperatorSetProto::set_ir_build_metadata(const ::std::string& value) {
  set_has_ir_build_metadata();
  if (ir_build_metadata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ir_build_metadata_ = new ::std::string;
  }
  ir_build_metadata_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet_onnx.OperatorSetProto.ir_build_metadata)
}
inline void OperatorSetProto::set_ir_build_metadata(const char* value) {
  set_has_ir_build_metadata();
  if (ir_build_metadata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ir_build_metadata_ = new ::std::string;
  }
  ir_build_metadata_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet_onnx.OperatorSetProto.ir_build_metadata)
}
inline void OperatorSetProto::set_ir_build_metadata(const char* value, size_t size) {
  set_has_ir_build_metadata();
  if (ir_build_metadata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ir_build_metadata_ = new ::std::string;
  }
  ir_build_metadata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet_onnx.OperatorSetProto.ir_build_metadata)
}
inline ::std::string* OperatorSetProto::mutable_ir_build_metadata() {
  set_has_ir_build_metadata();
  if (ir_build_metadata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ir_build_metadata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.OperatorSetProto.ir_build_metadata)
  return ir_build_metadata_;
}
inline ::std::string* OperatorSetProto::release_ir_build_metadata() {
  clear_has_ir_build_metadata();
  if (ir_build_metadata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ir_build_metadata_;
    ir_build_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperatorSetProto::set_allocated_ir_build_metadata(::std::string* ir_build_metadata) {
  if (ir_build_metadata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ir_build_metadata_;
  }
  if (ir_build_metadata) {
    set_has_ir_build_metadata();
    ir_build_metadata_ = ir_build_metadata;
  } else {
    clear_has_ir_build_metadata();
    ir_build_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet_onnx.OperatorSetProto.ir_build_metadata)
}

// optional string domain = 4;
inline bool OperatorSetProto::has_domain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OperatorSetProto::set_has_domain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OperatorSetProto::clear_has_domain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OperatorSetProto::clear_domain() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& OperatorSetProto::domain() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.OperatorSetProto.domain)
  return *domain_;
}
inline void OperatorSetProto::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet_onnx.OperatorSetProto.domain)
}
inline void OperatorSetProto::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet_onnx.OperatorSetProto.domain)
}
inline void OperatorSetProto::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet_onnx.OperatorSetProto.domain)
}
inline ::std::string* OperatorSetProto::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.OperatorSetProto.domain)
  return domain_;
}
inline ::std::string* OperatorSetProto::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperatorSetProto::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet_onnx.OperatorSetProto.domain)
}

// optional int64 opset_version = 5;
inline bool OperatorSetProto::has_opset_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OperatorSetProto::set_has_opset_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OperatorSetProto::clear_has_opset_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OperatorSetProto::clear_opset_version() {
  opset_version_ = GOOGLE_LONGLONG(0);
  clear_has_opset_version();
}
inline ::google::protobuf::int64 OperatorSetProto::opset_version() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.OperatorSetProto.opset_version)
  return opset_version_;
}
inline void OperatorSetProto::set_opset_version(::google::protobuf::int64 value) {
  set_has_opset_version();
  opset_version_ = value;
  // @@protoc_insertion_point(field_set:bmnet_onnx.OperatorSetProto.opset_version)
}

// optional string doc_string = 6;
inline bool OperatorSetProto::has_doc_string() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OperatorSetProto::set_has_doc_string() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OperatorSetProto::clear_has_doc_string() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OperatorSetProto::clear_doc_string() {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_->clear();
  }
  clear_has_doc_string();
}
inline const ::std::string& OperatorSetProto::doc_string() const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.OperatorSetProto.doc_string)
  return *doc_string_;
}
inline void OperatorSetProto::set_doc_string(const ::std::string& value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet_onnx.OperatorSetProto.doc_string)
}
inline void OperatorSetProto::set_doc_string(const char* value) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet_onnx.OperatorSetProto.doc_string)
}
inline void OperatorSetProto::set_doc_string(const char* value, size_t size) {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  doc_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet_onnx.OperatorSetProto.doc_string)
}
inline ::std::string* OperatorSetProto::mutable_doc_string() {
  set_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    doc_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.OperatorSetProto.doc_string)
  return doc_string_;
}
inline ::std::string* OperatorSetProto::release_doc_string() {
  clear_has_doc_string();
  if (doc_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = doc_string_;
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperatorSetProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete doc_string_;
  }
  if (doc_string) {
    set_has_doc_string();
    doc_string_ = doc_string;
  } else {
    clear_has_doc_string();
    doc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet_onnx.OperatorSetProto.doc_string)
}

// repeated .bmnet_onnx.OperatorProto operator = 8;
inline int OperatorSetProto::operator__size() const {
  return operator__.size();
}
inline void OperatorSetProto::clear_operator_() {
  operator__.Clear();
}
inline const ::bmnet_onnx::OperatorProto& OperatorSetProto::operator_(int index) const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.OperatorSetProto.operator)
  return operator__.Get(index);
}
inline ::bmnet_onnx::OperatorProto* OperatorSetProto::mutable_operator_(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.OperatorSetProto.operator)
  return operator__.Mutable(index);
}
inline ::bmnet_onnx::OperatorProto* OperatorSetProto::add_operator_() {
  // @@protoc_insertion_point(field_add:bmnet_onnx.OperatorSetProto.operator)
  return operator__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::OperatorProto >&
OperatorSetProto::operator_() const {
  // @@protoc_insertion_point(field_list:bmnet_onnx.OperatorSetProto.operator)
  return operator__;
}
inline ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::OperatorProto >*
OperatorSetProto::mutable_operator_() {
  // @@protoc_insertion_point(field_mutable_list:bmnet_onnx.OperatorSetProto.operator)
  return &operator__;
}

// repeated .bmnet_onnx.FunctionProto functions = 9;
inline int OperatorSetProto::functions_size() const {
  return functions_.size();
}
inline void OperatorSetProto::clear_functions() {
  functions_.Clear();
}
inline const ::bmnet_onnx::FunctionProto& OperatorSetProto::functions(int index) const {
  // @@protoc_insertion_point(field_get:bmnet_onnx.OperatorSetProto.functions)
  return functions_.Get(index);
}
inline ::bmnet_onnx::FunctionProto* OperatorSetProto::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet_onnx.OperatorSetProto.functions)
  return functions_.Mutable(index);
}
inline ::bmnet_onnx::FunctionProto* OperatorSetProto::add_functions() {
  // @@protoc_insertion_point(field_add:bmnet_onnx.OperatorSetProto.functions)
  return functions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::FunctionProto >&
OperatorSetProto::functions() const {
  // @@protoc_insertion_point(field_list:bmnet_onnx.OperatorSetProto.functions)
  return functions_;
}
inline ::google::protobuf::RepeatedPtrField< ::bmnet_onnx::FunctionProto >*
OperatorSetProto::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:bmnet_onnx.OperatorSetProto.functions)
  return &functions_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bmnet_onnx

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bmnet_onnx::OperatorStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet_onnx::OperatorStatus>() {
  return ::bmnet_onnx::OperatorStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_onnx_2fonnx_2doperators_5fbmnet_5fonnx_2eproto__INCLUDED
