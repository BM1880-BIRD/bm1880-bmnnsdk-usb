// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bm168x_asm.proto

#ifndef PROTOBUF_bm168x_5fasm_2eproto__INCLUDED
#define PROTOBUF_bm168x_5fasm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bmnet {
namespace bm1680 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bm168x_5fasm_2eproto();
void protobuf_AssignDesc_bm168x_5fasm_2eproto();
void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

class CommandBuffer;
class Inst;
class Inst_bmnet_pooling_forward_bmkernel;
class Inst_bmnet_conv_forward_bmkernel;
class Inst_bmnet_threshold_forward_bmkernel;
class Inst_bmnet_exp_forward_bmkernel;
class Inst_bmnet_power_forward_bmkernel;
class Inst_bmnet_absval_forward_bmkernel;
class Inst_bmnet_sigmoid_forward_bmkernel;
class Inst_bmnet_log_forward_bmkernel;
class Inst_bmnet_fc_forward_bmkernel;
class Inst_bmnet_bias_forward_bmkernel;
class Inst_bmnet_elu_forward_bmkernel;
class Inst_bmnet_tanh_forward_bmkernel;
class Inst_bmnet_lstm_unit_forward_bmkernel;
class Inst_bmnet_lrn_forward_bmkernel;
class Inst_bmnet_bnll_forward_bmkernel;
class Inst_bmnet_crop_forward_bmkernel;
class Inst_bmnet_slice_forward_bmkernel;
class Inst_bmnet_eltwise_forward_bmkernel;
class Inst_bmnet_tile_forward_bmkernel;
class Inst_bmnet_relu_forward_bmkernel;
class Inst_bmnet_batchnorm_forward_inference_bmkernel;
class Inst_bmnet_softmax_forward_bmkernel;
class Inst_bmnet_scale_forward_bmkernel;
class Inst_bmnet_mvn_forward_bmkernel;
class Inst_bmnet_reduction_forward_bmkernel;
class Inst_bmnet_prelu_forward_bmkernel;
class Inst_bmnet_split_forward_bmkernel;
class Inst_bmnet_concat_forward_bmkernel;
class Inst_bmnet_upsample_bmkernel;
class Inst_bmnet_reshape_forward_bmkernel;
class Inst_bmnet_permute_forward_bmkernel;
class Inst_bmnet_flatten_forward_bmkernel;
class Inst_bmnet_normalize_forward_bmkernel;
class Inst_bmnet_deconv_forward_bmkernel;
class Inst_bmnet_stack_forward_bmkernel;
class Inst_bmnet_arithmetic_forward_bmkernel;
class Inst_bmnet_resizebilinear_forward_bmkernel;
class Inst_bmnet_priorbox_forward_bmkernel;
class Inst_bmnet_reverse_forward_bmkernel;

enum Inst_ActivationMethod {
  Inst_ActivationMethod_RELU = 0,
  Inst_ActivationMethod_SIGMOID = 1,
  Inst_ActivationMethod_TANH = 2,
  Inst_ActivationMethod_ELU = 3,
  Inst_ActivationMethod_PRELU = 4
};
bool Inst_ActivationMethod_IsValid(int value);
const Inst_ActivationMethod Inst_ActivationMethod_ActivationMethod_MIN = Inst_ActivationMethod_RELU;
const Inst_ActivationMethod Inst_ActivationMethod_ActivationMethod_MAX = Inst_ActivationMethod_PRELU;
const int Inst_ActivationMethod_ActivationMethod_ARRAYSIZE = Inst_ActivationMethod_ActivationMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* Inst_ActivationMethod_descriptor();
inline const ::std::string& Inst_ActivationMethod_Name(Inst_ActivationMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    Inst_ActivationMethod_descriptor(), value);
}
inline bool Inst_ActivationMethod_Parse(
    const ::std::string& name, Inst_ActivationMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Inst_ActivationMethod>(
    Inst_ActivationMethod_descriptor(), name, value);
}
// ===================================================================

class CommandBuffer : public ::google::protobuf::Message {
 public:
  CommandBuffer();
  virtual ~CommandBuffer();

  CommandBuffer(const CommandBuffer& from);

  inline CommandBuffer& operator=(const CommandBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandBuffer& default_instance();

  void Swap(CommandBuffer* other);

  // implements Message ----------------------------------------------

  CommandBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandBuffer& from);
  void MergeFrom(const CommandBuffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bmnet.bm1680.Inst inst = 1;
  inline int inst_size() const;
  inline void clear_inst();
  static const int kInstFieldNumber = 1;
  inline const ::bmnet::bm1680::Inst& inst(int index) const;
  inline ::bmnet::bm1680::Inst* mutable_inst(int index);
  inline ::bmnet::bm1680::Inst* add_inst();
  inline const ::google::protobuf::RepeatedPtrField< ::bmnet::bm1680::Inst >&
      inst() const;
  inline ::google::protobuf::RepeatedPtrField< ::bmnet::bm1680::Inst >*
      mutable_inst();

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.CommandBuffer)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bmnet::bm1680::Inst > inst_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static CommandBuffer* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_pooling_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_pooling_forward_bmkernel();
  virtual ~Inst_bmnet_pooling_forward_bmkernel();

  Inst_bmnet_pooling_forward_bmkernel(const Inst_bmnet_pooling_forward_bmkernel& from);

  inline Inst_bmnet_pooling_forward_bmkernel& operator=(const Inst_bmnet_pooling_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_pooling_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_pooling_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_pooling_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_pooling_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_pooling_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ifmap_gaddr = 1;
  inline bool has_ifmap_gaddr() const;
  inline void clear_ifmap_gaddr();
  static const int kIfmapGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 ifmap_gaddr() const;
  inline void set_ifmap_gaddr(::google::protobuf::uint64 value);

  // optional uint64 ofmap_gaddr = 2;
  inline bool has_ofmap_gaddr() const;
  inline void clear_ofmap_gaddr();
  static const int kOfmapGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 ofmap_gaddr() const;
  inline void set_ofmap_gaddr(::google::protobuf::uint64 value);

  // optional uint64 index_gaddr = 3;
  inline bool has_index_gaddr() const;
  inline void clear_index_gaddr();
  static const int kIndexGaddrFieldNumber = 3;
  inline ::google::protobuf::uint64 index_gaddr() const;
  inline void set_index_gaddr(::google::protobuf::uint64 value);

  // optional uint64 o_findex_gaddr = 4;
  inline bool has_o_findex_gaddr() const;
  inline void clear_o_findex_gaddr();
  static const int kOFindexGaddrFieldNumber = 4;
  inline ::google::protobuf::uint64 o_findex_gaddr() const;
  inline void set_o_findex_gaddr(::google::protobuf::uint64 value);

  // optional int32 n = 5;
  inline bool has_n() const;
  inline void clear_n();
  static const int kNFieldNumber = 5;
  inline ::google::protobuf::int32 n() const;
  inline void set_n(::google::protobuf::int32 value);

  // optional int32 c = 6;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 6;
  inline ::google::protobuf::int32 c() const;
  inline void set_c(::google::protobuf::int32 value);

  // optional int32 h = 7;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 7;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // optional int32 w = 8;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 8;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // optional int32 kh = 9;
  inline bool has_kh() const;
  inline void clear_kh();
  static const int kKhFieldNumber = 9;
  inline ::google::protobuf::int32 kh() const;
  inline void set_kh(::google::protobuf::int32 value);

  // optional int32 kw = 10;
  inline bool has_kw() const;
  inline void clear_kw();
  static const int kKwFieldNumber = 10;
  inline ::google::protobuf::int32 kw() const;
  inline void set_kw(::google::protobuf::int32 value);

  // optional int32 pad_top = 11;
  inline bool has_pad_top() const;
  inline void clear_pad_top();
  static const int kPadTopFieldNumber = 11;
  inline ::google::protobuf::int32 pad_top() const;
  inline void set_pad_top(::google::protobuf::int32 value);

  // optional int32 pad_bot = 12;
  inline bool has_pad_bot() const;
  inline void clear_pad_bot();
  static const int kPadBotFieldNumber = 12;
  inline ::google::protobuf::int32 pad_bot() const;
  inline void set_pad_bot(::google::protobuf::int32 value);

  // optional int32 pad_left = 13;
  inline bool has_pad_left() const;
  inline void clear_pad_left();
  static const int kPadLeftFieldNumber = 13;
  inline ::google::protobuf::int32 pad_left() const;
  inline void set_pad_left(::google::protobuf::int32 value);

  // optional int32 pad_right = 14;
  inline bool has_pad_right() const;
  inline void clear_pad_right();
  static const int kPadRightFieldNumber = 14;
  inline ::google::protobuf::int32 pad_right() const;
  inline void set_pad_right(::google::protobuf::int32 value);

  // optional int32 stride_h = 15;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 15;
  inline ::google::protobuf::int32 stride_h() const;
  inline void set_stride_h(::google::protobuf::int32 value);

  // optional int32 stride_w = 16;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 16;
  inline ::google::protobuf::int32 stride_w() const;
  inline void set_stride_w(::google::protobuf::int32 value);

  // optional int32 is_avg_pooling = 17;
  inline bool has_is_avg_pooling() const;
  inline void clear_is_avg_pooling();
  static const int kIsAvgPoolingFieldNumber = 17;
  inline ::google::protobuf::int32 is_avg_pooling() const;
  inline void set_is_avg_pooling(::google::protobuf::int32 value);

  // optional float avg_const = 18;
  inline bool has_avg_const() const;
  inline void clear_avg_const();
  static const int kAvgConstFieldNumber = 18;
  inline float avg_const() const;
  inline void set_avg_const(float value);

  // optional int32 do_relu = 19;
  inline bool has_do_relu() const;
  inline void clear_do_relu();
  static const int kDoReluFieldNumber = 19;
  inline ::google::protobuf::int32 do_relu() const;
  inline void set_do_relu(::google::protobuf::int32 value);

  // optional bool ceil_mode = 20;
  inline bool has_ceil_mode() const;
  inline void clear_ceil_mode();
  static const int kCeilModeFieldNumber = 20;
  inline bool ceil_mode() const;
  inline void set_ceil_mode(bool value);

  // optional bool do_resize = 21;
  inline bool has_do_resize() const;
  inline void clear_do_resize();
  static const int kDoResizeFieldNumber = 21;
  inline bool do_resize() const;
  inline void set_do_resize(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel)
 private:
  inline void set_has_ifmap_gaddr();
  inline void clear_has_ifmap_gaddr();
  inline void set_has_ofmap_gaddr();
  inline void clear_has_ofmap_gaddr();
  inline void set_has_index_gaddr();
  inline void clear_has_index_gaddr();
  inline void set_has_o_findex_gaddr();
  inline void clear_has_o_findex_gaddr();
  inline void set_has_n();
  inline void clear_has_n();
  inline void set_has_c();
  inline void clear_has_c();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_kh();
  inline void clear_has_kh();
  inline void set_has_kw();
  inline void clear_has_kw();
  inline void set_has_pad_top();
  inline void clear_has_pad_top();
  inline void set_has_pad_bot();
  inline void clear_has_pad_bot();
  inline void set_has_pad_left();
  inline void clear_has_pad_left();
  inline void set_has_pad_right();
  inline void clear_has_pad_right();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_is_avg_pooling();
  inline void clear_has_is_avg_pooling();
  inline void set_has_avg_const();
  inline void clear_has_avg_const();
  inline void set_has_do_relu();
  inline void clear_has_do_relu();
  inline void set_has_ceil_mode();
  inline void clear_has_ceil_mode();
  inline void set_has_do_resize();
  inline void clear_has_do_resize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ifmap_gaddr_;
  ::google::protobuf::uint64 ofmap_gaddr_;
  ::google::protobuf::uint64 index_gaddr_;
  ::google::protobuf::uint64 o_findex_gaddr_;
  ::google::protobuf::int32 n_;
  ::google::protobuf::int32 c_;
  ::google::protobuf::int32 h_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 kh_;
  ::google::protobuf::int32 kw_;
  ::google::protobuf::int32 pad_top_;
  ::google::protobuf::int32 pad_bot_;
  ::google::protobuf::int32 pad_left_;
  ::google::protobuf::int32 pad_right_;
  ::google::protobuf::int32 stride_h_;
  ::google::protobuf::int32 stride_w_;
  ::google::protobuf::int32 is_avg_pooling_;
  float avg_const_;
  ::google::protobuf::int32 do_relu_;
  bool ceil_mode_;
  bool do_resize_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_pooling_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_conv_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_conv_forward_bmkernel();
  virtual ~Inst_bmnet_conv_forward_bmkernel();

  Inst_bmnet_conv_forward_bmkernel(const Inst_bmnet_conv_forward_bmkernel& from);

  inline Inst_bmnet_conv_forward_bmkernel& operator=(const Inst_bmnet_conv_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_conv_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_conv_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_conv_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_conv_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_conv_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ga_ifmap = 1;
  inline bool has_ga_ifmap() const;
  inline void clear_ga_ifmap();
  static const int kGaIfmapFieldNumber = 1;
  inline ::google::protobuf::uint64 ga_ifmap() const;
  inline void set_ga_ifmap(::google::protobuf::uint64 value);

  // optional uint64 ga_ofmap = 2;
  inline bool has_ga_ofmap() const;
  inline void clear_ga_ofmap();
  static const int kGaOfmapFieldNumber = 2;
  inline ::google::protobuf::uint64 ga_ofmap() const;
  inline void set_ga_ofmap(::google::protobuf::uint64 value);

  // optional uint64 ga_weight = 3;
  inline bool has_ga_weight() const;
  inline void clear_ga_weight();
  static const int kGaWeightFieldNumber = 3;
  inline ::google::protobuf::uint64 ga_weight() const;
  inline void set_ga_weight(::google::protobuf::uint64 value);

  // optional uint64 ga_bias = 4;
  inline bool has_ga_bias() const;
  inline void clear_ga_bias();
  static const int kGaBiasFieldNumber = 4;
  inline ::google::protobuf::uint64 ga_bias() const;
  inline void set_ga_bias(::google::protobuf::uint64 value);

  // optional uint64 ga_bn_mean = 5;
  inline bool has_ga_bn_mean() const;
  inline void clear_ga_bn_mean();
  static const int kGaBnMeanFieldNumber = 5;
  inline ::google::protobuf::uint64 ga_bn_mean() const;
  inline void set_ga_bn_mean(::google::protobuf::uint64 value);

  // optional uint64 ga_bn_variance = 6;
  inline bool has_ga_bn_variance() const;
  inline void clear_ga_bn_variance();
  static const int kGaBnVarianceFieldNumber = 6;
  inline ::google::protobuf::uint64 ga_bn_variance() const;
  inline void set_ga_bn_variance(::google::protobuf::uint64 value);

  // optional uint64 ga_scale = 7;
  inline bool has_ga_scale() const;
  inline void clear_ga_scale();
  static const int kGaScaleFieldNumber = 7;
  inline ::google::protobuf::uint64 ga_scale() const;
  inline void set_ga_scale(::google::protobuf::uint64 value);

  // optional uint64 ga_scale_bias = 8;
  inline bool has_ga_scale_bias() const;
  inline void clear_ga_scale_bias();
  static const int kGaScaleBiasFieldNumber = 8;
  inline ::google::protobuf::uint64 ga_scale_bias() const;
  inline void set_ga_scale_bias(::google::protobuf::uint64 value);

  // optional int32 input_n = 9;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 9;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 10;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 10;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 11;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 11;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 12;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 12;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // optional int32 groups = 13;
  inline bool has_groups() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 13;
  inline ::google::protobuf::int32 groups() const;
  inline void set_groups(::google::protobuf::int32 value);

  // optional int32 output_c = 14;
  inline bool has_output_c() const;
  inline void clear_output_c();
  static const int kOutputCFieldNumber = 14;
  inline ::google::protobuf::int32 output_c() const;
  inline void set_output_c(::google::protobuf::int32 value);

  // optional uint32 kh = 15;
  inline bool has_kh() const;
  inline void clear_kh();
  static const int kKhFieldNumber = 15;
  inline ::google::protobuf::uint32 kh() const;
  inline void set_kh(::google::protobuf::uint32 value);

  // optional uint32 kw = 16;
  inline bool has_kw() const;
  inline void clear_kw();
  static const int kKwFieldNumber = 16;
  inline ::google::protobuf::uint32 kw() const;
  inline void set_kw(::google::protobuf::uint32 value);

  // optional uint32 dilation_h = 17;
  inline bool has_dilation_h() const;
  inline void clear_dilation_h();
  static const int kDilationHFieldNumber = 17;
  inline ::google::protobuf::uint32 dilation_h() const;
  inline void set_dilation_h(::google::protobuf::uint32 value);

  // optional uint32 dilation_w = 18;
  inline bool has_dilation_w() const;
  inline void clear_dilation_w();
  static const int kDilationWFieldNumber = 18;
  inline ::google::protobuf::uint32 dilation_w() const;
  inline void set_dilation_w(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 19;
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 19;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 20;
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 20;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 21;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 21;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 22;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 22;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // optional int32 result_add = 23;
  inline bool has_result_add() const;
  inline void clear_result_add();
  static const int kResultAddFieldNumber = 23;
  inline ::google::protobuf::int32 result_add() const;
  inline void set_result_add(::google::protobuf::int32 value);

  // optional int32 do_bias = 24;
  inline bool has_do_bias() const;
  inline void clear_do_bias();
  static const int kDoBiasFieldNumber = 24;
  inline ::google::protobuf::int32 do_bias() const;
  inline void set_do_bias(::google::protobuf::int32 value);

  // optional int32 do_bn = 25;
  inline bool has_do_bn() const;
  inline void clear_do_bn();
  static const int kDoBnFieldNumber = 25;
  inline ::google::protobuf::int32 do_bn() const;
  inline void set_do_bn(::google::protobuf::int32 value);

  // optional int32 do_scale = 26;
  inline bool has_do_scale() const;
  inline void clear_do_scale();
  static const int kDoScaleFieldNumber = 26;
  inline ::google::protobuf::int32 do_scale() const;
  inline void set_do_scale(::google::protobuf::int32 value);

  // optional int32 do_scale_bias = 27;
  inline bool has_do_scale_bias() const;
  inline void clear_do_scale_bias();
  static const int kDoScaleBiasFieldNumber = 27;
  inline ::google::protobuf::int32 do_scale_bias() const;
  inline void set_do_scale_bias(::google::protobuf::int32 value);

  // optional int32 do_activation = 28;
  inline bool has_do_activation() const;
  inline void clear_do_activation();
  static const int kDoActivationFieldNumber = 28;
  inline ::google::protobuf::int32 do_activation() const;
  inline void set_do_activation(::google::protobuf::int32 value);

  // optional float bn_scale = 29;
  inline bool has_bn_scale() const;
  inline void clear_bn_scale();
  static const int kBnScaleFieldNumber = 29;
  inline float bn_scale() const;
  inline void set_bn_scale(float value);

  // optional float bn_eps = 30;
  inline bool has_bn_eps() const;
  inline void clear_bn_eps();
  static const int kBnEpsFieldNumber = 30;
  inline float bn_eps() const;
  inline void set_bn_eps(float value);

  // optional int32 activation_method = 31;
  inline bool has_activation_method() const;
  inline void clear_activation_method();
  static const int kActivationMethodFieldNumber = 31;
  inline ::google::protobuf::int32 activation_method() const;
  inline void set_activation_method(::google::protobuf::int32 value);

  // repeated float activation_arg = 32;
  inline int activation_arg_size() const;
  inline void clear_activation_arg();
  static const int kActivationArgFieldNumber = 32;
  inline float activation_arg(int index) const;
  inline void set_activation_arg(int index, float value);
  inline void add_activation_arg(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      activation_arg() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_activation_arg();

  // optional uint64 activation_ga_slope = 33;
  inline bool has_activation_ga_slope() const;
  inline void clear_activation_ga_slope();
  static const int kActivationGaSlopeFieldNumber = 33;
  inline ::google::protobuf::uint64 activation_ga_slope() const;
  inline void set_activation_ga_slope(::google::protobuf::uint64 value);

  // optional bool activation_channel_shared = 34;
  inline bool has_activation_channel_shared() const;
  inline void clear_activation_channel_shared();
  static const int kActivationChannelSharedFieldNumber = 34;
  inline bool activation_channel_shared() const;
  inline void set_activation_channel_shared(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel)
 private:
  inline void set_has_ga_ifmap();
  inline void clear_has_ga_ifmap();
  inline void set_has_ga_ofmap();
  inline void clear_has_ga_ofmap();
  inline void set_has_ga_weight();
  inline void clear_has_ga_weight();
  inline void set_has_ga_bias();
  inline void clear_has_ga_bias();
  inline void set_has_ga_bn_mean();
  inline void clear_has_ga_bn_mean();
  inline void set_has_ga_bn_variance();
  inline void clear_has_ga_bn_variance();
  inline void set_has_ga_scale();
  inline void clear_has_ga_scale();
  inline void set_has_ga_scale_bias();
  inline void clear_has_ga_scale_bias();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();
  inline void set_has_groups();
  inline void clear_has_groups();
  inline void set_has_output_c();
  inline void clear_has_output_c();
  inline void set_has_kh();
  inline void clear_has_kh();
  inline void set_has_kw();
  inline void clear_has_kw();
  inline void set_has_dilation_h();
  inline void clear_has_dilation_h();
  inline void set_has_dilation_w();
  inline void clear_has_dilation_w();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_result_add();
  inline void clear_has_result_add();
  inline void set_has_do_bias();
  inline void clear_has_do_bias();
  inline void set_has_do_bn();
  inline void clear_has_do_bn();
  inline void set_has_do_scale();
  inline void clear_has_do_scale();
  inline void set_has_do_scale_bias();
  inline void clear_has_do_scale_bias();
  inline void set_has_do_activation();
  inline void clear_has_do_activation();
  inline void set_has_bn_scale();
  inline void clear_has_bn_scale();
  inline void set_has_bn_eps();
  inline void clear_has_bn_eps();
  inline void set_has_activation_method();
  inline void clear_has_activation_method();
  inline void set_has_activation_ga_slope();
  inline void clear_has_activation_ga_slope();
  inline void set_has_activation_channel_shared();
  inline void clear_has_activation_channel_shared();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint64 ga_ifmap_;
  ::google::protobuf::uint64 ga_ofmap_;
  ::google::protobuf::uint64 ga_weight_;
  ::google::protobuf::uint64 ga_bias_;
  ::google::protobuf::uint64 ga_bn_mean_;
  ::google::protobuf::uint64 ga_bn_variance_;
  ::google::protobuf::uint64 ga_scale_;
  ::google::protobuf::uint64 ga_scale_bias_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 groups_;
  ::google::protobuf::int32 output_c_;
  ::google::protobuf::uint32 kh_;
  ::google::protobuf::uint32 kw_;
  ::google::protobuf::uint32 dilation_h_;
  ::google::protobuf::uint32 dilation_w_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::google::protobuf::int32 result_add_;
  ::google::protobuf::int32 do_bias_;
  ::google::protobuf::int32 do_bn_;
  ::google::protobuf::int32 do_scale_;
  ::google::protobuf::int32 do_scale_bias_;
  ::google::protobuf::int32 do_activation_;
  float bn_scale_;
  float bn_eps_;
  ::google::protobuf::RepeatedField< float > activation_arg_;
  ::google::protobuf::int32 activation_method_;
  bool activation_channel_shared_;
  ::google::protobuf::uint64 activation_ga_slope_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_conv_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_threshold_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_threshold_forward_bmkernel();
  virtual ~Inst_bmnet_threshold_forward_bmkernel();

  Inst_bmnet_threshold_forward_bmkernel(const Inst_bmnet_threshold_forward_bmkernel& from);

  inline Inst_bmnet_threshold_forward_bmkernel& operator=(const Inst_bmnet_threshold_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_threshold_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_threshold_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_threshold_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_threshold_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_threshold_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_offset = 1;
  inline bool has_input_offset() const;
  inline void clear_input_offset();
  static const int kInputOffsetFieldNumber = 1;
  inline ::google::protobuf::uint64 input_offset() const;
  inline void set_input_offset(::google::protobuf::uint64 value);

  // optional uint64 output_offset = 2;
  inline bool has_output_offset() const;
  inline void clear_output_offset();
  static const int kOutputOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 output_offset() const;
  inline void set_output_offset(::google::protobuf::uint64 value);

  // optional float threshold = 3;
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 3;
  inline float threshold() const;
  inline void set_threshold(float value);

  // optional int32 input_n = 4;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 4;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 5;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 5;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 6;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 6;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 7;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 7;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel)
 private:
  inline void set_has_input_offset();
  inline void clear_has_input_offset();
  inline void set_has_output_offset();
  inline void clear_has_output_offset();
  inline void set_has_threshold();
  inline void clear_has_threshold();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_offset_;
  ::google::protobuf::uint64 output_offset_;
  float threshold_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_threshold_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_exp_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_exp_forward_bmkernel();
  virtual ~Inst_bmnet_exp_forward_bmkernel();

  Inst_bmnet_exp_forward_bmkernel(const Inst_bmnet_exp_forward_bmkernel& from);

  inline Inst_bmnet_exp_forward_bmkernel& operator=(const Inst_bmnet_exp_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_exp_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_exp_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_exp_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_exp_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_exp_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_offset = 1;
  inline bool has_input_offset() const;
  inline void clear_input_offset();
  static const int kInputOffsetFieldNumber = 1;
  inline ::google::protobuf::uint64 input_offset() const;
  inline void set_input_offset(::google::protobuf::uint64 value);

  // optional uint64 output_offset = 2;
  inline bool has_output_offset() const;
  inline void clear_output_offset();
  static const int kOutputOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 output_offset() const;
  inline void set_output_offset(::google::protobuf::uint64 value);

  // optional float base = 3;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 3;
  inline float base() const;
  inline void set_base(float value);

  // optional float input_scale = 4;
  inline bool has_input_scale() const;
  inline void clear_input_scale();
  static const int kInputScaleFieldNumber = 4;
  inline float input_scale() const;
  inline void set_input_scale(float value);

  // optional float input_shift = 5;
  inline bool has_input_shift() const;
  inline void clear_input_shift();
  static const int kInputShiftFieldNumber = 5;
  inline float input_shift() const;
  inline void set_input_shift(float value);

  // optional int32 input_n = 6;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 6;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 7;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 7;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 8;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 8;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 9;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 9;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel)
 private:
  inline void set_has_input_offset();
  inline void clear_has_input_offset();
  inline void set_has_output_offset();
  inline void clear_has_output_offset();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_input_scale();
  inline void clear_has_input_scale();
  inline void set_has_input_shift();
  inline void clear_has_input_shift();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_offset_;
  ::google::protobuf::uint64 output_offset_;
  float base_;
  float input_scale_;
  float input_shift_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_exp_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_power_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_power_forward_bmkernel();
  virtual ~Inst_bmnet_power_forward_bmkernel();

  Inst_bmnet_power_forward_bmkernel(const Inst_bmnet_power_forward_bmkernel& from);

  inline Inst_bmnet_power_forward_bmkernel& operator=(const Inst_bmnet_power_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_power_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_power_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_power_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_power_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_power_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_offset = 1;
  inline bool has_input_offset() const;
  inline void clear_input_offset();
  static const int kInputOffsetFieldNumber = 1;
  inline ::google::protobuf::uint64 input_offset() const;
  inline void set_input_offset(::google::protobuf::uint64 value);

  // optional uint64 output_offset = 2;
  inline bool has_output_offset() const;
  inline void clear_output_offset();
  static const int kOutputOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 output_offset() const;
  inline void set_output_offset(::google::protobuf::uint64 value);

  // optional float power_ = 3;
  inline bool has_power_() const;
  inline void clear_power_();
  static const int kPowerFieldNumber = 3;
  inline float power_() const;
  inline void set_power_(float value);

  // optional float scale_ = 4;
  inline bool has_scale_() const;
  inline void clear_scale_();
  static const int kScaleFieldNumber = 4;
  inline float scale_() const;
  inline void set_scale_(float value);

  // optional float shift_ = 5;
  inline bool has_shift_() const;
  inline void clear_shift_();
  static const int kShiftFieldNumber = 5;
  inline float shift_() const;
  inline void set_shift_(float value);

  // optional int32 input_n = 6;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 6;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 7;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 7;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 8;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 8;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 9;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 9;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel)
 private:
  inline void set_has_input_offset();
  inline void clear_has_input_offset();
  inline void set_has_output_offset();
  inline void clear_has_output_offset();
  inline void set_has_power_();
  inline void clear_has_power_();
  inline void set_has_scale_();
  inline void clear_has_scale_();
  inline void set_has_shift_();
  inline void clear_has_shift_();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_offset_;
  ::google::protobuf::uint64 output_offset_;
  float power__;
  float scale__;
  float shift__;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_power_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_absval_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_absval_forward_bmkernel();
  virtual ~Inst_bmnet_absval_forward_bmkernel();

  Inst_bmnet_absval_forward_bmkernel(const Inst_bmnet_absval_forward_bmkernel& from);

  inline Inst_bmnet_absval_forward_bmkernel& operator=(const Inst_bmnet_absval_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_absval_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_absval_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_absval_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_absval_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_absval_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_gaddr = 1;
  inline bool has_bottom_gaddr() const;
  inline void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_gaddr() const;
  inline void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 2;
  inline bool has_top_gaddr() const;
  inline void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 top_gaddr() const;
  inline void set_top_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 3;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 3;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 4;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 4;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 5;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 5;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 6;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 6;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel)
 private:
  inline void set_has_bottom_gaddr();
  inline void clear_has_bottom_gaddr();
  inline void set_has_top_gaddr();
  inline void clear_has_top_gaddr();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_absval_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_sigmoid_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_sigmoid_forward_bmkernel();
  virtual ~Inst_bmnet_sigmoid_forward_bmkernel();

  Inst_bmnet_sigmoid_forward_bmkernel(const Inst_bmnet_sigmoid_forward_bmkernel& from);

  inline Inst_bmnet_sigmoid_forward_bmkernel& operator=(const Inst_bmnet_sigmoid_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_sigmoid_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_sigmoid_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_sigmoid_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_sigmoid_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_sigmoid_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_gaddr = 1;
  inline bool has_bottom_gaddr() const;
  inline void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_gaddr() const;
  inline void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 2;
  inline bool has_top_gaddr() const;
  inline void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 top_gaddr() const;
  inline void set_top_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 3;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 3;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 4;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 4;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 5;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 5;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 6;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 6;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel)
 private:
  inline void set_has_bottom_gaddr();
  inline void clear_has_bottom_gaddr();
  inline void set_has_top_gaddr();
  inline void clear_has_top_gaddr();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_sigmoid_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_log_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_log_forward_bmkernel();
  virtual ~Inst_bmnet_log_forward_bmkernel();

  Inst_bmnet_log_forward_bmkernel(const Inst_bmnet_log_forward_bmkernel& from);

  inline Inst_bmnet_log_forward_bmkernel& operator=(const Inst_bmnet_log_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_log_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_log_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_log_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_log_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_log_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_gaddr = 1;
  inline bool has_bottom_gaddr() const;
  inline void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_gaddr() const;
  inline void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 2;
  inline bool has_top_gaddr() const;
  inline void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 top_gaddr() const;
  inline void set_top_gaddr(::google::protobuf::uint64 value);

  // optional float scale = 3;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 3;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 4;
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 4;
  inline float shift() const;
  inline void set_shift(float value);

  // optional float base = 5;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 5;
  inline float base() const;
  inline void set_base(float value);

  // optional int32 input_n = 6;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 6;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 7;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 7;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 8;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 8;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 9;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 9;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel)
 private:
  inline void set_has_bottom_gaddr();
  inline void clear_has_bottom_gaddr();
  inline void set_has_top_gaddr();
  inline void clear_has_top_gaddr();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  float scale_;
  float shift_;
  float base_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_log_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_fc_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_fc_forward_bmkernel();
  virtual ~Inst_bmnet_fc_forward_bmkernel();

  Inst_bmnet_fc_forward_bmkernel(const Inst_bmnet_fc_forward_bmkernel& from);

  inline Inst_bmnet_fc_forward_bmkernel& operator=(const Inst_bmnet_fc_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_fc_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_fc_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_fc_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_fc_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_fc_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_data_gaddr = 1;
  inline bool has_bottom_data_gaddr() const;
  inline void clear_bottom_data_gaddr();
  static const int kBottomDataGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_data_gaddr() const;
  inline void set_bottom_data_gaddr(::google::protobuf::uint64 value);

  // optional uint64 weight_data_gaddr = 2;
  inline bool has_weight_data_gaddr() const;
  inline void clear_weight_data_gaddr();
  static const int kWeightDataGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 weight_data_gaddr() const;
  inline void set_weight_data_gaddr(::google::protobuf::uint64 value);

  // optional uint64 bias_data_gaddr = 3;
  inline bool has_bias_data_gaddr() const;
  inline void clear_bias_data_gaddr();
  static const int kBiasDataGaddrFieldNumber = 3;
  inline ::google::protobuf::uint64 bias_data_gaddr() const;
  inline void set_bias_data_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_data_gaddr = 4;
  inline bool has_top_data_gaddr() const;
  inline void clear_top_data_gaddr();
  static const int kTopDataGaddrFieldNumber = 4;
  inline ::google::protobuf::uint64 top_data_gaddr() const;
  inline void set_top_data_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_row_num = 5;
  inline bool has_input_row_num() const;
  inline void clear_input_row_num();
  static const int kInputRowNumFieldNumber = 5;
  inline ::google::protobuf::int32 input_row_num() const;
  inline void set_input_row_num(::google::protobuf::int32 value);

  // optional int32 input_col_num = 6;
  inline bool has_input_col_num() const;
  inline void clear_input_col_num();
  static const int kInputColNumFieldNumber = 6;
  inline ::google::protobuf::int32 input_col_num() const;
  inline void set_input_col_num(::google::protobuf::int32 value);

  // optional int32 weight_col_num = 7;
  inline bool has_weight_col_num() const;
  inline void clear_weight_col_num();
  static const int kWeightColNumFieldNumber = 7;
  inline ::google::protobuf::int32 weight_col_num() const;
  inline void set_weight_col_num(::google::protobuf::int32 value);

  // optional int32 have_bias = 8;
  inline bool has_have_bias() const;
  inline void clear_have_bias();
  static const int kHaveBiasFieldNumber = 8;
  inline ::google::protobuf::int32 have_bias() const;
  inline void set_have_bias(::google::protobuf::int32 value);

  // optional int32 using_relu = 9;
  inline bool has_using_relu() const;
  inline void clear_using_relu();
  static const int kUsingReluFieldNumber = 9;
  inline ::google::protobuf::int32 using_relu() const;
  inline void set_using_relu(::google::protobuf::int32 value);

  // optional bool weight_transpose = 10;
  inline bool has_weight_transpose() const;
  inline void clear_weight_transpose();
  static const int kWeightTransposeFieldNumber = 10;
  inline bool weight_transpose() const;
  inline void set_weight_transpose(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel)
 private:
  inline void set_has_bottom_data_gaddr();
  inline void clear_has_bottom_data_gaddr();
  inline void set_has_weight_data_gaddr();
  inline void clear_has_weight_data_gaddr();
  inline void set_has_bias_data_gaddr();
  inline void clear_has_bias_data_gaddr();
  inline void set_has_top_data_gaddr();
  inline void clear_has_top_data_gaddr();
  inline void set_has_input_row_num();
  inline void clear_has_input_row_num();
  inline void set_has_input_col_num();
  inline void clear_has_input_col_num();
  inline void set_has_weight_col_num();
  inline void clear_has_weight_col_num();
  inline void set_has_have_bias();
  inline void clear_has_have_bias();
  inline void set_has_using_relu();
  inline void clear_has_using_relu();
  inline void set_has_weight_transpose();
  inline void clear_has_weight_transpose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_data_gaddr_;
  ::google::protobuf::uint64 weight_data_gaddr_;
  ::google::protobuf::uint64 bias_data_gaddr_;
  ::google::protobuf::uint64 top_data_gaddr_;
  ::google::protobuf::int32 input_row_num_;
  ::google::protobuf::int32 input_col_num_;
  ::google::protobuf::int32 weight_col_num_;
  ::google::protobuf::int32 have_bias_;
  ::google::protobuf::int32 using_relu_;
  bool weight_transpose_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_fc_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_bias_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_bias_forward_bmkernel();
  virtual ~Inst_bmnet_bias_forward_bmkernel();

  Inst_bmnet_bias_forward_bmkernel(const Inst_bmnet_bias_forward_bmkernel& from);

  inline Inst_bmnet_bias_forward_bmkernel& operator=(const Inst_bmnet_bias_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_bias_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_bias_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_bias_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_bias_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_bias_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_data_gaddr = 1;
  inline bool has_bottom_data_gaddr() const;
  inline void clear_bottom_data_gaddr();
  static const int kBottomDataGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_data_gaddr() const;
  inline void set_bottom_data_gaddr(::google::protobuf::uint64 value);

  // optional uint64 bias_data_gaddr = 2;
  inline bool has_bias_data_gaddr() const;
  inline void clear_bias_data_gaddr();
  static const int kBiasDataGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 bias_data_gaddr() const;
  inline void set_bias_data_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_data_gaddr = 3;
  inline bool has_top_data_gaddr() const;
  inline void clear_top_data_gaddr();
  static const int kTopDataGaddrFieldNumber = 3;
  inline ::google::protobuf::uint64 top_data_gaddr() const;
  inline void set_top_data_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 4;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 4;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 5;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 5;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 6;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 6;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 7;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 7;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel)
 private:
  inline void set_has_bottom_data_gaddr();
  inline void clear_has_bottom_data_gaddr();
  inline void set_has_bias_data_gaddr();
  inline void clear_has_bias_data_gaddr();
  inline void set_has_top_data_gaddr();
  inline void clear_has_top_data_gaddr();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_data_gaddr_;
  ::google::protobuf::uint64 bias_data_gaddr_;
  ::google::protobuf::uint64 top_data_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_bias_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_elu_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_elu_forward_bmkernel();
  virtual ~Inst_bmnet_elu_forward_bmkernel();

  Inst_bmnet_elu_forward_bmkernel(const Inst_bmnet_elu_forward_bmkernel& from);

  inline Inst_bmnet_elu_forward_bmkernel& operator=(const Inst_bmnet_elu_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_elu_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_elu_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_elu_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_elu_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_elu_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_gaddr = 1;
  inline bool has_bottom_gaddr() const;
  inline void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_gaddr() const;
  inline void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 2;
  inline bool has_top_gaddr() const;
  inline void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 top_gaddr() const;
  inline void set_top_gaddr(::google::protobuf::uint64 value);

  // optional float alpha = 3;
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 3;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional int32 input_n = 4;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 4;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 5;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 5;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 6;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 6;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 7;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 7;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel)
 private:
  inline void set_has_bottom_gaddr();
  inline void clear_has_bottom_gaddr();
  inline void set_has_top_gaddr();
  inline void clear_has_top_gaddr();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  float alpha_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_elu_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_tanh_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_tanh_forward_bmkernel();
  virtual ~Inst_bmnet_tanh_forward_bmkernel();

  Inst_bmnet_tanh_forward_bmkernel(const Inst_bmnet_tanh_forward_bmkernel& from);

  inline Inst_bmnet_tanh_forward_bmkernel& operator=(const Inst_bmnet_tanh_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tanh_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_tanh_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_tanh_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_tanh_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tanh_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_gaddr = 1;
  inline bool has_bottom_gaddr() const;
  inline void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_gaddr() const;
  inline void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 2;
  inline bool has_top_gaddr() const;
  inline void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 top_gaddr() const;
  inline void set_top_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 3;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 3;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 4;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 4;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel)
 private:
  inline void set_has_bottom_gaddr();
  inline void clear_has_bottom_gaddr();
  inline void set_has_top_gaddr();
  inline void clear_has_top_gaddr();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_tanh_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_lstm_unit_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_lstm_unit_forward_bmkernel();
  virtual ~Inst_bmnet_lstm_unit_forward_bmkernel();

  Inst_bmnet_lstm_unit_forward_bmkernel(const Inst_bmnet_lstm_unit_forward_bmkernel& from);

  inline Inst_bmnet_lstm_unit_forward_bmkernel& operator=(const Inst_bmnet_lstm_unit_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_lstm_unit_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_lstm_unit_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_lstm_unit_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_lstm_unit_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_lstm_unit_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 X_i_offset = 1;
  inline bool has_x_i_offset() const;
  inline void clear_x_i_offset();
  static const int kXIOffsetFieldNumber = 1;
  inline ::google::protobuf::uint64 x_i_offset() const;
  inline void set_x_i_offset(::google::protobuf::uint64 value);

  // optional uint64 X_f_offset = 2;
  inline bool has_x_f_offset() const;
  inline void clear_x_f_offset();
  static const int kXFOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 x_f_offset() const;
  inline void set_x_f_offset(::google::protobuf::uint64 value);

  // optional uint64 X_o_offset = 3;
  inline bool has_x_o_offset() const;
  inline void clear_x_o_offset();
  static const int kXOOffsetFieldNumber = 3;
  inline ::google::protobuf::uint64 x_o_offset() const;
  inline void set_x_o_offset(::google::protobuf::uint64 value);

  // optional uint64 X_g_offset = 4;
  inline bool has_x_g_offset() const;
  inline void clear_x_g_offset();
  static const int kXGOffsetFieldNumber = 4;
  inline ::google::protobuf::uint64 x_g_offset() const;
  inline void set_x_g_offset(::google::protobuf::uint64 value);

  // optional uint64 C_prev_offset = 5;
  inline bool has_c_prev_offset() const;
  inline void clear_c_prev_offset();
  static const int kCPrevOffsetFieldNumber = 5;
  inline ::google::protobuf::uint64 c_prev_offset() const;
  inline void set_c_prev_offset(::google::protobuf::uint64 value);

  // optional uint64 cont_expand_offset = 6;
  inline bool has_cont_expand_offset() const;
  inline void clear_cont_expand_offset();
  static const int kContExpandOffsetFieldNumber = 6;
  inline ::google::protobuf::uint64 cont_expand_offset() const;
  inline void set_cont_expand_offset(::google::protobuf::uint64 value);

  // optional uint64 C_offset = 7;
  inline bool has_c_offset() const;
  inline void clear_c_offset();
  static const int kCOffsetFieldNumber = 7;
  inline ::google::protobuf::uint64 c_offset() const;
  inline void set_c_offset(::google::protobuf::uint64 value);

  // optional uint64 H_offset = 8;
  inline bool has_h_offset() const;
  inline void clear_h_offset();
  static const int kHOffsetFieldNumber = 8;
  inline ::google::protobuf::uint64 h_offset() const;
  inline void set_h_offset(::google::protobuf::uint64 value);

  // optional int32 input_n = 9;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 9;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 10;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 10;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 11;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 11;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 12;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 12;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel)
 private:
  inline void set_has_x_i_offset();
  inline void clear_has_x_i_offset();
  inline void set_has_x_f_offset();
  inline void clear_has_x_f_offset();
  inline void set_has_x_o_offset();
  inline void clear_has_x_o_offset();
  inline void set_has_x_g_offset();
  inline void clear_has_x_g_offset();
  inline void set_has_c_prev_offset();
  inline void clear_has_c_prev_offset();
  inline void set_has_cont_expand_offset();
  inline void clear_has_cont_expand_offset();
  inline void set_has_c_offset();
  inline void clear_has_c_offset();
  inline void set_has_h_offset();
  inline void clear_has_h_offset();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 x_i_offset_;
  ::google::protobuf::uint64 x_f_offset_;
  ::google::protobuf::uint64 x_o_offset_;
  ::google::protobuf::uint64 x_g_offset_;
  ::google::protobuf::uint64 c_prev_offset_;
  ::google::protobuf::uint64 cont_expand_offset_;
  ::google::protobuf::uint64 c_offset_;
  ::google::protobuf::uint64 h_offset_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_lstm_unit_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_lrn_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_lrn_forward_bmkernel();
  virtual ~Inst_bmnet_lrn_forward_bmkernel();

  Inst_bmnet_lrn_forward_bmkernel(const Inst_bmnet_lrn_forward_bmkernel& from);

  inline Inst_bmnet_lrn_forward_bmkernel& operator=(const Inst_bmnet_lrn_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_lrn_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_lrn_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_lrn_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_lrn_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_lrn_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_gaddr = 1;
  inline bool has_bottom_gaddr() const;
  inline void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_gaddr() const;
  inline void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 2;
  inline bool has_top_gaddr() const;
  inline void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 top_gaddr() const;
  inline void set_top_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 3;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 3;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 4;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 4;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 5;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 5;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 6;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 6;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // optional float alpha = 7;
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 7;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional int32 size = 8;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 8;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional float beta = 9;
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 9;
  inline float beta() const;
  inline void set_beta(float value);

  // optional float k = 10;
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 10;
  inline float k() const;
  inline void set_k(float value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel)
 private:
  inline void set_has_bottom_gaddr();
  inline void clear_has_bottom_gaddr();
  inline void set_has_top_gaddr();
  inline void clear_has_top_gaddr();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_k();
  inline void clear_has_k();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  float alpha_;
  ::google::protobuf::int32 size_;
  float beta_;
  float k_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_lrn_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_bnll_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_bnll_forward_bmkernel();
  virtual ~Inst_bmnet_bnll_forward_bmkernel();

  Inst_bmnet_bnll_forward_bmkernel(const Inst_bmnet_bnll_forward_bmkernel& from);

  inline Inst_bmnet_bnll_forward_bmkernel& operator=(const Inst_bmnet_bnll_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_bnll_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_bnll_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_bnll_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_bnll_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_bnll_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_gaddr = 1;
  inline bool has_bottom_gaddr() const;
  inline void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_gaddr() const;
  inline void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 2;
  inline bool has_top_gaddr() const;
  inline void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 top_gaddr() const;
  inline void set_top_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 3;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 3;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 4;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 4;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 5;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 5;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 6;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 6;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel)
 private:
  inline void set_has_bottom_gaddr();
  inline void clear_has_bottom_gaddr();
  inline void set_has_top_gaddr();
  inline void clear_has_top_gaddr();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_bnll_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_crop_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_crop_forward_bmkernel();
  virtual ~Inst_bmnet_crop_forward_bmkernel();

  Inst_bmnet_crop_forward_bmkernel(const Inst_bmnet_crop_forward_bmkernel& from);

  inline Inst_bmnet_crop_forward_bmkernel& operator=(const Inst_bmnet_crop_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_crop_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_crop_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_crop_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_crop_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_crop_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_gaddr = 1;
  inline bool has_input_gaddr() const;
  inline void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 input_gaddr() const;
  inline void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 2;
  inline bool has_output_gaddr() const;
  inline void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 output_gaddr() const;
  inline void set_output_gaddr(::google::protobuf::uint64 value);

  // repeated int32 input_dim = 3;
  inline int input_dim_size() const;
  inline void clear_input_dim();
  static const int kInputDimFieldNumber = 3;
  inline ::google::protobuf::int32 input_dim(int index) const;
  inline void set_input_dim(int index, ::google::protobuf::int32 value);
  inline void add_input_dim(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // repeated int32 output_dim = 4;
  inline int output_dim_size() const;
  inline void clear_output_dim();
  static const int kOutputDimFieldNumber = 4;
  inline ::google::protobuf::int32 output_dim(int index) const;
  inline void set_output_dim(int index, ::google::protobuf::int32 value);
  inline void add_output_dim(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      output_dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_output_dim();

  // repeated int32 offsets = 5;
  inline int offsets_size() const;
  inline void clear_offsets();
  static const int kOffsetsFieldNumber = 5;
  inline ::google::protobuf::int32 offsets(int index) const;
  inline void set_offsets(int index, ::google::protobuf::int32 value);
  inline void add_offsets(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      offsets() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_offsets();

  // optional int32 output_dim_len = 6;
  inline bool has_output_dim_len() const;
  inline void clear_output_dim_len();
  static const int kOutputDimLenFieldNumber = 6;
  inline ::google::protobuf::int32 output_dim_len() const;
  inline void set_output_dim_len(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel)
 private:
  inline void set_has_input_gaddr();
  inline void clear_has_input_gaddr();
  inline void set_has_output_gaddr();
  inline void clear_has_output_gaddr();
  inline void set_has_output_dim_len();
  inline void clear_has_output_dim_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > output_dim_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > offsets_;
  ::google::protobuf::int32 output_dim_len_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_crop_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_slice_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_slice_forward_bmkernel();
  virtual ~Inst_bmnet_slice_forward_bmkernel();

  Inst_bmnet_slice_forward_bmkernel(const Inst_bmnet_slice_forward_bmkernel& from);

  inline Inst_bmnet_slice_forward_bmkernel& operator=(const Inst_bmnet_slice_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_slice_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_slice_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_slice_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_slice_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_slice_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_gaddr = 1;
  inline bool has_bottom_gaddr() const;
  inline void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_gaddr() const;
  inline void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 2;
  inline bool has_top_gaddr() const;
  inline void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 top_gaddr() const;
  inline void set_top_gaddr(::google::protobuf::uint64 value);

  // optional int32 outer_dim = 3;
  inline bool has_outer_dim() const;
  inline void clear_outer_dim();
  static const int kOuterDimFieldNumber = 3;
  inline ::google::protobuf::int32 outer_dim() const;
  inline void set_outer_dim(::google::protobuf::int32 value);

  // optional int32 inner_dim = 4;
  inline bool has_inner_dim() const;
  inline void clear_inner_dim();
  static const int kInnerDimFieldNumber = 4;
  inline ::google::protobuf::int32 inner_dim() const;
  inline void set_inner_dim(::google::protobuf::int32 value);

  // optional int32 axis_dim = 5;
  inline bool has_axis_dim() const;
  inline void clear_axis_dim();
  static const int kAxisDimFieldNumber = 5;
  inline ::google::protobuf::int32 axis_dim() const;
  inline void set_axis_dim(::google::protobuf::int32 value);

  // optional int32 slice_dim = 6;
  inline bool has_slice_dim() const;
  inline void clear_slice_dim();
  static const int kSliceDimFieldNumber = 6;
  inline ::google::protobuf::int32 slice_dim() const;
  inline void set_slice_dim(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel)
 private:
  inline void set_has_bottom_gaddr();
  inline void clear_has_bottom_gaddr();
  inline void set_has_top_gaddr();
  inline void clear_has_top_gaddr();
  inline void set_has_outer_dim();
  inline void clear_has_outer_dim();
  inline void set_has_inner_dim();
  inline void clear_has_inner_dim();
  inline void set_has_axis_dim();
  inline void clear_has_axis_dim();
  inline void set_has_slice_dim();
  inline void clear_has_slice_dim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  ::google::protobuf::int32 outer_dim_;
  ::google::protobuf::int32 inner_dim_;
  ::google::protobuf::int32 axis_dim_;
  ::google::protobuf::int32 slice_dim_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_slice_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_eltwise_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_eltwise_forward_bmkernel();
  virtual ~Inst_bmnet_eltwise_forward_bmkernel();

  Inst_bmnet_eltwise_forward_bmkernel(const Inst_bmnet_eltwise_forward_bmkernel& from);

  inline Inst_bmnet_eltwise_forward_bmkernel& operator=(const Inst_bmnet_eltwise_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_eltwise_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_eltwise_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_eltwise_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_eltwise_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_eltwise_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 ga_input = 1;
  inline int ga_input_size() const;
  inline void clear_ga_input();
  static const int kGaInputFieldNumber = 1;
  inline ::google::protobuf::uint64 ga_input(int index) const;
  inline void set_ga_input(int index, ::google::protobuf::uint64 value);
  inline void add_ga_input(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ga_input() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ga_input();

  // optional uint64 ga_output = 2;
  inline bool has_ga_output() const;
  inline void clear_ga_output();
  static const int kGaOutputFieldNumber = 2;
  inline ::google::protobuf::uint64 ga_output() const;
  inline void set_ga_output(::google::protobuf::uint64 value);

  // optional int32 input_size = 3;
  inline bool has_input_size() const;
  inline void clear_input_size();
  static const int kInputSizeFieldNumber = 3;
  inline ::google::protobuf::int32 input_size() const;
  inline void set_input_size(::google::protobuf::int32 value);

  // optional int32 op = 4;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 4;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // repeated float coeffs = 5;
  inline int coeffs_size() const;
  inline void clear_coeffs();
  static const int kCoeffsFieldNumber = 5;
  inline float coeffs(int index) const;
  inline void set_coeffs(int index, float value);
  inline void add_coeffs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      coeffs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_coeffs();

  // optional int32 input_n = 6;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 6;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 7;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 7;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 8;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 8;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 9;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 9;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // optional bool do_relu = 10;
  inline bool has_do_relu() const;
  inline void clear_do_relu();
  static const int kDoReluFieldNumber = 10;
  inline bool do_relu() const;
  inline void set_do_relu(bool value);

  // optional float relu_slope = 11;
  inline bool has_relu_slope() const;
  inline void clear_relu_slope();
  static const int kReluSlopeFieldNumber = 11;
  inline float relu_slope() const;
  inline void set_relu_slope(float value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel)
 private:
  inline void set_has_ga_output();
  inline void clear_has_ga_output();
  inline void set_has_input_size();
  inline void clear_has_input_size();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();
  inline void set_has_do_relu();
  inline void clear_has_do_relu();
  inline void set_has_relu_slope();
  inline void clear_has_relu_slope();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ga_input_;
  ::google::protobuf::uint64 ga_output_;
  ::google::protobuf::int32 input_size_;
  ::google::protobuf::int32 op_;
  ::google::protobuf::RepeatedField< float > coeffs_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  bool do_relu_;
  float relu_slope_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_eltwise_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_tile_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_tile_forward_bmkernel();
  virtual ~Inst_bmnet_tile_forward_bmkernel();

  Inst_bmnet_tile_forward_bmkernel(const Inst_bmnet_tile_forward_bmkernel& from);

  inline Inst_bmnet_tile_forward_bmkernel& operator=(const Inst_bmnet_tile_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_tile_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_tile_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_tile_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_tile_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_tile_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_gaddr = 1;
  inline bool has_bottom_gaddr() const;
  inline void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_gaddr() const;
  inline void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 2;
  inline bool has_top_gaddr() const;
  inline void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 top_gaddr() const;
  inline void set_top_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 3;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 3;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 4;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 4;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 5;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 5;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 6;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 6;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // optional int32 axis = 7;
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 7;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 tiles = 8;
  inline bool has_tiles() const;
  inline void clear_tiles();
  static const int kTilesFieldNumber = 8;
  inline ::google::protobuf::int32 tiles() const;
  inline void set_tiles(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel)
 private:
  inline void set_has_bottom_gaddr();
  inline void clear_has_bottom_gaddr();
  inline void set_has_top_gaddr();
  inline void clear_has_top_gaddr();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_tiles();
  inline void clear_has_tiles();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 tiles_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_tile_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_relu_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_relu_forward_bmkernel();
  virtual ~Inst_bmnet_relu_forward_bmkernel();

  Inst_bmnet_relu_forward_bmkernel(const Inst_bmnet_relu_forward_bmkernel& from);

  inline Inst_bmnet_relu_forward_bmkernel& operator=(const Inst_bmnet_relu_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_relu_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_relu_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_relu_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_relu_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_relu_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_gaddr = 1;
  inline bool has_bottom_gaddr() const;
  inline void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_gaddr() const;
  inline void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 2;
  inline bool has_top_gaddr() const;
  inline void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 top_gaddr() const;
  inline void set_top_gaddr(::google::protobuf::uint64 value);

  // optional float negative_slope = 3;
  inline bool has_negative_slope() const;
  inline void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 3;
  inline float negative_slope() const;
  inline void set_negative_slope(float value);

  // optional int32 input_n = 4;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 4;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 5;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 5;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 6;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 6;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 7;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 7;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel)
 private:
  inline void set_has_bottom_gaddr();
  inline void clear_has_bottom_gaddr();
  inline void set_has_top_gaddr();
  inline void clear_has_top_gaddr();
  inline void set_has_negative_slope();
  inline void clear_has_negative_slope();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  float negative_slope_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_relu_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_batchnorm_forward_inference_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_batchnorm_forward_inference_bmkernel();
  virtual ~Inst_bmnet_batchnorm_forward_inference_bmkernel();

  Inst_bmnet_batchnorm_forward_inference_bmkernel(const Inst_bmnet_batchnorm_forward_inference_bmkernel& from);

  inline Inst_bmnet_batchnorm_forward_inference_bmkernel& operator=(const Inst_bmnet_batchnorm_forward_inference_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_batchnorm_forward_inference_bmkernel& default_instance();

  void Swap(Inst_bmnet_batchnorm_forward_inference_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_batchnorm_forward_inference_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_batchnorm_forward_inference_bmkernel& from);
  void MergeFrom(const Inst_bmnet_batchnorm_forward_inference_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_gaddr = 1;
  inline bool has_bottom_gaddr() const;
  inline void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_gaddr() const;
  inline void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 mean_ma_gaddr = 2;
  inline bool has_mean_ma_gaddr() const;
  inline void clear_mean_ma_gaddr();
  static const int kMeanMaGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 mean_ma_gaddr() const;
  inline void set_mean_ma_gaddr(::google::protobuf::uint64 value);

  // optional uint64 variance_ma_gaddr = 3;
  inline bool has_variance_ma_gaddr() const;
  inline void clear_variance_ma_gaddr();
  static const int kVarianceMaGaddrFieldNumber = 3;
  inline ::google::protobuf::uint64 variance_ma_gaddr() const;
  inline void set_variance_ma_gaddr(::google::protobuf::uint64 value);

  // optional float scale_ma = 4;
  inline bool has_scale_ma() const;
  inline void clear_scale_ma();
  static const int kScaleMaFieldNumber = 4;
  inline float scale_ma() const;
  inline void set_scale_ma(float value);

  // optional uint64 variance_gaddr = 5;
  inline bool has_variance_gaddr() const;
  inline void clear_variance_gaddr();
  static const int kVarianceGaddrFieldNumber = 5;
  inline ::google::protobuf::uint64 variance_gaddr() const;
  inline void set_variance_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 6;
  inline bool has_top_gaddr() const;
  inline void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 6;
  inline ::google::protobuf::uint64 top_gaddr() const;
  inline void set_top_gaddr(::google::protobuf::uint64 value);

  // optional float eps = 7;
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 7;
  inline float eps() const;
  inline void set_eps(float value);

  // optional int32 input_n = 8;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 8;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 9;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 9;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 10;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 10;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 11;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 11;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel)
 private:
  inline void set_has_bottom_gaddr();
  inline void clear_has_bottom_gaddr();
  inline void set_has_mean_ma_gaddr();
  inline void clear_has_mean_ma_gaddr();
  inline void set_has_variance_ma_gaddr();
  inline void clear_has_variance_ma_gaddr();
  inline void set_has_scale_ma();
  inline void clear_has_scale_ma();
  inline void set_has_variance_gaddr();
  inline void clear_has_variance_gaddr();
  inline void set_has_top_gaddr();
  inline void clear_has_top_gaddr();
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 mean_ma_gaddr_;
  ::google::protobuf::uint64 variance_ma_gaddr_;
  ::google::protobuf::uint64 variance_gaddr_;
  float scale_ma_;
  float eps_;
  ::google::protobuf::uint64 top_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_batchnorm_forward_inference_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_softmax_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_softmax_forward_bmkernel();
  virtual ~Inst_bmnet_softmax_forward_bmkernel();

  Inst_bmnet_softmax_forward_bmkernel(const Inst_bmnet_softmax_forward_bmkernel& from);

  inline Inst_bmnet_softmax_forward_bmkernel& operator=(const Inst_bmnet_softmax_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_softmax_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_softmax_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_softmax_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_softmax_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_softmax_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_gaddr = 1;
  inline bool has_bottom_gaddr() const;
  inline void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_gaddr() const;
  inline void set_bottom_gaddr(::google::protobuf::uint64 value);

  // optional uint64 top_gaddr = 2;
  inline bool has_top_gaddr() const;
  inline void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 top_gaddr() const;
  inline void set_top_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 3;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 3;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 4;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 4;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 5;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 5;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 6;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 6;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel)
 private:
  inline void set_has_bottom_gaddr();
  inline void clear_has_bottom_gaddr();
  inline void set_has_top_gaddr();
  inline void clear_has_top_gaddr();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::uint64 top_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_softmax_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_scale_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_scale_forward_bmkernel();
  virtual ~Inst_bmnet_scale_forward_bmkernel();

  Inst_bmnet_scale_forward_bmkernel(const Inst_bmnet_scale_forward_bmkernel& from);

  inline Inst_bmnet_scale_forward_bmkernel& operator=(const Inst_bmnet_scale_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_scale_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_scale_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_scale_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_scale_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_scale_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_gaddr = 1;
  inline bool has_input_gaddr() const;
  inline void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 input_gaddr() const;
  inline void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 scale_gaddr = 2;
  inline bool has_scale_gaddr() const;
  inline void clear_scale_gaddr();
  static const int kScaleGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 scale_gaddr() const;
  inline void set_scale_gaddr(::google::protobuf::uint64 value);

  // optional uint64 bias_gaddr = 3;
  inline bool has_bias_gaddr() const;
  inline void clear_bias_gaddr();
  static const int kBiasGaddrFieldNumber = 3;
  inline ::google::protobuf::uint64 bias_gaddr() const;
  inline void set_bias_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 4;
  inline bool has_output_gaddr() const;
  inline void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 4;
  inline ::google::protobuf::uint64 output_gaddr() const;
  inline void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 5;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 5;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 6;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 6;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 7;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 7;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 8;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 8;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // optional int32 scale_dim = 9;
  inline bool has_scale_dim() const;
  inline void clear_scale_dim();
  static const int kScaleDimFieldNumber = 9;
  inline ::google::protobuf::int32 scale_dim() const;
  inline void set_scale_dim(::google::protobuf::int32 value);

  // optional int32 inner_dim = 10;
  inline bool has_inner_dim() const;
  inline void clear_inner_dim();
  static const int kInnerDimFieldNumber = 10;
  inline ::google::protobuf::int32 inner_dim() const;
  inline void set_inner_dim(::google::protobuf::int32 value);

  // optional bool do_relu = 11;
  inline bool has_do_relu() const;
  inline void clear_do_relu();
  static const int kDoReluFieldNumber = 11;
  inline bool do_relu() const;
  inline void set_do_relu(bool value);

  // optional float relu_slope = 12;
  inline bool has_relu_slope() const;
  inline void clear_relu_slope();
  static const int kReluSlopeFieldNumber = 12;
  inline float relu_slope() const;
  inline void set_relu_slope(float value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel)
 private:
  inline void set_has_input_gaddr();
  inline void clear_has_input_gaddr();
  inline void set_has_scale_gaddr();
  inline void clear_has_scale_gaddr();
  inline void set_has_bias_gaddr();
  inline void clear_has_bias_gaddr();
  inline void set_has_output_gaddr();
  inline void clear_has_output_gaddr();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();
  inline void set_has_scale_dim();
  inline void clear_has_scale_dim();
  inline void set_has_inner_dim();
  inline void clear_has_inner_dim();
  inline void set_has_do_relu();
  inline void clear_has_do_relu();
  inline void set_has_relu_slope();
  inline void clear_has_relu_slope();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 scale_gaddr_;
  ::google::protobuf::uint64 bias_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 scale_dim_;
  ::google::protobuf::int32 inner_dim_;
  bool do_relu_;
  float relu_slope_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_scale_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_mvn_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_mvn_forward_bmkernel();
  virtual ~Inst_bmnet_mvn_forward_bmkernel();

  Inst_bmnet_mvn_forward_bmkernel(const Inst_bmnet_mvn_forward_bmkernel& from);

  inline Inst_bmnet_mvn_forward_bmkernel& operator=(const Inst_bmnet_mvn_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_mvn_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_mvn_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_mvn_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_mvn_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_mvn_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 mean_offset = 1;
  inline bool has_mean_offset() const;
  inline void clear_mean_offset();
  static const int kMeanOffsetFieldNumber = 1;
  inline ::google::protobuf::uint64 mean_offset() const;
  inline void set_mean_offset(::google::protobuf::uint64 value);

  // optional uint64 temp_offset = 2;
  inline bool has_temp_offset() const;
  inline void clear_temp_offset();
  static const int kTempOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 temp_offset() const;
  inline void set_temp_offset(::google::protobuf::uint64 value);

  // optional uint64 input_offset = 3;
  inline bool has_input_offset() const;
  inline void clear_input_offset();
  static const int kInputOffsetFieldNumber = 3;
  inline ::google::protobuf::uint64 input_offset() const;
  inline void set_input_offset(::google::protobuf::uint64 value);

  // optional uint64 variance_offset = 4;
  inline bool has_variance_offset() const;
  inline void clear_variance_offset();
  static const int kVarianceOffsetFieldNumber = 4;
  inline ::google::protobuf::uint64 variance_offset() const;
  inline void set_variance_offset(::google::protobuf::uint64 value);

  // optional uint64 output_offset = 5;
  inline bool has_output_offset() const;
  inline void clear_output_offset();
  static const int kOutputOffsetFieldNumber = 5;
  inline ::google::protobuf::uint64 output_offset() const;
  inline void set_output_offset(::google::protobuf::uint64 value);

  // optional int32 normalize_variance = 6;
  inline bool has_normalize_variance() const;
  inline void clear_normalize_variance();
  static const int kNormalizeVarianceFieldNumber = 6;
  inline ::google::protobuf::int32 normalize_variance() const;
  inline void set_normalize_variance(::google::protobuf::int32 value);

  // optional float eps_ = 7;
  inline bool has_eps_() const;
  inline void clear_eps_();
  static const int kEpsFieldNumber = 7;
  inline float eps_() const;
  inline void set_eps_(float value);

  // optional int32 input_n = 8;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 8;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 9;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 9;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 10;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 10;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 11;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 11;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel)
 private:
  inline void set_has_mean_offset();
  inline void clear_has_mean_offset();
  inline void set_has_temp_offset();
  inline void clear_has_temp_offset();
  inline void set_has_input_offset();
  inline void clear_has_input_offset();
  inline void set_has_variance_offset();
  inline void clear_has_variance_offset();
  inline void set_has_output_offset();
  inline void clear_has_output_offset();
  inline void set_has_normalize_variance();
  inline void clear_has_normalize_variance();
  inline void set_has_eps_();
  inline void clear_has_eps_();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mean_offset_;
  ::google::protobuf::uint64 temp_offset_;
  ::google::protobuf::uint64 input_offset_;
  ::google::protobuf::uint64 variance_offset_;
  ::google::protobuf::uint64 output_offset_;
  ::google::protobuf::int32 normalize_variance_;
  float eps__;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_mvn_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_reduction_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_reduction_forward_bmkernel();
  virtual ~Inst_bmnet_reduction_forward_bmkernel();

  Inst_bmnet_reduction_forward_bmkernel(const Inst_bmnet_reduction_forward_bmkernel& from);

  inline Inst_bmnet_reduction_forward_bmkernel& operator=(const Inst_bmnet_reduction_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_reduction_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_reduction_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_reduction_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_reduction_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_reduction_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_offset = 1;
  inline bool has_input_offset() const;
  inline void clear_input_offset();
  static const int kInputOffsetFieldNumber = 1;
  inline ::google::protobuf::uint64 input_offset() const;
  inline void set_input_offset(::google::protobuf::uint64 value);

  // optional uint64 output_offset = 2;
  inline bool has_output_offset() const;
  inline void clear_output_offset();
  static const int kOutputOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 output_offset() const;
  inline void set_output_offset(::google::protobuf::uint64 value);

  // optional int32 op_ = 3;
  inline bool has_op_() const;
  inline void clear_op_();
  static const int kOpFieldNumber = 3;
  inline ::google::protobuf::int32 op_() const;
  inline void set_op_(::google::protobuf::int32 value);

  // optional float coeff_ = 4;
  inline bool has_coeff_() const;
  inline void clear_coeff_();
  static const int kCoeffFieldNumber = 4;
  inline float coeff_() const;
  inline void set_coeff_(float value);

  // optional int32 input_c = 5;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 5;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 6;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 6;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel)
 private:
  inline void set_has_input_offset();
  inline void clear_has_input_offset();
  inline void set_has_output_offset();
  inline void clear_has_output_offset();
  inline void set_has_op_();
  inline void clear_has_op_();
  inline void set_has_coeff_();
  inline void clear_has_coeff_();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_offset_;
  ::google::protobuf::uint64 output_offset_;
  ::google::protobuf::int32 op__;
  float coeff__;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_reduction_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_prelu_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_prelu_forward_bmkernel();
  virtual ~Inst_bmnet_prelu_forward_bmkernel();

  Inst_bmnet_prelu_forward_bmkernel(const Inst_bmnet_prelu_forward_bmkernel& from);

  inline Inst_bmnet_prelu_forward_bmkernel& operator=(const Inst_bmnet_prelu_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_prelu_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_prelu_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_prelu_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_prelu_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_prelu_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_gaddr = 1;
  inline bool has_input_gaddr() const;
  inline void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 input_gaddr() const;
  inline void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 slope_gaddr = 2;
  inline bool has_slope_gaddr() const;
  inline void clear_slope_gaddr();
  static const int kSlopeGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 slope_gaddr() const;
  inline void set_slope_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 3;
  inline bool has_output_gaddr() const;
  inline void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 3;
  inline ::google::protobuf::uint64 output_gaddr() const;
  inline void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 channel_shared = 4;
  inline bool has_channel_shared() const;
  inline void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 4;
  inline ::google::protobuf::int32 channel_shared() const;
  inline void set_channel_shared(::google::protobuf::int32 value);

  // optional float slope = 5;
  inline bool has_slope() const;
  inline void clear_slope();
  static const int kSlopeFieldNumber = 5;
  inline float slope() const;
  inline void set_slope(float value);

  // optional int32 input_n = 6;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 6;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 7;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 7;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 8;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 8;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 9;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 9;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel)
 private:
  inline void set_has_input_gaddr();
  inline void clear_has_input_gaddr();
  inline void set_has_slope_gaddr();
  inline void clear_has_slope_gaddr();
  inline void set_has_output_gaddr();
  inline void clear_has_output_gaddr();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();
  inline void set_has_slope();
  inline void clear_has_slope();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 slope_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 channel_shared_;
  float slope_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_prelu_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_split_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_split_forward_bmkernel();
  virtual ~Inst_bmnet_split_forward_bmkernel();

  Inst_bmnet_split_forward_bmkernel(const Inst_bmnet_split_forward_bmkernel& from);

  inline Inst_bmnet_split_forward_bmkernel& operator=(const Inst_bmnet_split_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_split_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_split_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_split_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_split_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_split_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bottom_gaddr = 1;
  inline bool has_bottom_gaddr() const;
  inline void clear_bottom_gaddr();
  static const int kBottomGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 bottom_gaddr() const;
  inline void set_bottom_gaddr(::google::protobuf::uint64 value);

  // repeated uint64 top_gaddr = 2;
  inline int top_gaddr_size() const;
  inline void clear_top_gaddr();
  static const int kTopGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 top_gaddr(int index) const;
  inline void set_top_gaddr(int index, ::google::protobuf::uint64 value);
  inline void add_top_gaddr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      top_gaddr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_top_gaddr();

  // optional int32 top_size = 3;
  inline bool has_top_size() const;
  inline void clear_top_size();
  static const int kTopSizeFieldNumber = 3;
  inline ::google::protobuf::int32 top_size() const;
  inline void set_top_size(::google::protobuf::int32 value);

  // optional int32 input_n = 4;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 4;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 5;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 5;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 6;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 6;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 7;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 7;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel)
 private:
  inline void set_has_bottom_gaddr();
  inline void clear_has_bottom_gaddr();
  inline void set_has_top_size();
  inline void clear_has_top_size();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bottom_gaddr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > top_gaddr_;
  ::google::protobuf::int32 top_size_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_split_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_concat_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_concat_forward_bmkernel();
  virtual ~Inst_bmnet_concat_forward_bmkernel();

  Inst_bmnet_concat_forward_bmkernel(const Inst_bmnet_concat_forward_bmkernel& from);

  inline Inst_bmnet_concat_forward_bmkernel& operator=(const Inst_bmnet_concat_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_concat_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_concat_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_concat_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_concat_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_concat_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 input_gaddrs = 1;
  inline int input_gaddrs_size() const;
  inline void clear_input_gaddrs();
  static const int kInputGaddrsFieldNumber = 1;
  inline ::google::protobuf::uint64 input_gaddrs(int index) const;
  inline void set_input_gaddrs(int index, ::google::protobuf::uint64 value);
  inline void add_input_gaddrs(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      input_gaddrs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_input_gaddrs();

  // repeated uint64 output_gaddrs = 2;
  inline int output_gaddrs_size() const;
  inline void clear_output_gaddrs();
  static const int kOutputGaddrsFieldNumber = 2;
  inline ::google::protobuf::uint64 output_gaddrs(int index) const;
  inline void set_output_gaddrs(int index, ::google::protobuf::uint64 value);
  inline void add_output_gaddrs(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      output_gaddrs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_output_gaddrs();

  // optional int32 axis = 3;
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 3;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // repeated int32 input_dims = 4;
  inline int input_dims_size() const;
  inline void clear_input_dims();
  static const int kInputDimsFieldNumber = 4;
  inline ::google::protobuf::int32 input_dims(int index) const;
  inline void set_input_dims(int index, ::google::protobuf::int32 value);
  inline void add_input_dims(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dims() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dims();

  // optional int32 input_num = 5;
  inline bool has_input_num() const;
  inline void clear_input_num();
  static const int kInputNumFieldNumber = 5;
  inline ::google::protobuf::int32 input_num() const;
  inline void set_input_num(::google::protobuf::int32 value);

  // optional int32 output_dim_len = 6;
  inline bool has_output_dim_len() const;
  inline void clear_output_dim_len();
  static const int kOutputDimLenFieldNumber = 6;
  inline ::google::protobuf::int32 output_dim_len() const;
  inline void set_output_dim_len(::google::protobuf::int32 value);

  // repeated int32 output_dim = 7;
  inline int output_dim_size() const;
  inline void clear_output_dim();
  static const int kOutputDimFieldNumber = 7;
  inline ::google::protobuf::int32 output_dim(int index) const;
  inline void set_output_dim(int index, ::google::protobuf::int32 value);
  inline void add_output_dim(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      output_dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_output_dim();

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_input_num();
  inline void clear_has_input_num();
  inline void set_has_output_dim_len();
  inline void clear_has_output_dim_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > input_gaddrs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > output_gaddrs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dims_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 input_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > output_dim_;
  ::google::protobuf::int32 output_dim_len_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_concat_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_upsample_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_upsample_bmkernel();
  virtual ~Inst_bmnet_upsample_bmkernel();

  Inst_bmnet_upsample_bmkernel(const Inst_bmnet_upsample_bmkernel& from);

  inline Inst_bmnet_upsample_bmkernel& operator=(const Inst_bmnet_upsample_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_upsample_bmkernel& default_instance();

  void Swap(Inst_bmnet_upsample_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_upsample_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_upsample_bmkernel& from);
  void MergeFrom(const Inst_bmnet_upsample_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ga_ifmap = 1;
  inline bool has_ga_ifmap() const;
  inline void clear_ga_ifmap();
  static const int kGaIfmapFieldNumber = 1;
  inline ::google::protobuf::uint64 ga_ifmap() const;
  inline void set_ga_ifmap(::google::protobuf::uint64 value);

  // optional uint64 ga_ofmap = 2;
  inline bool has_ga_ofmap() const;
  inline void clear_ga_ofmap();
  static const int kGaOfmapFieldNumber = 2;
  inline ::google::protobuf::uint64 ga_ofmap() const;
  inline void set_ga_ofmap(::google::protobuf::uint64 value);

  // optional int32 input_n = 3;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 3;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 4;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 4;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 5;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 5;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 6;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 6;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // optional int32 size = 7;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 7;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_upsample_bmkernel)
 private:
  inline void set_has_ga_ifmap();
  inline void clear_has_ga_ifmap();
  inline void set_has_ga_ofmap();
  inline void clear_has_ga_ofmap();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ga_ifmap_;
  ::google::protobuf::uint64 ga_ofmap_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 size_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_upsample_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_reshape_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_reshape_forward_bmkernel();
  virtual ~Inst_bmnet_reshape_forward_bmkernel();

  Inst_bmnet_reshape_forward_bmkernel(const Inst_bmnet_reshape_forward_bmkernel& from);

  inline Inst_bmnet_reshape_forward_bmkernel& operator=(const Inst_bmnet_reshape_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_reshape_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_reshape_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_reshape_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_reshape_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_reshape_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_gaddr = 1;
  inline bool has_input_gaddr() const;
  inline void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 input_gaddr() const;
  inline void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 2;
  inline bool has_output_gaddr() const;
  inline void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 output_gaddr() const;
  inline void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 output_dim_len = 3;
  inline bool has_output_dim_len() const;
  inline void clear_output_dim_len();
  static const int kOutputDimLenFieldNumber = 3;
  inline ::google::protobuf::int32 output_dim_len() const;
  inline void set_output_dim_len(::google::protobuf::int32 value);

  // repeated int32 output_dim = 4;
  inline int output_dim_size() const;
  inline void clear_output_dim();
  static const int kOutputDimFieldNumber = 4;
  inline ::google::protobuf::int32 output_dim(int index) const;
  inline void set_output_dim(int index, ::google::protobuf::int32 value);
  inline void add_output_dim(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      output_dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_output_dim();

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel)
 private:
  inline void set_has_input_gaddr();
  inline void clear_has_input_gaddr();
  inline void set_has_output_gaddr();
  inline void clear_has_output_gaddr();
  inline void set_has_output_dim_len();
  inline void clear_has_output_dim_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > output_dim_;
  ::google::protobuf::int32 output_dim_len_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_reshape_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_permute_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_permute_forward_bmkernel();
  virtual ~Inst_bmnet_permute_forward_bmkernel();

  Inst_bmnet_permute_forward_bmkernel(const Inst_bmnet_permute_forward_bmkernel& from);

  inline Inst_bmnet_permute_forward_bmkernel& operator=(const Inst_bmnet_permute_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_permute_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_permute_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_permute_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_permute_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_permute_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_gaddr = 1;
  inline bool has_input_gaddr() const;
  inline void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 input_gaddr() const;
  inline void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 2;
  inline bool has_output_gaddr() const;
  inline void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 output_gaddr() const;
  inline void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 3;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 3;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 4;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 4;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 5;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 5;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 6;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 6;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // optional int32 output_n = 7;
  inline bool has_output_n() const;
  inline void clear_output_n();
  static const int kOutputNFieldNumber = 7;
  inline ::google::protobuf::int32 output_n() const;
  inline void set_output_n(::google::protobuf::int32 value);

  // optional int32 output_c = 8;
  inline bool has_output_c() const;
  inline void clear_output_c();
  static const int kOutputCFieldNumber = 8;
  inline ::google::protobuf::int32 output_c() const;
  inline void set_output_c(::google::protobuf::int32 value);

  // optional int32 output_h = 9;
  inline bool has_output_h() const;
  inline void clear_output_h();
  static const int kOutputHFieldNumber = 9;
  inline ::google::protobuf::int32 output_h() const;
  inline void set_output_h(::google::protobuf::int32 value);

  // optional int32 output_w = 10;
  inline bool has_output_w() const;
  inline void clear_output_w();
  static const int kOutputWFieldNumber = 10;
  inline ::google::protobuf::int32 output_w() const;
  inline void set_output_w(::google::protobuf::int32 value);

  // optional int32 order_n = 11;
  inline bool has_order_n() const;
  inline void clear_order_n();
  static const int kOrderNFieldNumber = 11;
  inline ::google::protobuf::int32 order_n() const;
  inline void set_order_n(::google::protobuf::int32 value);

  // optional int32 order_c = 12;
  inline bool has_order_c() const;
  inline void clear_order_c();
  static const int kOrderCFieldNumber = 12;
  inline ::google::protobuf::int32 order_c() const;
  inline void set_order_c(::google::protobuf::int32 value);

  // optional int32 order_h = 13;
  inline bool has_order_h() const;
  inline void clear_order_h();
  static const int kOrderHFieldNumber = 13;
  inline ::google::protobuf::int32 order_h() const;
  inline void set_order_h(::google::protobuf::int32 value);

  // optional int32 order_w = 14;
  inline bool has_order_w() const;
  inline void clear_order_w();
  static const int kOrderWFieldNumber = 14;
  inline ::google::protobuf::int32 order_w() const;
  inline void set_order_w(::google::protobuf::int32 value);

  // optional bool need_permute_ = 15;
  inline bool has_need_permute_() const;
  inline void clear_need_permute_();
  static const int kNeedPermuteFieldNumber = 15;
  inline bool need_permute_() const;
  inline void set_need_permute_(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel)
 private:
  inline void set_has_input_gaddr();
  inline void clear_has_input_gaddr();
  inline void set_has_output_gaddr();
  inline void clear_has_output_gaddr();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();
  inline void set_has_output_n();
  inline void clear_has_output_n();
  inline void set_has_output_c();
  inline void clear_has_output_c();
  inline void set_has_output_h();
  inline void clear_has_output_h();
  inline void set_has_output_w();
  inline void clear_has_output_w();
  inline void set_has_order_n();
  inline void clear_has_order_n();
  inline void set_has_order_c();
  inline void clear_has_order_c();
  inline void set_has_order_h();
  inline void clear_has_order_h();
  inline void set_has_order_w();
  inline void clear_has_order_w();
  inline void set_has_need_permute_();
  inline void clear_has_need_permute_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 output_n_;
  ::google::protobuf::int32 output_c_;
  ::google::protobuf::int32 output_h_;
  ::google::protobuf::int32 output_w_;
  ::google::protobuf::int32 order_n_;
  ::google::protobuf::int32 order_c_;
  ::google::protobuf::int32 order_h_;
  ::google::protobuf::int32 order_w_;
  bool need_permute__;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_permute_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_flatten_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_flatten_forward_bmkernel();
  virtual ~Inst_bmnet_flatten_forward_bmkernel();

  Inst_bmnet_flatten_forward_bmkernel(const Inst_bmnet_flatten_forward_bmkernel& from);

  inline Inst_bmnet_flatten_forward_bmkernel& operator=(const Inst_bmnet_flatten_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_flatten_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_flatten_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_flatten_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_flatten_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_flatten_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_gaddr = 1;
  inline bool has_input_gaddr() const;
  inline void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 input_gaddr() const;
  inline void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 2;
  inline bool has_output_gaddr() const;
  inline void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 output_gaddr() const;
  inline void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_dim_len = 3;
  inline bool has_input_dim_len() const;
  inline void clear_input_dim_len();
  static const int kInputDimLenFieldNumber = 3;
  inline ::google::protobuf::int32 input_dim_len() const;
  inline void set_input_dim_len(::google::protobuf::int32 value);

  // repeated int32 input_dim = 4;
  inline int input_dim_size() const;
  inline void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  inline ::google::protobuf::int32 input_dim(int index) const;
  inline void set_input_dim(int index, ::google::protobuf::int32 value);
  inline void add_input_dim(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel)
 private:
  inline void set_has_input_gaddr();
  inline void clear_has_input_gaddr();
  inline void set_has_output_gaddr();
  inline void clear_has_output_gaddr();
  inline void set_has_input_dim_len();
  inline void clear_has_input_dim_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::google::protobuf::int32 input_dim_len_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_flatten_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_normalize_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_normalize_forward_bmkernel();
  virtual ~Inst_bmnet_normalize_forward_bmkernel();

  Inst_bmnet_normalize_forward_bmkernel(const Inst_bmnet_normalize_forward_bmkernel& from);

  inline Inst_bmnet_normalize_forward_bmkernel& operator=(const Inst_bmnet_normalize_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_normalize_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_normalize_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_normalize_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_normalize_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_normalize_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_gaddr = 1;
  inline bool has_input_gaddr() const;
  inline void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 input_gaddr() const;
  inline void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 2;
  inline bool has_output_gaddr() const;
  inline void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 output_gaddr() const;
  inline void set_output_gaddr(::google::protobuf::uint64 value);

  // optional bool has_scale_blob = 3;
  inline bool has_has_scale_blob() const;
  inline void clear_has_scale_blob();
  static const int kHasScaleBlobFieldNumber = 3;
  inline bool has_scale_blob() const;
  inline void set_has_scale_blob(bool value);

  // optional uint64 scale_gaddr = 4;
  inline bool has_scale_gaddr() const;
  inline void clear_scale_gaddr();
  static const int kScaleGaddrFieldNumber = 4;
  inline ::google::protobuf::uint64 scale_gaddr() const;
  inline void set_scale_gaddr(::google::protobuf::uint64 value);

  // optional bool across_spatial = 5;
  inline bool has_across_spatial() const;
  inline void clear_across_spatial();
  static const int kAcrossSpatialFieldNumber = 5;
  inline bool across_spatial() const;
  inline void set_across_spatial(bool value);

  // optional bool channel_shared = 6;
  inline bool has_channel_shared() const;
  inline void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 6;
  inline bool channel_shared() const;
  inline void set_channel_shared(bool value);

  // optional float eps = 7;
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 7;
  inline float eps() const;
  inline void set_eps(float value);

  // repeated float scales = 8;
  inline int scales_size() const;
  inline void clear_scales();
  static const int kScalesFieldNumber = 8;
  inline float scales(int index) const;
  inline void set_scales(int index, float value);
  inline void add_scales(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      scales() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_scales();

  // optional int32 input_n = 9;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 9;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 10;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 10;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 11;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 11;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 12;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 12;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel)
 private:
  inline void set_has_input_gaddr();
  inline void clear_has_input_gaddr();
  inline void set_has_output_gaddr();
  inline void clear_has_output_gaddr();
  inline void set_has_has_scale_blob();
  inline void clear_has_has_scale_blob();
  inline void set_has_scale_gaddr();
  inline void clear_has_scale_gaddr();
  inline void set_has_across_spatial();
  inline void clear_has_across_spatial();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::uint64 scale_gaddr_;
  bool has_scale_blob_;
  bool across_spatial_;
  bool channel_shared_;
  float eps_;
  ::google::protobuf::RepeatedField< float > scales_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_normalize_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_deconv_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_deconv_forward_bmkernel();
  virtual ~Inst_bmnet_deconv_forward_bmkernel();

  Inst_bmnet_deconv_forward_bmkernel(const Inst_bmnet_deconv_forward_bmkernel& from);

  inline Inst_bmnet_deconv_forward_bmkernel& operator=(const Inst_bmnet_deconv_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_deconv_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_deconv_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_deconv_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_deconv_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_deconv_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ga_ifmap = 1;
  inline bool has_ga_ifmap() const;
  inline void clear_ga_ifmap();
  static const int kGaIfmapFieldNumber = 1;
  inline ::google::protobuf::uint64 ga_ifmap() const;
  inline void set_ga_ifmap(::google::protobuf::uint64 value);

  // optional uint64 ga_ofmap = 2;
  inline bool has_ga_ofmap() const;
  inline void clear_ga_ofmap();
  static const int kGaOfmapFieldNumber = 2;
  inline ::google::protobuf::uint64 ga_ofmap() const;
  inline void set_ga_ofmap(::google::protobuf::uint64 value);

  // optional uint64 ga_weight = 3;
  inline bool has_ga_weight() const;
  inline void clear_ga_weight();
  static const int kGaWeightFieldNumber = 3;
  inline ::google::protobuf::uint64 ga_weight() const;
  inline void set_ga_weight(::google::protobuf::uint64 value);

  // optional uint64 ga_bias = 4;
  inline bool has_ga_bias() const;
  inline void clear_ga_bias();
  static const int kGaBiasFieldNumber = 4;
  inline ::google::protobuf::uint64 ga_bias() const;
  inline void set_ga_bias(::google::protobuf::uint64 value);

  // optional int32 input_n = 5;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 5;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 6;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 6;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 7;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 7;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 8;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 8;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // optional int32 groups = 9;
  inline bool has_groups() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 9;
  inline ::google::protobuf::int32 groups() const;
  inline void set_groups(::google::protobuf::int32 value);

  // optional int32 output_c = 10;
  inline bool has_output_c() const;
  inline void clear_output_c();
  static const int kOutputCFieldNumber = 10;
  inline ::google::protobuf::int32 output_c() const;
  inline void set_output_c(::google::protobuf::int32 value);

  // optional int32 output_h = 11;
  inline bool has_output_h() const;
  inline void clear_output_h();
  static const int kOutputHFieldNumber = 11;
  inline ::google::protobuf::int32 output_h() const;
  inline void set_output_h(::google::protobuf::int32 value);

  // optional int32 output_w = 12;
  inline bool has_output_w() const;
  inline void clear_output_w();
  static const int kOutputWFieldNumber = 12;
  inline ::google::protobuf::int32 output_w() const;
  inline void set_output_w(::google::protobuf::int32 value);

  // optional int32 kh = 13;
  inline bool has_kh() const;
  inline void clear_kh();
  static const int kKhFieldNumber = 13;
  inline ::google::protobuf::int32 kh() const;
  inline void set_kh(::google::protobuf::int32 value);

  // optional int32 kw = 14;
  inline bool has_kw() const;
  inline void clear_kw();
  static const int kKwFieldNumber = 14;
  inline ::google::protobuf::int32 kw() const;
  inline void set_kw(::google::protobuf::int32 value);

  // optional int32 dh = 15;
  inline bool has_dh() const;
  inline void clear_dh();
  static const int kDhFieldNumber = 15;
  inline ::google::protobuf::int32 dh() const;
  inline void set_dh(::google::protobuf::int32 value);

  // optional int32 dw = 16;
  inline bool has_dw() const;
  inline void clear_dw();
  static const int kDwFieldNumber = 16;
  inline ::google::protobuf::int32 dw() const;
  inline void set_dw(::google::protobuf::int32 value);

  // optional int32 pad_h = 17;
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 17;
  inline ::google::protobuf::int32 pad_h() const;
  inline void set_pad_h(::google::protobuf::int32 value);

  // optional int32 pad_w = 18;
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 18;
  inline ::google::protobuf::int32 pad_w() const;
  inline void set_pad_w(::google::protobuf::int32 value);

  // optional int32 stride_h = 19;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 19;
  inline ::google::protobuf::int32 stride_h() const;
  inline void set_stride_h(::google::protobuf::int32 value);

  // optional int32 stride_w = 20;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 20;
  inline ::google::protobuf::int32 stride_w() const;
  inline void set_stride_w(::google::protobuf::int32 value);

  // optional bool using_bias = 21;
  inline bool has_using_bias() const;
  inline void clear_using_bias();
  static const int kUsingBiasFieldNumber = 21;
  inline bool using_bias() const;
  inline void set_using_bias(bool value);

  // optional bool result_add = 22;
  inline bool has_result_add() const;
  inline void clear_result_add();
  static const int kResultAddFieldNumber = 22;
  inline bool result_add() const;
  inline void set_result_add(bool value);

  // optional bool do_relu = 23;
  inline bool has_do_relu() const;
  inline void clear_do_relu();
  static const int kDoReluFieldNumber = 23;
  inline bool do_relu() const;
  inline void set_do_relu(bool value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel)
 private:
  inline void set_has_ga_ifmap();
  inline void clear_has_ga_ifmap();
  inline void set_has_ga_ofmap();
  inline void clear_has_ga_ofmap();
  inline void set_has_ga_weight();
  inline void clear_has_ga_weight();
  inline void set_has_ga_bias();
  inline void clear_has_ga_bias();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();
  inline void set_has_groups();
  inline void clear_has_groups();
  inline void set_has_output_c();
  inline void clear_has_output_c();
  inline void set_has_output_h();
  inline void clear_has_output_h();
  inline void set_has_output_w();
  inline void clear_has_output_w();
  inline void set_has_kh();
  inline void clear_has_kh();
  inline void set_has_kw();
  inline void clear_has_kw();
  inline void set_has_dh();
  inline void clear_has_dh();
  inline void set_has_dw();
  inline void clear_has_dw();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_using_bias();
  inline void clear_has_using_bias();
  inline void set_has_result_add();
  inline void clear_has_result_add();
  inline void set_has_do_relu();
  inline void clear_has_do_relu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ga_ifmap_;
  ::google::protobuf::uint64 ga_ofmap_;
  ::google::protobuf::uint64 ga_weight_;
  ::google::protobuf::uint64 ga_bias_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 groups_;
  ::google::protobuf::int32 output_c_;
  ::google::protobuf::int32 output_h_;
  ::google::protobuf::int32 output_w_;
  ::google::protobuf::int32 kh_;
  ::google::protobuf::int32 kw_;
  ::google::protobuf::int32 dh_;
  ::google::protobuf::int32 dw_;
  ::google::protobuf::int32 pad_h_;
  ::google::protobuf::int32 pad_w_;
  ::google::protobuf::int32 stride_h_;
  ::google::protobuf::int32 stride_w_;
  bool using_bias_;
  bool result_add_;
  bool do_relu_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_deconv_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_stack_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_stack_forward_bmkernel();
  virtual ~Inst_bmnet_stack_forward_bmkernel();

  Inst_bmnet_stack_forward_bmkernel(const Inst_bmnet_stack_forward_bmkernel& from);

  inline Inst_bmnet_stack_forward_bmkernel& operator=(const Inst_bmnet_stack_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_stack_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_stack_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_stack_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_stack_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_stack_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 input_gaddrs = 1;
  inline int input_gaddrs_size() const;
  inline void clear_input_gaddrs();
  static const int kInputGaddrsFieldNumber = 1;
  inline ::google::protobuf::uint64 input_gaddrs(int index) const;
  inline void set_input_gaddrs(int index, ::google::protobuf::uint64 value);
  inline void add_input_gaddrs(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      input_gaddrs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_input_gaddrs();

  // optional uint64 output_gaddr = 2;
  inline bool has_output_gaddr() const;
  inline void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 output_gaddr() const;
  inline void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_size = 3;
  inline bool has_input_size() const;
  inline void clear_input_size();
  static const int kInputSizeFieldNumber = 3;
  inline ::google::protobuf::int32 input_size() const;
  inline void set_input_size(::google::protobuf::int32 value);

  // optional int32 input_n = 4;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 4;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 5;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 5;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 6;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 6;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 7;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 7;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // optional int32 axis = 8;
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 8;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel)
 private:
  inline void set_has_output_gaddr();
  inline void clear_has_output_gaddr();
  inline void set_has_input_size();
  inline void clear_has_input_size();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > input_gaddrs_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 input_size_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_stack_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_arithmetic_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_arithmetic_forward_bmkernel();
  virtual ~Inst_bmnet_arithmetic_forward_bmkernel();

  Inst_bmnet_arithmetic_forward_bmkernel(const Inst_bmnet_arithmetic_forward_bmkernel& from);

  inline Inst_bmnet_arithmetic_forward_bmkernel& operator=(const Inst_bmnet_arithmetic_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_arithmetic_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_arithmetic_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_arithmetic_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_arithmetic_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_arithmetic_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_gaddr_0 = 1;
  inline bool has_input_gaddr_0() const;
  inline void clear_input_gaddr_0();
  static const int kInputGaddr0FieldNumber = 1;
  inline ::google::protobuf::uint64 input_gaddr_0() const;
  inline void set_input_gaddr_0(::google::protobuf::uint64 value);

  // optional uint64 input_gaddr_1 = 2;
  inline bool has_input_gaddr_1() const;
  inline void clear_input_gaddr_1();
  static const int kInputGaddr1FieldNumber = 2;
  inline ::google::protobuf::uint64 input_gaddr_1() const;
  inline void set_input_gaddr_1(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 3;
  inline bool has_output_gaddr() const;
  inline void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 3;
  inline ::google::protobuf::uint64 output_gaddr() const;
  inline void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 op = 4;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 4;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // optional int32 input_n = 5;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 5;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 6;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 6;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 7;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 7;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 8;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 8;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // optional int32 b_n = 9;
  inline bool has_b_n() const;
  inline void clear_b_n();
  static const int kBNFieldNumber = 9;
  inline ::google::protobuf::int32 b_n() const;
  inline void set_b_n(::google::protobuf::int32 value);

  // optional int32 b_c = 10;
  inline bool has_b_c() const;
  inline void clear_b_c();
  static const int kBCFieldNumber = 10;
  inline ::google::protobuf::int32 b_c() const;
  inline void set_b_c(::google::protobuf::int32 value);

  // optional int32 b_h = 11;
  inline bool has_b_h() const;
  inline void clear_b_h();
  static const int kBHFieldNumber = 11;
  inline ::google::protobuf::int32 b_h() const;
  inline void set_b_h(::google::protobuf::int32 value);

  // optional int32 b_w = 12;
  inline bool has_b_w() const;
  inline void clear_b_w();
  static const int kBWFieldNumber = 12;
  inline ::google::protobuf::int32 b_w() const;
  inline void set_b_w(::google::protobuf::int32 value);

  // optional bool is_b_const = 13;
  inline bool has_is_b_const() const;
  inline void clear_is_b_const();
  static const int kIsBConstFieldNumber = 13;
  inline bool is_b_const() const;
  inline void set_is_b_const(bool value);

  // optional float b_value = 14;
  inline bool has_b_value() const;
  inline void clear_b_value();
  static const int kBValueFieldNumber = 14;
  inline float b_value() const;
  inline void set_b_value(float value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel)
 private:
  inline void set_has_input_gaddr_0();
  inline void clear_has_input_gaddr_0();
  inline void set_has_input_gaddr_1();
  inline void clear_has_input_gaddr_1();
  inline void set_has_output_gaddr();
  inline void clear_has_output_gaddr();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();
  inline void set_has_b_n();
  inline void clear_has_b_n();
  inline void set_has_b_c();
  inline void clear_has_b_c();
  inline void set_has_b_h();
  inline void clear_has_b_h();
  inline void set_has_b_w();
  inline void clear_has_b_w();
  inline void set_has_is_b_const();
  inline void clear_has_is_b_const();
  inline void set_has_b_value();
  inline void clear_has_b_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_gaddr_0_;
  ::google::protobuf::uint64 input_gaddr_1_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 op_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 b_n_;
  ::google::protobuf::int32 b_c_;
  ::google::protobuf::int32 b_h_;
  ::google::protobuf::int32 b_w_;
  bool is_b_const_;
  float b_value_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_arithmetic_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_resizebilinear_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_resizebilinear_forward_bmkernel();
  virtual ~Inst_bmnet_resizebilinear_forward_bmkernel();

  Inst_bmnet_resizebilinear_forward_bmkernel(const Inst_bmnet_resizebilinear_forward_bmkernel& from);

  inline Inst_bmnet_resizebilinear_forward_bmkernel& operator=(const Inst_bmnet_resizebilinear_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_resizebilinear_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_resizebilinear_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_resizebilinear_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_resizebilinear_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_resizebilinear_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_gaddr = 1;
  inline bool has_input_gaddr() const;
  inline void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 input_gaddr() const;
  inline void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 2;
  inline bool has_output_gaddr() const;
  inline void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 output_gaddr() const;
  inline void set_output_gaddr(::google::protobuf::uint64 value);

  // optional uint64 weight_gaddr = 3;
  inline bool has_weight_gaddr() const;
  inline void clear_weight_gaddr();
  static const int kWeightGaddrFieldNumber = 3;
  inline ::google::protobuf::uint64 weight_gaddr() const;
  inline void set_weight_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 4;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 4;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 5;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 5;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 6;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 6;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 7;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 7;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // optional int32 resize_h = 8;
  inline bool has_resize_h() const;
  inline void clear_resize_h();
  static const int kResizeHFieldNumber = 8;
  inline ::google::protobuf::int32 resize_h() const;
  inline void set_resize_h(::google::protobuf::int32 value);

  // optional int32 resize_w = 9;
  inline bool has_resize_w() const;
  inline void clear_resize_w();
  static const int kResizeWFieldNumber = 9;
  inline ::google::protobuf::int32 resize_w() const;
  inline void set_resize_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel)
 private:
  inline void set_has_input_gaddr();
  inline void clear_has_input_gaddr();
  inline void set_has_output_gaddr();
  inline void clear_has_output_gaddr();
  inline void set_has_weight_gaddr();
  inline void clear_has_weight_gaddr();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();
  inline void set_has_resize_h();
  inline void clear_has_resize_h();
  inline void set_has_resize_w();
  inline void clear_has_resize_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::uint64 weight_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  ::google::protobuf::int32 resize_h_;
  ::google::protobuf::int32 resize_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_resizebilinear_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_priorbox_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_priorbox_forward_bmkernel();
  virtual ~Inst_bmnet_priorbox_forward_bmkernel();

  Inst_bmnet_priorbox_forward_bmkernel(const Inst_bmnet_priorbox_forward_bmkernel& from);

  inline Inst_bmnet_priorbox_forward_bmkernel& operator=(const Inst_bmnet_priorbox_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_priorbox_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_priorbox_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_priorbox_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_priorbox_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_priorbox_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 weight_gaddr = 1;
  inline bool has_weight_gaddr() const;
  inline void clear_weight_gaddr();
  static const int kWeightGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 weight_gaddr() const;
  inline void set_weight_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 2;
  inline bool has_output_gaddr() const;
  inline void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 output_gaddr() const;
  inline void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 input_n = 3;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 3;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 4;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 4;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 5;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 5;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 6;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 6;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel)
 private:
  inline void set_has_weight_gaddr();
  inline void clear_has_weight_gaddr();
  inline void set_has_output_gaddr();
  inline void clear_has_output_gaddr();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 weight_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_priorbox_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst_bmnet_reverse_forward_bmkernel : public ::google::protobuf::Message {
 public:
  Inst_bmnet_reverse_forward_bmkernel();
  virtual ~Inst_bmnet_reverse_forward_bmkernel();

  Inst_bmnet_reverse_forward_bmkernel(const Inst_bmnet_reverse_forward_bmkernel& from);

  inline Inst_bmnet_reverse_forward_bmkernel& operator=(const Inst_bmnet_reverse_forward_bmkernel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst_bmnet_reverse_forward_bmkernel& default_instance();

  void Swap(Inst_bmnet_reverse_forward_bmkernel* other);

  // implements Message ----------------------------------------------

  Inst_bmnet_reverse_forward_bmkernel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst_bmnet_reverse_forward_bmkernel& from);
  void MergeFrom(const Inst_bmnet_reverse_forward_bmkernel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 input_gaddr = 1;
  inline bool has_input_gaddr() const;
  inline void clear_input_gaddr();
  static const int kInputGaddrFieldNumber = 1;
  inline ::google::protobuf::uint64 input_gaddr() const;
  inline void set_input_gaddr(::google::protobuf::uint64 value);

  // optional uint64 output_gaddr = 2;
  inline bool has_output_gaddr() const;
  inline void clear_output_gaddr();
  static const int kOutputGaddrFieldNumber = 2;
  inline ::google::protobuf::uint64 output_gaddr() const;
  inline void set_output_gaddr(::google::protobuf::uint64 value);

  // optional int32 axis = 3;
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 3;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 input_n = 4;
  inline bool has_input_n() const;
  inline void clear_input_n();
  static const int kInputNFieldNumber = 4;
  inline ::google::protobuf::int32 input_n() const;
  inline void set_input_n(::google::protobuf::int32 value);

  // optional int32 input_c = 5;
  inline bool has_input_c() const;
  inline void clear_input_c();
  static const int kInputCFieldNumber = 5;
  inline ::google::protobuf::int32 input_c() const;
  inline void set_input_c(::google::protobuf::int32 value);

  // optional int32 input_h = 6;
  inline bool has_input_h() const;
  inline void clear_input_h();
  static const int kInputHFieldNumber = 6;
  inline ::google::protobuf::int32 input_h() const;
  inline void set_input_h(::google::protobuf::int32 value);

  // optional int32 input_w = 7;
  inline bool has_input_w() const;
  inline void clear_input_w();
  static const int kInputWFieldNumber = 7;
  inline ::google::protobuf::int32 input_w() const;
  inline void set_input_w(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel)
 private:
  inline void set_has_input_gaddr();
  inline void clear_has_input_gaddr();
  inline void set_has_output_gaddr();
  inline void clear_has_output_gaddr();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_input_n();
  inline void clear_has_input_n();
  inline void set_has_input_c();
  inline void clear_has_input_c();
  inline void set_has_input_h();
  inline void clear_has_input_h();
  inline void set_has_input_w();
  inline void clear_has_input_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 input_gaddr_;
  ::google::protobuf::uint64 output_gaddr_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 input_n_;
  ::google::protobuf::int32 input_c_;
  ::google::protobuf::int32 input_h_;
  ::google::protobuf::int32 input_w_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst_bmnet_reverse_forward_bmkernel* default_instance_;
};
// -------------------------------------------------------------------

class Inst : public ::google::protobuf::Message {
 public:
  Inst();
  virtual ~Inst();

  Inst(const Inst& from);

  inline Inst& operator=(const Inst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inst& default_instance();

  void Swap(Inst* other);

  // implements Message ----------------------------------------------

  Inst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inst& from);
  void MergeFrom(const Inst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Inst_bmnet_pooling_forward_bmkernel bmnet_pooling_forward_bmkernel;
  typedef Inst_bmnet_conv_forward_bmkernel bmnet_conv_forward_bmkernel;
  typedef Inst_bmnet_threshold_forward_bmkernel bmnet_threshold_forward_bmkernel;
  typedef Inst_bmnet_exp_forward_bmkernel bmnet_exp_forward_bmkernel;
  typedef Inst_bmnet_power_forward_bmkernel bmnet_power_forward_bmkernel;
  typedef Inst_bmnet_absval_forward_bmkernel bmnet_absval_forward_bmkernel;
  typedef Inst_bmnet_sigmoid_forward_bmkernel bmnet_sigmoid_forward_bmkernel;
  typedef Inst_bmnet_log_forward_bmkernel bmnet_log_forward_bmkernel;
  typedef Inst_bmnet_fc_forward_bmkernel bmnet_fc_forward_bmkernel;
  typedef Inst_bmnet_bias_forward_bmkernel bmnet_bias_forward_bmkernel;
  typedef Inst_bmnet_elu_forward_bmkernel bmnet_elu_forward_bmkernel;
  typedef Inst_bmnet_tanh_forward_bmkernel bmnet_tanh_forward_bmkernel;
  typedef Inst_bmnet_lstm_unit_forward_bmkernel bmnet_lstm_unit_forward_bmkernel;
  typedef Inst_bmnet_lrn_forward_bmkernel bmnet_lrn_forward_bmkernel;
  typedef Inst_bmnet_bnll_forward_bmkernel bmnet_bnll_forward_bmkernel;
  typedef Inst_bmnet_crop_forward_bmkernel bmnet_crop_forward_bmkernel;
  typedef Inst_bmnet_slice_forward_bmkernel bmnet_slice_forward_bmkernel;
  typedef Inst_bmnet_eltwise_forward_bmkernel bmnet_eltwise_forward_bmkernel;
  typedef Inst_bmnet_tile_forward_bmkernel bmnet_tile_forward_bmkernel;
  typedef Inst_bmnet_relu_forward_bmkernel bmnet_relu_forward_bmkernel;
  typedef Inst_bmnet_batchnorm_forward_inference_bmkernel bmnet_batchnorm_forward_inference_bmkernel;
  typedef Inst_bmnet_softmax_forward_bmkernel bmnet_softmax_forward_bmkernel;
  typedef Inst_bmnet_scale_forward_bmkernel bmnet_scale_forward_bmkernel;
  typedef Inst_bmnet_mvn_forward_bmkernel bmnet_mvn_forward_bmkernel;
  typedef Inst_bmnet_reduction_forward_bmkernel bmnet_reduction_forward_bmkernel;
  typedef Inst_bmnet_prelu_forward_bmkernel bmnet_prelu_forward_bmkernel;
  typedef Inst_bmnet_split_forward_bmkernel bmnet_split_forward_bmkernel;
  typedef Inst_bmnet_concat_forward_bmkernel bmnet_concat_forward_bmkernel;
  typedef Inst_bmnet_upsample_bmkernel bmnet_upsample_bmkernel;
  typedef Inst_bmnet_reshape_forward_bmkernel bmnet_reshape_forward_bmkernel;
  typedef Inst_bmnet_permute_forward_bmkernel bmnet_permute_forward_bmkernel;
  typedef Inst_bmnet_flatten_forward_bmkernel bmnet_flatten_forward_bmkernel;
  typedef Inst_bmnet_normalize_forward_bmkernel bmnet_normalize_forward_bmkernel;
  typedef Inst_bmnet_deconv_forward_bmkernel bmnet_deconv_forward_bmkernel;
  typedef Inst_bmnet_stack_forward_bmkernel bmnet_stack_forward_bmkernel;
  typedef Inst_bmnet_arithmetic_forward_bmkernel bmnet_arithmetic_forward_bmkernel;
  typedef Inst_bmnet_resizebilinear_forward_bmkernel bmnet_resizebilinear_forward_bmkernel;
  typedef Inst_bmnet_priorbox_forward_bmkernel bmnet_priorbox_forward_bmkernel;
  typedef Inst_bmnet_reverse_forward_bmkernel bmnet_reverse_forward_bmkernel;

  typedef Inst_ActivationMethod ActivationMethod;
  static const ActivationMethod RELU = Inst_ActivationMethod_RELU;
  static const ActivationMethod SIGMOID = Inst_ActivationMethod_SIGMOID;
  static const ActivationMethod TANH = Inst_ActivationMethod_TANH;
  static const ActivationMethod ELU = Inst_ActivationMethod_ELU;
  static const ActivationMethod PRELU = Inst_ActivationMethod_PRELU;
  static inline bool ActivationMethod_IsValid(int value) {
    return Inst_ActivationMethod_IsValid(value);
  }
  static const ActivationMethod ActivationMethod_MIN =
    Inst_ActivationMethod_ActivationMethod_MIN;
  static const ActivationMethod ActivationMethod_MAX =
    Inst_ActivationMethod_ActivationMethod_MAX;
  static const int ActivationMethod_ARRAYSIZE =
    Inst_ActivationMethod_ActivationMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActivationMethod_descriptor() {
    return Inst_ActivationMethod_descriptor();
  }
  static inline const ::std::string& ActivationMethod_Name(ActivationMethod value) {
    return Inst_ActivationMethod_Name(value);
  }
  static inline bool ActivationMethod_Parse(const ::std::string& name,
      ActivationMethod* value) {
    return Inst_ActivationMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional .bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel pooling = 4;
  inline bool has_pooling() const;
  inline void clear_pooling();
  static const int kPoolingFieldNumber = 4;
  inline const ::bmnet::bm1680::Inst_bmnet_pooling_forward_bmkernel& pooling() const;
  inline ::bmnet::bm1680::Inst_bmnet_pooling_forward_bmkernel* mutable_pooling();
  inline ::bmnet::bm1680::Inst_bmnet_pooling_forward_bmkernel* release_pooling();
  inline void set_allocated_pooling(::bmnet::bm1680::Inst_bmnet_pooling_forward_bmkernel* pooling);

  // optional .bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel conv = 5;
  inline bool has_conv() const;
  inline void clear_conv();
  static const int kConvFieldNumber = 5;
  inline const ::bmnet::bm1680::Inst_bmnet_conv_forward_bmkernel& conv() const;
  inline ::bmnet::bm1680::Inst_bmnet_conv_forward_bmkernel* mutable_conv();
  inline ::bmnet::bm1680::Inst_bmnet_conv_forward_bmkernel* release_conv();
  inline void set_allocated_conv(::bmnet::bm1680::Inst_bmnet_conv_forward_bmkernel* conv);

  // optional .bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel bmnet_threshold_forward_bmkernel_short = 6;
  inline bool has_bmnet_threshold_forward_bmkernel_short() const;
  inline void clear_bmnet_threshold_forward_bmkernel_short();
  static const int kBmnetThresholdForwardBmkernelShortFieldNumber = 6;
  inline const ::bmnet::bm1680::Inst_bmnet_threshold_forward_bmkernel& bmnet_threshold_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_threshold_forward_bmkernel* mutable_bmnet_threshold_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_threshold_forward_bmkernel* release_bmnet_threshold_forward_bmkernel_short();
  inline void set_allocated_bmnet_threshold_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_threshold_forward_bmkernel* bmnet_threshold_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel bmnet_exp_forward_bmkernel_short = 7;
  inline bool has_bmnet_exp_forward_bmkernel_short() const;
  inline void clear_bmnet_exp_forward_bmkernel_short();
  static const int kBmnetExpForwardBmkernelShortFieldNumber = 7;
  inline const ::bmnet::bm1680::Inst_bmnet_exp_forward_bmkernel& bmnet_exp_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_exp_forward_bmkernel* mutable_bmnet_exp_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_exp_forward_bmkernel* release_bmnet_exp_forward_bmkernel_short();
  inline void set_allocated_bmnet_exp_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_exp_forward_bmkernel* bmnet_exp_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_power_forward_bmkernel bmnet_power_forward_bmkernel_short = 8;
  inline bool has_bmnet_power_forward_bmkernel_short() const;
  inline void clear_bmnet_power_forward_bmkernel_short();
  static const int kBmnetPowerForwardBmkernelShortFieldNumber = 8;
  inline const ::bmnet::bm1680::Inst_bmnet_power_forward_bmkernel& bmnet_power_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_power_forward_bmkernel* mutable_bmnet_power_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_power_forward_bmkernel* release_bmnet_power_forward_bmkernel_short();
  inline void set_allocated_bmnet_power_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_power_forward_bmkernel* bmnet_power_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel bmnet_absval_forward_bmkernel_short = 9;
  inline bool has_bmnet_absval_forward_bmkernel_short() const;
  inline void clear_bmnet_absval_forward_bmkernel_short();
  static const int kBmnetAbsvalForwardBmkernelShortFieldNumber = 9;
  inline const ::bmnet::bm1680::Inst_bmnet_absval_forward_bmkernel& bmnet_absval_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_absval_forward_bmkernel* mutable_bmnet_absval_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_absval_forward_bmkernel* release_bmnet_absval_forward_bmkernel_short();
  inline void set_allocated_bmnet_absval_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_absval_forward_bmkernel* bmnet_absval_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel bmnet_sigmoid_forward_bmkernel_short = 10;
  inline bool has_bmnet_sigmoid_forward_bmkernel_short() const;
  inline void clear_bmnet_sigmoid_forward_bmkernel_short();
  static const int kBmnetSigmoidForwardBmkernelShortFieldNumber = 10;
  inline const ::bmnet::bm1680::Inst_bmnet_sigmoid_forward_bmkernel& bmnet_sigmoid_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_sigmoid_forward_bmkernel* mutable_bmnet_sigmoid_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_sigmoid_forward_bmkernel* release_bmnet_sigmoid_forward_bmkernel_short();
  inline void set_allocated_bmnet_sigmoid_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_sigmoid_forward_bmkernel* bmnet_sigmoid_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_log_forward_bmkernel bmnet_log_forward_bmkernel_short = 11;
  inline bool has_bmnet_log_forward_bmkernel_short() const;
  inline void clear_bmnet_log_forward_bmkernel_short();
  static const int kBmnetLogForwardBmkernelShortFieldNumber = 11;
  inline const ::bmnet::bm1680::Inst_bmnet_log_forward_bmkernel& bmnet_log_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_log_forward_bmkernel* mutable_bmnet_log_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_log_forward_bmkernel* release_bmnet_log_forward_bmkernel_short();
  inline void set_allocated_bmnet_log_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_log_forward_bmkernel* bmnet_log_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel bmnet_fc_forward_bmkernel_short = 12;
  inline bool has_bmnet_fc_forward_bmkernel_short() const;
  inline void clear_bmnet_fc_forward_bmkernel_short();
  static const int kBmnetFcForwardBmkernelShortFieldNumber = 12;
  inline const ::bmnet::bm1680::Inst_bmnet_fc_forward_bmkernel& bmnet_fc_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_fc_forward_bmkernel* mutable_bmnet_fc_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_fc_forward_bmkernel* release_bmnet_fc_forward_bmkernel_short();
  inline void set_allocated_bmnet_fc_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_fc_forward_bmkernel* bmnet_fc_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel bmnet_bias_forward_bmkernel_short = 13;
  inline bool has_bmnet_bias_forward_bmkernel_short() const;
  inline void clear_bmnet_bias_forward_bmkernel_short();
  static const int kBmnetBiasForwardBmkernelShortFieldNumber = 13;
  inline const ::bmnet::bm1680::Inst_bmnet_bias_forward_bmkernel& bmnet_bias_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_bias_forward_bmkernel* mutable_bmnet_bias_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_bias_forward_bmkernel* release_bmnet_bias_forward_bmkernel_short();
  inline void set_allocated_bmnet_bias_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_bias_forward_bmkernel* bmnet_bias_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel bmnet_elu_forward_bmkernel_short = 14;
  inline bool has_bmnet_elu_forward_bmkernel_short() const;
  inline void clear_bmnet_elu_forward_bmkernel_short();
  static const int kBmnetEluForwardBmkernelShortFieldNumber = 14;
  inline const ::bmnet::bm1680::Inst_bmnet_elu_forward_bmkernel& bmnet_elu_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_elu_forward_bmkernel* mutable_bmnet_elu_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_elu_forward_bmkernel* release_bmnet_elu_forward_bmkernel_short();
  inline void set_allocated_bmnet_elu_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_elu_forward_bmkernel* bmnet_elu_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel bmnet_tanh_forward_bmkernel_short = 15;
  inline bool has_bmnet_tanh_forward_bmkernel_short() const;
  inline void clear_bmnet_tanh_forward_bmkernel_short();
  static const int kBmnetTanhForwardBmkernelShortFieldNumber = 15;
  inline const ::bmnet::bm1680::Inst_bmnet_tanh_forward_bmkernel& bmnet_tanh_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_tanh_forward_bmkernel* mutable_bmnet_tanh_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_tanh_forward_bmkernel* release_bmnet_tanh_forward_bmkernel_short();
  inline void set_allocated_bmnet_tanh_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_tanh_forward_bmkernel* bmnet_tanh_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel bmnet_lstm_unit_forward_bmkernel_short = 16;
  inline bool has_bmnet_lstm_unit_forward_bmkernel_short() const;
  inline void clear_bmnet_lstm_unit_forward_bmkernel_short();
  static const int kBmnetLstmUnitForwardBmkernelShortFieldNumber = 16;
  inline const ::bmnet::bm1680::Inst_bmnet_lstm_unit_forward_bmkernel& bmnet_lstm_unit_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_lstm_unit_forward_bmkernel* mutable_bmnet_lstm_unit_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_lstm_unit_forward_bmkernel* release_bmnet_lstm_unit_forward_bmkernel_short();
  inline void set_allocated_bmnet_lstm_unit_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_lstm_unit_forward_bmkernel* bmnet_lstm_unit_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel bmnet_lrn_forward_bmkernel_short = 17;
  inline bool has_bmnet_lrn_forward_bmkernel_short() const;
  inline void clear_bmnet_lrn_forward_bmkernel_short();
  static const int kBmnetLrnForwardBmkernelShortFieldNumber = 17;
  inline const ::bmnet::bm1680::Inst_bmnet_lrn_forward_bmkernel& bmnet_lrn_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_lrn_forward_bmkernel* mutable_bmnet_lrn_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_lrn_forward_bmkernel* release_bmnet_lrn_forward_bmkernel_short();
  inline void set_allocated_bmnet_lrn_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_lrn_forward_bmkernel* bmnet_lrn_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel bmnet_bnll_forward_bmkernel_short = 18;
  inline bool has_bmnet_bnll_forward_bmkernel_short() const;
  inline void clear_bmnet_bnll_forward_bmkernel_short();
  static const int kBmnetBnllForwardBmkernelShortFieldNumber = 18;
  inline const ::bmnet::bm1680::Inst_bmnet_bnll_forward_bmkernel& bmnet_bnll_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_bnll_forward_bmkernel* mutable_bmnet_bnll_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_bnll_forward_bmkernel* release_bmnet_bnll_forward_bmkernel_short();
  inline void set_allocated_bmnet_bnll_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_bnll_forward_bmkernel* bmnet_bnll_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel bmnet_crop_forward_bmkernel_short = 19;
  inline bool has_bmnet_crop_forward_bmkernel_short() const;
  inline void clear_bmnet_crop_forward_bmkernel_short();
  static const int kBmnetCropForwardBmkernelShortFieldNumber = 19;
  inline const ::bmnet::bm1680::Inst_bmnet_crop_forward_bmkernel& bmnet_crop_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_crop_forward_bmkernel* mutable_bmnet_crop_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_crop_forward_bmkernel* release_bmnet_crop_forward_bmkernel_short();
  inline void set_allocated_bmnet_crop_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_crop_forward_bmkernel* bmnet_crop_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel bmnet_slice_forward_bmkernel_short = 20;
  inline bool has_bmnet_slice_forward_bmkernel_short() const;
  inline void clear_bmnet_slice_forward_bmkernel_short();
  static const int kBmnetSliceForwardBmkernelShortFieldNumber = 20;
  inline const ::bmnet::bm1680::Inst_bmnet_slice_forward_bmkernel& bmnet_slice_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_slice_forward_bmkernel* mutable_bmnet_slice_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_slice_forward_bmkernel* release_bmnet_slice_forward_bmkernel_short();
  inline void set_allocated_bmnet_slice_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_slice_forward_bmkernel* bmnet_slice_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel bmnet_eltwise_forward_bmkernel_short = 21;
  inline bool has_bmnet_eltwise_forward_bmkernel_short() const;
  inline void clear_bmnet_eltwise_forward_bmkernel_short();
  static const int kBmnetEltwiseForwardBmkernelShortFieldNumber = 21;
  inline const ::bmnet::bm1680::Inst_bmnet_eltwise_forward_bmkernel& bmnet_eltwise_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_eltwise_forward_bmkernel* mutable_bmnet_eltwise_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_eltwise_forward_bmkernel* release_bmnet_eltwise_forward_bmkernel_short();
  inline void set_allocated_bmnet_eltwise_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_eltwise_forward_bmkernel* bmnet_eltwise_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel bmnet_tile_forward_bmkernel_short = 22;
  inline bool has_bmnet_tile_forward_bmkernel_short() const;
  inline void clear_bmnet_tile_forward_bmkernel_short();
  static const int kBmnetTileForwardBmkernelShortFieldNumber = 22;
  inline const ::bmnet::bm1680::Inst_bmnet_tile_forward_bmkernel& bmnet_tile_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_tile_forward_bmkernel* mutable_bmnet_tile_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_tile_forward_bmkernel* release_bmnet_tile_forward_bmkernel_short();
  inline void set_allocated_bmnet_tile_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_tile_forward_bmkernel* bmnet_tile_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel bmnet_relu_forward_bmkernel_short = 23;
  inline bool has_bmnet_relu_forward_bmkernel_short() const;
  inline void clear_bmnet_relu_forward_bmkernel_short();
  static const int kBmnetReluForwardBmkernelShortFieldNumber = 23;
  inline const ::bmnet::bm1680::Inst_bmnet_relu_forward_bmkernel& bmnet_relu_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_relu_forward_bmkernel* mutable_bmnet_relu_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_relu_forward_bmkernel* release_bmnet_relu_forward_bmkernel_short();
  inline void set_allocated_bmnet_relu_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_relu_forward_bmkernel* bmnet_relu_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel bmnet_batchnorm_forward_inference_bmkernel_short = 24;
  inline bool has_bmnet_batchnorm_forward_inference_bmkernel_short() const;
  inline void clear_bmnet_batchnorm_forward_inference_bmkernel_short();
  static const int kBmnetBatchnormForwardInferenceBmkernelShortFieldNumber = 24;
  inline const ::bmnet::bm1680::Inst_bmnet_batchnorm_forward_inference_bmkernel& bmnet_batchnorm_forward_inference_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_batchnorm_forward_inference_bmkernel* mutable_bmnet_batchnorm_forward_inference_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_batchnorm_forward_inference_bmkernel* release_bmnet_batchnorm_forward_inference_bmkernel_short();
  inline void set_allocated_bmnet_batchnorm_forward_inference_bmkernel_short(::bmnet::bm1680::Inst_bmnet_batchnorm_forward_inference_bmkernel* bmnet_batchnorm_forward_inference_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel bmnet_softmax_forward_bmkernel_short = 25;
  inline bool has_bmnet_softmax_forward_bmkernel_short() const;
  inline void clear_bmnet_softmax_forward_bmkernel_short();
  static const int kBmnetSoftmaxForwardBmkernelShortFieldNumber = 25;
  inline const ::bmnet::bm1680::Inst_bmnet_softmax_forward_bmkernel& bmnet_softmax_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_softmax_forward_bmkernel* mutable_bmnet_softmax_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_softmax_forward_bmkernel* release_bmnet_softmax_forward_bmkernel_short();
  inline void set_allocated_bmnet_softmax_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_softmax_forward_bmkernel* bmnet_softmax_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel bmnet_scale_forward_bmkernel_short = 26;
  inline bool has_bmnet_scale_forward_bmkernel_short() const;
  inline void clear_bmnet_scale_forward_bmkernel_short();
  static const int kBmnetScaleForwardBmkernelShortFieldNumber = 26;
  inline const ::bmnet::bm1680::Inst_bmnet_scale_forward_bmkernel& bmnet_scale_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_scale_forward_bmkernel* mutable_bmnet_scale_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_scale_forward_bmkernel* release_bmnet_scale_forward_bmkernel_short();
  inline void set_allocated_bmnet_scale_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_scale_forward_bmkernel* bmnet_scale_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel bmnet_mvn_forward_bmkernel_short = 27;
  inline bool has_bmnet_mvn_forward_bmkernel_short() const;
  inline void clear_bmnet_mvn_forward_bmkernel_short();
  static const int kBmnetMvnForwardBmkernelShortFieldNumber = 27;
  inline const ::bmnet::bm1680::Inst_bmnet_mvn_forward_bmkernel& bmnet_mvn_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_mvn_forward_bmkernel* mutable_bmnet_mvn_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_mvn_forward_bmkernel* release_bmnet_mvn_forward_bmkernel_short();
  inline void set_allocated_bmnet_mvn_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_mvn_forward_bmkernel* bmnet_mvn_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel bmnet_reduction_forward_bmkernel_short = 28;
  inline bool has_bmnet_reduction_forward_bmkernel_short() const;
  inline void clear_bmnet_reduction_forward_bmkernel_short();
  static const int kBmnetReductionForwardBmkernelShortFieldNumber = 28;
  inline const ::bmnet::bm1680::Inst_bmnet_reduction_forward_bmkernel& bmnet_reduction_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_reduction_forward_bmkernel* mutable_bmnet_reduction_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_reduction_forward_bmkernel* release_bmnet_reduction_forward_bmkernel_short();
  inline void set_allocated_bmnet_reduction_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_reduction_forward_bmkernel* bmnet_reduction_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel bmnet_prelu_forward_bmkernel_short = 29;
  inline bool has_bmnet_prelu_forward_bmkernel_short() const;
  inline void clear_bmnet_prelu_forward_bmkernel_short();
  static const int kBmnetPreluForwardBmkernelShortFieldNumber = 29;
  inline const ::bmnet::bm1680::Inst_bmnet_prelu_forward_bmkernel& bmnet_prelu_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_prelu_forward_bmkernel* mutable_bmnet_prelu_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_prelu_forward_bmkernel* release_bmnet_prelu_forward_bmkernel_short();
  inline void set_allocated_bmnet_prelu_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_prelu_forward_bmkernel* bmnet_prelu_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_split_forward_bmkernel bmnet_split_forward_bmkernel_short = 30;
  inline bool has_bmnet_split_forward_bmkernel_short() const;
  inline void clear_bmnet_split_forward_bmkernel_short();
  static const int kBmnetSplitForwardBmkernelShortFieldNumber = 30;
  inline const ::bmnet::bm1680::Inst_bmnet_split_forward_bmkernel& bmnet_split_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_split_forward_bmkernel* mutable_bmnet_split_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_split_forward_bmkernel* release_bmnet_split_forward_bmkernel_short();
  inline void set_allocated_bmnet_split_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_split_forward_bmkernel* bmnet_split_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel bmnet_concat_forward_bmkernel_short = 31;
  inline bool has_bmnet_concat_forward_bmkernel_short() const;
  inline void clear_bmnet_concat_forward_bmkernel_short();
  static const int kBmnetConcatForwardBmkernelShortFieldNumber = 31;
  inline const ::bmnet::bm1680::Inst_bmnet_concat_forward_bmkernel& bmnet_concat_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_concat_forward_bmkernel* mutable_bmnet_concat_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_concat_forward_bmkernel* release_bmnet_concat_forward_bmkernel_short();
  inline void set_allocated_bmnet_concat_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_concat_forward_bmkernel* bmnet_concat_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_upsample_bmkernel bmnet_upsample_bmkernel_short = 32;
  inline bool has_bmnet_upsample_bmkernel_short() const;
  inline void clear_bmnet_upsample_bmkernel_short();
  static const int kBmnetUpsampleBmkernelShortFieldNumber = 32;
  inline const ::bmnet::bm1680::Inst_bmnet_upsample_bmkernel& bmnet_upsample_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_upsample_bmkernel* mutable_bmnet_upsample_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_upsample_bmkernel* release_bmnet_upsample_bmkernel_short();
  inline void set_allocated_bmnet_upsample_bmkernel_short(::bmnet::bm1680::Inst_bmnet_upsample_bmkernel* bmnet_upsample_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel bmnet_reshape_forward_bmkernel_short = 33;
  inline bool has_bmnet_reshape_forward_bmkernel_short() const;
  inline void clear_bmnet_reshape_forward_bmkernel_short();
  static const int kBmnetReshapeForwardBmkernelShortFieldNumber = 33;
  inline const ::bmnet::bm1680::Inst_bmnet_reshape_forward_bmkernel& bmnet_reshape_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_reshape_forward_bmkernel* mutable_bmnet_reshape_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_reshape_forward_bmkernel* release_bmnet_reshape_forward_bmkernel_short();
  inline void set_allocated_bmnet_reshape_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_reshape_forward_bmkernel* bmnet_reshape_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel bmnet_permute_forward_bmkernel_short = 34;
  inline bool has_bmnet_permute_forward_bmkernel_short() const;
  inline void clear_bmnet_permute_forward_bmkernel_short();
  static const int kBmnetPermuteForwardBmkernelShortFieldNumber = 34;
  inline const ::bmnet::bm1680::Inst_bmnet_permute_forward_bmkernel& bmnet_permute_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_permute_forward_bmkernel* mutable_bmnet_permute_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_permute_forward_bmkernel* release_bmnet_permute_forward_bmkernel_short();
  inline void set_allocated_bmnet_permute_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_permute_forward_bmkernel* bmnet_permute_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel bmnet_flatten_forward_bmkernel_short = 35;
  inline bool has_bmnet_flatten_forward_bmkernel_short() const;
  inline void clear_bmnet_flatten_forward_bmkernel_short();
  static const int kBmnetFlattenForwardBmkernelShortFieldNumber = 35;
  inline const ::bmnet::bm1680::Inst_bmnet_flatten_forward_bmkernel& bmnet_flatten_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_flatten_forward_bmkernel* mutable_bmnet_flatten_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_flatten_forward_bmkernel* release_bmnet_flatten_forward_bmkernel_short();
  inline void set_allocated_bmnet_flatten_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_flatten_forward_bmkernel* bmnet_flatten_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel bmnet_normalize_forward_bmkernel_short = 36;
  inline bool has_bmnet_normalize_forward_bmkernel_short() const;
  inline void clear_bmnet_normalize_forward_bmkernel_short();
  static const int kBmnetNormalizeForwardBmkernelShortFieldNumber = 36;
  inline const ::bmnet::bm1680::Inst_bmnet_normalize_forward_bmkernel& bmnet_normalize_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_normalize_forward_bmkernel* mutable_bmnet_normalize_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_normalize_forward_bmkernel* release_bmnet_normalize_forward_bmkernel_short();
  inline void set_allocated_bmnet_normalize_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_normalize_forward_bmkernel* bmnet_normalize_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel bmnet_deconv_forward_bmkernel_short = 37;
  inline bool has_bmnet_deconv_forward_bmkernel_short() const;
  inline void clear_bmnet_deconv_forward_bmkernel_short();
  static const int kBmnetDeconvForwardBmkernelShortFieldNumber = 37;
  inline const ::bmnet::bm1680::Inst_bmnet_deconv_forward_bmkernel& bmnet_deconv_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_deconv_forward_bmkernel* mutable_bmnet_deconv_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_deconv_forward_bmkernel* release_bmnet_deconv_forward_bmkernel_short();
  inline void set_allocated_bmnet_deconv_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_deconv_forward_bmkernel* bmnet_deconv_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel bmnet_stack_forward_bmkernel_short = 38;
  inline bool has_bmnet_stack_forward_bmkernel_short() const;
  inline void clear_bmnet_stack_forward_bmkernel_short();
  static const int kBmnetStackForwardBmkernelShortFieldNumber = 38;
  inline const ::bmnet::bm1680::Inst_bmnet_stack_forward_bmkernel& bmnet_stack_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_stack_forward_bmkernel* mutable_bmnet_stack_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_stack_forward_bmkernel* release_bmnet_stack_forward_bmkernel_short();
  inline void set_allocated_bmnet_stack_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_stack_forward_bmkernel* bmnet_stack_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel bmnet_arithmetic_forward_bmkernel_short = 39;
  inline bool has_bmnet_arithmetic_forward_bmkernel_short() const;
  inline void clear_bmnet_arithmetic_forward_bmkernel_short();
  static const int kBmnetArithmeticForwardBmkernelShortFieldNumber = 39;
  inline const ::bmnet::bm1680::Inst_bmnet_arithmetic_forward_bmkernel& bmnet_arithmetic_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_arithmetic_forward_bmkernel* mutable_bmnet_arithmetic_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_arithmetic_forward_bmkernel* release_bmnet_arithmetic_forward_bmkernel_short();
  inline void set_allocated_bmnet_arithmetic_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_arithmetic_forward_bmkernel* bmnet_arithmetic_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel bmnet_resizeblinear_forward_bmkernel_short = 40;
  inline bool has_bmnet_resizeblinear_forward_bmkernel_short() const;
  inline void clear_bmnet_resizeblinear_forward_bmkernel_short();
  static const int kBmnetResizeblinearForwardBmkernelShortFieldNumber = 40;
  inline const ::bmnet::bm1680::Inst_bmnet_resizebilinear_forward_bmkernel& bmnet_resizeblinear_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_resizebilinear_forward_bmkernel* mutable_bmnet_resizeblinear_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_resizebilinear_forward_bmkernel* release_bmnet_resizeblinear_forward_bmkernel_short();
  inline void set_allocated_bmnet_resizeblinear_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_resizebilinear_forward_bmkernel* bmnet_resizeblinear_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel bmnet_priorbox_forward_bmkernel_short = 41;
  inline bool has_bmnet_priorbox_forward_bmkernel_short() const;
  inline void clear_bmnet_priorbox_forward_bmkernel_short();
  static const int kBmnetPriorboxForwardBmkernelShortFieldNumber = 41;
  inline const ::bmnet::bm1680::Inst_bmnet_priorbox_forward_bmkernel& bmnet_priorbox_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_priorbox_forward_bmkernel* mutable_bmnet_priorbox_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_priorbox_forward_bmkernel* release_bmnet_priorbox_forward_bmkernel_short();
  inline void set_allocated_bmnet_priorbox_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_priorbox_forward_bmkernel* bmnet_priorbox_forward_bmkernel_short);

  // optional .bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel bmnet_reverse_forward_bmkernel_short = 42;
  inline bool has_bmnet_reverse_forward_bmkernel_short() const;
  inline void clear_bmnet_reverse_forward_bmkernel_short();
  static const int kBmnetReverseForwardBmkernelShortFieldNumber = 42;
  inline const ::bmnet::bm1680::Inst_bmnet_reverse_forward_bmkernel& bmnet_reverse_forward_bmkernel_short() const;
  inline ::bmnet::bm1680::Inst_bmnet_reverse_forward_bmkernel* mutable_bmnet_reverse_forward_bmkernel_short();
  inline ::bmnet::bm1680::Inst_bmnet_reverse_forward_bmkernel* release_bmnet_reverse_forward_bmkernel_short();
  inline void set_allocated_bmnet_reverse_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_reverse_forward_bmkernel* bmnet_reverse_forward_bmkernel_short);

  // @@protoc_insertion_point(class_scope:bmnet.bm1680.Inst)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pooling();
  inline void clear_has_pooling();
  inline void set_has_conv();
  inline void clear_has_conv();
  inline void set_has_bmnet_threshold_forward_bmkernel_short();
  inline void clear_has_bmnet_threshold_forward_bmkernel_short();
  inline void set_has_bmnet_exp_forward_bmkernel_short();
  inline void clear_has_bmnet_exp_forward_bmkernel_short();
  inline void set_has_bmnet_power_forward_bmkernel_short();
  inline void clear_has_bmnet_power_forward_bmkernel_short();
  inline void set_has_bmnet_absval_forward_bmkernel_short();
  inline void clear_has_bmnet_absval_forward_bmkernel_short();
  inline void set_has_bmnet_sigmoid_forward_bmkernel_short();
  inline void clear_has_bmnet_sigmoid_forward_bmkernel_short();
  inline void set_has_bmnet_log_forward_bmkernel_short();
  inline void clear_has_bmnet_log_forward_bmkernel_short();
  inline void set_has_bmnet_fc_forward_bmkernel_short();
  inline void clear_has_bmnet_fc_forward_bmkernel_short();
  inline void set_has_bmnet_bias_forward_bmkernel_short();
  inline void clear_has_bmnet_bias_forward_bmkernel_short();
  inline void set_has_bmnet_elu_forward_bmkernel_short();
  inline void clear_has_bmnet_elu_forward_bmkernel_short();
  inline void set_has_bmnet_tanh_forward_bmkernel_short();
  inline void clear_has_bmnet_tanh_forward_bmkernel_short();
  inline void set_has_bmnet_lstm_unit_forward_bmkernel_short();
  inline void clear_has_bmnet_lstm_unit_forward_bmkernel_short();
  inline void set_has_bmnet_lrn_forward_bmkernel_short();
  inline void clear_has_bmnet_lrn_forward_bmkernel_short();
  inline void set_has_bmnet_bnll_forward_bmkernel_short();
  inline void clear_has_bmnet_bnll_forward_bmkernel_short();
  inline void set_has_bmnet_crop_forward_bmkernel_short();
  inline void clear_has_bmnet_crop_forward_bmkernel_short();
  inline void set_has_bmnet_slice_forward_bmkernel_short();
  inline void clear_has_bmnet_slice_forward_bmkernel_short();
  inline void set_has_bmnet_eltwise_forward_bmkernel_short();
  inline void clear_has_bmnet_eltwise_forward_bmkernel_short();
  inline void set_has_bmnet_tile_forward_bmkernel_short();
  inline void clear_has_bmnet_tile_forward_bmkernel_short();
  inline void set_has_bmnet_relu_forward_bmkernel_short();
  inline void clear_has_bmnet_relu_forward_bmkernel_short();
  inline void set_has_bmnet_batchnorm_forward_inference_bmkernel_short();
  inline void clear_has_bmnet_batchnorm_forward_inference_bmkernel_short();
  inline void set_has_bmnet_softmax_forward_bmkernel_short();
  inline void clear_has_bmnet_softmax_forward_bmkernel_short();
  inline void set_has_bmnet_scale_forward_bmkernel_short();
  inline void clear_has_bmnet_scale_forward_bmkernel_short();
  inline void set_has_bmnet_mvn_forward_bmkernel_short();
  inline void clear_has_bmnet_mvn_forward_bmkernel_short();
  inline void set_has_bmnet_reduction_forward_bmkernel_short();
  inline void clear_has_bmnet_reduction_forward_bmkernel_short();
  inline void set_has_bmnet_prelu_forward_bmkernel_short();
  inline void clear_has_bmnet_prelu_forward_bmkernel_short();
  inline void set_has_bmnet_split_forward_bmkernel_short();
  inline void clear_has_bmnet_split_forward_bmkernel_short();
  inline void set_has_bmnet_concat_forward_bmkernel_short();
  inline void clear_has_bmnet_concat_forward_bmkernel_short();
  inline void set_has_bmnet_upsample_bmkernel_short();
  inline void clear_has_bmnet_upsample_bmkernel_short();
  inline void set_has_bmnet_reshape_forward_bmkernel_short();
  inline void clear_has_bmnet_reshape_forward_bmkernel_short();
  inline void set_has_bmnet_permute_forward_bmkernel_short();
  inline void clear_has_bmnet_permute_forward_bmkernel_short();
  inline void set_has_bmnet_flatten_forward_bmkernel_short();
  inline void clear_has_bmnet_flatten_forward_bmkernel_short();
  inline void set_has_bmnet_normalize_forward_bmkernel_short();
  inline void clear_has_bmnet_normalize_forward_bmkernel_short();
  inline void set_has_bmnet_deconv_forward_bmkernel_short();
  inline void clear_has_bmnet_deconv_forward_bmkernel_short();
  inline void set_has_bmnet_stack_forward_bmkernel_short();
  inline void clear_has_bmnet_stack_forward_bmkernel_short();
  inline void set_has_bmnet_arithmetic_forward_bmkernel_short();
  inline void clear_has_bmnet_arithmetic_forward_bmkernel_short();
  inline void set_has_bmnet_resizeblinear_forward_bmkernel_short();
  inline void clear_has_bmnet_resizeblinear_forward_bmkernel_short();
  inline void set_has_bmnet_priorbox_forward_bmkernel_short();
  inline void clear_has_bmnet_priorbox_forward_bmkernel_short();
  inline void set_has_bmnet_reverse_forward_bmkernel_short();
  inline void clear_has_bmnet_reverse_forward_bmkernel_short();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::std::string* name_;
  ::std::string* type_;
  ::bmnet::bm1680::Inst_bmnet_pooling_forward_bmkernel* pooling_;
  ::bmnet::bm1680::Inst_bmnet_conv_forward_bmkernel* conv_;
  ::bmnet::bm1680::Inst_bmnet_threshold_forward_bmkernel* bmnet_threshold_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_exp_forward_bmkernel* bmnet_exp_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_power_forward_bmkernel* bmnet_power_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_absval_forward_bmkernel* bmnet_absval_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_sigmoid_forward_bmkernel* bmnet_sigmoid_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_log_forward_bmkernel* bmnet_log_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_fc_forward_bmkernel* bmnet_fc_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_bias_forward_bmkernel* bmnet_bias_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_elu_forward_bmkernel* bmnet_elu_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_tanh_forward_bmkernel* bmnet_tanh_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_lstm_unit_forward_bmkernel* bmnet_lstm_unit_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_lrn_forward_bmkernel* bmnet_lrn_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_bnll_forward_bmkernel* bmnet_bnll_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_crop_forward_bmkernel* bmnet_crop_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_slice_forward_bmkernel* bmnet_slice_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_eltwise_forward_bmkernel* bmnet_eltwise_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_tile_forward_bmkernel* bmnet_tile_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_relu_forward_bmkernel* bmnet_relu_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_batchnorm_forward_inference_bmkernel* bmnet_batchnorm_forward_inference_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_softmax_forward_bmkernel* bmnet_softmax_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_scale_forward_bmkernel* bmnet_scale_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_mvn_forward_bmkernel* bmnet_mvn_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_reduction_forward_bmkernel* bmnet_reduction_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_prelu_forward_bmkernel* bmnet_prelu_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_split_forward_bmkernel* bmnet_split_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_concat_forward_bmkernel* bmnet_concat_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_upsample_bmkernel* bmnet_upsample_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_reshape_forward_bmkernel* bmnet_reshape_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_permute_forward_bmkernel* bmnet_permute_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_flatten_forward_bmkernel* bmnet_flatten_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_normalize_forward_bmkernel* bmnet_normalize_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_deconv_forward_bmkernel* bmnet_deconv_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_stack_forward_bmkernel* bmnet_stack_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_arithmetic_forward_bmkernel* bmnet_arithmetic_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_resizebilinear_forward_bmkernel* bmnet_resizeblinear_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_priorbox_forward_bmkernel* bmnet_priorbox_forward_bmkernel_short_;
  ::bmnet::bm1680::Inst_bmnet_reverse_forward_bmkernel* bmnet_reverse_forward_bmkernel_short_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bm168x_5fasm_2eproto();
  friend void protobuf_AssignDesc_bm168x_5fasm_2eproto();
  friend void protobuf_ShutdownFile_bm168x_5fasm_2eproto();

  void InitAsDefaultInstance();
  static Inst* default_instance_;
};
// ===================================================================


// ===================================================================

// CommandBuffer

// repeated .bmnet.bm1680.Inst inst = 1;
inline int CommandBuffer::inst_size() const {
  return inst_.size();
}
inline void CommandBuffer::clear_inst() {
  inst_.Clear();
}
inline const ::bmnet::bm1680::Inst& CommandBuffer::inst(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.CommandBuffer.inst)
  return inst_.Get(index);
}
inline ::bmnet::bm1680::Inst* CommandBuffer::mutable_inst(int index) {
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.CommandBuffer.inst)
  return inst_.Mutable(index);
}
inline ::bmnet::bm1680::Inst* CommandBuffer::add_inst() {
  // @@protoc_insertion_point(field_add:bmnet.bm1680.CommandBuffer.inst)
  return inst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bmnet::bm1680::Inst >&
CommandBuffer::inst() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.CommandBuffer.inst)
  return inst_;
}
inline ::google::protobuf::RepeatedPtrField< ::bmnet::bm1680::Inst >*
CommandBuffer::mutable_inst() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.CommandBuffer.inst)
  return &inst_;
}

// -------------------------------------------------------------------

// Inst_bmnet_pooling_forward_bmkernel

// optional uint64 ifmap_gaddr = 1;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_ifmap_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_ifmap_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_ifmap_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_ifmap_gaddr() {
  ifmap_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_ifmap_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_pooling_forward_bmkernel::ifmap_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.ifmap_gaddr)
  return ifmap_gaddr_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_ifmap_gaddr(::google::protobuf::uint64 value) {
  set_has_ifmap_gaddr();
  ifmap_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.ifmap_gaddr)
}

// optional uint64 ofmap_gaddr = 2;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_ofmap_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_ofmap_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_ofmap_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_ofmap_gaddr() {
  ofmap_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_ofmap_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_pooling_forward_bmkernel::ofmap_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.ofmap_gaddr)
  return ofmap_gaddr_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_ofmap_gaddr(::google::protobuf::uint64 value) {
  set_has_ofmap_gaddr();
  ofmap_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.ofmap_gaddr)
}

// optional uint64 index_gaddr = 3;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_index_gaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_index_gaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_index_gaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_index_gaddr() {
  index_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_index_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_pooling_forward_bmkernel::index_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.index_gaddr)
  return index_gaddr_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_index_gaddr(::google::protobuf::uint64 value) {
  set_has_index_gaddr();
  index_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.index_gaddr)
}

// optional uint64 o_findex_gaddr = 4;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_o_findex_gaddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_o_findex_gaddr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_o_findex_gaddr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_o_findex_gaddr() {
  o_findex_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_o_findex_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_pooling_forward_bmkernel::o_findex_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.o_findex_gaddr)
  return o_findex_gaddr_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_o_findex_gaddr(::google::protobuf::uint64 value) {
  set_has_o_findex_gaddr();
  o_findex_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.o_findex_gaddr)
}

// optional int32 n = 5;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_n() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_n() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_n() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_n() {
  n_ = 0;
  clear_has_n();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.n)
  return n_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_n(::google::protobuf::int32 value) {
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.n)
}

// optional int32 c = 6;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_c() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_c() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_c() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_c() {
  c_ = 0;
  clear_has_c();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.c)
  return c_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_c(::google::protobuf::int32 value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.c)
}

// optional int32 h = 7;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.h)
  return h_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.h)
}

// optional int32 w = 8;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.w)
  return w_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.w)
}

// optional int32 kh = 9;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_kh() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_kh() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_kh() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_kh() {
  kh_ = 0;
  clear_has_kh();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::kh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.kh)
  return kh_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_kh(::google::protobuf::int32 value) {
  set_has_kh();
  kh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.kh)
}

// optional int32 kw = 10;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_kw() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_kw() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_kw() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_kw() {
  kw_ = 0;
  clear_has_kw();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::kw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.kw)
  return kw_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_kw(::google::protobuf::int32 value) {
  set_has_kw();
  kw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.kw)
}

// optional int32 pad_top = 11;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_pad_top() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_pad_top() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_pad_top() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_pad_top() {
  pad_top_ = 0;
  clear_has_pad_top();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::pad_top() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.pad_top)
  return pad_top_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_pad_top(::google::protobuf::int32 value) {
  set_has_pad_top();
  pad_top_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.pad_top)
}

// optional int32 pad_bot = 12;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_pad_bot() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_pad_bot() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_pad_bot() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_pad_bot() {
  pad_bot_ = 0;
  clear_has_pad_bot();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::pad_bot() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.pad_bot)
  return pad_bot_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_pad_bot(::google::protobuf::int32 value) {
  set_has_pad_bot();
  pad_bot_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.pad_bot)
}

// optional int32 pad_left = 13;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_pad_left() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_pad_left() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_pad_left() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_pad_left() {
  pad_left_ = 0;
  clear_has_pad_left();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::pad_left() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.pad_left)
  return pad_left_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_pad_left(::google::protobuf::int32 value) {
  set_has_pad_left();
  pad_left_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.pad_left)
}

// optional int32 pad_right = 14;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_pad_right() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_pad_right() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_pad_right() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_pad_right() {
  pad_right_ = 0;
  clear_has_pad_right();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::pad_right() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.pad_right)
  return pad_right_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_pad_right(::google::protobuf::int32 value) {
  set_has_pad_right();
  pad_right_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.pad_right)
}

// optional int32 stride_h = 15;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_stride_h() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_stride_h() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_stride_h() {
  stride_h_ = 0;
  clear_has_stride_h();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::stride_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.stride_h)
  return stride_h_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_stride_h(::google::protobuf::int32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.stride_h)
}

// optional int32 stride_w = 16;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_stride_w() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_stride_w() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_stride_w() {
  stride_w_ = 0;
  clear_has_stride_w();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::stride_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.stride_w)
  return stride_w_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_stride_w(::google::protobuf::int32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.stride_w)
}

// optional int32 is_avg_pooling = 17;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_is_avg_pooling() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_is_avg_pooling() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_is_avg_pooling() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_is_avg_pooling() {
  is_avg_pooling_ = 0;
  clear_has_is_avg_pooling();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::is_avg_pooling() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.is_avg_pooling)
  return is_avg_pooling_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_is_avg_pooling(::google::protobuf::int32 value) {
  set_has_is_avg_pooling();
  is_avg_pooling_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.is_avg_pooling)
}

// optional float avg_const = 18;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_avg_const() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_avg_const() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_avg_const() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_avg_const() {
  avg_const_ = 0;
  clear_has_avg_const();
}
inline float Inst_bmnet_pooling_forward_bmkernel::avg_const() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.avg_const)
  return avg_const_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_avg_const(float value) {
  set_has_avg_const();
  avg_const_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.avg_const)
}

// optional int32 do_relu = 19;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_do_relu() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_do_relu() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_do_relu() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_do_relu() {
  do_relu_ = 0;
  clear_has_do_relu();
}
inline ::google::protobuf::int32 Inst_bmnet_pooling_forward_bmkernel::do_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.do_relu)
  return do_relu_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_do_relu(::google::protobuf::int32 value) {
  set_has_do_relu();
  do_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.do_relu)
}

// optional bool ceil_mode = 20;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_ceil_mode() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_ceil_mode() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_ceil_mode() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_ceil_mode() {
  ceil_mode_ = false;
  clear_has_ceil_mode();
}
inline bool Inst_bmnet_pooling_forward_bmkernel::ceil_mode() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.ceil_mode)
  return ceil_mode_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_ceil_mode(bool value) {
  set_has_ceil_mode();
  ceil_mode_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.ceil_mode)
}

// optional bool do_resize = 21;
inline bool Inst_bmnet_pooling_forward_bmkernel::has_do_resize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_has_do_resize() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_has_do_resize() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst_bmnet_pooling_forward_bmkernel::clear_do_resize() {
  do_resize_ = false;
  clear_has_do_resize();
}
inline bool Inst_bmnet_pooling_forward_bmkernel::do_resize() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.do_resize)
  return do_resize_;
}
inline void Inst_bmnet_pooling_forward_bmkernel::set_do_resize(bool value) {
  set_has_do_resize();
  do_resize_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel.do_resize)
}

// -------------------------------------------------------------------

// Inst_bmnet_conv_forward_bmkernel

// optional uint64 ga_ifmap = 1;
inline bool Inst_bmnet_conv_forward_bmkernel::has_ga_ifmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_ga_ifmap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_ga_ifmap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_ga_ifmap() {
  ga_ifmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ifmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_forward_bmkernel::ga_ifmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_ifmap)
  return ga_ifmap_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_ga_ifmap(::google::protobuf::uint64 value) {
  set_has_ga_ifmap();
  ga_ifmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_ifmap)
}

// optional uint64 ga_ofmap = 2;
inline bool Inst_bmnet_conv_forward_bmkernel::has_ga_ofmap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_ga_ofmap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_ga_ofmap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_ga_ofmap() {
  ga_ofmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ofmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_forward_bmkernel::ga_ofmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_ofmap)
  return ga_ofmap_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_ga_ofmap(::google::protobuf::uint64 value) {
  set_has_ga_ofmap();
  ga_ofmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_ofmap)
}

// optional uint64 ga_weight = 3;
inline bool Inst_bmnet_conv_forward_bmkernel::has_ga_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_ga_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_ga_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_ga_weight() {
  ga_weight_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_weight();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_forward_bmkernel::ga_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_weight)
  return ga_weight_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_ga_weight(::google::protobuf::uint64 value) {
  set_has_ga_weight();
  ga_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_weight)
}

// optional uint64 ga_bias = 4;
inline bool Inst_bmnet_conv_forward_bmkernel::has_ga_bias() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_ga_bias() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_ga_bias() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_ga_bias() {
  ga_bias_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_bias();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_forward_bmkernel::ga_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_bias)
  return ga_bias_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_ga_bias(::google::protobuf::uint64 value) {
  set_has_ga_bias();
  ga_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_bias)
}

// optional uint64 ga_bn_mean = 5;
inline bool Inst_bmnet_conv_forward_bmkernel::has_ga_bn_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_ga_bn_mean() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_ga_bn_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_ga_bn_mean() {
  ga_bn_mean_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_bn_mean();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_forward_bmkernel::ga_bn_mean() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_bn_mean)
  return ga_bn_mean_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_ga_bn_mean(::google::protobuf::uint64 value) {
  set_has_ga_bn_mean();
  ga_bn_mean_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_bn_mean)
}

// optional uint64 ga_bn_variance = 6;
inline bool Inst_bmnet_conv_forward_bmkernel::has_ga_bn_variance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_ga_bn_variance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_ga_bn_variance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_ga_bn_variance() {
  ga_bn_variance_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_bn_variance();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_forward_bmkernel::ga_bn_variance() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_bn_variance)
  return ga_bn_variance_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_ga_bn_variance(::google::protobuf::uint64 value) {
  set_has_ga_bn_variance();
  ga_bn_variance_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_bn_variance)
}

// optional uint64 ga_scale = 7;
inline bool Inst_bmnet_conv_forward_bmkernel::has_ga_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_ga_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_ga_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_ga_scale() {
  ga_scale_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_scale();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_forward_bmkernel::ga_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_scale)
  return ga_scale_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_ga_scale(::google::protobuf::uint64 value) {
  set_has_ga_scale();
  ga_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_scale)
}

// optional uint64 ga_scale_bias = 8;
inline bool Inst_bmnet_conv_forward_bmkernel::has_ga_scale_bias() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_ga_scale_bias() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_ga_scale_bias() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_ga_scale_bias() {
  ga_scale_bias_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_scale_bias();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_forward_bmkernel::ga_scale_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_scale_bias)
  return ga_scale_bias_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_ga_scale_bias(::google::protobuf::uint64 value) {
  set_has_ga_scale_bias();
  ga_scale_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.ga_scale_bias)
}

// optional int32 input_n = 9;
inline bool Inst_bmnet_conv_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.input_n)
}

// optional int32 input_c = 10;
inline bool Inst_bmnet_conv_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.input_c)
}

// optional int32 input_h = 11;
inline bool Inst_bmnet_conv_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.input_h)
}

// optional int32 input_w = 12;
inline bool Inst_bmnet_conv_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.input_w)
}

// optional int32 groups = 13;
inline bool Inst_bmnet_conv_forward_bmkernel::has_groups() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_groups() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_groups() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_groups() {
  groups_ = 0;
  clear_has_groups();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_forward_bmkernel::groups() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.groups)
  return groups_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_groups(::google::protobuf::int32 value) {
  set_has_groups();
  groups_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.groups)
}

// optional int32 output_c = 14;
inline bool Inst_bmnet_conv_forward_bmkernel::has_output_c() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_output_c() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_output_c() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_output_c() {
  output_c_ = 0;
  clear_has_output_c();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_forward_bmkernel::output_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.output_c)
  return output_c_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_output_c(::google::protobuf::int32 value) {
  set_has_output_c();
  output_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.output_c)
}

// optional uint32 kh = 15;
inline bool Inst_bmnet_conv_forward_bmkernel::has_kh() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_kh() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_kh() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_kh() {
  kh_ = 0u;
  clear_has_kh();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_forward_bmkernel::kh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.kh)
  return kh_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_kh(::google::protobuf::uint32 value) {
  set_has_kh();
  kh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.kh)
}

// optional uint32 kw = 16;
inline bool Inst_bmnet_conv_forward_bmkernel::has_kw() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_kw() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_kw() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_kw() {
  kw_ = 0u;
  clear_has_kw();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_forward_bmkernel::kw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.kw)
  return kw_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_kw(::google::protobuf::uint32 value) {
  set_has_kw();
  kw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.kw)
}

// optional uint32 dilation_h = 17;
inline bool Inst_bmnet_conv_forward_bmkernel::has_dilation_h() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_dilation_h() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_dilation_h() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_dilation_h() {
  dilation_h_ = 0u;
  clear_has_dilation_h();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_forward_bmkernel::dilation_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.dilation_h)
  return dilation_h_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_dilation_h(::google::protobuf::uint32 value) {
  set_has_dilation_h();
  dilation_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.dilation_h)
}

// optional uint32 dilation_w = 18;
inline bool Inst_bmnet_conv_forward_bmkernel::has_dilation_w() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_dilation_w() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_dilation_w() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_dilation_w() {
  dilation_w_ = 0u;
  clear_has_dilation_w();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_forward_bmkernel::dilation_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.dilation_w)
  return dilation_w_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_dilation_w(::google::protobuf::uint32 value) {
  set_has_dilation_w();
  dilation_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.dilation_w)
}

// optional uint32 pad_h = 19;
inline bool Inst_bmnet_conv_forward_bmkernel::has_pad_h() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_pad_h() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_forward_bmkernel::pad_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.pad_h)
  return pad_h_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.pad_h)
}

// optional uint32 pad_w = 20;
inline bool Inst_bmnet_conv_forward_bmkernel::has_pad_w() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_pad_w() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_forward_bmkernel::pad_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.pad_w)
  return pad_w_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.pad_w)
}

// optional uint32 stride_h = 21;
inline bool Inst_bmnet_conv_forward_bmkernel::has_stride_h() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_stride_h() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_forward_bmkernel::stride_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.stride_h)
  return stride_h_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.stride_h)
}

// optional uint32 stride_w = 22;
inline bool Inst_bmnet_conv_forward_bmkernel::has_stride_w() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_stride_w() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 Inst_bmnet_conv_forward_bmkernel::stride_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.stride_w)
  return stride_w_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.stride_w)
}

// optional int32 result_add = 23;
inline bool Inst_bmnet_conv_forward_bmkernel::has_result_add() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_result_add() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_result_add() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_result_add() {
  result_add_ = 0;
  clear_has_result_add();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_forward_bmkernel::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.result_add)
  return result_add_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_result_add(::google::protobuf::int32 value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.result_add)
}

// optional int32 do_bias = 24;
inline bool Inst_bmnet_conv_forward_bmkernel::has_do_bias() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_do_bias() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_do_bias() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_do_bias() {
  do_bias_ = 0;
  clear_has_do_bias();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_forward_bmkernel::do_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.do_bias)
  return do_bias_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_do_bias(::google::protobuf::int32 value) {
  set_has_do_bias();
  do_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.do_bias)
}

// optional int32 do_bn = 25;
inline bool Inst_bmnet_conv_forward_bmkernel::has_do_bn() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_do_bn() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_do_bn() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_do_bn() {
  do_bn_ = 0;
  clear_has_do_bn();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_forward_bmkernel::do_bn() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.do_bn)
  return do_bn_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_do_bn(::google::protobuf::int32 value) {
  set_has_do_bn();
  do_bn_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.do_bn)
}

// optional int32 do_scale = 26;
inline bool Inst_bmnet_conv_forward_bmkernel::has_do_scale() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_do_scale() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_do_scale() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_do_scale() {
  do_scale_ = 0;
  clear_has_do_scale();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_forward_bmkernel::do_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.do_scale)
  return do_scale_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_do_scale(::google::protobuf::int32 value) {
  set_has_do_scale();
  do_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.do_scale)
}

// optional int32 do_scale_bias = 27;
inline bool Inst_bmnet_conv_forward_bmkernel::has_do_scale_bias() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_do_scale_bias() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_do_scale_bias() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_do_scale_bias() {
  do_scale_bias_ = 0;
  clear_has_do_scale_bias();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_forward_bmkernel::do_scale_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.do_scale_bias)
  return do_scale_bias_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_do_scale_bias(::google::protobuf::int32 value) {
  set_has_do_scale_bias();
  do_scale_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.do_scale_bias)
}

// optional int32 do_activation = 28;
inline bool Inst_bmnet_conv_forward_bmkernel::has_do_activation() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_do_activation() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_do_activation() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_do_activation() {
  do_activation_ = 0;
  clear_has_do_activation();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_forward_bmkernel::do_activation() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.do_activation)
  return do_activation_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_do_activation(::google::protobuf::int32 value) {
  set_has_do_activation();
  do_activation_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.do_activation)
}

// optional float bn_scale = 29;
inline bool Inst_bmnet_conv_forward_bmkernel::has_bn_scale() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_bn_scale() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_bn_scale() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_bn_scale() {
  bn_scale_ = 0;
  clear_has_bn_scale();
}
inline float Inst_bmnet_conv_forward_bmkernel::bn_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.bn_scale)
  return bn_scale_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_bn_scale(float value) {
  set_has_bn_scale();
  bn_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.bn_scale)
}

// optional float bn_eps = 30;
inline bool Inst_bmnet_conv_forward_bmkernel::has_bn_eps() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_bn_eps() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_bn_eps() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_bn_eps() {
  bn_eps_ = 0;
  clear_has_bn_eps();
}
inline float Inst_bmnet_conv_forward_bmkernel::bn_eps() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.bn_eps)
  return bn_eps_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_bn_eps(float value) {
  set_has_bn_eps();
  bn_eps_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.bn_eps)
}

// optional int32 activation_method = 31;
inline bool Inst_bmnet_conv_forward_bmkernel::has_activation_method() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_activation_method() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_activation_method() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_activation_method() {
  activation_method_ = 0;
  clear_has_activation_method();
}
inline ::google::protobuf::int32 Inst_bmnet_conv_forward_bmkernel::activation_method() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.activation_method)
  return activation_method_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_activation_method(::google::protobuf::int32 value) {
  set_has_activation_method();
  activation_method_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.activation_method)
}

// repeated float activation_arg = 32;
inline int Inst_bmnet_conv_forward_bmkernel::activation_arg_size() const {
  return activation_arg_.size();
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_activation_arg() {
  activation_arg_.Clear();
}
inline float Inst_bmnet_conv_forward_bmkernel::activation_arg(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.activation_arg)
  return activation_arg_.Get(index);
}
inline void Inst_bmnet_conv_forward_bmkernel::set_activation_arg(int index, float value) {
  activation_arg_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.activation_arg)
}
inline void Inst_bmnet_conv_forward_bmkernel::add_activation_arg(float value) {
  activation_arg_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.activation_arg)
}
inline const ::google::protobuf::RepeatedField< float >&
Inst_bmnet_conv_forward_bmkernel::activation_arg() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.activation_arg)
  return activation_arg_;
}
inline ::google::protobuf::RepeatedField< float >*
Inst_bmnet_conv_forward_bmkernel::mutable_activation_arg() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.activation_arg)
  return &activation_arg_;
}

// optional uint64 activation_ga_slope = 33;
inline bool Inst_bmnet_conv_forward_bmkernel::has_activation_ga_slope() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_activation_ga_slope() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_activation_ga_slope() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_activation_ga_slope() {
  activation_ga_slope_ = GOOGLE_ULONGLONG(0);
  clear_has_activation_ga_slope();
}
inline ::google::protobuf::uint64 Inst_bmnet_conv_forward_bmkernel::activation_ga_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.activation_ga_slope)
  return activation_ga_slope_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_activation_ga_slope(::google::protobuf::uint64 value) {
  set_has_activation_ga_slope();
  activation_ga_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.activation_ga_slope)
}

// optional bool activation_channel_shared = 34;
inline bool Inst_bmnet_conv_forward_bmkernel::has_activation_channel_shared() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_has_activation_channel_shared() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_has_activation_channel_shared() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Inst_bmnet_conv_forward_bmkernel::clear_activation_channel_shared() {
  activation_channel_shared_ = false;
  clear_has_activation_channel_shared();
}
inline bool Inst_bmnet_conv_forward_bmkernel::activation_channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.activation_channel_shared)
  return activation_channel_shared_;
}
inline void Inst_bmnet_conv_forward_bmkernel::set_activation_channel_shared(bool value) {
  set_has_activation_channel_shared();
  activation_channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel.activation_channel_shared)
}

// -------------------------------------------------------------------

// Inst_bmnet_threshold_forward_bmkernel

// optional uint64 input_offset = 1;
inline bool Inst_bmnet_threshold_forward_bmkernel::has_input_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_has_input_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_has_input_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_input_offset() {
  input_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_input_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_threshold_forward_bmkernel::input_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.input_offset)
  return input_offset_;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_input_offset(::google::protobuf::uint64 value) {
  set_has_input_offset();
  input_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.input_offset)
}

// optional uint64 output_offset = 2;
inline bool Inst_bmnet_threshold_forward_bmkernel::has_output_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_has_output_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_has_output_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_output_offset() {
  output_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_output_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_threshold_forward_bmkernel::output_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.output_offset)
  return output_offset_;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_output_offset(::google::protobuf::uint64 value) {
  set_has_output_offset();
  output_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.output_offset)
}

// optional float threshold = 3;
inline bool Inst_bmnet_threshold_forward_bmkernel::has_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_has_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float Inst_bmnet_threshold_forward_bmkernel::threshold() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.threshold)
  return threshold_;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.threshold)
}

// optional int32 input_n = 4;
inline bool Inst_bmnet_threshold_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_threshold_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.input_n)
}

// optional int32 input_c = 5;
inline bool Inst_bmnet_threshold_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_threshold_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.input_c)
}

// optional int32 input_h = 6;
inline bool Inst_bmnet_threshold_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_threshold_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.input_h)
}

// optional int32 input_w = 7;
inline bool Inst_bmnet_threshold_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_threshold_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_threshold_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_threshold_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_exp_forward_bmkernel

// optional uint64 input_offset = 1;
inline bool Inst_bmnet_exp_forward_bmkernel::has_input_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_has_input_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_has_input_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_input_offset() {
  input_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_input_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_exp_forward_bmkernel::input_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_offset)
  return input_offset_;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_input_offset(::google::protobuf::uint64 value) {
  set_has_input_offset();
  input_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_offset)
}

// optional uint64 output_offset = 2;
inline bool Inst_bmnet_exp_forward_bmkernel::has_output_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_has_output_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_has_output_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_output_offset() {
  output_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_output_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_exp_forward_bmkernel::output_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.output_offset)
  return output_offset_;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_output_offset(::google::protobuf::uint64 value) {
  set_has_output_offset();
  output_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.output_offset)
}

// optional float base = 3;
inline bool Inst_bmnet_exp_forward_bmkernel::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_base() {
  base_ = 0;
  clear_has_base();
}
inline float Inst_bmnet_exp_forward_bmkernel::base() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.base)
  return base_;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.base)
}

// optional float input_scale = 4;
inline bool Inst_bmnet_exp_forward_bmkernel::has_input_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_has_input_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_has_input_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_input_scale() {
  input_scale_ = 0;
  clear_has_input_scale();
}
inline float Inst_bmnet_exp_forward_bmkernel::input_scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_scale)
  return input_scale_;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_input_scale(float value) {
  set_has_input_scale();
  input_scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_scale)
}

// optional float input_shift = 5;
inline bool Inst_bmnet_exp_forward_bmkernel::has_input_shift() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_has_input_shift() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_has_input_shift() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_input_shift() {
  input_shift_ = 0;
  clear_has_input_shift();
}
inline float Inst_bmnet_exp_forward_bmkernel::input_shift() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_shift)
  return input_shift_;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_input_shift(float value) {
  set_has_input_shift();
  input_shift_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_shift)
}

// optional int32 input_n = 6;
inline bool Inst_bmnet_exp_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_exp_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_n)
}

// optional int32 input_c = 7;
inline bool Inst_bmnet_exp_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_exp_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_c)
}

// optional int32 input_h = 8;
inline bool Inst_bmnet_exp_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_exp_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_h)
}

// optional int32 input_w = 9;
inline bool Inst_bmnet_exp_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_exp_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_exp_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_exp_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_power_forward_bmkernel

// optional uint64 input_offset = 1;
inline bool Inst_bmnet_power_forward_bmkernel::has_input_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_power_forward_bmkernel::set_has_input_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_has_input_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_input_offset() {
  input_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_input_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_power_forward_bmkernel::input_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.input_offset)
  return input_offset_;
}
inline void Inst_bmnet_power_forward_bmkernel::set_input_offset(::google::protobuf::uint64 value) {
  set_has_input_offset();
  input_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.input_offset)
}

// optional uint64 output_offset = 2;
inline bool Inst_bmnet_power_forward_bmkernel::has_output_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_power_forward_bmkernel::set_has_output_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_has_output_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_output_offset() {
  output_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_output_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_power_forward_bmkernel::output_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.output_offset)
  return output_offset_;
}
inline void Inst_bmnet_power_forward_bmkernel::set_output_offset(::google::protobuf::uint64 value) {
  set_has_output_offset();
  output_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.output_offset)
}

// optional float power_ = 3;
inline bool Inst_bmnet_power_forward_bmkernel::has_power_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_power_forward_bmkernel::set_has_power_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_has_power_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_power_() {
  power__ = 0;
  clear_has_power_();
}
inline float Inst_bmnet_power_forward_bmkernel::power_() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.power_)
  return power__;
}
inline void Inst_bmnet_power_forward_bmkernel::set_power_(float value) {
  set_has_power_();
  power__ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.power_)
}

// optional float scale_ = 4;
inline bool Inst_bmnet_power_forward_bmkernel::has_scale_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_power_forward_bmkernel::set_has_scale_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_has_scale_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_scale_() {
  scale__ = 0;
  clear_has_scale_();
}
inline float Inst_bmnet_power_forward_bmkernel::scale_() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.scale_)
  return scale__;
}
inline void Inst_bmnet_power_forward_bmkernel::set_scale_(float value) {
  set_has_scale_();
  scale__ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.scale_)
}

// optional float shift_ = 5;
inline bool Inst_bmnet_power_forward_bmkernel::has_shift_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_power_forward_bmkernel::set_has_shift_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_has_shift_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_shift_() {
  shift__ = 0;
  clear_has_shift_();
}
inline float Inst_bmnet_power_forward_bmkernel::shift_() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.shift_)
  return shift__;
}
inline void Inst_bmnet_power_forward_bmkernel::set_shift_(float value) {
  set_has_shift_();
  shift__ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.shift_)
}

// optional int32 input_n = 6;
inline bool Inst_bmnet_power_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_power_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_power_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_power_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.input_n)
}

// optional int32 input_c = 7;
inline bool Inst_bmnet_power_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_power_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_power_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_power_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.input_c)
}

// optional int32 input_h = 8;
inline bool Inst_bmnet_power_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_power_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_power_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_power_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.input_h)
}

// optional int32 input_w = 9;
inline bool Inst_bmnet_power_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_power_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_power_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_power_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_power_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_absval_forward_bmkernel

// optional uint64 bottom_gaddr = 1;
inline bool Inst_bmnet_absval_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_absval_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_absval_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_absval_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_absval_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_absval_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 2;
inline bool Inst_bmnet_absval_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_absval_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_absval_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_absval_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_absval_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_absval_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel.top_gaddr)
}

// optional int32 input_n = 3;
inline bool Inst_bmnet_absval_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_absval_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_absval_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_absval_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_absval_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_absval_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel.input_n)
}

// optional int32 input_c = 4;
inline bool Inst_bmnet_absval_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_absval_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_absval_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_absval_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_absval_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_absval_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel.input_c)
}

// optional int32 input_h = 5;
inline bool Inst_bmnet_absval_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_absval_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_absval_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_absval_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_absval_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_absval_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel.input_h)
}

// optional int32 input_w = 6;
inline bool Inst_bmnet_absval_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_absval_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_absval_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_absval_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_absval_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_absval_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_sigmoid_forward_bmkernel

// optional uint64 bottom_gaddr = 1;
inline bool Inst_bmnet_sigmoid_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_sigmoid_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 2;
inline bool Inst_bmnet_sigmoid_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_sigmoid_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel.top_gaddr)
}

// optional int32 input_n = 3;
inline bool Inst_bmnet_sigmoid_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_sigmoid_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel.input_n)
}

// optional int32 input_c = 4;
inline bool Inst_bmnet_sigmoid_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_sigmoid_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel.input_c)
}

// optional int32 input_h = 5;
inline bool Inst_bmnet_sigmoid_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_sigmoid_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel.input_h)
}

// optional int32 input_w = 6;
inline bool Inst_bmnet_sigmoid_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_sigmoid_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_sigmoid_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_log_forward_bmkernel

// optional uint64 bottom_gaddr = 1;
inline bool Inst_bmnet_log_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_log_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_log_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_log_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 2;
inline bool Inst_bmnet_log_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_log_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_log_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_log_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.top_gaddr)
}

// optional float scale = 3;
inline bool Inst_bmnet_log_forward_bmkernel::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_log_forward_bmkernel::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float Inst_bmnet_log_forward_bmkernel::scale() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.scale)
  return scale_;
}
inline void Inst_bmnet_log_forward_bmkernel::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.scale)
}

// optional float shift = 4;
inline bool Inst_bmnet_log_forward_bmkernel::has_shift() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_log_forward_bmkernel::set_has_shift() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_has_shift() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float Inst_bmnet_log_forward_bmkernel::shift() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.shift)
  return shift_;
}
inline void Inst_bmnet_log_forward_bmkernel::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.shift)
}

// optional float base = 5;
inline bool Inst_bmnet_log_forward_bmkernel::has_base() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_log_forward_bmkernel::set_has_base() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_has_base() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_base() {
  base_ = 0;
  clear_has_base();
}
inline float Inst_bmnet_log_forward_bmkernel::base() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.base)
  return base_;
}
inline void Inst_bmnet_log_forward_bmkernel::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.base)
}

// optional int32 input_n = 6;
inline bool Inst_bmnet_log_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_log_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_log_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_log_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.input_n)
}

// optional int32 input_c = 7;
inline bool Inst_bmnet_log_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_log_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_log_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_log_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.input_c)
}

// optional int32 input_h = 8;
inline bool Inst_bmnet_log_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_log_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_log_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_log_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.input_h)
}

// optional int32 input_w = 9;
inline bool Inst_bmnet_log_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_log_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_log_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_log_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_log_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_fc_forward_bmkernel

// optional uint64 bottom_data_gaddr = 1;
inline bool Inst_bmnet_fc_forward_bmkernel::has_bottom_data_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_has_bottom_data_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_has_bottom_data_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_bottom_data_gaddr() {
  bottom_data_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_data_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_fc_forward_bmkernel::bottom_data_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.bottom_data_gaddr)
  return bottom_data_gaddr_;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_bottom_data_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_data_gaddr();
  bottom_data_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.bottom_data_gaddr)
}

// optional uint64 weight_data_gaddr = 2;
inline bool Inst_bmnet_fc_forward_bmkernel::has_weight_data_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_has_weight_data_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_has_weight_data_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_weight_data_gaddr() {
  weight_data_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_weight_data_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_fc_forward_bmkernel::weight_data_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.weight_data_gaddr)
  return weight_data_gaddr_;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_weight_data_gaddr(::google::protobuf::uint64 value) {
  set_has_weight_data_gaddr();
  weight_data_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.weight_data_gaddr)
}

// optional uint64 bias_data_gaddr = 3;
inline bool Inst_bmnet_fc_forward_bmkernel::has_bias_data_gaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_has_bias_data_gaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_has_bias_data_gaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_bias_data_gaddr() {
  bias_data_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bias_data_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_fc_forward_bmkernel::bias_data_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.bias_data_gaddr)
  return bias_data_gaddr_;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_bias_data_gaddr(::google::protobuf::uint64 value) {
  set_has_bias_data_gaddr();
  bias_data_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.bias_data_gaddr)
}

// optional uint64 top_data_gaddr = 4;
inline bool Inst_bmnet_fc_forward_bmkernel::has_top_data_gaddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_has_top_data_gaddr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_has_top_data_gaddr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_top_data_gaddr() {
  top_data_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_data_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_fc_forward_bmkernel::top_data_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.top_data_gaddr)
  return top_data_gaddr_;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_top_data_gaddr(::google::protobuf::uint64 value) {
  set_has_top_data_gaddr();
  top_data_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.top_data_gaddr)
}

// optional int32 input_row_num = 5;
inline bool Inst_bmnet_fc_forward_bmkernel::has_input_row_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_has_input_row_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_has_input_row_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_input_row_num() {
  input_row_num_ = 0;
  clear_has_input_row_num();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_forward_bmkernel::input_row_num() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.input_row_num)
  return input_row_num_;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_input_row_num(::google::protobuf::int32 value) {
  set_has_input_row_num();
  input_row_num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.input_row_num)
}

// optional int32 input_col_num = 6;
inline bool Inst_bmnet_fc_forward_bmkernel::has_input_col_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_has_input_col_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_has_input_col_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_input_col_num() {
  input_col_num_ = 0;
  clear_has_input_col_num();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_forward_bmkernel::input_col_num() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.input_col_num)
  return input_col_num_;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_input_col_num(::google::protobuf::int32 value) {
  set_has_input_col_num();
  input_col_num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.input_col_num)
}

// optional int32 weight_col_num = 7;
inline bool Inst_bmnet_fc_forward_bmkernel::has_weight_col_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_has_weight_col_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_has_weight_col_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_weight_col_num() {
  weight_col_num_ = 0;
  clear_has_weight_col_num();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_forward_bmkernel::weight_col_num() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.weight_col_num)
  return weight_col_num_;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_weight_col_num(::google::protobuf::int32 value) {
  set_has_weight_col_num();
  weight_col_num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.weight_col_num)
}

// optional int32 have_bias = 8;
inline bool Inst_bmnet_fc_forward_bmkernel::has_have_bias() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_has_have_bias() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_has_have_bias() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_have_bias() {
  have_bias_ = 0;
  clear_has_have_bias();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_forward_bmkernel::have_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.have_bias)
  return have_bias_;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_have_bias(::google::protobuf::int32 value) {
  set_has_have_bias();
  have_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.have_bias)
}

// optional int32 using_relu = 9;
inline bool Inst_bmnet_fc_forward_bmkernel::has_using_relu() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_has_using_relu() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_has_using_relu() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_using_relu() {
  using_relu_ = 0;
  clear_has_using_relu();
}
inline ::google::protobuf::int32 Inst_bmnet_fc_forward_bmkernel::using_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.using_relu)
  return using_relu_;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_using_relu(::google::protobuf::int32 value) {
  set_has_using_relu();
  using_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.using_relu)
}

// optional bool weight_transpose = 10;
inline bool Inst_bmnet_fc_forward_bmkernel::has_weight_transpose() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_has_weight_transpose() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_has_weight_transpose() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_fc_forward_bmkernel::clear_weight_transpose() {
  weight_transpose_ = false;
  clear_has_weight_transpose();
}
inline bool Inst_bmnet_fc_forward_bmkernel::weight_transpose() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.weight_transpose)
  return weight_transpose_;
}
inline void Inst_bmnet_fc_forward_bmkernel::set_weight_transpose(bool value) {
  set_has_weight_transpose();
  weight_transpose_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel.weight_transpose)
}

// -------------------------------------------------------------------

// Inst_bmnet_bias_forward_bmkernel

// optional uint64 bottom_data_gaddr = 1;
inline bool Inst_bmnet_bias_forward_bmkernel::has_bottom_data_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_has_bottom_data_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_has_bottom_data_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_bottom_data_gaddr() {
  bottom_data_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_data_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_bias_forward_bmkernel::bottom_data_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.bottom_data_gaddr)
  return bottom_data_gaddr_;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_bottom_data_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_data_gaddr();
  bottom_data_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.bottom_data_gaddr)
}

// optional uint64 bias_data_gaddr = 2;
inline bool Inst_bmnet_bias_forward_bmkernel::has_bias_data_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_has_bias_data_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_has_bias_data_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_bias_data_gaddr() {
  bias_data_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bias_data_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_bias_forward_bmkernel::bias_data_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.bias_data_gaddr)
  return bias_data_gaddr_;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_bias_data_gaddr(::google::protobuf::uint64 value) {
  set_has_bias_data_gaddr();
  bias_data_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.bias_data_gaddr)
}

// optional uint64 top_data_gaddr = 3;
inline bool Inst_bmnet_bias_forward_bmkernel::has_top_data_gaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_has_top_data_gaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_has_top_data_gaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_top_data_gaddr() {
  top_data_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_data_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_bias_forward_bmkernel::top_data_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.top_data_gaddr)
  return top_data_gaddr_;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_top_data_gaddr(::google::protobuf::uint64 value) {
  set_has_top_data_gaddr();
  top_data_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.top_data_gaddr)
}

// optional int32 input_n = 4;
inline bool Inst_bmnet_bias_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_bias_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.input_n)
}

// optional int32 input_c = 5;
inline bool Inst_bmnet_bias_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_bias_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.input_c)
}

// optional int32 input_h = 6;
inline bool Inst_bmnet_bias_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_bias_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.input_h)
}

// optional int32 input_w = 7;
inline bool Inst_bmnet_bias_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_bias_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_bias_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_bias_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_elu_forward_bmkernel

// optional uint64 bottom_gaddr = 1;
inline bool Inst_bmnet_elu_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_elu_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 2;
inline bool Inst_bmnet_elu_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_elu_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.top_gaddr)
}

// optional float alpha = 3;
inline bool Inst_bmnet_elu_forward_bmkernel::has_alpha() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_has_alpha() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
inline float Inst_bmnet_elu_forward_bmkernel::alpha() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.alpha)
  return alpha_;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.alpha)
}

// optional int32 input_n = 4;
inline bool Inst_bmnet_elu_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_elu_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.input_n)
}

// optional int32 input_c = 5;
inline bool Inst_bmnet_elu_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_elu_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.input_c)
}

// optional int32 input_h = 6;
inline bool Inst_bmnet_elu_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_elu_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.input_h)
}

// optional int32 input_w = 7;
inline bool Inst_bmnet_elu_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_elu_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_elu_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_elu_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_tanh_forward_bmkernel

// optional uint64 bottom_gaddr = 1;
inline bool Inst_bmnet_tanh_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tanh_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tanh_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tanh_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tanh_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_tanh_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 2;
inline bool Inst_bmnet_tanh_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tanh_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tanh_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tanh_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tanh_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_tanh_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel.top_gaddr)
}

// optional int32 input_n = 3;
inline bool Inst_bmnet_tanh_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tanh_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tanh_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tanh_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tanh_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_tanh_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel.input_n)
}

// optional int32 input_c = 4;
inline bool Inst_bmnet_tanh_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tanh_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tanh_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tanh_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tanh_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_tanh_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel.input_c)
}

// -------------------------------------------------------------------

// Inst_bmnet_lstm_unit_forward_bmkernel

// optional uint64 X_i_offset = 1;
inline bool Inst_bmnet_lstm_unit_forward_bmkernel::has_x_i_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_has_x_i_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_has_x_i_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_x_i_offset() {
  x_i_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_x_i_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_lstm_unit_forward_bmkernel::x_i_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.X_i_offset)
  return x_i_offset_;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_x_i_offset(::google::protobuf::uint64 value) {
  set_has_x_i_offset();
  x_i_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.X_i_offset)
}

// optional uint64 X_f_offset = 2;
inline bool Inst_bmnet_lstm_unit_forward_bmkernel::has_x_f_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_has_x_f_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_has_x_f_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_x_f_offset() {
  x_f_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_x_f_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_lstm_unit_forward_bmkernel::x_f_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.X_f_offset)
  return x_f_offset_;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_x_f_offset(::google::protobuf::uint64 value) {
  set_has_x_f_offset();
  x_f_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.X_f_offset)
}

// optional uint64 X_o_offset = 3;
inline bool Inst_bmnet_lstm_unit_forward_bmkernel::has_x_o_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_has_x_o_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_has_x_o_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_x_o_offset() {
  x_o_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_x_o_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_lstm_unit_forward_bmkernel::x_o_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.X_o_offset)
  return x_o_offset_;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_x_o_offset(::google::protobuf::uint64 value) {
  set_has_x_o_offset();
  x_o_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.X_o_offset)
}

// optional uint64 X_g_offset = 4;
inline bool Inst_bmnet_lstm_unit_forward_bmkernel::has_x_g_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_has_x_g_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_has_x_g_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_x_g_offset() {
  x_g_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_x_g_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_lstm_unit_forward_bmkernel::x_g_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.X_g_offset)
  return x_g_offset_;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_x_g_offset(::google::protobuf::uint64 value) {
  set_has_x_g_offset();
  x_g_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.X_g_offset)
}

// optional uint64 C_prev_offset = 5;
inline bool Inst_bmnet_lstm_unit_forward_bmkernel::has_c_prev_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_has_c_prev_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_has_c_prev_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_c_prev_offset() {
  c_prev_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_c_prev_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_lstm_unit_forward_bmkernel::c_prev_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.C_prev_offset)
  return c_prev_offset_;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_c_prev_offset(::google::protobuf::uint64 value) {
  set_has_c_prev_offset();
  c_prev_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.C_prev_offset)
}

// optional uint64 cont_expand_offset = 6;
inline bool Inst_bmnet_lstm_unit_forward_bmkernel::has_cont_expand_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_has_cont_expand_offset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_has_cont_expand_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_cont_expand_offset() {
  cont_expand_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_cont_expand_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_lstm_unit_forward_bmkernel::cont_expand_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.cont_expand_offset)
  return cont_expand_offset_;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_cont_expand_offset(::google::protobuf::uint64 value) {
  set_has_cont_expand_offset();
  cont_expand_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.cont_expand_offset)
}

// optional uint64 C_offset = 7;
inline bool Inst_bmnet_lstm_unit_forward_bmkernel::has_c_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_has_c_offset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_has_c_offset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_c_offset() {
  c_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_c_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_lstm_unit_forward_bmkernel::c_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.C_offset)
  return c_offset_;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_c_offset(::google::protobuf::uint64 value) {
  set_has_c_offset();
  c_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.C_offset)
}

// optional uint64 H_offset = 8;
inline bool Inst_bmnet_lstm_unit_forward_bmkernel::has_h_offset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_has_h_offset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_has_h_offset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_h_offset() {
  h_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_h_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_lstm_unit_forward_bmkernel::h_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.H_offset)
  return h_offset_;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_h_offset(::google::protobuf::uint64 value) {
  set_has_h_offset();
  h_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.H_offset)
}

// optional int32 input_n = 9;
inline bool Inst_bmnet_lstm_unit_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_lstm_unit_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.input_n)
}

// optional int32 input_c = 10;
inline bool Inst_bmnet_lstm_unit_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_lstm_unit_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.input_c)
}

// optional int32 input_h = 11;
inline bool Inst_bmnet_lstm_unit_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_lstm_unit_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.input_h)
}

// optional int32 input_w = 12;
inline bool Inst_bmnet_lstm_unit_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_lstm_unit_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_lstm_unit_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_lrn_forward_bmkernel

// optional uint64 bottom_gaddr = 1;
inline bool Inst_bmnet_lrn_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_lrn_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 2;
inline bool Inst_bmnet_lrn_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_lrn_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.top_gaddr)
}

// optional int32 input_n = 3;
inline bool Inst_bmnet_lrn_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_lrn_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.input_n)
}

// optional int32 input_c = 4;
inline bool Inst_bmnet_lrn_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_lrn_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.input_c)
}

// optional int32 input_h = 5;
inline bool Inst_bmnet_lrn_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_lrn_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.input_h)
}

// optional int32 input_w = 6;
inline bool Inst_bmnet_lrn_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_lrn_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.input_w)
}

// optional float alpha = 7;
inline bool Inst_bmnet_lrn_forward_bmkernel::has_alpha() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_has_alpha() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
inline float Inst_bmnet_lrn_forward_bmkernel::alpha() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.alpha)
  return alpha_;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.alpha)
}

// optional int32 size = 8;
inline bool Inst_bmnet_lrn_forward_bmkernel::has_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_has_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_has_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 Inst_bmnet_lrn_forward_bmkernel::size() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.size)
  return size_;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.size)
}

// optional float beta = 9;
inline bool Inst_bmnet_lrn_forward_bmkernel::has_beta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_has_beta() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_has_beta() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_beta() {
  beta_ = 0;
  clear_has_beta();
}
inline float Inst_bmnet_lrn_forward_bmkernel::beta() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.beta)
  return beta_;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.beta)
}

// optional float k = 10;
inline bool Inst_bmnet_lrn_forward_bmkernel::has_k() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_has_k() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_has_k() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_lrn_forward_bmkernel::clear_k() {
  k_ = 0;
  clear_has_k();
}
inline float Inst_bmnet_lrn_forward_bmkernel::k() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.k)
  return k_;
}
inline void Inst_bmnet_lrn_forward_bmkernel::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel.k)
}

// -------------------------------------------------------------------

// Inst_bmnet_bnll_forward_bmkernel

// optional uint64 bottom_gaddr = 1;
inline bool Inst_bmnet_bnll_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_bnll_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_bnll_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_bnll_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_bnll_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_bnll_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 2;
inline bool Inst_bmnet_bnll_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_bnll_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_bnll_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_bnll_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_bnll_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_bnll_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel.top_gaddr)
}

// optional int32 input_n = 3;
inline bool Inst_bmnet_bnll_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_bnll_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_bnll_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_bnll_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_bnll_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_bnll_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel.input_n)
}

// optional int32 input_c = 4;
inline bool Inst_bmnet_bnll_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_bnll_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_bnll_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_bnll_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_bnll_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_bnll_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel.input_c)
}

// optional int32 input_h = 5;
inline bool Inst_bmnet_bnll_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_bnll_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_bnll_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_bnll_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_bnll_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_bnll_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel.input_h)
}

// optional int32 input_w = 6;
inline bool Inst_bmnet_bnll_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_bnll_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_bnll_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_bnll_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_bnll_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_bnll_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_crop_forward_bmkernel

// optional uint64 input_gaddr = 1;
inline bool Inst_bmnet_crop_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_crop_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_crop_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_crop_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_crop_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_crop_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 2;
inline bool Inst_bmnet_crop_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_crop_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_crop_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_crop_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_crop_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_crop_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.output_gaddr)
}

// repeated int32 input_dim = 3;
inline int Inst_bmnet_crop_forward_bmkernel::input_dim_size() const {
  return input_dim_.size();
}
inline void Inst_bmnet_crop_forward_bmkernel::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_crop_forward_bmkernel::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.input_dim)
  return input_dim_.Get(index);
}
inline void Inst_bmnet_crop_forward_bmkernel::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.input_dim)
}
inline void Inst_bmnet_crop_forward_bmkernel::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_crop_forward_bmkernel::input_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_crop_forward_bmkernel::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.input_dim)
  return &input_dim_;
}

// repeated int32 output_dim = 4;
inline int Inst_bmnet_crop_forward_bmkernel::output_dim_size() const {
  return output_dim_.size();
}
inline void Inst_bmnet_crop_forward_bmkernel::clear_output_dim() {
  output_dim_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_crop_forward_bmkernel::output_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.output_dim)
  return output_dim_.Get(index);
}
inline void Inst_bmnet_crop_forward_bmkernel::set_output_dim(int index, ::google::protobuf::int32 value) {
  output_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.output_dim)
}
inline void Inst_bmnet_crop_forward_bmkernel::add_output_dim(::google::protobuf::int32 value) {
  output_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.output_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_crop_forward_bmkernel::output_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.output_dim)
  return output_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_crop_forward_bmkernel::mutable_output_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.output_dim)
  return &output_dim_;
}

// repeated int32 offsets = 5;
inline int Inst_bmnet_crop_forward_bmkernel::offsets_size() const {
  return offsets_.size();
}
inline void Inst_bmnet_crop_forward_bmkernel::clear_offsets() {
  offsets_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_crop_forward_bmkernel::offsets(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.offsets)
  return offsets_.Get(index);
}
inline void Inst_bmnet_crop_forward_bmkernel::set_offsets(int index, ::google::protobuf::int32 value) {
  offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.offsets)
}
inline void Inst_bmnet_crop_forward_bmkernel::add_offsets(::google::protobuf::int32 value) {
  offsets_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.offsets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_crop_forward_bmkernel::offsets() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.offsets)
  return offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_crop_forward_bmkernel::mutable_offsets() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.offsets)
  return &offsets_;
}

// optional int32 output_dim_len = 6;
inline bool Inst_bmnet_crop_forward_bmkernel::has_output_dim_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_crop_forward_bmkernel::set_has_output_dim_len() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_crop_forward_bmkernel::clear_has_output_dim_len() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_crop_forward_bmkernel::clear_output_dim_len() {
  output_dim_len_ = 0;
  clear_has_output_dim_len();
}
inline ::google::protobuf::int32 Inst_bmnet_crop_forward_bmkernel::output_dim_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.output_dim_len)
  return output_dim_len_;
}
inline void Inst_bmnet_crop_forward_bmkernel::set_output_dim_len(::google::protobuf::int32 value) {
  set_has_output_dim_len();
  output_dim_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel.output_dim_len)
}

// -------------------------------------------------------------------

// Inst_bmnet_slice_forward_bmkernel

// optional uint64 bottom_gaddr = 1;
inline bool Inst_bmnet_slice_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_slice_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_slice_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_slice_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_slice_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_slice_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 2;
inline bool Inst_bmnet_slice_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_slice_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_slice_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_slice_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_slice_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_slice_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel.top_gaddr)
}

// optional int32 outer_dim = 3;
inline bool Inst_bmnet_slice_forward_bmkernel::has_outer_dim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_slice_forward_bmkernel::set_has_outer_dim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_slice_forward_bmkernel::clear_has_outer_dim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_slice_forward_bmkernel::clear_outer_dim() {
  outer_dim_ = 0;
  clear_has_outer_dim();
}
inline ::google::protobuf::int32 Inst_bmnet_slice_forward_bmkernel::outer_dim() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel.outer_dim)
  return outer_dim_;
}
inline void Inst_bmnet_slice_forward_bmkernel::set_outer_dim(::google::protobuf::int32 value) {
  set_has_outer_dim();
  outer_dim_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel.outer_dim)
}

// optional int32 inner_dim = 4;
inline bool Inst_bmnet_slice_forward_bmkernel::has_inner_dim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_slice_forward_bmkernel::set_has_inner_dim() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_slice_forward_bmkernel::clear_has_inner_dim() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_slice_forward_bmkernel::clear_inner_dim() {
  inner_dim_ = 0;
  clear_has_inner_dim();
}
inline ::google::protobuf::int32 Inst_bmnet_slice_forward_bmkernel::inner_dim() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel.inner_dim)
  return inner_dim_;
}
inline void Inst_bmnet_slice_forward_bmkernel::set_inner_dim(::google::protobuf::int32 value) {
  set_has_inner_dim();
  inner_dim_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel.inner_dim)
}

// optional int32 axis_dim = 5;
inline bool Inst_bmnet_slice_forward_bmkernel::has_axis_dim() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_slice_forward_bmkernel::set_has_axis_dim() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_slice_forward_bmkernel::clear_has_axis_dim() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_slice_forward_bmkernel::clear_axis_dim() {
  axis_dim_ = 0;
  clear_has_axis_dim();
}
inline ::google::protobuf::int32 Inst_bmnet_slice_forward_bmkernel::axis_dim() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel.axis_dim)
  return axis_dim_;
}
inline void Inst_bmnet_slice_forward_bmkernel::set_axis_dim(::google::protobuf::int32 value) {
  set_has_axis_dim();
  axis_dim_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel.axis_dim)
}

// optional int32 slice_dim = 6;
inline bool Inst_bmnet_slice_forward_bmkernel::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_slice_forward_bmkernel::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_slice_forward_bmkernel::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_slice_forward_bmkernel::clear_slice_dim() {
  slice_dim_ = 0;
  clear_has_slice_dim();
}
inline ::google::protobuf::int32 Inst_bmnet_slice_forward_bmkernel::slice_dim() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel.slice_dim)
  return slice_dim_;
}
inline void Inst_bmnet_slice_forward_bmkernel::set_slice_dim(::google::protobuf::int32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel.slice_dim)
}

// -------------------------------------------------------------------

// Inst_bmnet_eltwise_forward_bmkernel

// repeated uint64 ga_input = 1;
inline int Inst_bmnet_eltwise_forward_bmkernel::ga_input_size() const {
  return ga_input_.size();
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_ga_input() {
  ga_input_.Clear();
}
inline ::google::protobuf::uint64 Inst_bmnet_eltwise_forward_bmkernel::ga_input(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.ga_input)
  return ga_input_.Get(index);
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_ga_input(int index, ::google::protobuf::uint64 value) {
  ga_input_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.ga_input)
}
inline void Inst_bmnet_eltwise_forward_bmkernel::add_ga_input(::google::protobuf::uint64 value) {
  ga_input_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.ga_input)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Inst_bmnet_eltwise_forward_bmkernel::ga_input() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.ga_input)
  return ga_input_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Inst_bmnet_eltwise_forward_bmkernel::mutable_ga_input() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.ga_input)
  return &ga_input_;
}

// optional uint64 ga_output = 2;
inline bool Inst_bmnet_eltwise_forward_bmkernel::has_ga_output() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_has_ga_output() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_has_ga_output() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_ga_output() {
  ga_output_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_output();
}
inline ::google::protobuf::uint64 Inst_bmnet_eltwise_forward_bmkernel::ga_output() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.ga_output)
  return ga_output_;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_ga_output(::google::protobuf::uint64 value) {
  set_has_ga_output();
  ga_output_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.ga_output)
}

// optional int32 input_size = 3;
inline bool Inst_bmnet_eltwise_forward_bmkernel::has_input_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_has_input_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_has_input_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_input_size() {
  input_size_ = 0;
  clear_has_input_size();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_forward_bmkernel::input_size() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.input_size)
  return input_size_;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_input_size(::google::protobuf::int32 value) {
  set_has_input_size();
  input_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.input_size)
}

// optional int32 op = 4;
inline bool Inst_bmnet_eltwise_forward_bmkernel::has_op() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_has_op() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_has_op() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_forward_bmkernel::op() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.op)
  return op_;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.op)
}

// repeated float coeffs = 5;
inline int Inst_bmnet_eltwise_forward_bmkernel::coeffs_size() const {
  return coeffs_.size();
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_coeffs() {
  coeffs_.Clear();
}
inline float Inst_bmnet_eltwise_forward_bmkernel::coeffs(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.coeffs)
  return coeffs_.Get(index);
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_coeffs(int index, float value) {
  coeffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.coeffs)
}
inline void Inst_bmnet_eltwise_forward_bmkernel::add_coeffs(float value) {
  coeffs_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.coeffs)
}
inline const ::google::protobuf::RepeatedField< float >&
Inst_bmnet_eltwise_forward_bmkernel::coeffs() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.coeffs)
  return coeffs_;
}
inline ::google::protobuf::RepeatedField< float >*
Inst_bmnet_eltwise_forward_bmkernel::mutable_coeffs() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.coeffs)
  return &coeffs_;
}

// optional int32 input_n = 6;
inline bool Inst_bmnet_eltwise_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.input_n)
}

// optional int32 input_c = 7;
inline bool Inst_bmnet_eltwise_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.input_c)
}

// optional int32 input_h = 8;
inline bool Inst_bmnet_eltwise_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.input_h)
}

// optional int32 input_w = 9;
inline bool Inst_bmnet_eltwise_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_eltwise_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.input_w)
}

// optional bool do_relu = 10;
inline bool Inst_bmnet_eltwise_forward_bmkernel::has_do_relu() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_has_do_relu() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_has_do_relu() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_do_relu() {
  do_relu_ = false;
  clear_has_do_relu();
}
inline bool Inst_bmnet_eltwise_forward_bmkernel::do_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.do_relu)
  return do_relu_;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_do_relu(bool value) {
  set_has_do_relu();
  do_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.do_relu)
}

// optional float relu_slope = 11;
inline bool Inst_bmnet_eltwise_forward_bmkernel::has_relu_slope() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_has_relu_slope() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_has_relu_slope() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::clear_relu_slope() {
  relu_slope_ = 0;
  clear_has_relu_slope();
}
inline float Inst_bmnet_eltwise_forward_bmkernel::relu_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.relu_slope)
  return relu_slope_;
}
inline void Inst_bmnet_eltwise_forward_bmkernel::set_relu_slope(float value) {
  set_has_relu_slope();
  relu_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel.relu_slope)
}

// -------------------------------------------------------------------

// Inst_bmnet_tile_forward_bmkernel

// optional uint64 bottom_gaddr = 1;
inline bool Inst_bmnet_tile_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tile_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 2;
inline bool Inst_bmnet_tile_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_tile_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.top_gaddr)
}

// optional int32 input_n = 3;
inline bool Inst_bmnet_tile_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_tile_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.input_n)
}

// optional int32 input_c = 4;
inline bool Inst_bmnet_tile_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_tile_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.input_c)
}

// optional int32 input_h = 5;
inline bool Inst_bmnet_tile_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_tile_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.input_h)
}

// optional int32 input_w = 6;
inline bool Inst_bmnet_tile_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_tile_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.input_w)
}

// optional int32 axis = 7;
inline bool Inst_bmnet_tile_forward_bmkernel::has_axis() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_has_axis() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_has_axis() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 Inst_bmnet_tile_forward_bmkernel::axis() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.axis)
  return axis_;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.axis)
}

// optional int32 tiles = 8;
inline bool Inst_bmnet_tile_forward_bmkernel::has_tiles() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_has_tiles() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_tile_forward_bmkernel::clear_tiles() {
  tiles_ = 0;
  clear_has_tiles();
}
inline ::google::protobuf::int32 Inst_bmnet_tile_forward_bmkernel::tiles() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.tiles)
  return tiles_;
}
inline void Inst_bmnet_tile_forward_bmkernel::set_tiles(::google::protobuf::int32 value) {
  set_has_tiles();
  tiles_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel.tiles)
}

// -------------------------------------------------------------------

// Inst_bmnet_relu_forward_bmkernel

// optional uint64 bottom_gaddr = 1;
inline bool Inst_bmnet_relu_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_relu_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 2;
inline bool Inst_bmnet_relu_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_relu_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.top_gaddr)
}

// optional float negative_slope = 3;
inline bool Inst_bmnet_relu_forward_bmkernel::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float Inst_bmnet_relu_forward_bmkernel::negative_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.negative_slope)
  return negative_slope_;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.negative_slope)
}

// optional int32 input_n = 4;
inline bool Inst_bmnet_relu_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_relu_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.input_n)
}

// optional int32 input_c = 5;
inline bool Inst_bmnet_relu_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_relu_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.input_c)
}

// optional int32 input_h = 6;
inline bool Inst_bmnet_relu_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_relu_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.input_h)
}

// optional int32 input_w = 7;
inline bool Inst_bmnet_relu_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_relu_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_relu_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_relu_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_batchnorm_forward_inference_bmkernel

// optional uint64 bottom_gaddr = 1;
inline bool Inst_bmnet_batchnorm_forward_inference_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_batchnorm_forward_inference_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.bottom_gaddr)
}

// optional uint64 mean_ma_gaddr = 2;
inline bool Inst_bmnet_batchnorm_forward_inference_bmkernel::has_mean_ma_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_has_mean_ma_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_has_mean_ma_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_mean_ma_gaddr() {
  mean_ma_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_mean_ma_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_batchnorm_forward_inference_bmkernel::mean_ma_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.mean_ma_gaddr)
  return mean_ma_gaddr_;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_mean_ma_gaddr(::google::protobuf::uint64 value) {
  set_has_mean_ma_gaddr();
  mean_ma_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.mean_ma_gaddr)
}

// optional uint64 variance_ma_gaddr = 3;
inline bool Inst_bmnet_batchnorm_forward_inference_bmkernel::has_variance_ma_gaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_has_variance_ma_gaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_has_variance_ma_gaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_variance_ma_gaddr() {
  variance_ma_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_variance_ma_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_batchnorm_forward_inference_bmkernel::variance_ma_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.variance_ma_gaddr)
  return variance_ma_gaddr_;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_variance_ma_gaddr(::google::protobuf::uint64 value) {
  set_has_variance_ma_gaddr();
  variance_ma_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.variance_ma_gaddr)
}

// optional float scale_ma = 4;
inline bool Inst_bmnet_batchnorm_forward_inference_bmkernel::has_scale_ma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_has_scale_ma() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_has_scale_ma() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_scale_ma() {
  scale_ma_ = 0;
  clear_has_scale_ma();
}
inline float Inst_bmnet_batchnorm_forward_inference_bmkernel::scale_ma() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.scale_ma)
  return scale_ma_;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_scale_ma(float value) {
  set_has_scale_ma();
  scale_ma_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.scale_ma)
}

// optional uint64 variance_gaddr = 5;
inline bool Inst_bmnet_batchnorm_forward_inference_bmkernel::has_variance_gaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_has_variance_gaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_has_variance_gaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_variance_gaddr() {
  variance_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_variance_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_batchnorm_forward_inference_bmkernel::variance_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.variance_gaddr)
  return variance_gaddr_;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_variance_gaddr(::google::protobuf::uint64 value) {
  set_has_variance_gaddr();
  variance_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.variance_gaddr)
}

// optional uint64 top_gaddr = 6;
inline bool Inst_bmnet_batchnorm_forward_inference_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_batchnorm_forward_inference_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.top_gaddr)
}

// optional float eps = 7;
inline bool Inst_bmnet_batchnorm_forward_inference_bmkernel::has_eps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_has_eps() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_has_eps() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_eps() {
  eps_ = 0;
  clear_has_eps();
}
inline float Inst_bmnet_batchnorm_forward_inference_bmkernel::eps() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.eps)
  return eps_;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.eps)
}

// optional int32 input_n = 8;
inline bool Inst_bmnet_batchnorm_forward_inference_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_batchnorm_forward_inference_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.input_n)
}

// optional int32 input_c = 9;
inline bool Inst_bmnet_batchnorm_forward_inference_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_batchnorm_forward_inference_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.input_c)
}

// optional int32 input_h = 10;
inline bool Inst_bmnet_batchnorm_forward_inference_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_batchnorm_forward_inference_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.input_h)
}

// optional int32 input_w = 11;
inline bool Inst_bmnet_batchnorm_forward_inference_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_batchnorm_forward_inference_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_batchnorm_forward_inference_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_softmax_forward_bmkernel

// optional uint64 bottom_gaddr = 1;
inline bool Inst_bmnet_softmax_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_softmax_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_softmax_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_softmax_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_softmax_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_softmax_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel.bottom_gaddr)
}

// optional uint64 top_gaddr = 2;
inline bool Inst_bmnet_softmax_forward_bmkernel::has_top_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_softmax_forward_bmkernel::set_has_top_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_softmax_forward_bmkernel::clear_has_top_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_softmax_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_top_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_softmax_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline void Inst_bmnet_softmax_forward_bmkernel::set_top_gaddr(::google::protobuf::uint64 value) {
  set_has_top_gaddr();
  top_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel.top_gaddr)
}

// optional int32 input_n = 3;
inline bool Inst_bmnet_softmax_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_softmax_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_softmax_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_softmax_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_softmax_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_softmax_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel.input_n)
}

// optional int32 input_c = 4;
inline bool Inst_bmnet_softmax_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_softmax_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_softmax_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_softmax_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_softmax_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_softmax_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel.input_c)
}

// optional int32 input_h = 5;
inline bool Inst_bmnet_softmax_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_softmax_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_softmax_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_softmax_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_softmax_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_softmax_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel.input_h)
}

// optional int32 input_w = 6;
inline bool Inst_bmnet_softmax_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_softmax_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_softmax_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_softmax_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_softmax_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_softmax_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_scale_forward_bmkernel

// optional uint64 input_gaddr = 1;
inline bool Inst_bmnet_scale_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_scale_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.input_gaddr)
}

// optional uint64 scale_gaddr = 2;
inline bool Inst_bmnet_scale_forward_bmkernel::has_scale_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_has_scale_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_has_scale_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_scale_gaddr() {
  scale_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_scale_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_scale_forward_bmkernel::scale_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.scale_gaddr)
  return scale_gaddr_;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_scale_gaddr(::google::protobuf::uint64 value) {
  set_has_scale_gaddr();
  scale_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.scale_gaddr)
}

// optional uint64 bias_gaddr = 3;
inline bool Inst_bmnet_scale_forward_bmkernel::has_bias_gaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_has_bias_gaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_has_bias_gaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_bias_gaddr() {
  bias_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bias_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_scale_forward_bmkernel::bias_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.bias_gaddr)
  return bias_gaddr_;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_bias_gaddr(::google::protobuf::uint64 value) {
  set_has_bias_gaddr();
  bias_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.bias_gaddr)
}

// optional uint64 output_gaddr = 4;
inline bool Inst_bmnet_scale_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_scale_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.output_gaddr)
}

// optional int32 input_n = 5;
inline bool Inst_bmnet_scale_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_scale_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.input_n)
}

// optional int32 input_c = 6;
inline bool Inst_bmnet_scale_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_scale_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.input_c)
}

// optional int32 input_h = 7;
inline bool Inst_bmnet_scale_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_scale_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.input_h)
}

// optional int32 input_w = 8;
inline bool Inst_bmnet_scale_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_scale_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.input_w)
}

// optional int32 scale_dim = 9;
inline bool Inst_bmnet_scale_forward_bmkernel::has_scale_dim() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_has_scale_dim() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_has_scale_dim() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_scale_dim() {
  scale_dim_ = 0;
  clear_has_scale_dim();
}
inline ::google::protobuf::int32 Inst_bmnet_scale_forward_bmkernel::scale_dim() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.scale_dim)
  return scale_dim_;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_scale_dim(::google::protobuf::int32 value) {
  set_has_scale_dim();
  scale_dim_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.scale_dim)
}

// optional int32 inner_dim = 10;
inline bool Inst_bmnet_scale_forward_bmkernel::has_inner_dim() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_has_inner_dim() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_has_inner_dim() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_inner_dim() {
  inner_dim_ = 0;
  clear_has_inner_dim();
}
inline ::google::protobuf::int32 Inst_bmnet_scale_forward_bmkernel::inner_dim() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.inner_dim)
  return inner_dim_;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_inner_dim(::google::protobuf::int32 value) {
  set_has_inner_dim();
  inner_dim_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.inner_dim)
}

// optional bool do_relu = 11;
inline bool Inst_bmnet_scale_forward_bmkernel::has_do_relu() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_has_do_relu() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_has_do_relu() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_do_relu() {
  do_relu_ = false;
  clear_has_do_relu();
}
inline bool Inst_bmnet_scale_forward_bmkernel::do_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.do_relu)
  return do_relu_;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_do_relu(bool value) {
  set_has_do_relu();
  do_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.do_relu)
}

// optional float relu_slope = 12;
inline bool Inst_bmnet_scale_forward_bmkernel::has_relu_slope() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_has_relu_slope() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_has_relu_slope() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_scale_forward_bmkernel::clear_relu_slope() {
  relu_slope_ = 0;
  clear_has_relu_slope();
}
inline float Inst_bmnet_scale_forward_bmkernel::relu_slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.relu_slope)
  return relu_slope_;
}
inline void Inst_bmnet_scale_forward_bmkernel::set_relu_slope(float value) {
  set_has_relu_slope();
  relu_slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel.relu_slope)
}

// -------------------------------------------------------------------

// Inst_bmnet_mvn_forward_bmkernel

// optional uint64 mean_offset = 1;
inline bool Inst_bmnet_mvn_forward_bmkernel::has_mean_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_has_mean_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_has_mean_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_mean_offset() {
  mean_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_mean_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_mvn_forward_bmkernel::mean_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.mean_offset)
  return mean_offset_;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_mean_offset(::google::protobuf::uint64 value) {
  set_has_mean_offset();
  mean_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.mean_offset)
}

// optional uint64 temp_offset = 2;
inline bool Inst_bmnet_mvn_forward_bmkernel::has_temp_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_has_temp_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_has_temp_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_temp_offset() {
  temp_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_temp_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_mvn_forward_bmkernel::temp_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.temp_offset)
  return temp_offset_;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_temp_offset(::google::protobuf::uint64 value) {
  set_has_temp_offset();
  temp_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.temp_offset)
}

// optional uint64 input_offset = 3;
inline bool Inst_bmnet_mvn_forward_bmkernel::has_input_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_has_input_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_has_input_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_input_offset() {
  input_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_input_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_mvn_forward_bmkernel::input_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.input_offset)
  return input_offset_;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_input_offset(::google::protobuf::uint64 value) {
  set_has_input_offset();
  input_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.input_offset)
}

// optional uint64 variance_offset = 4;
inline bool Inst_bmnet_mvn_forward_bmkernel::has_variance_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_has_variance_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_has_variance_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_variance_offset() {
  variance_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_variance_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_mvn_forward_bmkernel::variance_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.variance_offset)
  return variance_offset_;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_variance_offset(::google::protobuf::uint64 value) {
  set_has_variance_offset();
  variance_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.variance_offset)
}

// optional uint64 output_offset = 5;
inline bool Inst_bmnet_mvn_forward_bmkernel::has_output_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_has_output_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_has_output_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_output_offset() {
  output_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_output_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_mvn_forward_bmkernel::output_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.output_offset)
  return output_offset_;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_output_offset(::google::protobuf::uint64 value) {
  set_has_output_offset();
  output_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.output_offset)
}

// optional int32 normalize_variance = 6;
inline bool Inst_bmnet_mvn_forward_bmkernel::has_normalize_variance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_has_normalize_variance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_has_normalize_variance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_normalize_variance() {
  normalize_variance_ = 0;
  clear_has_normalize_variance();
}
inline ::google::protobuf::int32 Inst_bmnet_mvn_forward_bmkernel::normalize_variance() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.normalize_variance)
  return normalize_variance_;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_normalize_variance(::google::protobuf::int32 value) {
  set_has_normalize_variance();
  normalize_variance_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.normalize_variance)
}

// optional float eps_ = 7;
inline bool Inst_bmnet_mvn_forward_bmkernel::has_eps_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_has_eps_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_has_eps_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_eps_() {
  eps__ = 0;
  clear_has_eps_();
}
inline float Inst_bmnet_mvn_forward_bmkernel::eps_() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.eps_)
  return eps__;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_eps_(float value) {
  set_has_eps_();
  eps__ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.eps_)
}

// optional int32 input_n = 8;
inline bool Inst_bmnet_mvn_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_mvn_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.input_n)
}

// optional int32 input_c = 9;
inline bool Inst_bmnet_mvn_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_mvn_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.input_c)
}

// optional int32 input_h = 10;
inline bool Inst_bmnet_mvn_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_mvn_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.input_h)
}

// optional int32 input_w = 11;
inline bool Inst_bmnet_mvn_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_mvn_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_mvn_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_mvn_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_reduction_forward_bmkernel

// optional uint64 input_offset = 1;
inline bool Inst_bmnet_reduction_forward_bmkernel::has_input_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_reduction_forward_bmkernel::set_has_input_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_reduction_forward_bmkernel::clear_has_input_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_reduction_forward_bmkernel::clear_input_offset() {
  input_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_input_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_reduction_forward_bmkernel::input_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel.input_offset)
  return input_offset_;
}
inline void Inst_bmnet_reduction_forward_bmkernel::set_input_offset(::google::protobuf::uint64 value) {
  set_has_input_offset();
  input_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel.input_offset)
}

// optional uint64 output_offset = 2;
inline bool Inst_bmnet_reduction_forward_bmkernel::has_output_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_reduction_forward_bmkernel::set_has_output_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_reduction_forward_bmkernel::clear_has_output_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_reduction_forward_bmkernel::clear_output_offset() {
  output_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_output_offset();
}
inline ::google::protobuf::uint64 Inst_bmnet_reduction_forward_bmkernel::output_offset() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel.output_offset)
  return output_offset_;
}
inline void Inst_bmnet_reduction_forward_bmkernel::set_output_offset(::google::protobuf::uint64 value) {
  set_has_output_offset();
  output_offset_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel.output_offset)
}

// optional int32 op_ = 3;
inline bool Inst_bmnet_reduction_forward_bmkernel::has_op_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_reduction_forward_bmkernel::set_has_op_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_reduction_forward_bmkernel::clear_has_op_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_reduction_forward_bmkernel::clear_op_() {
  op__ = 0;
  clear_has_op_();
}
inline ::google::protobuf::int32 Inst_bmnet_reduction_forward_bmkernel::op_() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel.op_)
  return op__;
}
inline void Inst_bmnet_reduction_forward_bmkernel::set_op_(::google::protobuf::int32 value) {
  set_has_op_();
  op__ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel.op_)
}

// optional float coeff_ = 4;
inline bool Inst_bmnet_reduction_forward_bmkernel::has_coeff_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_reduction_forward_bmkernel::set_has_coeff_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_reduction_forward_bmkernel::clear_has_coeff_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_reduction_forward_bmkernel::clear_coeff_() {
  coeff__ = 0;
  clear_has_coeff_();
}
inline float Inst_bmnet_reduction_forward_bmkernel::coeff_() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel.coeff_)
  return coeff__;
}
inline void Inst_bmnet_reduction_forward_bmkernel::set_coeff_(float value) {
  set_has_coeff_();
  coeff__ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel.coeff_)
}

// optional int32 input_c = 5;
inline bool Inst_bmnet_reduction_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_reduction_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_reduction_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_reduction_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_reduction_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_reduction_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel.input_c)
}

// optional int32 input_h = 6;
inline bool Inst_bmnet_reduction_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_reduction_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_reduction_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_reduction_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_reduction_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_reduction_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel.input_h)
}

// -------------------------------------------------------------------

// Inst_bmnet_prelu_forward_bmkernel

// optional uint64 input_gaddr = 1;
inline bool Inst_bmnet_prelu_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_prelu_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.input_gaddr)
}

// optional uint64 slope_gaddr = 2;
inline bool Inst_bmnet_prelu_forward_bmkernel::has_slope_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_has_slope_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_has_slope_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_slope_gaddr() {
  slope_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_slope_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_prelu_forward_bmkernel::slope_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.slope_gaddr)
  return slope_gaddr_;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_slope_gaddr(::google::protobuf::uint64 value) {
  set_has_slope_gaddr();
  slope_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.slope_gaddr)
}

// optional uint64 output_gaddr = 3;
inline bool Inst_bmnet_prelu_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_prelu_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.output_gaddr)
}

// optional int32 channel_shared = 4;
inline bool Inst_bmnet_prelu_forward_bmkernel::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_channel_shared() {
  channel_shared_ = 0;
  clear_has_channel_shared();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_forward_bmkernel::channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.channel_shared)
  return channel_shared_;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_channel_shared(::google::protobuf::int32 value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.channel_shared)
}

// optional float slope = 5;
inline bool Inst_bmnet_prelu_forward_bmkernel::has_slope() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_has_slope() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_has_slope() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_slope() {
  slope_ = 0;
  clear_has_slope();
}
inline float Inst_bmnet_prelu_forward_bmkernel::slope() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.slope)
  return slope_;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_slope(float value) {
  set_has_slope();
  slope_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.slope)
}

// optional int32 input_n = 6;
inline bool Inst_bmnet_prelu_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.input_n)
}

// optional int32 input_c = 7;
inline bool Inst_bmnet_prelu_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.input_c)
}

// optional int32 input_h = 8;
inline bool Inst_bmnet_prelu_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.input_h)
}

// optional int32 input_w = 9;
inline bool Inst_bmnet_prelu_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_prelu_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_prelu_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_prelu_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_split_forward_bmkernel

// optional uint64 bottom_gaddr = 1;
inline bool Inst_bmnet_split_forward_bmkernel::has_bottom_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_split_forward_bmkernel::set_has_bottom_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_split_forward_bmkernel::clear_has_bottom_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_split_forward_bmkernel::clear_bottom_gaddr() {
  bottom_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_bottom_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_split_forward_bmkernel::bottom_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.bottom_gaddr)
  return bottom_gaddr_;
}
inline void Inst_bmnet_split_forward_bmkernel::set_bottom_gaddr(::google::protobuf::uint64 value) {
  set_has_bottom_gaddr();
  bottom_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.bottom_gaddr)
}

// repeated uint64 top_gaddr = 2;
inline int Inst_bmnet_split_forward_bmkernel::top_gaddr_size() const {
  return top_gaddr_.size();
}
inline void Inst_bmnet_split_forward_bmkernel::clear_top_gaddr() {
  top_gaddr_.Clear();
}
inline ::google::protobuf::uint64 Inst_bmnet_split_forward_bmkernel::top_gaddr(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.top_gaddr)
  return top_gaddr_.Get(index);
}
inline void Inst_bmnet_split_forward_bmkernel::set_top_gaddr(int index, ::google::protobuf::uint64 value) {
  top_gaddr_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.top_gaddr)
}
inline void Inst_bmnet_split_forward_bmkernel::add_top_gaddr(::google::protobuf::uint64 value) {
  top_gaddr_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.top_gaddr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Inst_bmnet_split_forward_bmkernel::top_gaddr() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.top_gaddr)
  return top_gaddr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Inst_bmnet_split_forward_bmkernel::mutable_top_gaddr() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.top_gaddr)
  return &top_gaddr_;
}

// optional int32 top_size = 3;
inline bool Inst_bmnet_split_forward_bmkernel::has_top_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_split_forward_bmkernel::set_has_top_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_split_forward_bmkernel::clear_has_top_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_split_forward_bmkernel::clear_top_size() {
  top_size_ = 0;
  clear_has_top_size();
}
inline ::google::protobuf::int32 Inst_bmnet_split_forward_bmkernel::top_size() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.top_size)
  return top_size_;
}
inline void Inst_bmnet_split_forward_bmkernel::set_top_size(::google::protobuf::int32 value) {
  set_has_top_size();
  top_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.top_size)
}

// optional int32 input_n = 4;
inline bool Inst_bmnet_split_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_split_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_split_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_split_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_split_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_split_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.input_n)
}

// optional int32 input_c = 5;
inline bool Inst_bmnet_split_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_split_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_split_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_split_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_split_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_split_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.input_c)
}

// optional int32 input_h = 6;
inline bool Inst_bmnet_split_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_split_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_split_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_split_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_split_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_split_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.input_h)
}

// optional int32 input_w = 7;
inline bool Inst_bmnet_split_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_split_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_split_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_split_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_split_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_split_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_concat_forward_bmkernel

// repeated uint64 input_gaddrs = 1;
inline int Inst_bmnet_concat_forward_bmkernel::input_gaddrs_size() const {
  return input_gaddrs_.size();
}
inline void Inst_bmnet_concat_forward_bmkernel::clear_input_gaddrs() {
  input_gaddrs_.Clear();
}
inline ::google::protobuf::uint64 Inst_bmnet_concat_forward_bmkernel::input_gaddrs(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.input_gaddrs)
  return input_gaddrs_.Get(index);
}
inline void Inst_bmnet_concat_forward_bmkernel::set_input_gaddrs(int index, ::google::protobuf::uint64 value) {
  input_gaddrs_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.input_gaddrs)
}
inline void Inst_bmnet_concat_forward_bmkernel::add_input_gaddrs(::google::protobuf::uint64 value) {
  input_gaddrs_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.input_gaddrs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Inst_bmnet_concat_forward_bmkernel::input_gaddrs() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.input_gaddrs)
  return input_gaddrs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Inst_bmnet_concat_forward_bmkernel::mutable_input_gaddrs() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.input_gaddrs)
  return &input_gaddrs_;
}

// repeated uint64 output_gaddrs = 2;
inline int Inst_bmnet_concat_forward_bmkernel::output_gaddrs_size() const {
  return output_gaddrs_.size();
}
inline void Inst_bmnet_concat_forward_bmkernel::clear_output_gaddrs() {
  output_gaddrs_.Clear();
}
inline ::google::protobuf::uint64 Inst_bmnet_concat_forward_bmkernel::output_gaddrs(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.output_gaddrs)
  return output_gaddrs_.Get(index);
}
inline void Inst_bmnet_concat_forward_bmkernel::set_output_gaddrs(int index, ::google::protobuf::uint64 value) {
  output_gaddrs_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.output_gaddrs)
}
inline void Inst_bmnet_concat_forward_bmkernel::add_output_gaddrs(::google::protobuf::uint64 value) {
  output_gaddrs_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.output_gaddrs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Inst_bmnet_concat_forward_bmkernel::output_gaddrs() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.output_gaddrs)
  return output_gaddrs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Inst_bmnet_concat_forward_bmkernel::mutable_output_gaddrs() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.output_gaddrs)
  return &output_gaddrs_;
}

// optional int32 axis = 3;
inline bool Inst_bmnet_concat_forward_bmkernel::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_concat_forward_bmkernel::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_concat_forward_bmkernel::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_concat_forward_bmkernel::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 Inst_bmnet_concat_forward_bmkernel::axis() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.axis)
  return axis_;
}
inline void Inst_bmnet_concat_forward_bmkernel::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.axis)
}

// repeated int32 input_dims = 4;
inline int Inst_bmnet_concat_forward_bmkernel::input_dims_size() const {
  return input_dims_.size();
}
inline void Inst_bmnet_concat_forward_bmkernel::clear_input_dims() {
  input_dims_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_concat_forward_bmkernel::input_dims(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.input_dims)
  return input_dims_.Get(index);
}
inline void Inst_bmnet_concat_forward_bmkernel::set_input_dims(int index, ::google::protobuf::int32 value) {
  input_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.input_dims)
}
inline void Inst_bmnet_concat_forward_bmkernel::add_input_dims(::google::protobuf::int32 value) {
  input_dims_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.input_dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_concat_forward_bmkernel::input_dims() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.input_dims)
  return input_dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_concat_forward_bmkernel::mutable_input_dims() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.input_dims)
  return &input_dims_;
}

// optional int32 input_num = 5;
inline bool Inst_bmnet_concat_forward_bmkernel::has_input_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_concat_forward_bmkernel::set_has_input_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_concat_forward_bmkernel::clear_has_input_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_concat_forward_bmkernel::clear_input_num() {
  input_num_ = 0;
  clear_has_input_num();
}
inline ::google::protobuf::int32 Inst_bmnet_concat_forward_bmkernel::input_num() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.input_num)
  return input_num_;
}
inline void Inst_bmnet_concat_forward_bmkernel::set_input_num(::google::protobuf::int32 value) {
  set_has_input_num();
  input_num_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.input_num)
}

// optional int32 output_dim_len = 6;
inline bool Inst_bmnet_concat_forward_bmkernel::has_output_dim_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_concat_forward_bmkernel::set_has_output_dim_len() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_concat_forward_bmkernel::clear_has_output_dim_len() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_concat_forward_bmkernel::clear_output_dim_len() {
  output_dim_len_ = 0;
  clear_has_output_dim_len();
}
inline ::google::protobuf::int32 Inst_bmnet_concat_forward_bmkernel::output_dim_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.output_dim_len)
  return output_dim_len_;
}
inline void Inst_bmnet_concat_forward_bmkernel::set_output_dim_len(::google::protobuf::int32 value) {
  set_has_output_dim_len();
  output_dim_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.output_dim_len)
}

// repeated int32 output_dim = 7;
inline int Inst_bmnet_concat_forward_bmkernel::output_dim_size() const {
  return output_dim_.size();
}
inline void Inst_bmnet_concat_forward_bmkernel::clear_output_dim() {
  output_dim_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_concat_forward_bmkernel::output_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.output_dim)
  return output_dim_.Get(index);
}
inline void Inst_bmnet_concat_forward_bmkernel::set_output_dim(int index, ::google::protobuf::int32 value) {
  output_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.output_dim)
}
inline void Inst_bmnet_concat_forward_bmkernel::add_output_dim(::google::protobuf::int32 value) {
  output_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.output_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_concat_forward_bmkernel::output_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.output_dim)
  return output_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_concat_forward_bmkernel::mutable_output_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel.output_dim)
  return &output_dim_;
}

// -------------------------------------------------------------------

// Inst_bmnet_upsample_bmkernel

// optional uint64 ga_ifmap = 1;
inline bool Inst_bmnet_upsample_bmkernel::has_ga_ifmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_upsample_bmkernel::set_has_ga_ifmap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_has_ga_ifmap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_ga_ifmap() {
  ga_ifmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ifmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_upsample_bmkernel::ga_ifmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.ga_ifmap)
  return ga_ifmap_;
}
inline void Inst_bmnet_upsample_bmkernel::set_ga_ifmap(::google::protobuf::uint64 value) {
  set_has_ga_ifmap();
  ga_ifmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.ga_ifmap)
}

// optional uint64 ga_ofmap = 2;
inline bool Inst_bmnet_upsample_bmkernel::has_ga_ofmap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_upsample_bmkernel::set_has_ga_ofmap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_has_ga_ofmap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_ga_ofmap() {
  ga_ofmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ofmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_upsample_bmkernel::ga_ofmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.ga_ofmap)
  return ga_ofmap_;
}
inline void Inst_bmnet_upsample_bmkernel::set_ga_ofmap(::google::protobuf::uint64 value) {
  set_has_ga_ofmap();
  ga_ofmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.ga_ofmap)
}

// optional int32 input_n = 3;
inline bool Inst_bmnet_upsample_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_upsample_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_upsample_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_upsample_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.input_n)
}

// optional int32 input_c = 4;
inline bool Inst_bmnet_upsample_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_upsample_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_upsample_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_upsample_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.input_c)
}

// optional int32 input_h = 5;
inline bool Inst_bmnet_upsample_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_upsample_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_upsample_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_upsample_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.input_h)
}

// optional int32 input_w = 6;
inline bool Inst_bmnet_upsample_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_upsample_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_upsample_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_upsample_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.input_w)
}

// optional int32 size = 7;
inline bool Inst_bmnet_upsample_bmkernel::has_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_upsample_bmkernel::set_has_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_has_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_upsample_bmkernel::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 Inst_bmnet_upsample_bmkernel::size() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.size)
  return size_;
}
inline void Inst_bmnet_upsample_bmkernel::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_upsample_bmkernel.size)
}

// -------------------------------------------------------------------

// Inst_bmnet_reshape_forward_bmkernel

// optional uint64 input_gaddr = 1;
inline bool Inst_bmnet_reshape_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_reshape_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_reshape_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_reshape_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_reshape_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_reshape_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 2;
inline bool Inst_bmnet_reshape_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_reshape_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_reshape_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_reshape_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_reshape_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_reshape_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel.output_gaddr)
}

// optional int32 output_dim_len = 3;
inline bool Inst_bmnet_reshape_forward_bmkernel::has_output_dim_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_reshape_forward_bmkernel::set_has_output_dim_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_reshape_forward_bmkernel::clear_has_output_dim_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_reshape_forward_bmkernel::clear_output_dim_len() {
  output_dim_len_ = 0;
  clear_has_output_dim_len();
}
inline ::google::protobuf::int32 Inst_bmnet_reshape_forward_bmkernel::output_dim_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel.output_dim_len)
  return output_dim_len_;
}
inline void Inst_bmnet_reshape_forward_bmkernel::set_output_dim_len(::google::protobuf::int32 value) {
  set_has_output_dim_len();
  output_dim_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel.output_dim_len)
}

// repeated int32 output_dim = 4;
inline int Inst_bmnet_reshape_forward_bmkernel::output_dim_size() const {
  return output_dim_.size();
}
inline void Inst_bmnet_reshape_forward_bmkernel::clear_output_dim() {
  output_dim_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_reshape_forward_bmkernel::output_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel.output_dim)
  return output_dim_.Get(index);
}
inline void Inst_bmnet_reshape_forward_bmkernel::set_output_dim(int index, ::google::protobuf::int32 value) {
  output_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel.output_dim)
}
inline void Inst_bmnet_reshape_forward_bmkernel::add_output_dim(::google::protobuf::int32 value) {
  output_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel.output_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_reshape_forward_bmkernel::output_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel.output_dim)
  return output_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_reshape_forward_bmkernel::mutable_output_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel.output_dim)
  return &output_dim_;
}

// -------------------------------------------------------------------

// Inst_bmnet_permute_forward_bmkernel

// optional uint64 input_gaddr = 1;
inline bool Inst_bmnet_permute_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_permute_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 2;
inline bool Inst_bmnet_permute_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_permute_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.output_gaddr)
}

// optional int32 input_n = 3;
inline bool Inst_bmnet_permute_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.input_n)
}

// optional int32 input_c = 4;
inline bool Inst_bmnet_permute_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.input_c)
}

// optional int32 input_h = 5;
inline bool Inst_bmnet_permute_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.input_h)
}

// optional int32 input_w = 6;
inline bool Inst_bmnet_permute_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.input_w)
}

// optional int32 output_n = 7;
inline bool Inst_bmnet_permute_forward_bmkernel::has_output_n() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_output_n() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_output_n() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_output_n() {
  output_n_ = 0;
  clear_has_output_n();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_forward_bmkernel::output_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.output_n)
  return output_n_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_output_n(::google::protobuf::int32 value) {
  set_has_output_n();
  output_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.output_n)
}

// optional int32 output_c = 8;
inline bool Inst_bmnet_permute_forward_bmkernel::has_output_c() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_output_c() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_output_c() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_output_c() {
  output_c_ = 0;
  clear_has_output_c();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_forward_bmkernel::output_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.output_c)
  return output_c_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_output_c(::google::protobuf::int32 value) {
  set_has_output_c();
  output_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.output_c)
}

// optional int32 output_h = 9;
inline bool Inst_bmnet_permute_forward_bmkernel::has_output_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_output_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_output_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_output_h() {
  output_h_ = 0;
  clear_has_output_h();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_forward_bmkernel::output_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.output_h)
  return output_h_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_output_h(::google::protobuf::int32 value) {
  set_has_output_h();
  output_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.output_h)
}

// optional int32 output_w = 10;
inline bool Inst_bmnet_permute_forward_bmkernel::has_output_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_output_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_output_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_output_w() {
  output_w_ = 0;
  clear_has_output_w();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_forward_bmkernel::output_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.output_w)
  return output_w_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_output_w(::google::protobuf::int32 value) {
  set_has_output_w();
  output_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.output_w)
}

// optional int32 order_n = 11;
inline bool Inst_bmnet_permute_forward_bmkernel::has_order_n() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_order_n() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_order_n() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_order_n() {
  order_n_ = 0;
  clear_has_order_n();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_forward_bmkernel::order_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.order_n)
  return order_n_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_order_n(::google::protobuf::int32 value) {
  set_has_order_n();
  order_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.order_n)
}

// optional int32 order_c = 12;
inline bool Inst_bmnet_permute_forward_bmkernel::has_order_c() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_order_c() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_order_c() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_order_c() {
  order_c_ = 0;
  clear_has_order_c();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_forward_bmkernel::order_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.order_c)
  return order_c_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_order_c(::google::protobuf::int32 value) {
  set_has_order_c();
  order_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.order_c)
}

// optional int32 order_h = 13;
inline bool Inst_bmnet_permute_forward_bmkernel::has_order_h() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_order_h() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_order_h() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_order_h() {
  order_h_ = 0;
  clear_has_order_h();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_forward_bmkernel::order_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.order_h)
  return order_h_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_order_h(::google::protobuf::int32 value) {
  set_has_order_h();
  order_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.order_h)
}

// optional int32 order_w = 14;
inline bool Inst_bmnet_permute_forward_bmkernel::has_order_w() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_order_w() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_order_w() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_order_w() {
  order_w_ = 0;
  clear_has_order_w();
}
inline ::google::protobuf::int32 Inst_bmnet_permute_forward_bmkernel::order_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.order_w)
  return order_w_;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_order_w(::google::protobuf::int32 value) {
  set_has_order_w();
  order_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.order_w)
}

// optional bool need_permute_ = 15;
inline bool Inst_bmnet_permute_forward_bmkernel::has_need_permute_() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_has_need_permute_() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_has_need_permute_() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_permute_forward_bmkernel::clear_need_permute_() {
  need_permute__ = false;
  clear_has_need_permute_();
}
inline bool Inst_bmnet_permute_forward_bmkernel::need_permute_() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.need_permute_)
  return need_permute__;
}
inline void Inst_bmnet_permute_forward_bmkernel::set_need_permute_(bool value) {
  set_has_need_permute_();
  need_permute__ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel.need_permute_)
}

// -------------------------------------------------------------------

// Inst_bmnet_flatten_forward_bmkernel

// optional uint64 input_gaddr = 1;
inline bool Inst_bmnet_flatten_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_flatten_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_flatten_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_flatten_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_flatten_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_flatten_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 2;
inline bool Inst_bmnet_flatten_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_flatten_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_flatten_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_flatten_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_flatten_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_flatten_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel.output_gaddr)
}

// optional int32 input_dim_len = 3;
inline bool Inst_bmnet_flatten_forward_bmkernel::has_input_dim_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_flatten_forward_bmkernel::set_has_input_dim_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_flatten_forward_bmkernel::clear_has_input_dim_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_flatten_forward_bmkernel::clear_input_dim_len() {
  input_dim_len_ = 0;
  clear_has_input_dim_len();
}
inline ::google::protobuf::int32 Inst_bmnet_flatten_forward_bmkernel::input_dim_len() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel.input_dim_len)
  return input_dim_len_;
}
inline void Inst_bmnet_flatten_forward_bmkernel::set_input_dim_len(::google::protobuf::int32 value) {
  set_has_input_dim_len();
  input_dim_len_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel.input_dim_len)
}

// repeated int32 input_dim = 4;
inline int Inst_bmnet_flatten_forward_bmkernel::input_dim_size() const {
  return input_dim_.size();
}
inline void Inst_bmnet_flatten_forward_bmkernel::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 Inst_bmnet_flatten_forward_bmkernel::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel.input_dim)
  return input_dim_.Get(index);
}
inline void Inst_bmnet_flatten_forward_bmkernel::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel.input_dim)
}
inline void Inst_bmnet_flatten_forward_bmkernel::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Inst_bmnet_flatten_forward_bmkernel::input_dim() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Inst_bmnet_flatten_forward_bmkernel::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel.input_dim)
  return &input_dim_;
}

// -------------------------------------------------------------------

// Inst_bmnet_normalize_forward_bmkernel

// optional uint64 input_gaddr = 1;
inline bool Inst_bmnet_normalize_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_normalize_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 2;
inline bool Inst_bmnet_normalize_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_normalize_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.output_gaddr)
}

// optional bool has_scale_blob = 3;
inline bool Inst_bmnet_normalize_forward_bmkernel::has_has_scale_blob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_has_has_scale_blob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_has_has_scale_blob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_has_scale_blob() {
  has_scale_blob_ = false;
  clear_has_has_scale_blob();
}
inline bool Inst_bmnet_normalize_forward_bmkernel::has_scale_blob() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.has_scale_blob)
  return has_scale_blob_;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_has_scale_blob(bool value) {
  set_has_has_scale_blob();
  has_scale_blob_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.has_scale_blob)
}

// optional uint64 scale_gaddr = 4;
inline bool Inst_bmnet_normalize_forward_bmkernel::has_scale_gaddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_has_scale_gaddr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_has_scale_gaddr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_scale_gaddr() {
  scale_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_scale_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_normalize_forward_bmkernel::scale_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.scale_gaddr)
  return scale_gaddr_;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_scale_gaddr(::google::protobuf::uint64 value) {
  set_has_scale_gaddr();
  scale_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.scale_gaddr)
}

// optional bool across_spatial = 5;
inline bool Inst_bmnet_normalize_forward_bmkernel::has_across_spatial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_has_across_spatial() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_has_across_spatial() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_across_spatial() {
  across_spatial_ = false;
  clear_has_across_spatial();
}
inline bool Inst_bmnet_normalize_forward_bmkernel::across_spatial() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.across_spatial)
  return across_spatial_;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_across_spatial(bool value) {
  set_has_across_spatial();
  across_spatial_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.across_spatial)
}

// optional bool channel_shared = 6;
inline bool Inst_bmnet_normalize_forward_bmkernel::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool Inst_bmnet_normalize_forward_bmkernel::channel_shared() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.channel_shared)
  return channel_shared_;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.channel_shared)
}

// optional float eps = 7;
inline bool Inst_bmnet_normalize_forward_bmkernel::has_eps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_has_eps() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_has_eps() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_eps() {
  eps_ = 0;
  clear_has_eps();
}
inline float Inst_bmnet_normalize_forward_bmkernel::eps() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.eps)
  return eps_;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.eps)
}

// repeated float scales = 8;
inline int Inst_bmnet_normalize_forward_bmkernel::scales_size() const {
  return scales_.size();
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_scales() {
  scales_.Clear();
}
inline float Inst_bmnet_normalize_forward_bmkernel::scales(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.scales)
  return scales_.Get(index);
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_scales(int index, float value) {
  scales_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.scales)
}
inline void Inst_bmnet_normalize_forward_bmkernel::add_scales(float value) {
  scales_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.scales)
}
inline const ::google::protobuf::RepeatedField< float >&
Inst_bmnet_normalize_forward_bmkernel::scales() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.scales)
  return scales_;
}
inline ::google::protobuf::RepeatedField< float >*
Inst_bmnet_normalize_forward_bmkernel::mutable_scales() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.scales)
  return &scales_;
}

// optional int32 input_n = 9;
inline bool Inst_bmnet_normalize_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_normalize_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.input_n)
}

// optional int32 input_c = 10;
inline bool Inst_bmnet_normalize_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_normalize_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.input_c)
}

// optional int32 input_h = 11;
inline bool Inst_bmnet_normalize_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_normalize_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.input_h)
}

// optional int32 input_w = 12;
inline bool Inst_bmnet_normalize_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_normalize_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_normalize_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_normalize_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_deconv_forward_bmkernel

// optional uint64 ga_ifmap = 1;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_ga_ifmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_ga_ifmap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_ga_ifmap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_ga_ifmap() {
  ga_ifmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ifmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_deconv_forward_bmkernel::ga_ifmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.ga_ifmap)
  return ga_ifmap_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_ga_ifmap(::google::protobuf::uint64 value) {
  set_has_ga_ifmap();
  ga_ifmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.ga_ifmap)
}

// optional uint64 ga_ofmap = 2;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_ga_ofmap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_ga_ofmap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_ga_ofmap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_ga_ofmap() {
  ga_ofmap_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_ofmap();
}
inline ::google::protobuf::uint64 Inst_bmnet_deconv_forward_bmkernel::ga_ofmap() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.ga_ofmap)
  return ga_ofmap_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_ga_ofmap(::google::protobuf::uint64 value) {
  set_has_ga_ofmap();
  ga_ofmap_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.ga_ofmap)
}

// optional uint64 ga_weight = 3;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_ga_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_ga_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_ga_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_ga_weight() {
  ga_weight_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_weight();
}
inline ::google::protobuf::uint64 Inst_bmnet_deconv_forward_bmkernel::ga_weight() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.ga_weight)
  return ga_weight_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_ga_weight(::google::protobuf::uint64 value) {
  set_has_ga_weight();
  ga_weight_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.ga_weight)
}

// optional uint64 ga_bias = 4;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_ga_bias() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_ga_bias() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_ga_bias() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_ga_bias() {
  ga_bias_ = GOOGLE_ULONGLONG(0);
  clear_has_ga_bias();
}
inline ::google::protobuf::uint64 Inst_bmnet_deconv_forward_bmkernel::ga_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.ga_bias)
  return ga_bias_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_ga_bias(::google::protobuf::uint64 value) {
  set_has_ga_bias();
  ga_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.ga_bias)
}

// optional int32 input_n = 5;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.input_n)
}

// optional int32 input_c = 6;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.input_c)
}

// optional int32 input_h = 7;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.input_h)
}

// optional int32 input_w = 8;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.input_w)
}

// optional int32 groups = 9;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_groups() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_groups() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_groups() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_groups() {
  groups_ = 0;
  clear_has_groups();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::groups() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.groups)
  return groups_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_groups(::google::protobuf::int32 value) {
  set_has_groups();
  groups_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.groups)
}

// optional int32 output_c = 10;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_output_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_output_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_output_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_output_c() {
  output_c_ = 0;
  clear_has_output_c();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::output_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.output_c)
  return output_c_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_output_c(::google::protobuf::int32 value) {
  set_has_output_c();
  output_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.output_c)
}

// optional int32 output_h = 11;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_output_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_output_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_output_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_output_h() {
  output_h_ = 0;
  clear_has_output_h();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::output_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.output_h)
  return output_h_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_output_h(::google::protobuf::int32 value) {
  set_has_output_h();
  output_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.output_h)
}

// optional int32 output_w = 12;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_output_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_output_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_output_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_output_w() {
  output_w_ = 0;
  clear_has_output_w();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::output_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.output_w)
  return output_w_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_output_w(::google::protobuf::int32 value) {
  set_has_output_w();
  output_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.output_w)
}

// optional int32 kh = 13;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_kh() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_kh() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_kh() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_kh() {
  kh_ = 0;
  clear_has_kh();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::kh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.kh)
  return kh_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_kh(::google::protobuf::int32 value) {
  set_has_kh();
  kh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.kh)
}

// optional int32 kw = 14;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_kw() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_kw() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_kw() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_kw() {
  kw_ = 0;
  clear_has_kw();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::kw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.kw)
  return kw_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_kw(::google::protobuf::int32 value) {
  set_has_kw();
  kw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.kw)
}

// optional int32 dh = 15;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_dh() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_dh() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_dh() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_dh() {
  dh_ = 0;
  clear_has_dh();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::dh() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.dh)
  return dh_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_dh(::google::protobuf::int32 value) {
  set_has_dh();
  dh_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.dh)
}

// optional int32 dw = 16;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_dw() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_dw() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_dw() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_dw() {
  dw_ = 0;
  clear_has_dw();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::dw() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.dw)
  return dw_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_dw(::google::protobuf::int32 value) {
  set_has_dw();
  dw_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.dw)
}

// optional int32 pad_h = 17;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_pad_h() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_pad_h() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_pad_h() {
  pad_h_ = 0;
  clear_has_pad_h();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::pad_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.pad_h)
  return pad_h_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_pad_h(::google::protobuf::int32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.pad_h)
}

// optional int32 pad_w = 18;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_pad_w() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_pad_w() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_pad_w() {
  pad_w_ = 0;
  clear_has_pad_w();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::pad_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.pad_w)
  return pad_w_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_pad_w(::google::protobuf::int32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.pad_w)
}

// optional int32 stride_h = 19;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_stride_h() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_stride_h() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_stride_h() {
  stride_h_ = 0;
  clear_has_stride_h();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::stride_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.stride_h)
  return stride_h_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_stride_h(::google::protobuf::int32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.stride_h)
}

// optional int32 stride_w = 20;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_stride_w() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_stride_w() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_stride_w() {
  stride_w_ = 0;
  clear_has_stride_w();
}
inline ::google::protobuf::int32 Inst_bmnet_deconv_forward_bmkernel::stride_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.stride_w)
  return stride_w_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_stride_w(::google::protobuf::int32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.stride_w)
}

// optional bool using_bias = 21;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_using_bias() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_using_bias() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_using_bias() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_using_bias() {
  using_bias_ = false;
  clear_has_using_bias();
}
inline bool Inst_bmnet_deconv_forward_bmkernel::using_bias() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.using_bias)
  return using_bias_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_using_bias(bool value) {
  set_has_using_bias();
  using_bias_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.using_bias)
}

// optional bool result_add = 22;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_result_add() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_result_add() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_result_add() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_result_add() {
  result_add_ = false;
  clear_has_result_add();
}
inline bool Inst_bmnet_deconv_forward_bmkernel::result_add() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.result_add)
  return result_add_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_result_add(bool value) {
  set_has_result_add();
  result_add_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.result_add)
}

// optional bool do_relu = 23;
inline bool Inst_bmnet_deconv_forward_bmkernel::has_do_relu() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_has_do_relu() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_has_do_relu() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Inst_bmnet_deconv_forward_bmkernel::clear_do_relu() {
  do_relu_ = false;
  clear_has_do_relu();
}
inline bool Inst_bmnet_deconv_forward_bmkernel::do_relu() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.do_relu)
  return do_relu_;
}
inline void Inst_bmnet_deconv_forward_bmkernel::set_do_relu(bool value) {
  set_has_do_relu();
  do_relu_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel.do_relu)
}

// -------------------------------------------------------------------

// Inst_bmnet_stack_forward_bmkernel

// repeated uint64 input_gaddrs = 1;
inline int Inst_bmnet_stack_forward_bmkernel::input_gaddrs_size() const {
  return input_gaddrs_.size();
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_input_gaddrs() {
  input_gaddrs_.Clear();
}
inline ::google::protobuf::uint64 Inst_bmnet_stack_forward_bmkernel::input_gaddrs(int index) const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_gaddrs)
  return input_gaddrs_.Get(index);
}
inline void Inst_bmnet_stack_forward_bmkernel::set_input_gaddrs(int index, ::google::protobuf::uint64 value) {
  input_gaddrs_.Set(index, value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_gaddrs)
}
inline void Inst_bmnet_stack_forward_bmkernel::add_input_gaddrs(::google::protobuf::uint64 value) {
  input_gaddrs_.Add(value);
  // @@protoc_insertion_point(field_add:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_gaddrs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Inst_bmnet_stack_forward_bmkernel::input_gaddrs() const {
  // @@protoc_insertion_point(field_list:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_gaddrs)
  return input_gaddrs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Inst_bmnet_stack_forward_bmkernel::mutable_input_gaddrs() {
  // @@protoc_insertion_point(field_mutable_list:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_gaddrs)
  return &input_gaddrs_;
}

// optional uint64 output_gaddr = 2;
inline bool Inst_bmnet_stack_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_stack_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.output_gaddr)
}

// optional int32 input_size = 3;
inline bool Inst_bmnet_stack_forward_bmkernel::has_input_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_has_input_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_has_input_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_input_size() {
  input_size_ = 0;
  clear_has_input_size();
}
inline ::google::protobuf::int32 Inst_bmnet_stack_forward_bmkernel::input_size() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_size)
  return input_size_;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_input_size(::google::protobuf::int32 value) {
  set_has_input_size();
  input_size_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_size)
}

// optional int32 input_n = 4;
inline bool Inst_bmnet_stack_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_stack_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_n)
}

// optional int32 input_c = 5;
inline bool Inst_bmnet_stack_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_stack_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_c)
}

// optional int32 input_h = 6;
inline bool Inst_bmnet_stack_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_stack_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_h)
}

// optional int32 input_w = 7;
inline bool Inst_bmnet_stack_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_stack_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.input_w)
}

// optional int32 axis = 8;
inline bool Inst_bmnet_stack_forward_bmkernel::has_axis() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_has_axis() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_has_axis() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_stack_forward_bmkernel::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 Inst_bmnet_stack_forward_bmkernel::axis() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.axis)
  return axis_;
}
inline void Inst_bmnet_stack_forward_bmkernel::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel.axis)
}

// -------------------------------------------------------------------

// Inst_bmnet_arithmetic_forward_bmkernel

// optional uint64 input_gaddr_0 = 1;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_input_gaddr_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_input_gaddr_0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_input_gaddr_0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_input_gaddr_0() {
  input_gaddr_0_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr_0();
}
inline ::google::protobuf::uint64 Inst_bmnet_arithmetic_forward_bmkernel::input_gaddr_0() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.input_gaddr_0)
  return input_gaddr_0_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_input_gaddr_0(::google::protobuf::uint64 value) {
  set_has_input_gaddr_0();
  input_gaddr_0_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.input_gaddr_0)
}

// optional uint64 input_gaddr_1 = 2;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_input_gaddr_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_input_gaddr_1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_input_gaddr_1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_input_gaddr_1() {
  input_gaddr_1_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr_1();
}
inline ::google::protobuf::uint64 Inst_bmnet_arithmetic_forward_bmkernel::input_gaddr_1() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.input_gaddr_1)
  return input_gaddr_1_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_input_gaddr_1(::google::protobuf::uint64 value) {
  set_has_input_gaddr_1();
  input_gaddr_1_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.input_gaddr_1)
}

// optional uint64 output_gaddr = 3;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_arithmetic_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.output_gaddr)
}

// optional int32 op = 4;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_op() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_op() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_op() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_forward_bmkernel::op() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.op)
  return op_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.op)
}

// optional int32 input_n = 5;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.input_n)
}

// optional int32 input_c = 6;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.input_c)
}

// optional int32 input_h = 7;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.input_h)
}

// optional int32 input_w = 8;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.input_w)
}

// optional int32 b_n = 9;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_b_n() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_b_n() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_b_n() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_b_n() {
  b_n_ = 0;
  clear_has_b_n();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_forward_bmkernel::b_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.b_n)
  return b_n_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_b_n(::google::protobuf::int32 value) {
  set_has_b_n();
  b_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.b_n)
}

// optional int32 b_c = 10;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_b_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_b_c() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_b_c() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_b_c() {
  b_c_ = 0;
  clear_has_b_c();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_forward_bmkernel::b_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.b_c)
  return b_c_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_b_c(::google::protobuf::int32 value) {
  set_has_b_c();
  b_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.b_c)
}

// optional int32 b_h = 11;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_b_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_b_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_b_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_b_h() {
  b_h_ = 0;
  clear_has_b_h();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_forward_bmkernel::b_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.b_h)
  return b_h_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_b_h(::google::protobuf::int32 value) {
  set_has_b_h();
  b_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.b_h)
}

// optional int32 b_w = 12;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_b_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_b_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_b_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_b_w() {
  b_w_ = 0;
  clear_has_b_w();
}
inline ::google::protobuf::int32 Inst_bmnet_arithmetic_forward_bmkernel::b_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.b_w)
  return b_w_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_b_w(::google::protobuf::int32 value) {
  set_has_b_w();
  b_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.b_w)
}

// optional bool is_b_const = 13;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_is_b_const() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_is_b_const() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_is_b_const() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_is_b_const() {
  is_b_const_ = false;
  clear_has_is_b_const();
}
inline bool Inst_bmnet_arithmetic_forward_bmkernel::is_b_const() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.is_b_const)
  return is_b_const_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_is_b_const(bool value) {
  set_has_is_b_const();
  is_b_const_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.is_b_const)
}

// optional float b_value = 14;
inline bool Inst_bmnet_arithmetic_forward_bmkernel::has_b_value() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_has_b_value() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_has_b_value() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::clear_b_value() {
  b_value_ = 0;
  clear_has_b_value();
}
inline float Inst_bmnet_arithmetic_forward_bmkernel::b_value() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.b_value)
  return b_value_;
}
inline void Inst_bmnet_arithmetic_forward_bmkernel::set_b_value(float value) {
  set_has_b_value();
  b_value_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel.b_value)
}

// -------------------------------------------------------------------

// Inst_bmnet_resizebilinear_forward_bmkernel

// optional uint64 input_gaddr = 1;
inline bool Inst_bmnet_resizebilinear_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_resizebilinear_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 2;
inline bool Inst_bmnet_resizebilinear_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_resizebilinear_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.output_gaddr)
}

// optional uint64 weight_gaddr = 3;
inline bool Inst_bmnet_resizebilinear_forward_bmkernel::has_weight_gaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_has_weight_gaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_has_weight_gaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_weight_gaddr() {
  weight_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_weight_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_resizebilinear_forward_bmkernel::weight_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.weight_gaddr)
  return weight_gaddr_;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_weight_gaddr(::google::protobuf::uint64 value) {
  set_has_weight_gaddr();
  weight_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.weight_gaddr)
}

// optional int32 input_n = 4;
inline bool Inst_bmnet_resizebilinear_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_resizebilinear_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.input_n)
}

// optional int32 input_c = 5;
inline bool Inst_bmnet_resizebilinear_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_resizebilinear_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.input_c)
}

// optional int32 input_h = 6;
inline bool Inst_bmnet_resizebilinear_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_resizebilinear_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.input_h)
}

// optional int32 input_w = 7;
inline bool Inst_bmnet_resizebilinear_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_resizebilinear_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.input_w)
}

// optional int32 resize_h = 8;
inline bool Inst_bmnet_resizebilinear_forward_bmkernel::has_resize_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_has_resize_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_has_resize_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_resize_h() {
  resize_h_ = 0;
  clear_has_resize_h();
}
inline ::google::protobuf::int32 Inst_bmnet_resizebilinear_forward_bmkernel::resize_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.resize_h)
  return resize_h_;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_resize_h(::google::protobuf::int32 value) {
  set_has_resize_h();
  resize_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.resize_h)
}

// optional int32 resize_w = 9;
inline bool Inst_bmnet_resizebilinear_forward_bmkernel::has_resize_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_has_resize_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_has_resize_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::clear_resize_w() {
  resize_w_ = 0;
  clear_has_resize_w();
}
inline ::google::protobuf::int32 Inst_bmnet_resizebilinear_forward_bmkernel::resize_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.resize_w)
  return resize_w_;
}
inline void Inst_bmnet_resizebilinear_forward_bmkernel::set_resize_w(::google::protobuf::int32 value) {
  set_has_resize_w();
  resize_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel.resize_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_priorbox_forward_bmkernel

// optional uint64 weight_gaddr = 1;
inline bool Inst_bmnet_priorbox_forward_bmkernel::has_weight_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::set_has_weight_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::clear_has_weight_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::clear_weight_gaddr() {
  weight_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_weight_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_priorbox_forward_bmkernel::weight_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel.weight_gaddr)
  return weight_gaddr_;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::set_weight_gaddr(::google::protobuf::uint64 value) {
  set_has_weight_gaddr();
  weight_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel.weight_gaddr)
}

// optional uint64 output_gaddr = 2;
inline bool Inst_bmnet_priorbox_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_priorbox_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel.output_gaddr)
}

// optional int32 input_n = 3;
inline bool Inst_bmnet_priorbox_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_priorbox_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel.input_n)
}

// optional int32 input_c = 4;
inline bool Inst_bmnet_priorbox_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_priorbox_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel.input_c)
}

// optional int32 input_h = 5;
inline bool Inst_bmnet_priorbox_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_priorbox_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel.input_h)
}

// optional int32 input_w = 6;
inline bool Inst_bmnet_priorbox_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_priorbox_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_priorbox_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst_bmnet_reverse_forward_bmkernel

// optional uint64 input_gaddr = 1;
inline bool Inst_bmnet_reverse_forward_bmkernel::has_input_gaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_has_input_gaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_has_input_gaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_input_gaddr() {
  input_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_input_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_reverse_forward_bmkernel::input_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.input_gaddr)
  return input_gaddr_;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_input_gaddr(::google::protobuf::uint64 value) {
  set_has_input_gaddr();
  input_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.input_gaddr)
}

// optional uint64 output_gaddr = 2;
inline bool Inst_bmnet_reverse_forward_bmkernel::has_output_gaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_has_output_gaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_has_output_gaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_output_gaddr() {
  output_gaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_output_gaddr();
}
inline ::google::protobuf::uint64 Inst_bmnet_reverse_forward_bmkernel::output_gaddr() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.output_gaddr)
  return output_gaddr_;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_output_gaddr(::google::protobuf::uint64 value) {
  set_has_output_gaddr();
  output_gaddr_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.output_gaddr)
}

// optional int32 axis = 3;
inline bool Inst_bmnet_reverse_forward_bmkernel::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 Inst_bmnet_reverse_forward_bmkernel::axis() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.axis)
  return axis_;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.axis)
}

// optional int32 input_n = 4;
inline bool Inst_bmnet_reverse_forward_bmkernel::has_input_n() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_has_input_n() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_has_input_n() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_input_n() {
  input_n_ = 0;
  clear_has_input_n();
}
inline ::google::protobuf::int32 Inst_bmnet_reverse_forward_bmkernel::input_n() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.input_n)
  return input_n_;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_input_n(::google::protobuf::int32 value) {
  set_has_input_n();
  input_n_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.input_n)
}

// optional int32 input_c = 5;
inline bool Inst_bmnet_reverse_forward_bmkernel::has_input_c() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_has_input_c() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_has_input_c() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_input_c() {
  input_c_ = 0;
  clear_has_input_c();
}
inline ::google::protobuf::int32 Inst_bmnet_reverse_forward_bmkernel::input_c() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.input_c)
  return input_c_;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_input_c(::google::protobuf::int32 value) {
  set_has_input_c();
  input_c_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.input_c)
}

// optional int32 input_h = 6;
inline bool Inst_bmnet_reverse_forward_bmkernel::has_input_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_has_input_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_has_input_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_input_h() {
  input_h_ = 0;
  clear_has_input_h();
}
inline ::google::protobuf::int32 Inst_bmnet_reverse_forward_bmkernel::input_h() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.input_h)
  return input_h_;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_input_h(::google::protobuf::int32 value) {
  set_has_input_h();
  input_h_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.input_h)
}

// optional int32 input_w = 7;
inline bool Inst_bmnet_reverse_forward_bmkernel::has_input_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_has_input_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_has_input_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst_bmnet_reverse_forward_bmkernel::clear_input_w() {
  input_w_ = 0;
  clear_has_input_w();
}
inline ::google::protobuf::int32 Inst_bmnet_reverse_forward_bmkernel::input_w() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.input_w)
  return input_w_;
}
inline void Inst_bmnet_reverse_forward_bmkernel::set_input_w(::google::protobuf::int32 value) {
  set_has_input_w();
  input_w_ = value;
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel.input_w)
}

// -------------------------------------------------------------------

// Inst

// optional string name = 1;
inline bool Inst::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inst::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inst::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inst::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Inst::name() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.name)
  return *name_;
}
inline void Inst::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.name)
}
inline void Inst::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.bm1680.Inst.name)
}
inline void Inst::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.bm1680.Inst.name)
}
inline ::std::string* Inst::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.name)
  return name_;
}
inline ::std::string* Inst::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Inst::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.name)
}

// optional string type = 2;
inline bool Inst::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inst::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inst::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inst::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Inst::type() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.type)
  return *type_;
}
inline void Inst::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:bmnet.bm1680.Inst.type)
}
inline void Inst::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:bmnet.bm1680.Inst.type)
}
inline void Inst::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bmnet.bm1680.Inst.type)
}
inline ::std::string* Inst::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.type)
  return type_;
}
inline ::std::string* Inst::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Inst::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.type)
}

// optional .bmnet.bm1680.Inst.bmnet_pooling_forward_bmkernel pooling = 4;
inline bool Inst::has_pooling() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inst::set_has_pooling() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inst::clear_has_pooling() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inst::clear_pooling() {
  if (pooling_ != NULL) pooling_->::bmnet::bm1680::Inst_bmnet_pooling_forward_bmkernel::Clear();
  clear_has_pooling();
}
inline const ::bmnet::bm1680::Inst_bmnet_pooling_forward_bmkernel& Inst::pooling() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.pooling)
  return pooling_ != NULL ? *pooling_ : *default_instance_->pooling_;
}
inline ::bmnet::bm1680::Inst_bmnet_pooling_forward_bmkernel* Inst::mutable_pooling() {
  set_has_pooling();
  if (pooling_ == NULL) pooling_ = new ::bmnet::bm1680::Inst_bmnet_pooling_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.pooling)
  return pooling_;
}
inline ::bmnet::bm1680::Inst_bmnet_pooling_forward_bmkernel* Inst::release_pooling() {
  clear_has_pooling();
  ::bmnet::bm1680::Inst_bmnet_pooling_forward_bmkernel* temp = pooling_;
  pooling_ = NULL;
  return temp;
}
inline void Inst::set_allocated_pooling(::bmnet::bm1680::Inst_bmnet_pooling_forward_bmkernel* pooling) {
  delete pooling_;
  pooling_ = pooling;
  if (pooling) {
    set_has_pooling();
  } else {
    clear_has_pooling();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.pooling)
}

// optional .bmnet.bm1680.Inst.bmnet_conv_forward_bmkernel conv = 5;
inline bool Inst::has_conv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inst::set_has_conv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inst::clear_has_conv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inst::clear_conv() {
  if (conv_ != NULL) conv_->::bmnet::bm1680::Inst_bmnet_conv_forward_bmkernel::Clear();
  clear_has_conv();
}
inline const ::bmnet::bm1680::Inst_bmnet_conv_forward_bmkernel& Inst::conv() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.conv)
  return conv_ != NULL ? *conv_ : *default_instance_->conv_;
}
inline ::bmnet::bm1680::Inst_bmnet_conv_forward_bmkernel* Inst::mutable_conv() {
  set_has_conv();
  if (conv_ == NULL) conv_ = new ::bmnet::bm1680::Inst_bmnet_conv_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.conv)
  return conv_;
}
inline ::bmnet::bm1680::Inst_bmnet_conv_forward_bmkernel* Inst::release_conv() {
  clear_has_conv();
  ::bmnet::bm1680::Inst_bmnet_conv_forward_bmkernel* temp = conv_;
  conv_ = NULL;
  return temp;
}
inline void Inst::set_allocated_conv(::bmnet::bm1680::Inst_bmnet_conv_forward_bmkernel* conv) {
  delete conv_;
  conv_ = conv;
  if (conv) {
    set_has_conv();
  } else {
    clear_has_conv();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.conv)
}

// optional .bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel bmnet_threshold_forward_bmkernel_short = 6;
inline bool Inst::has_bmnet_threshold_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inst::set_has_bmnet_threshold_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inst::clear_has_bmnet_threshold_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inst::clear_bmnet_threshold_forward_bmkernel_short() {
  if (bmnet_threshold_forward_bmkernel_short_ != NULL) bmnet_threshold_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_threshold_forward_bmkernel::Clear();
  clear_has_bmnet_threshold_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_threshold_forward_bmkernel& Inst::bmnet_threshold_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel_short)
  return bmnet_threshold_forward_bmkernel_short_ != NULL ? *bmnet_threshold_forward_bmkernel_short_ : *default_instance_->bmnet_threshold_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_threshold_forward_bmkernel* Inst::mutable_bmnet_threshold_forward_bmkernel_short() {
  set_has_bmnet_threshold_forward_bmkernel_short();
  if (bmnet_threshold_forward_bmkernel_short_ == NULL) bmnet_threshold_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_threshold_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel_short)
  return bmnet_threshold_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_threshold_forward_bmkernel* Inst::release_bmnet_threshold_forward_bmkernel_short() {
  clear_has_bmnet_threshold_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_threshold_forward_bmkernel* temp = bmnet_threshold_forward_bmkernel_short_;
  bmnet_threshold_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_threshold_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_threshold_forward_bmkernel* bmnet_threshold_forward_bmkernel_short) {
  delete bmnet_threshold_forward_bmkernel_short_;
  bmnet_threshold_forward_bmkernel_short_ = bmnet_threshold_forward_bmkernel_short;
  if (bmnet_threshold_forward_bmkernel_short) {
    set_has_bmnet_threshold_forward_bmkernel_short();
  } else {
    clear_has_bmnet_threshold_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_threshold_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel bmnet_exp_forward_bmkernel_short = 7;
inline bool Inst::has_bmnet_exp_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inst::set_has_bmnet_exp_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inst::clear_has_bmnet_exp_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inst::clear_bmnet_exp_forward_bmkernel_short() {
  if (bmnet_exp_forward_bmkernel_short_ != NULL) bmnet_exp_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_exp_forward_bmkernel::Clear();
  clear_has_bmnet_exp_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_exp_forward_bmkernel& Inst::bmnet_exp_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel_short)
  return bmnet_exp_forward_bmkernel_short_ != NULL ? *bmnet_exp_forward_bmkernel_short_ : *default_instance_->bmnet_exp_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_exp_forward_bmkernel* Inst::mutable_bmnet_exp_forward_bmkernel_short() {
  set_has_bmnet_exp_forward_bmkernel_short();
  if (bmnet_exp_forward_bmkernel_short_ == NULL) bmnet_exp_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_exp_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel_short)
  return bmnet_exp_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_exp_forward_bmkernel* Inst::release_bmnet_exp_forward_bmkernel_short() {
  clear_has_bmnet_exp_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_exp_forward_bmkernel* temp = bmnet_exp_forward_bmkernel_short_;
  bmnet_exp_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_exp_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_exp_forward_bmkernel* bmnet_exp_forward_bmkernel_short) {
  delete bmnet_exp_forward_bmkernel_short_;
  bmnet_exp_forward_bmkernel_short_ = bmnet_exp_forward_bmkernel_short;
  if (bmnet_exp_forward_bmkernel_short) {
    set_has_bmnet_exp_forward_bmkernel_short();
  } else {
    clear_has_bmnet_exp_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_exp_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_power_forward_bmkernel bmnet_power_forward_bmkernel_short = 8;
inline bool Inst::has_bmnet_power_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inst::set_has_bmnet_power_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inst::clear_has_bmnet_power_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inst::clear_bmnet_power_forward_bmkernel_short() {
  if (bmnet_power_forward_bmkernel_short_ != NULL) bmnet_power_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_power_forward_bmkernel::Clear();
  clear_has_bmnet_power_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_power_forward_bmkernel& Inst::bmnet_power_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel_short)
  return bmnet_power_forward_bmkernel_short_ != NULL ? *bmnet_power_forward_bmkernel_short_ : *default_instance_->bmnet_power_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_power_forward_bmkernel* Inst::mutable_bmnet_power_forward_bmkernel_short() {
  set_has_bmnet_power_forward_bmkernel_short();
  if (bmnet_power_forward_bmkernel_short_ == NULL) bmnet_power_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_power_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel_short)
  return bmnet_power_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_power_forward_bmkernel* Inst::release_bmnet_power_forward_bmkernel_short() {
  clear_has_bmnet_power_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_power_forward_bmkernel* temp = bmnet_power_forward_bmkernel_short_;
  bmnet_power_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_power_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_power_forward_bmkernel* bmnet_power_forward_bmkernel_short) {
  delete bmnet_power_forward_bmkernel_short_;
  bmnet_power_forward_bmkernel_short_ = bmnet_power_forward_bmkernel_short;
  if (bmnet_power_forward_bmkernel_short) {
    set_has_bmnet_power_forward_bmkernel_short();
  } else {
    clear_has_bmnet_power_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_power_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel bmnet_absval_forward_bmkernel_short = 9;
inline bool Inst::has_bmnet_absval_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inst::set_has_bmnet_absval_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inst::clear_has_bmnet_absval_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inst::clear_bmnet_absval_forward_bmkernel_short() {
  if (bmnet_absval_forward_bmkernel_short_ != NULL) bmnet_absval_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_absval_forward_bmkernel::Clear();
  clear_has_bmnet_absval_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_absval_forward_bmkernel& Inst::bmnet_absval_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel_short)
  return bmnet_absval_forward_bmkernel_short_ != NULL ? *bmnet_absval_forward_bmkernel_short_ : *default_instance_->bmnet_absval_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_absval_forward_bmkernel* Inst::mutable_bmnet_absval_forward_bmkernel_short() {
  set_has_bmnet_absval_forward_bmkernel_short();
  if (bmnet_absval_forward_bmkernel_short_ == NULL) bmnet_absval_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_absval_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel_short)
  return bmnet_absval_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_absval_forward_bmkernel* Inst::release_bmnet_absval_forward_bmkernel_short() {
  clear_has_bmnet_absval_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_absval_forward_bmkernel* temp = bmnet_absval_forward_bmkernel_short_;
  bmnet_absval_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_absval_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_absval_forward_bmkernel* bmnet_absval_forward_bmkernel_short) {
  delete bmnet_absval_forward_bmkernel_short_;
  bmnet_absval_forward_bmkernel_short_ = bmnet_absval_forward_bmkernel_short;
  if (bmnet_absval_forward_bmkernel_short) {
    set_has_bmnet_absval_forward_bmkernel_short();
  } else {
    clear_has_bmnet_absval_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_absval_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel bmnet_sigmoid_forward_bmkernel_short = 10;
inline bool Inst::has_bmnet_sigmoid_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Inst::set_has_bmnet_sigmoid_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Inst::clear_has_bmnet_sigmoid_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Inst::clear_bmnet_sigmoid_forward_bmkernel_short() {
  if (bmnet_sigmoid_forward_bmkernel_short_ != NULL) bmnet_sigmoid_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_sigmoid_forward_bmkernel::Clear();
  clear_has_bmnet_sigmoid_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_sigmoid_forward_bmkernel& Inst::bmnet_sigmoid_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel_short)
  return bmnet_sigmoid_forward_bmkernel_short_ != NULL ? *bmnet_sigmoid_forward_bmkernel_short_ : *default_instance_->bmnet_sigmoid_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_sigmoid_forward_bmkernel* Inst::mutable_bmnet_sigmoid_forward_bmkernel_short() {
  set_has_bmnet_sigmoid_forward_bmkernel_short();
  if (bmnet_sigmoid_forward_bmkernel_short_ == NULL) bmnet_sigmoid_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_sigmoid_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel_short)
  return bmnet_sigmoid_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_sigmoid_forward_bmkernel* Inst::release_bmnet_sigmoid_forward_bmkernel_short() {
  clear_has_bmnet_sigmoid_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_sigmoid_forward_bmkernel* temp = bmnet_sigmoid_forward_bmkernel_short_;
  bmnet_sigmoid_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_sigmoid_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_sigmoid_forward_bmkernel* bmnet_sigmoid_forward_bmkernel_short) {
  delete bmnet_sigmoid_forward_bmkernel_short_;
  bmnet_sigmoid_forward_bmkernel_short_ = bmnet_sigmoid_forward_bmkernel_short;
  if (bmnet_sigmoid_forward_bmkernel_short) {
    set_has_bmnet_sigmoid_forward_bmkernel_short();
  } else {
    clear_has_bmnet_sigmoid_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_sigmoid_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_log_forward_bmkernel bmnet_log_forward_bmkernel_short = 11;
inline bool Inst::has_bmnet_log_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Inst::set_has_bmnet_log_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Inst::clear_has_bmnet_log_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Inst::clear_bmnet_log_forward_bmkernel_short() {
  if (bmnet_log_forward_bmkernel_short_ != NULL) bmnet_log_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_log_forward_bmkernel::Clear();
  clear_has_bmnet_log_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_log_forward_bmkernel& Inst::bmnet_log_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel_short)
  return bmnet_log_forward_bmkernel_short_ != NULL ? *bmnet_log_forward_bmkernel_short_ : *default_instance_->bmnet_log_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_log_forward_bmkernel* Inst::mutable_bmnet_log_forward_bmkernel_short() {
  set_has_bmnet_log_forward_bmkernel_short();
  if (bmnet_log_forward_bmkernel_short_ == NULL) bmnet_log_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_log_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel_short)
  return bmnet_log_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_log_forward_bmkernel* Inst::release_bmnet_log_forward_bmkernel_short() {
  clear_has_bmnet_log_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_log_forward_bmkernel* temp = bmnet_log_forward_bmkernel_short_;
  bmnet_log_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_log_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_log_forward_bmkernel* bmnet_log_forward_bmkernel_short) {
  delete bmnet_log_forward_bmkernel_short_;
  bmnet_log_forward_bmkernel_short_ = bmnet_log_forward_bmkernel_short;
  if (bmnet_log_forward_bmkernel_short) {
    set_has_bmnet_log_forward_bmkernel_short();
  } else {
    clear_has_bmnet_log_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_log_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel bmnet_fc_forward_bmkernel_short = 12;
inline bool Inst::has_bmnet_fc_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Inst::set_has_bmnet_fc_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Inst::clear_has_bmnet_fc_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Inst::clear_bmnet_fc_forward_bmkernel_short() {
  if (bmnet_fc_forward_bmkernel_short_ != NULL) bmnet_fc_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_fc_forward_bmkernel::Clear();
  clear_has_bmnet_fc_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_fc_forward_bmkernel& Inst::bmnet_fc_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel_short)
  return bmnet_fc_forward_bmkernel_short_ != NULL ? *bmnet_fc_forward_bmkernel_short_ : *default_instance_->bmnet_fc_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_fc_forward_bmkernel* Inst::mutable_bmnet_fc_forward_bmkernel_short() {
  set_has_bmnet_fc_forward_bmkernel_short();
  if (bmnet_fc_forward_bmkernel_short_ == NULL) bmnet_fc_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_fc_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel_short)
  return bmnet_fc_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_fc_forward_bmkernel* Inst::release_bmnet_fc_forward_bmkernel_short() {
  clear_has_bmnet_fc_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_fc_forward_bmkernel* temp = bmnet_fc_forward_bmkernel_short_;
  bmnet_fc_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_fc_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_fc_forward_bmkernel* bmnet_fc_forward_bmkernel_short) {
  delete bmnet_fc_forward_bmkernel_short_;
  bmnet_fc_forward_bmkernel_short_ = bmnet_fc_forward_bmkernel_short;
  if (bmnet_fc_forward_bmkernel_short) {
    set_has_bmnet_fc_forward_bmkernel_short();
  } else {
    clear_has_bmnet_fc_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_fc_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel bmnet_bias_forward_bmkernel_short = 13;
inline bool Inst::has_bmnet_bias_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Inst::set_has_bmnet_bias_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Inst::clear_has_bmnet_bias_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Inst::clear_bmnet_bias_forward_bmkernel_short() {
  if (bmnet_bias_forward_bmkernel_short_ != NULL) bmnet_bias_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_bias_forward_bmkernel::Clear();
  clear_has_bmnet_bias_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_bias_forward_bmkernel& Inst::bmnet_bias_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel_short)
  return bmnet_bias_forward_bmkernel_short_ != NULL ? *bmnet_bias_forward_bmkernel_short_ : *default_instance_->bmnet_bias_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_bias_forward_bmkernel* Inst::mutable_bmnet_bias_forward_bmkernel_short() {
  set_has_bmnet_bias_forward_bmkernel_short();
  if (bmnet_bias_forward_bmkernel_short_ == NULL) bmnet_bias_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_bias_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel_short)
  return bmnet_bias_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_bias_forward_bmkernel* Inst::release_bmnet_bias_forward_bmkernel_short() {
  clear_has_bmnet_bias_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_bias_forward_bmkernel* temp = bmnet_bias_forward_bmkernel_short_;
  bmnet_bias_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_bias_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_bias_forward_bmkernel* bmnet_bias_forward_bmkernel_short) {
  delete bmnet_bias_forward_bmkernel_short_;
  bmnet_bias_forward_bmkernel_short_ = bmnet_bias_forward_bmkernel_short;
  if (bmnet_bias_forward_bmkernel_short) {
    set_has_bmnet_bias_forward_bmkernel_short();
  } else {
    clear_has_bmnet_bias_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_bias_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel bmnet_elu_forward_bmkernel_short = 14;
inline bool Inst::has_bmnet_elu_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Inst::set_has_bmnet_elu_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Inst::clear_has_bmnet_elu_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Inst::clear_bmnet_elu_forward_bmkernel_short() {
  if (bmnet_elu_forward_bmkernel_short_ != NULL) bmnet_elu_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_elu_forward_bmkernel::Clear();
  clear_has_bmnet_elu_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_elu_forward_bmkernel& Inst::bmnet_elu_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel_short)
  return bmnet_elu_forward_bmkernel_short_ != NULL ? *bmnet_elu_forward_bmkernel_short_ : *default_instance_->bmnet_elu_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_elu_forward_bmkernel* Inst::mutable_bmnet_elu_forward_bmkernel_short() {
  set_has_bmnet_elu_forward_bmkernel_short();
  if (bmnet_elu_forward_bmkernel_short_ == NULL) bmnet_elu_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_elu_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel_short)
  return bmnet_elu_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_elu_forward_bmkernel* Inst::release_bmnet_elu_forward_bmkernel_short() {
  clear_has_bmnet_elu_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_elu_forward_bmkernel* temp = bmnet_elu_forward_bmkernel_short_;
  bmnet_elu_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_elu_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_elu_forward_bmkernel* bmnet_elu_forward_bmkernel_short) {
  delete bmnet_elu_forward_bmkernel_short_;
  bmnet_elu_forward_bmkernel_short_ = bmnet_elu_forward_bmkernel_short;
  if (bmnet_elu_forward_bmkernel_short) {
    set_has_bmnet_elu_forward_bmkernel_short();
  } else {
    clear_has_bmnet_elu_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_elu_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel bmnet_tanh_forward_bmkernel_short = 15;
inline bool Inst::has_bmnet_tanh_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Inst::set_has_bmnet_tanh_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Inst::clear_has_bmnet_tanh_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Inst::clear_bmnet_tanh_forward_bmkernel_short() {
  if (bmnet_tanh_forward_bmkernel_short_ != NULL) bmnet_tanh_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_tanh_forward_bmkernel::Clear();
  clear_has_bmnet_tanh_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_tanh_forward_bmkernel& Inst::bmnet_tanh_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel_short)
  return bmnet_tanh_forward_bmkernel_short_ != NULL ? *bmnet_tanh_forward_bmkernel_short_ : *default_instance_->bmnet_tanh_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_tanh_forward_bmkernel* Inst::mutable_bmnet_tanh_forward_bmkernel_short() {
  set_has_bmnet_tanh_forward_bmkernel_short();
  if (bmnet_tanh_forward_bmkernel_short_ == NULL) bmnet_tanh_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_tanh_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel_short)
  return bmnet_tanh_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_tanh_forward_bmkernel* Inst::release_bmnet_tanh_forward_bmkernel_short() {
  clear_has_bmnet_tanh_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_tanh_forward_bmkernel* temp = bmnet_tanh_forward_bmkernel_short_;
  bmnet_tanh_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_tanh_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_tanh_forward_bmkernel* bmnet_tanh_forward_bmkernel_short) {
  delete bmnet_tanh_forward_bmkernel_short_;
  bmnet_tanh_forward_bmkernel_short_ = bmnet_tanh_forward_bmkernel_short;
  if (bmnet_tanh_forward_bmkernel_short) {
    set_has_bmnet_tanh_forward_bmkernel_short();
  } else {
    clear_has_bmnet_tanh_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_tanh_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel bmnet_lstm_unit_forward_bmkernel_short = 16;
inline bool Inst::has_bmnet_lstm_unit_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Inst::set_has_bmnet_lstm_unit_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Inst::clear_has_bmnet_lstm_unit_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Inst::clear_bmnet_lstm_unit_forward_bmkernel_short() {
  if (bmnet_lstm_unit_forward_bmkernel_short_ != NULL) bmnet_lstm_unit_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_lstm_unit_forward_bmkernel::Clear();
  clear_has_bmnet_lstm_unit_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_lstm_unit_forward_bmkernel& Inst::bmnet_lstm_unit_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel_short)
  return bmnet_lstm_unit_forward_bmkernel_short_ != NULL ? *bmnet_lstm_unit_forward_bmkernel_short_ : *default_instance_->bmnet_lstm_unit_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_lstm_unit_forward_bmkernel* Inst::mutable_bmnet_lstm_unit_forward_bmkernel_short() {
  set_has_bmnet_lstm_unit_forward_bmkernel_short();
  if (bmnet_lstm_unit_forward_bmkernel_short_ == NULL) bmnet_lstm_unit_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_lstm_unit_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel_short)
  return bmnet_lstm_unit_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_lstm_unit_forward_bmkernel* Inst::release_bmnet_lstm_unit_forward_bmkernel_short() {
  clear_has_bmnet_lstm_unit_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_lstm_unit_forward_bmkernel* temp = bmnet_lstm_unit_forward_bmkernel_short_;
  bmnet_lstm_unit_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_lstm_unit_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_lstm_unit_forward_bmkernel* bmnet_lstm_unit_forward_bmkernel_short) {
  delete bmnet_lstm_unit_forward_bmkernel_short_;
  bmnet_lstm_unit_forward_bmkernel_short_ = bmnet_lstm_unit_forward_bmkernel_short;
  if (bmnet_lstm_unit_forward_bmkernel_short) {
    set_has_bmnet_lstm_unit_forward_bmkernel_short();
  } else {
    clear_has_bmnet_lstm_unit_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_lstm_unit_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel bmnet_lrn_forward_bmkernel_short = 17;
inline bool Inst::has_bmnet_lrn_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Inst::set_has_bmnet_lrn_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Inst::clear_has_bmnet_lrn_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Inst::clear_bmnet_lrn_forward_bmkernel_short() {
  if (bmnet_lrn_forward_bmkernel_short_ != NULL) bmnet_lrn_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_lrn_forward_bmkernel::Clear();
  clear_has_bmnet_lrn_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_lrn_forward_bmkernel& Inst::bmnet_lrn_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel_short)
  return bmnet_lrn_forward_bmkernel_short_ != NULL ? *bmnet_lrn_forward_bmkernel_short_ : *default_instance_->bmnet_lrn_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_lrn_forward_bmkernel* Inst::mutable_bmnet_lrn_forward_bmkernel_short() {
  set_has_bmnet_lrn_forward_bmkernel_short();
  if (bmnet_lrn_forward_bmkernel_short_ == NULL) bmnet_lrn_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_lrn_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel_short)
  return bmnet_lrn_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_lrn_forward_bmkernel* Inst::release_bmnet_lrn_forward_bmkernel_short() {
  clear_has_bmnet_lrn_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_lrn_forward_bmkernel* temp = bmnet_lrn_forward_bmkernel_short_;
  bmnet_lrn_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_lrn_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_lrn_forward_bmkernel* bmnet_lrn_forward_bmkernel_short) {
  delete bmnet_lrn_forward_bmkernel_short_;
  bmnet_lrn_forward_bmkernel_short_ = bmnet_lrn_forward_bmkernel_short;
  if (bmnet_lrn_forward_bmkernel_short) {
    set_has_bmnet_lrn_forward_bmkernel_short();
  } else {
    clear_has_bmnet_lrn_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_lrn_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel bmnet_bnll_forward_bmkernel_short = 18;
inline bool Inst::has_bmnet_bnll_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Inst::set_has_bmnet_bnll_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Inst::clear_has_bmnet_bnll_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Inst::clear_bmnet_bnll_forward_bmkernel_short() {
  if (bmnet_bnll_forward_bmkernel_short_ != NULL) bmnet_bnll_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_bnll_forward_bmkernel::Clear();
  clear_has_bmnet_bnll_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_bnll_forward_bmkernel& Inst::bmnet_bnll_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel_short)
  return bmnet_bnll_forward_bmkernel_short_ != NULL ? *bmnet_bnll_forward_bmkernel_short_ : *default_instance_->bmnet_bnll_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_bnll_forward_bmkernel* Inst::mutable_bmnet_bnll_forward_bmkernel_short() {
  set_has_bmnet_bnll_forward_bmkernel_short();
  if (bmnet_bnll_forward_bmkernel_short_ == NULL) bmnet_bnll_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_bnll_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel_short)
  return bmnet_bnll_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_bnll_forward_bmkernel* Inst::release_bmnet_bnll_forward_bmkernel_short() {
  clear_has_bmnet_bnll_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_bnll_forward_bmkernel* temp = bmnet_bnll_forward_bmkernel_short_;
  bmnet_bnll_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_bnll_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_bnll_forward_bmkernel* bmnet_bnll_forward_bmkernel_short) {
  delete bmnet_bnll_forward_bmkernel_short_;
  bmnet_bnll_forward_bmkernel_short_ = bmnet_bnll_forward_bmkernel_short;
  if (bmnet_bnll_forward_bmkernel_short) {
    set_has_bmnet_bnll_forward_bmkernel_short();
  } else {
    clear_has_bmnet_bnll_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_bnll_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel bmnet_crop_forward_bmkernel_short = 19;
inline bool Inst::has_bmnet_crop_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Inst::set_has_bmnet_crop_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Inst::clear_has_bmnet_crop_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Inst::clear_bmnet_crop_forward_bmkernel_short() {
  if (bmnet_crop_forward_bmkernel_short_ != NULL) bmnet_crop_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_crop_forward_bmkernel::Clear();
  clear_has_bmnet_crop_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_crop_forward_bmkernel& Inst::bmnet_crop_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel_short)
  return bmnet_crop_forward_bmkernel_short_ != NULL ? *bmnet_crop_forward_bmkernel_short_ : *default_instance_->bmnet_crop_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_crop_forward_bmkernel* Inst::mutable_bmnet_crop_forward_bmkernel_short() {
  set_has_bmnet_crop_forward_bmkernel_short();
  if (bmnet_crop_forward_bmkernel_short_ == NULL) bmnet_crop_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_crop_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel_short)
  return bmnet_crop_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_crop_forward_bmkernel* Inst::release_bmnet_crop_forward_bmkernel_short() {
  clear_has_bmnet_crop_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_crop_forward_bmkernel* temp = bmnet_crop_forward_bmkernel_short_;
  bmnet_crop_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_crop_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_crop_forward_bmkernel* bmnet_crop_forward_bmkernel_short) {
  delete bmnet_crop_forward_bmkernel_short_;
  bmnet_crop_forward_bmkernel_short_ = bmnet_crop_forward_bmkernel_short;
  if (bmnet_crop_forward_bmkernel_short) {
    set_has_bmnet_crop_forward_bmkernel_short();
  } else {
    clear_has_bmnet_crop_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_crop_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel bmnet_slice_forward_bmkernel_short = 20;
inline bool Inst::has_bmnet_slice_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Inst::set_has_bmnet_slice_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Inst::clear_has_bmnet_slice_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Inst::clear_bmnet_slice_forward_bmkernel_short() {
  if (bmnet_slice_forward_bmkernel_short_ != NULL) bmnet_slice_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_slice_forward_bmkernel::Clear();
  clear_has_bmnet_slice_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_slice_forward_bmkernel& Inst::bmnet_slice_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel_short)
  return bmnet_slice_forward_bmkernel_short_ != NULL ? *bmnet_slice_forward_bmkernel_short_ : *default_instance_->bmnet_slice_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_slice_forward_bmkernel* Inst::mutable_bmnet_slice_forward_bmkernel_short() {
  set_has_bmnet_slice_forward_bmkernel_short();
  if (bmnet_slice_forward_bmkernel_short_ == NULL) bmnet_slice_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_slice_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel_short)
  return bmnet_slice_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_slice_forward_bmkernel* Inst::release_bmnet_slice_forward_bmkernel_short() {
  clear_has_bmnet_slice_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_slice_forward_bmkernel* temp = bmnet_slice_forward_bmkernel_short_;
  bmnet_slice_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_slice_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_slice_forward_bmkernel* bmnet_slice_forward_bmkernel_short) {
  delete bmnet_slice_forward_bmkernel_short_;
  bmnet_slice_forward_bmkernel_short_ = bmnet_slice_forward_bmkernel_short;
  if (bmnet_slice_forward_bmkernel_short) {
    set_has_bmnet_slice_forward_bmkernel_short();
  } else {
    clear_has_bmnet_slice_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_slice_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel bmnet_eltwise_forward_bmkernel_short = 21;
inline bool Inst::has_bmnet_eltwise_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Inst::set_has_bmnet_eltwise_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Inst::clear_has_bmnet_eltwise_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Inst::clear_bmnet_eltwise_forward_bmkernel_short() {
  if (bmnet_eltwise_forward_bmkernel_short_ != NULL) bmnet_eltwise_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_eltwise_forward_bmkernel::Clear();
  clear_has_bmnet_eltwise_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_eltwise_forward_bmkernel& Inst::bmnet_eltwise_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel_short)
  return bmnet_eltwise_forward_bmkernel_short_ != NULL ? *bmnet_eltwise_forward_bmkernel_short_ : *default_instance_->bmnet_eltwise_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_eltwise_forward_bmkernel* Inst::mutable_bmnet_eltwise_forward_bmkernel_short() {
  set_has_bmnet_eltwise_forward_bmkernel_short();
  if (bmnet_eltwise_forward_bmkernel_short_ == NULL) bmnet_eltwise_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_eltwise_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel_short)
  return bmnet_eltwise_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_eltwise_forward_bmkernel* Inst::release_bmnet_eltwise_forward_bmkernel_short() {
  clear_has_bmnet_eltwise_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_eltwise_forward_bmkernel* temp = bmnet_eltwise_forward_bmkernel_short_;
  bmnet_eltwise_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_eltwise_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_eltwise_forward_bmkernel* bmnet_eltwise_forward_bmkernel_short) {
  delete bmnet_eltwise_forward_bmkernel_short_;
  bmnet_eltwise_forward_bmkernel_short_ = bmnet_eltwise_forward_bmkernel_short;
  if (bmnet_eltwise_forward_bmkernel_short) {
    set_has_bmnet_eltwise_forward_bmkernel_short();
  } else {
    clear_has_bmnet_eltwise_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_eltwise_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel bmnet_tile_forward_bmkernel_short = 22;
inline bool Inst::has_bmnet_tile_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Inst::set_has_bmnet_tile_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Inst::clear_has_bmnet_tile_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Inst::clear_bmnet_tile_forward_bmkernel_short() {
  if (bmnet_tile_forward_bmkernel_short_ != NULL) bmnet_tile_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_tile_forward_bmkernel::Clear();
  clear_has_bmnet_tile_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_tile_forward_bmkernel& Inst::bmnet_tile_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel_short)
  return bmnet_tile_forward_bmkernel_short_ != NULL ? *bmnet_tile_forward_bmkernel_short_ : *default_instance_->bmnet_tile_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_tile_forward_bmkernel* Inst::mutable_bmnet_tile_forward_bmkernel_short() {
  set_has_bmnet_tile_forward_bmkernel_short();
  if (bmnet_tile_forward_bmkernel_short_ == NULL) bmnet_tile_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_tile_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel_short)
  return bmnet_tile_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_tile_forward_bmkernel* Inst::release_bmnet_tile_forward_bmkernel_short() {
  clear_has_bmnet_tile_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_tile_forward_bmkernel* temp = bmnet_tile_forward_bmkernel_short_;
  bmnet_tile_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_tile_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_tile_forward_bmkernel* bmnet_tile_forward_bmkernel_short) {
  delete bmnet_tile_forward_bmkernel_short_;
  bmnet_tile_forward_bmkernel_short_ = bmnet_tile_forward_bmkernel_short;
  if (bmnet_tile_forward_bmkernel_short) {
    set_has_bmnet_tile_forward_bmkernel_short();
  } else {
    clear_has_bmnet_tile_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_tile_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel bmnet_relu_forward_bmkernel_short = 23;
inline bool Inst::has_bmnet_relu_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Inst::set_has_bmnet_relu_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Inst::clear_has_bmnet_relu_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Inst::clear_bmnet_relu_forward_bmkernel_short() {
  if (bmnet_relu_forward_bmkernel_short_ != NULL) bmnet_relu_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_relu_forward_bmkernel::Clear();
  clear_has_bmnet_relu_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_relu_forward_bmkernel& Inst::bmnet_relu_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel_short)
  return bmnet_relu_forward_bmkernel_short_ != NULL ? *bmnet_relu_forward_bmkernel_short_ : *default_instance_->bmnet_relu_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_relu_forward_bmkernel* Inst::mutable_bmnet_relu_forward_bmkernel_short() {
  set_has_bmnet_relu_forward_bmkernel_short();
  if (bmnet_relu_forward_bmkernel_short_ == NULL) bmnet_relu_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_relu_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel_short)
  return bmnet_relu_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_relu_forward_bmkernel* Inst::release_bmnet_relu_forward_bmkernel_short() {
  clear_has_bmnet_relu_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_relu_forward_bmkernel* temp = bmnet_relu_forward_bmkernel_short_;
  bmnet_relu_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_relu_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_relu_forward_bmkernel* bmnet_relu_forward_bmkernel_short) {
  delete bmnet_relu_forward_bmkernel_short_;
  bmnet_relu_forward_bmkernel_short_ = bmnet_relu_forward_bmkernel_short;
  if (bmnet_relu_forward_bmkernel_short) {
    set_has_bmnet_relu_forward_bmkernel_short();
  } else {
    clear_has_bmnet_relu_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_relu_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel bmnet_batchnorm_forward_inference_bmkernel_short = 24;
inline bool Inst::has_bmnet_batchnorm_forward_inference_bmkernel_short() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Inst::set_has_bmnet_batchnorm_forward_inference_bmkernel_short() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Inst::clear_has_bmnet_batchnorm_forward_inference_bmkernel_short() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Inst::clear_bmnet_batchnorm_forward_inference_bmkernel_short() {
  if (bmnet_batchnorm_forward_inference_bmkernel_short_ != NULL) bmnet_batchnorm_forward_inference_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_batchnorm_forward_inference_bmkernel::Clear();
  clear_has_bmnet_batchnorm_forward_inference_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_batchnorm_forward_inference_bmkernel& Inst::bmnet_batchnorm_forward_inference_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel_short)
  return bmnet_batchnorm_forward_inference_bmkernel_short_ != NULL ? *bmnet_batchnorm_forward_inference_bmkernel_short_ : *default_instance_->bmnet_batchnorm_forward_inference_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_batchnorm_forward_inference_bmkernel* Inst::mutable_bmnet_batchnorm_forward_inference_bmkernel_short() {
  set_has_bmnet_batchnorm_forward_inference_bmkernel_short();
  if (bmnet_batchnorm_forward_inference_bmkernel_short_ == NULL) bmnet_batchnorm_forward_inference_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_batchnorm_forward_inference_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel_short)
  return bmnet_batchnorm_forward_inference_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_batchnorm_forward_inference_bmkernel* Inst::release_bmnet_batchnorm_forward_inference_bmkernel_short() {
  clear_has_bmnet_batchnorm_forward_inference_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_batchnorm_forward_inference_bmkernel* temp = bmnet_batchnorm_forward_inference_bmkernel_short_;
  bmnet_batchnorm_forward_inference_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_batchnorm_forward_inference_bmkernel_short(::bmnet::bm1680::Inst_bmnet_batchnorm_forward_inference_bmkernel* bmnet_batchnorm_forward_inference_bmkernel_short) {
  delete bmnet_batchnorm_forward_inference_bmkernel_short_;
  bmnet_batchnorm_forward_inference_bmkernel_short_ = bmnet_batchnorm_forward_inference_bmkernel_short;
  if (bmnet_batchnorm_forward_inference_bmkernel_short) {
    set_has_bmnet_batchnorm_forward_inference_bmkernel_short();
  } else {
    clear_has_bmnet_batchnorm_forward_inference_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_batchnorm_forward_inference_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel bmnet_softmax_forward_bmkernel_short = 25;
inline bool Inst::has_bmnet_softmax_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Inst::set_has_bmnet_softmax_forward_bmkernel_short() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Inst::clear_has_bmnet_softmax_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Inst::clear_bmnet_softmax_forward_bmkernel_short() {
  if (bmnet_softmax_forward_bmkernel_short_ != NULL) bmnet_softmax_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_softmax_forward_bmkernel::Clear();
  clear_has_bmnet_softmax_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_softmax_forward_bmkernel& Inst::bmnet_softmax_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel_short)
  return bmnet_softmax_forward_bmkernel_short_ != NULL ? *bmnet_softmax_forward_bmkernel_short_ : *default_instance_->bmnet_softmax_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_softmax_forward_bmkernel* Inst::mutable_bmnet_softmax_forward_bmkernel_short() {
  set_has_bmnet_softmax_forward_bmkernel_short();
  if (bmnet_softmax_forward_bmkernel_short_ == NULL) bmnet_softmax_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_softmax_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel_short)
  return bmnet_softmax_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_softmax_forward_bmkernel* Inst::release_bmnet_softmax_forward_bmkernel_short() {
  clear_has_bmnet_softmax_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_softmax_forward_bmkernel* temp = bmnet_softmax_forward_bmkernel_short_;
  bmnet_softmax_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_softmax_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_softmax_forward_bmkernel* bmnet_softmax_forward_bmkernel_short) {
  delete bmnet_softmax_forward_bmkernel_short_;
  bmnet_softmax_forward_bmkernel_short_ = bmnet_softmax_forward_bmkernel_short;
  if (bmnet_softmax_forward_bmkernel_short) {
    set_has_bmnet_softmax_forward_bmkernel_short();
  } else {
    clear_has_bmnet_softmax_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_softmax_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel bmnet_scale_forward_bmkernel_short = 26;
inline bool Inst::has_bmnet_scale_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Inst::set_has_bmnet_scale_forward_bmkernel_short() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Inst::clear_has_bmnet_scale_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Inst::clear_bmnet_scale_forward_bmkernel_short() {
  if (bmnet_scale_forward_bmkernel_short_ != NULL) bmnet_scale_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_scale_forward_bmkernel::Clear();
  clear_has_bmnet_scale_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_scale_forward_bmkernel& Inst::bmnet_scale_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel_short)
  return bmnet_scale_forward_bmkernel_short_ != NULL ? *bmnet_scale_forward_bmkernel_short_ : *default_instance_->bmnet_scale_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_scale_forward_bmkernel* Inst::mutable_bmnet_scale_forward_bmkernel_short() {
  set_has_bmnet_scale_forward_bmkernel_short();
  if (bmnet_scale_forward_bmkernel_short_ == NULL) bmnet_scale_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_scale_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel_short)
  return bmnet_scale_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_scale_forward_bmkernel* Inst::release_bmnet_scale_forward_bmkernel_short() {
  clear_has_bmnet_scale_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_scale_forward_bmkernel* temp = bmnet_scale_forward_bmkernel_short_;
  bmnet_scale_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_scale_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_scale_forward_bmkernel* bmnet_scale_forward_bmkernel_short) {
  delete bmnet_scale_forward_bmkernel_short_;
  bmnet_scale_forward_bmkernel_short_ = bmnet_scale_forward_bmkernel_short;
  if (bmnet_scale_forward_bmkernel_short) {
    set_has_bmnet_scale_forward_bmkernel_short();
  } else {
    clear_has_bmnet_scale_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_scale_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel bmnet_mvn_forward_bmkernel_short = 27;
inline bool Inst::has_bmnet_mvn_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Inst::set_has_bmnet_mvn_forward_bmkernel_short() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Inst::clear_has_bmnet_mvn_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Inst::clear_bmnet_mvn_forward_bmkernel_short() {
  if (bmnet_mvn_forward_bmkernel_short_ != NULL) bmnet_mvn_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_mvn_forward_bmkernel::Clear();
  clear_has_bmnet_mvn_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_mvn_forward_bmkernel& Inst::bmnet_mvn_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel_short)
  return bmnet_mvn_forward_bmkernel_short_ != NULL ? *bmnet_mvn_forward_bmkernel_short_ : *default_instance_->bmnet_mvn_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_mvn_forward_bmkernel* Inst::mutable_bmnet_mvn_forward_bmkernel_short() {
  set_has_bmnet_mvn_forward_bmkernel_short();
  if (bmnet_mvn_forward_bmkernel_short_ == NULL) bmnet_mvn_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_mvn_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel_short)
  return bmnet_mvn_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_mvn_forward_bmkernel* Inst::release_bmnet_mvn_forward_bmkernel_short() {
  clear_has_bmnet_mvn_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_mvn_forward_bmkernel* temp = bmnet_mvn_forward_bmkernel_short_;
  bmnet_mvn_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_mvn_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_mvn_forward_bmkernel* bmnet_mvn_forward_bmkernel_short) {
  delete bmnet_mvn_forward_bmkernel_short_;
  bmnet_mvn_forward_bmkernel_short_ = bmnet_mvn_forward_bmkernel_short;
  if (bmnet_mvn_forward_bmkernel_short) {
    set_has_bmnet_mvn_forward_bmkernel_short();
  } else {
    clear_has_bmnet_mvn_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_mvn_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel bmnet_reduction_forward_bmkernel_short = 28;
inline bool Inst::has_bmnet_reduction_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Inst::set_has_bmnet_reduction_forward_bmkernel_short() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Inst::clear_has_bmnet_reduction_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Inst::clear_bmnet_reduction_forward_bmkernel_short() {
  if (bmnet_reduction_forward_bmkernel_short_ != NULL) bmnet_reduction_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_reduction_forward_bmkernel::Clear();
  clear_has_bmnet_reduction_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_reduction_forward_bmkernel& Inst::bmnet_reduction_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel_short)
  return bmnet_reduction_forward_bmkernel_short_ != NULL ? *bmnet_reduction_forward_bmkernel_short_ : *default_instance_->bmnet_reduction_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_reduction_forward_bmkernel* Inst::mutable_bmnet_reduction_forward_bmkernel_short() {
  set_has_bmnet_reduction_forward_bmkernel_short();
  if (bmnet_reduction_forward_bmkernel_short_ == NULL) bmnet_reduction_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_reduction_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel_short)
  return bmnet_reduction_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_reduction_forward_bmkernel* Inst::release_bmnet_reduction_forward_bmkernel_short() {
  clear_has_bmnet_reduction_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_reduction_forward_bmkernel* temp = bmnet_reduction_forward_bmkernel_short_;
  bmnet_reduction_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_reduction_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_reduction_forward_bmkernel* bmnet_reduction_forward_bmkernel_short) {
  delete bmnet_reduction_forward_bmkernel_short_;
  bmnet_reduction_forward_bmkernel_short_ = bmnet_reduction_forward_bmkernel_short;
  if (bmnet_reduction_forward_bmkernel_short) {
    set_has_bmnet_reduction_forward_bmkernel_short();
  } else {
    clear_has_bmnet_reduction_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_reduction_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel bmnet_prelu_forward_bmkernel_short = 29;
inline bool Inst::has_bmnet_prelu_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Inst::set_has_bmnet_prelu_forward_bmkernel_short() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Inst::clear_has_bmnet_prelu_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Inst::clear_bmnet_prelu_forward_bmkernel_short() {
  if (bmnet_prelu_forward_bmkernel_short_ != NULL) bmnet_prelu_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_prelu_forward_bmkernel::Clear();
  clear_has_bmnet_prelu_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_prelu_forward_bmkernel& Inst::bmnet_prelu_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel_short)
  return bmnet_prelu_forward_bmkernel_short_ != NULL ? *bmnet_prelu_forward_bmkernel_short_ : *default_instance_->bmnet_prelu_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_prelu_forward_bmkernel* Inst::mutable_bmnet_prelu_forward_bmkernel_short() {
  set_has_bmnet_prelu_forward_bmkernel_short();
  if (bmnet_prelu_forward_bmkernel_short_ == NULL) bmnet_prelu_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_prelu_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel_short)
  return bmnet_prelu_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_prelu_forward_bmkernel* Inst::release_bmnet_prelu_forward_bmkernel_short() {
  clear_has_bmnet_prelu_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_prelu_forward_bmkernel* temp = bmnet_prelu_forward_bmkernel_short_;
  bmnet_prelu_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_prelu_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_prelu_forward_bmkernel* bmnet_prelu_forward_bmkernel_short) {
  delete bmnet_prelu_forward_bmkernel_short_;
  bmnet_prelu_forward_bmkernel_short_ = bmnet_prelu_forward_bmkernel_short;
  if (bmnet_prelu_forward_bmkernel_short) {
    set_has_bmnet_prelu_forward_bmkernel_short();
  } else {
    clear_has_bmnet_prelu_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_prelu_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_split_forward_bmkernel bmnet_split_forward_bmkernel_short = 30;
inline bool Inst::has_bmnet_split_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Inst::set_has_bmnet_split_forward_bmkernel_short() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Inst::clear_has_bmnet_split_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Inst::clear_bmnet_split_forward_bmkernel_short() {
  if (bmnet_split_forward_bmkernel_short_ != NULL) bmnet_split_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_split_forward_bmkernel::Clear();
  clear_has_bmnet_split_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_split_forward_bmkernel& Inst::bmnet_split_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel_short)
  return bmnet_split_forward_bmkernel_short_ != NULL ? *bmnet_split_forward_bmkernel_short_ : *default_instance_->bmnet_split_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_split_forward_bmkernel* Inst::mutable_bmnet_split_forward_bmkernel_short() {
  set_has_bmnet_split_forward_bmkernel_short();
  if (bmnet_split_forward_bmkernel_short_ == NULL) bmnet_split_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_split_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel_short)
  return bmnet_split_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_split_forward_bmkernel* Inst::release_bmnet_split_forward_bmkernel_short() {
  clear_has_bmnet_split_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_split_forward_bmkernel* temp = bmnet_split_forward_bmkernel_short_;
  bmnet_split_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_split_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_split_forward_bmkernel* bmnet_split_forward_bmkernel_short) {
  delete bmnet_split_forward_bmkernel_short_;
  bmnet_split_forward_bmkernel_short_ = bmnet_split_forward_bmkernel_short;
  if (bmnet_split_forward_bmkernel_short) {
    set_has_bmnet_split_forward_bmkernel_short();
  } else {
    clear_has_bmnet_split_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_split_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel bmnet_concat_forward_bmkernel_short = 31;
inline bool Inst::has_bmnet_concat_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Inst::set_has_bmnet_concat_forward_bmkernel_short() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Inst::clear_has_bmnet_concat_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Inst::clear_bmnet_concat_forward_bmkernel_short() {
  if (bmnet_concat_forward_bmkernel_short_ != NULL) bmnet_concat_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_concat_forward_bmkernel::Clear();
  clear_has_bmnet_concat_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_concat_forward_bmkernel& Inst::bmnet_concat_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel_short)
  return bmnet_concat_forward_bmkernel_short_ != NULL ? *bmnet_concat_forward_bmkernel_short_ : *default_instance_->bmnet_concat_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_concat_forward_bmkernel* Inst::mutable_bmnet_concat_forward_bmkernel_short() {
  set_has_bmnet_concat_forward_bmkernel_short();
  if (bmnet_concat_forward_bmkernel_short_ == NULL) bmnet_concat_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_concat_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel_short)
  return bmnet_concat_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_concat_forward_bmkernel* Inst::release_bmnet_concat_forward_bmkernel_short() {
  clear_has_bmnet_concat_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_concat_forward_bmkernel* temp = bmnet_concat_forward_bmkernel_short_;
  bmnet_concat_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_concat_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_concat_forward_bmkernel* bmnet_concat_forward_bmkernel_short) {
  delete bmnet_concat_forward_bmkernel_short_;
  bmnet_concat_forward_bmkernel_short_ = bmnet_concat_forward_bmkernel_short;
  if (bmnet_concat_forward_bmkernel_short) {
    set_has_bmnet_concat_forward_bmkernel_short();
  } else {
    clear_has_bmnet_concat_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_concat_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_upsample_bmkernel bmnet_upsample_bmkernel_short = 32;
inline bool Inst::has_bmnet_upsample_bmkernel_short() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Inst::set_has_bmnet_upsample_bmkernel_short() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Inst::clear_has_bmnet_upsample_bmkernel_short() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Inst::clear_bmnet_upsample_bmkernel_short() {
  if (bmnet_upsample_bmkernel_short_ != NULL) bmnet_upsample_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_upsample_bmkernel::Clear();
  clear_has_bmnet_upsample_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_upsample_bmkernel& Inst::bmnet_upsample_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_upsample_bmkernel_short)
  return bmnet_upsample_bmkernel_short_ != NULL ? *bmnet_upsample_bmkernel_short_ : *default_instance_->bmnet_upsample_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_upsample_bmkernel* Inst::mutable_bmnet_upsample_bmkernel_short() {
  set_has_bmnet_upsample_bmkernel_short();
  if (bmnet_upsample_bmkernel_short_ == NULL) bmnet_upsample_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_upsample_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_upsample_bmkernel_short)
  return bmnet_upsample_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_upsample_bmkernel* Inst::release_bmnet_upsample_bmkernel_short() {
  clear_has_bmnet_upsample_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_upsample_bmkernel* temp = bmnet_upsample_bmkernel_short_;
  bmnet_upsample_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_upsample_bmkernel_short(::bmnet::bm1680::Inst_bmnet_upsample_bmkernel* bmnet_upsample_bmkernel_short) {
  delete bmnet_upsample_bmkernel_short_;
  bmnet_upsample_bmkernel_short_ = bmnet_upsample_bmkernel_short;
  if (bmnet_upsample_bmkernel_short) {
    set_has_bmnet_upsample_bmkernel_short();
  } else {
    clear_has_bmnet_upsample_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_upsample_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel bmnet_reshape_forward_bmkernel_short = 33;
inline bool Inst::has_bmnet_reshape_forward_bmkernel_short() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Inst::set_has_bmnet_reshape_forward_bmkernel_short() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Inst::clear_has_bmnet_reshape_forward_bmkernel_short() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Inst::clear_bmnet_reshape_forward_bmkernel_short() {
  if (bmnet_reshape_forward_bmkernel_short_ != NULL) bmnet_reshape_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_reshape_forward_bmkernel::Clear();
  clear_has_bmnet_reshape_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_reshape_forward_bmkernel& Inst::bmnet_reshape_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel_short)
  return bmnet_reshape_forward_bmkernel_short_ != NULL ? *bmnet_reshape_forward_bmkernel_short_ : *default_instance_->bmnet_reshape_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_reshape_forward_bmkernel* Inst::mutable_bmnet_reshape_forward_bmkernel_short() {
  set_has_bmnet_reshape_forward_bmkernel_short();
  if (bmnet_reshape_forward_bmkernel_short_ == NULL) bmnet_reshape_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_reshape_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel_short)
  return bmnet_reshape_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_reshape_forward_bmkernel* Inst::release_bmnet_reshape_forward_bmkernel_short() {
  clear_has_bmnet_reshape_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_reshape_forward_bmkernel* temp = bmnet_reshape_forward_bmkernel_short_;
  bmnet_reshape_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_reshape_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_reshape_forward_bmkernel* bmnet_reshape_forward_bmkernel_short) {
  delete bmnet_reshape_forward_bmkernel_short_;
  bmnet_reshape_forward_bmkernel_short_ = bmnet_reshape_forward_bmkernel_short;
  if (bmnet_reshape_forward_bmkernel_short) {
    set_has_bmnet_reshape_forward_bmkernel_short();
  } else {
    clear_has_bmnet_reshape_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_reshape_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel bmnet_permute_forward_bmkernel_short = 34;
inline bool Inst::has_bmnet_permute_forward_bmkernel_short() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Inst::set_has_bmnet_permute_forward_bmkernel_short() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Inst::clear_has_bmnet_permute_forward_bmkernel_short() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Inst::clear_bmnet_permute_forward_bmkernel_short() {
  if (bmnet_permute_forward_bmkernel_short_ != NULL) bmnet_permute_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_permute_forward_bmkernel::Clear();
  clear_has_bmnet_permute_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_permute_forward_bmkernel& Inst::bmnet_permute_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel_short)
  return bmnet_permute_forward_bmkernel_short_ != NULL ? *bmnet_permute_forward_bmkernel_short_ : *default_instance_->bmnet_permute_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_permute_forward_bmkernel* Inst::mutable_bmnet_permute_forward_bmkernel_short() {
  set_has_bmnet_permute_forward_bmkernel_short();
  if (bmnet_permute_forward_bmkernel_short_ == NULL) bmnet_permute_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_permute_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel_short)
  return bmnet_permute_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_permute_forward_bmkernel* Inst::release_bmnet_permute_forward_bmkernel_short() {
  clear_has_bmnet_permute_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_permute_forward_bmkernel* temp = bmnet_permute_forward_bmkernel_short_;
  bmnet_permute_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_permute_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_permute_forward_bmkernel* bmnet_permute_forward_bmkernel_short) {
  delete bmnet_permute_forward_bmkernel_short_;
  bmnet_permute_forward_bmkernel_short_ = bmnet_permute_forward_bmkernel_short;
  if (bmnet_permute_forward_bmkernel_short) {
    set_has_bmnet_permute_forward_bmkernel_short();
  } else {
    clear_has_bmnet_permute_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_permute_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel bmnet_flatten_forward_bmkernel_short = 35;
inline bool Inst::has_bmnet_flatten_forward_bmkernel_short() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Inst::set_has_bmnet_flatten_forward_bmkernel_short() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Inst::clear_has_bmnet_flatten_forward_bmkernel_short() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Inst::clear_bmnet_flatten_forward_bmkernel_short() {
  if (bmnet_flatten_forward_bmkernel_short_ != NULL) bmnet_flatten_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_flatten_forward_bmkernel::Clear();
  clear_has_bmnet_flatten_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_flatten_forward_bmkernel& Inst::bmnet_flatten_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel_short)
  return bmnet_flatten_forward_bmkernel_short_ != NULL ? *bmnet_flatten_forward_bmkernel_short_ : *default_instance_->bmnet_flatten_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_flatten_forward_bmkernel* Inst::mutable_bmnet_flatten_forward_bmkernel_short() {
  set_has_bmnet_flatten_forward_bmkernel_short();
  if (bmnet_flatten_forward_bmkernel_short_ == NULL) bmnet_flatten_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_flatten_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel_short)
  return bmnet_flatten_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_flatten_forward_bmkernel* Inst::release_bmnet_flatten_forward_bmkernel_short() {
  clear_has_bmnet_flatten_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_flatten_forward_bmkernel* temp = bmnet_flatten_forward_bmkernel_short_;
  bmnet_flatten_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_flatten_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_flatten_forward_bmkernel* bmnet_flatten_forward_bmkernel_short) {
  delete bmnet_flatten_forward_bmkernel_short_;
  bmnet_flatten_forward_bmkernel_short_ = bmnet_flatten_forward_bmkernel_short;
  if (bmnet_flatten_forward_bmkernel_short) {
    set_has_bmnet_flatten_forward_bmkernel_short();
  } else {
    clear_has_bmnet_flatten_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_flatten_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel bmnet_normalize_forward_bmkernel_short = 36;
inline bool Inst::has_bmnet_normalize_forward_bmkernel_short() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Inst::set_has_bmnet_normalize_forward_bmkernel_short() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Inst::clear_has_bmnet_normalize_forward_bmkernel_short() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Inst::clear_bmnet_normalize_forward_bmkernel_short() {
  if (bmnet_normalize_forward_bmkernel_short_ != NULL) bmnet_normalize_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_normalize_forward_bmkernel::Clear();
  clear_has_bmnet_normalize_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_normalize_forward_bmkernel& Inst::bmnet_normalize_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel_short)
  return bmnet_normalize_forward_bmkernel_short_ != NULL ? *bmnet_normalize_forward_bmkernel_short_ : *default_instance_->bmnet_normalize_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_normalize_forward_bmkernel* Inst::mutable_bmnet_normalize_forward_bmkernel_short() {
  set_has_bmnet_normalize_forward_bmkernel_short();
  if (bmnet_normalize_forward_bmkernel_short_ == NULL) bmnet_normalize_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_normalize_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel_short)
  return bmnet_normalize_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_normalize_forward_bmkernel* Inst::release_bmnet_normalize_forward_bmkernel_short() {
  clear_has_bmnet_normalize_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_normalize_forward_bmkernel* temp = bmnet_normalize_forward_bmkernel_short_;
  bmnet_normalize_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_normalize_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_normalize_forward_bmkernel* bmnet_normalize_forward_bmkernel_short) {
  delete bmnet_normalize_forward_bmkernel_short_;
  bmnet_normalize_forward_bmkernel_short_ = bmnet_normalize_forward_bmkernel_short;
  if (bmnet_normalize_forward_bmkernel_short) {
    set_has_bmnet_normalize_forward_bmkernel_short();
  } else {
    clear_has_bmnet_normalize_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_normalize_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel bmnet_deconv_forward_bmkernel_short = 37;
inline bool Inst::has_bmnet_deconv_forward_bmkernel_short() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Inst::set_has_bmnet_deconv_forward_bmkernel_short() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Inst::clear_has_bmnet_deconv_forward_bmkernel_short() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Inst::clear_bmnet_deconv_forward_bmkernel_short() {
  if (bmnet_deconv_forward_bmkernel_short_ != NULL) bmnet_deconv_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_deconv_forward_bmkernel::Clear();
  clear_has_bmnet_deconv_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_deconv_forward_bmkernel& Inst::bmnet_deconv_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel_short)
  return bmnet_deconv_forward_bmkernel_short_ != NULL ? *bmnet_deconv_forward_bmkernel_short_ : *default_instance_->bmnet_deconv_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_deconv_forward_bmkernel* Inst::mutable_bmnet_deconv_forward_bmkernel_short() {
  set_has_bmnet_deconv_forward_bmkernel_short();
  if (bmnet_deconv_forward_bmkernel_short_ == NULL) bmnet_deconv_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_deconv_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel_short)
  return bmnet_deconv_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_deconv_forward_bmkernel* Inst::release_bmnet_deconv_forward_bmkernel_short() {
  clear_has_bmnet_deconv_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_deconv_forward_bmkernel* temp = bmnet_deconv_forward_bmkernel_short_;
  bmnet_deconv_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_deconv_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_deconv_forward_bmkernel* bmnet_deconv_forward_bmkernel_short) {
  delete bmnet_deconv_forward_bmkernel_short_;
  bmnet_deconv_forward_bmkernel_short_ = bmnet_deconv_forward_bmkernel_short;
  if (bmnet_deconv_forward_bmkernel_short) {
    set_has_bmnet_deconv_forward_bmkernel_short();
  } else {
    clear_has_bmnet_deconv_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_deconv_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel bmnet_stack_forward_bmkernel_short = 38;
inline bool Inst::has_bmnet_stack_forward_bmkernel_short() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Inst::set_has_bmnet_stack_forward_bmkernel_short() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Inst::clear_has_bmnet_stack_forward_bmkernel_short() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Inst::clear_bmnet_stack_forward_bmkernel_short() {
  if (bmnet_stack_forward_bmkernel_short_ != NULL) bmnet_stack_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_stack_forward_bmkernel::Clear();
  clear_has_bmnet_stack_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_stack_forward_bmkernel& Inst::bmnet_stack_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel_short)
  return bmnet_stack_forward_bmkernel_short_ != NULL ? *bmnet_stack_forward_bmkernel_short_ : *default_instance_->bmnet_stack_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_stack_forward_bmkernel* Inst::mutable_bmnet_stack_forward_bmkernel_short() {
  set_has_bmnet_stack_forward_bmkernel_short();
  if (bmnet_stack_forward_bmkernel_short_ == NULL) bmnet_stack_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_stack_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel_short)
  return bmnet_stack_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_stack_forward_bmkernel* Inst::release_bmnet_stack_forward_bmkernel_short() {
  clear_has_bmnet_stack_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_stack_forward_bmkernel* temp = bmnet_stack_forward_bmkernel_short_;
  bmnet_stack_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_stack_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_stack_forward_bmkernel* bmnet_stack_forward_bmkernel_short) {
  delete bmnet_stack_forward_bmkernel_short_;
  bmnet_stack_forward_bmkernel_short_ = bmnet_stack_forward_bmkernel_short;
  if (bmnet_stack_forward_bmkernel_short) {
    set_has_bmnet_stack_forward_bmkernel_short();
  } else {
    clear_has_bmnet_stack_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_stack_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel bmnet_arithmetic_forward_bmkernel_short = 39;
inline bool Inst::has_bmnet_arithmetic_forward_bmkernel_short() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Inst::set_has_bmnet_arithmetic_forward_bmkernel_short() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Inst::clear_has_bmnet_arithmetic_forward_bmkernel_short() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Inst::clear_bmnet_arithmetic_forward_bmkernel_short() {
  if (bmnet_arithmetic_forward_bmkernel_short_ != NULL) bmnet_arithmetic_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_arithmetic_forward_bmkernel::Clear();
  clear_has_bmnet_arithmetic_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_arithmetic_forward_bmkernel& Inst::bmnet_arithmetic_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel_short)
  return bmnet_arithmetic_forward_bmkernel_short_ != NULL ? *bmnet_arithmetic_forward_bmkernel_short_ : *default_instance_->bmnet_arithmetic_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_arithmetic_forward_bmkernel* Inst::mutable_bmnet_arithmetic_forward_bmkernel_short() {
  set_has_bmnet_arithmetic_forward_bmkernel_short();
  if (bmnet_arithmetic_forward_bmkernel_short_ == NULL) bmnet_arithmetic_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_arithmetic_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel_short)
  return bmnet_arithmetic_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_arithmetic_forward_bmkernel* Inst::release_bmnet_arithmetic_forward_bmkernel_short() {
  clear_has_bmnet_arithmetic_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_arithmetic_forward_bmkernel* temp = bmnet_arithmetic_forward_bmkernel_short_;
  bmnet_arithmetic_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_arithmetic_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_arithmetic_forward_bmkernel* bmnet_arithmetic_forward_bmkernel_short) {
  delete bmnet_arithmetic_forward_bmkernel_short_;
  bmnet_arithmetic_forward_bmkernel_short_ = bmnet_arithmetic_forward_bmkernel_short;
  if (bmnet_arithmetic_forward_bmkernel_short) {
    set_has_bmnet_arithmetic_forward_bmkernel_short();
  } else {
    clear_has_bmnet_arithmetic_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_arithmetic_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_resizebilinear_forward_bmkernel bmnet_resizeblinear_forward_bmkernel_short = 40;
inline bool Inst::has_bmnet_resizeblinear_forward_bmkernel_short() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Inst::set_has_bmnet_resizeblinear_forward_bmkernel_short() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Inst::clear_has_bmnet_resizeblinear_forward_bmkernel_short() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Inst::clear_bmnet_resizeblinear_forward_bmkernel_short() {
  if (bmnet_resizeblinear_forward_bmkernel_short_ != NULL) bmnet_resizeblinear_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_resizebilinear_forward_bmkernel::Clear();
  clear_has_bmnet_resizeblinear_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_resizebilinear_forward_bmkernel& Inst::bmnet_resizeblinear_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_resizeblinear_forward_bmkernel_short)
  return bmnet_resizeblinear_forward_bmkernel_short_ != NULL ? *bmnet_resizeblinear_forward_bmkernel_short_ : *default_instance_->bmnet_resizeblinear_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_resizebilinear_forward_bmkernel* Inst::mutable_bmnet_resizeblinear_forward_bmkernel_short() {
  set_has_bmnet_resizeblinear_forward_bmkernel_short();
  if (bmnet_resizeblinear_forward_bmkernel_short_ == NULL) bmnet_resizeblinear_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_resizebilinear_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_resizeblinear_forward_bmkernel_short)
  return bmnet_resizeblinear_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_resizebilinear_forward_bmkernel* Inst::release_bmnet_resizeblinear_forward_bmkernel_short() {
  clear_has_bmnet_resizeblinear_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_resizebilinear_forward_bmkernel* temp = bmnet_resizeblinear_forward_bmkernel_short_;
  bmnet_resizeblinear_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_resizeblinear_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_resizebilinear_forward_bmkernel* bmnet_resizeblinear_forward_bmkernel_short) {
  delete bmnet_resizeblinear_forward_bmkernel_short_;
  bmnet_resizeblinear_forward_bmkernel_short_ = bmnet_resizeblinear_forward_bmkernel_short;
  if (bmnet_resizeblinear_forward_bmkernel_short) {
    set_has_bmnet_resizeblinear_forward_bmkernel_short();
  } else {
    clear_has_bmnet_resizeblinear_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_resizeblinear_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel bmnet_priorbox_forward_bmkernel_short = 41;
inline bool Inst::has_bmnet_priorbox_forward_bmkernel_short() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Inst::set_has_bmnet_priorbox_forward_bmkernel_short() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Inst::clear_has_bmnet_priorbox_forward_bmkernel_short() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Inst::clear_bmnet_priorbox_forward_bmkernel_short() {
  if (bmnet_priorbox_forward_bmkernel_short_ != NULL) bmnet_priorbox_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_priorbox_forward_bmkernel::Clear();
  clear_has_bmnet_priorbox_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_priorbox_forward_bmkernel& Inst::bmnet_priorbox_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel_short)
  return bmnet_priorbox_forward_bmkernel_short_ != NULL ? *bmnet_priorbox_forward_bmkernel_short_ : *default_instance_->bmnet_priorbox_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_priorbox_forward_bmkernel* Inst::mutable_bmnet_priorbox_forward_bmkernel_short() {
  set_has_bmnet_priorbox_forward_bmkernel_short();
  if (bmnet_priorbox_forward_bmkernel_short_ == NULL) bmnet_priorbox_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_priorbox_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel_short)
  return bmnet_priorbox_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_priorbox_forward_bmkernel* Inst::release_bmnet_priorbox_forward_bmkernel_short() {
  clear_has_bmnet_priorbox_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_priorbox_forward_bmkernel* temp = bmnet_priorbox_forward_bmkernel_short_;
  bmnet_priorbox_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_priorbox_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_priorbox_forward_bmkernel* bmnet_priorbox_forward_bmkernel_short) {
  delete bmnet_priorbox_forward_bmkernel_short_;
  bmnet_priorbox_forward_bmkernel_short_ = bmnet_priorbox_forward_bmkernel_short;
  if (bmnet_priorbox_forward_bmkernel_short) {
    set_has_bmnet_priorbox_forward_bmkernel_short();
  } else {
    clear_has_bmnet_priorbox_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_priorbox_forward_bmkernel_short)
}

// optional .bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel bmnet_reverse_forward_bmkernel_short = 42;
inline bool Inst::has_bmnet_reverse_forward_bmkernel_short() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Inst::set_has_bmnet_reverse_forward_bmkernel_short() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Inst::clear_has_bmnet_reverse_forward_bmkernel_short() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Inst::clear_bmnet_reverse_forward_bmkernel_short() {
  if (bmnet_reverse_forward_bmkernel_short_ != NULL) bmnet_reverse_forward_bmkernel_short_->::bmnet::bm1680::Inst_bmnet_reverse_forward_bmkernel::Clear();
  clear_has_bmnet_reverse_forward_bmkernel_short();
}
inline const ::bmnet::bm1680::Inst_bmnet_reverse_forward_bmkernel& Inst::bmnet_reverse_forward_bmkernel_short() const {
  // @@protoc_insertion_point(field_get:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel_short)
  return bmnet_reverse_forward_bmkernel_short_ != NULL ? *bmnet_reverse_forward_bmkernel_short_ : *default_instance_->bmnet_reverse_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_reverse_forward_bmkernel* Inst::mutable_bmnet_reverse_forward_bmkernel_short() {
  set_has_bmnet_reverse_forward_bmkernel_short();
  if (bmnet_reverse_forward_bmkernel_short_ == NULL) bmnet_reverse_forward_bmkernel_short_ = new ::bmnet::bm1680::Inst_bmnet_reverse_forward_bmkernel;
  // @@protoc_insertion_point(field_mutable:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel_short)
  return bmnet_reverse_forward_bmkernel_short_;
}
inline ::bmnet::bm1680::Inst_bmnet_reverse_forward_bmkernel* Inst::release_bmnet_reverse_forward_bmkernel_short() {
  clear_has_bmnet_reverse_forward_bmkernel_short();
  ::bmnet::bm1680::Inst_bmnet_reverse_forward_bmkernel* temp = bmnet_reverse_forward_bmkernel_short_;
  bmnet_reverse_forward_bmkernel_short_ = NULL;
  return temp;
}
inline void Inst::set_allocated_bmnet_reverse_forward_bmkernel_short(::bmnet::bm1680::Inst_bmnet_reverse_forward_bmkernel* bmnet_reverse_forward_bmkernel_short) {
  delete bmnet_reverse_forward_bmkernel_short_;
  bmnet_reverse_forward_bmkernel_short_ = bmnet_reverse_forward_bmkernel_short;
  if (bmnet_reverse_forward_bmkernel_short) {
    set_has_bmnet_reverse_forward_bmkernel_short();
  } else {
    clear_has_bmnet_reverse_forward_bmkernel_short();
  }
  // @@protoc_insertion_point(field_set_allocated:bmnet.bm1680.Inst.bmnet_reverse_forward_bmkernel_short)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bm1680
}  // namespace bmnet

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bmnet::bm1680::Inst_ActivationMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bmnet::bm1680::Inst_ActivationMethod>() {
  return ::bmnet::bm1680::Inst_ActivationMethod_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bm168x_5fasm_2eproto__INCLUDED
